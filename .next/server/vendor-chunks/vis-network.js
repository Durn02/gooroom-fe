"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/vis-network";
exports.ids = ["vendor-chunks/vis-network"];
exports.modules = {

/***/ "(ssr)/./node_modules/vis-network/peer/esm/vis-network.js":
/*!**********************************************************!*\
  !*** ./node_modules/vis-network/peer/esm/vis-network.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Network: () => (/* binding */ Network),\n/* harmony export */   NetworkImages: () => (/* binding */ Images),\n/* harmony export */   networkDOTParser: () => (/* binding */ dotparser),\n/* harmony export */   networkGephiParser: () => (/* binding */ gephiParser),\n/* harmony export */   networkOptions: () => (/* binding */ options),\n/* harmony export */   parseDOTNetwork: () => (/* binding */ parseDOTNetwork),\n/* harmony export */   parseGephiNetwork: () => (/* binding */ parseGephi)\n/* harmony export */ });\n/* harmony import */ var vis_data_peer_esm_vis_data_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vis-data/peer/esm/vis-data.js */ \"(ssr)/./node_modules/vis-data/peer/esm/vis-data.js\");\n/**\n * vis-network\n * https://visjs.github.io/vis-network/\n *\n * A dynamic, browser-based visualization library.\n *\n * @version 9.1.9\n * @date    2023-11-03T01:42:27.418Z\n *\n * @copyright (c) 2011-2017 Almende B.V, http://almende.com\n * @copyright (c) 2017-2019 visjs contributors, https://github.com/visjs\n *\n * @license\n * vis.js is dual licensed under both\n *\n *   1. The Apache 2.0 License\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *   and\n *\n *   2. The MIT License\n *      http://opensource.org/licenses/MIT\n *\n * vis.js may be distributed under either license.\n */\n\n\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nvar check = function (it) {\n  return it && it.Math === Math && it;\n};\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global$n =\n  // eslint-disable-next-line es/no-global-this -- safe\n  check(typeof globalThis == 'object' && globalThis) ||\n  check(typeof window == 'object' && window) ||\n  // eslint-disable-next-line no-restricted-globals -- safe\n  check(typeof self == 'object' && self) ||\n  check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||\n  // eslint-disable-next-line no-new-func -- fallback\n  (function () { return this; })() || commonjsGlobal || Function('return this')();\n\nvar fails$w = function (exec) {\n  try {\n    return !!exec();\n  } catch (error) {\n    return true;\n  }\n};\n\nvar fails$v = fails$w;\n\nvar functionBindNative = !fails$v(function () {\n  // eslint-disable-next-line es/no-function-prototype-bind -- safe\n  var test = (function () { /* empty */ }).bind();\n  // eslint-disable-next-line no-prototype-builtins -- safe\n  return typeof test != 'function' || test.hasOwnProperty('prototype');\n});\n\nvar NATIVE_BIND$4 = functionBindNative;\n\nvar FunctionPrototype$4 = Function.prototype;\nvar apply$5 = FunctionPrototype$4.apply;\nvar call$f = FunctionPrototype$4.call;\n\n// eslint-disable-next-line es/no-reflect -- safe\nvar functionApply = typeof Reflect == 'object' && Reflect.apply || (NATIVE_BIND$4 ? call$f.bind(apply$5) : function () {\n  return call$f.apply(apply$5, arguments);\n});\n\nvar NATIVE_BIND$3 = functionBindNative;\n\nvar FunctionPrototype$3 = Function.prototype;\nvar call$e = FunctionPrototype$3.call;\nvar uncurryThisWithBind = NATIVE_BIND$3 && FunctionPrototype$3.bind.bind(call$e, call$e);\n\nvar functionUncurryThis = NATIVE_BIND$3 ? uncurryThisWithBind : function (fn) {\n  return function () {\n    return call$e.apply(fn, arguments);\n  };\n};\n\nvar uncurryThis$x = functionUncurryThis;\n\nvar toString$c = uncurryThis$x({}.toString);\nvar stringSlice$1 = uncurryThis$x(''.slice);\n\nvar classofRaw$2 = function (it) {\n  return stringSlice$1(toString$c(it), 8, -1);\n};\n\nvar classofRaw$1 = classofRaw$2;\nvar uncurryThis$w = functionUncurryThis;\n\nvar functionUncurryThisClause = function (fn) {\n  // Nashorn bug:\n  //   https://github.com/zloirock/core-js/issues/1128\n  //   https://github.com/zloirock/core-js/issues/1130\n  if (classofRaw$1(fn) === 'Function') return uncurryThis$w(fn);\n};\n\nvar documentAll$2 = typeof document == 'object' && document.all;\n\n// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot\n// eslint-disable-next-line unicorn/no-typeof-undefined -- required for testing\nvar IS_HTMLDDA = typeof documentAll$2 == 'undefined' && documentAll$2 !== undefined;\n\nvar documentAll_1 = {\n  all: documentAll$2,\n  IS_HTMLDDA: IS_HTMLDDA\n};\n\nvar $documentAll$1 = documentAll_1;\n\nvar documentAll$1 = $documentAll$1.all;\n\n// `IsCallable` abstract operation\n// https://tc39.es/ecma262/#sec-iscallable\nvar isCallable$i = $documentAll$1.IS_HTMLDDA ? function (argument) {\n  return typeof argument == 'function' || argument === documentAll$1;\n} : function (argument) {\n  return typeof argument == 'function';\n};\n\nvar objectGetOwnPropertyDescriptor = {};\n\nvar fails$u = fails$w;\n\n// Detect IE8's incomplete defineProperty implementation\nvar descriptors = !fails$u(function () {\n  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] !== 7;\n});\n\nvar NATIVE_BIND$2 = functionBindNative;\n\nvar call$d = Function.prototype.call;\n\nvar functionCall = NATIVE_BIND$2 ? call$d.bind(call$d) : function () {\n  return call$d.apply(call$d, arguments);\n};\n\nvar objectPropertyIsEnumerable = {};\n\nvar $propertyIsEnumerable$1 = {}.propertyIsEnumerable;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar getOwnPropertyDescriptor$9 = Object.getOwnPropertyDescriptor;\n\n// Nashorn ~ JDK8 bug\nvar NASHORN_BUG = getOwnPropertyDescriptor$9 && !$propertyIsEnumerable$1.call({ 1: 2 }, 1);\n\n// `Object.prototype.propertyIsEnumerable` method implementation\n// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable\nobjectPropertyIsEnumerable.f = NASHORN_BUG ? function propertyIsEnumerable(V) {\n  var descriptor = getOwnPropertyDescriptor$9(this, V);\n  return !!descriptor && descriptor.enumerable;\n} : $propertyIsEnumerable$1;\n\nvar createPropertyDescriptor$5 = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n\nvar uncurryThis$v = functionUncurryThis;\nvar fails$t = fails$w;\nvar classof$e = classofRaw$2;\n\nvar $Object$5 = Object;\nvar split = uncurryThis$v(''.split);\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar indexedObject = fails$t(function () {\n  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346\n  // eslint-disable-next-line no-prototype-builtins -- safe\n  return !$Object$5('z').propertyIsEnumerable(0);\n}) ? function (it) {\n  return classof$e(it) === 'String' ? split(it, '') : $Object$5(it);\n} : $Object$5;\n\n// we can't use just `it == null` since of `document.all` special case\n// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot-aec\nvar isNullOrUndefined$6 = function (it) {\n  return it === null || it === undefined;\n};\n\nvar isNullOrUndefined$5 = isNullOrUndefined$6;\n\nvar $TypeError$g = TypeError;\n\n// `RequireObjectCoercible` abstract operation\n// https://tc39.es/ecma262/#sec-requireobjectcoercible\nvar requireObjectCoercible$5 = function (it) {\n  if (isNullOrUndefined$5(it)) throw new $TypeError$g(\"Can't call method on \" + it);\n  return it;\n};\n\n// toObject with fallback for non-array-like ES3 strings\nvar IndexedObject$3 = indexedObject;\nvar requireObjectCoercible$4 = requireObjectCoercible$5;\n\nvar toIndexedObject$a = function (it) {\n  return IndexedObject$3(requireObjectCoercible$4(it));\n};\n\nvar isCallable$h = isCallable$i;\nvar $documentAll = documentAll_1;\n\nvar documentAll = $documentAll.all;\n\nvar isObject$j = $documentAll.IS_HTMLDDA ? function (it) {\n  return typeof it == 'object' ? it !== null : isCallable$h(it) || it === documentAll;\n} : function (it) {\n  return typeof it == 'object' ? it !== null : isCallable$h(it);\n};\n\nvar path$w = {};\n\nvar path$v = path$w;\nvar global$m = global$n;\nvar isCallable$g = isCallable$i;\n\nvar aFunction = function (variable) {\n  return isCallable$g(variable) ? variable : undefined;\n};\n\nvar getBuiltIn$c = function (namespace, method) {\n  return arguments.length < 2 ? aFunction(path$v[namespace]) || aFunction(global$m[namespace])\n    : path$v[namespace] && path$v[namespace][method] || global$m[namespace] && global$m[namespace][method];\n};\n\nvar uncurryThis$u = functionUncurryThis;\n\nvar objectIsPrototypeOf = uncurryThis$u({}.isPrototypeOf);\n\nvar engineUserAgent = typeof navigator != 'undefined' && String(navigator.userAgent) || '';\n\nvar global$l = global$n;\nvar userAgent$2 = engineUserAgent;\n\nvar process = global$l.process;\nvar Deno = global$l.Deno;\nvar versions = process && process.versions || Deno && Deno.version;\nvar v8 = versions && versions.v8;\nvar match, version;\n\nif (v8) {\n  match = v8.split('.');\n  // in old Chrome, versions of V8 isn't V8 = Chrome / 10\n  // but their correct versions are not interesting for us\n  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);\n}\n\n// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`\n// so check `userAgent` even if `.v8` exists, but 0\nif (!version && userAgent$2) {\n  match = userAgent$2.match(/Edge\\/(\\d+)/);\n  if (!match || match[1] >= 74) {\n    match = userAgent$2.match(/Chrome\\/(\\d+)/);\n    if (match) version = +match[1];\n  }\n}\n\nvar engineV8Version = version;\n\n/* eslint-disable es/no-symbol -- required for testing */\nvar V8_VERSION$2 = engineV8Version;\nvar fails$s = fails$w;\nvar global$k = global$n;\n\nvar $String$5 = global$k.String;\n\n// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing\nvar symbolConstructorDetection = !!Object.getOwnPropertySymbols && !fails$s(function () {\n  var symbol = Symbol('symbol detection');\n  // Chrome 38 Symbol has incorrect toString conversion\n  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances\n  // nb: Do not call `String` directly to avoid this being optimized out to `symbol+''` which will,\n  // of course, fail.\n  return !$String$5(symbol) || !(Object(symbol) instanceof Symbol) ||\n    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances\n    !Symbol.sham && V8_VERSION$2 && V8_VERSION$2 < 41;\n});\n\n/* eslint-disable es/no-symbol -- required for testing */\nvar NATIVE_SYMBOL$5 = symbolConstructorDetection;\n\nvar useSymbolAsUid = NATIVE_SYMBOL$5\n  && !Symbol.sham\n  && typeof Symbol.iterator == 'symbol';\n\nvar getBuiltIn$b = getBuiltIn$c;\nvar isCallable$f = isCallable$i;\nvar isPrototypeOf$k = objectIsPrototypeOf;\nvar USE_SYMBOL_AS_UID$1 = useSymbolAsUid;\n\nvar $Object$4 = Object;\n\nvar isSymbol$5 = USE_SYMBOL_AS_UID$1 ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  var $Symbol = getBuiltIn$b('Symbol');\n  return isCallable$f($Symbol) && isPrototypeOf$k($Symbol.prototype, $Object$4(it));\n};\n\nvar $String$4 = String;\n\nvar tryToString$6 = function (argument) {\n  try {\n    return $String$4(argument);\n  } catch (error) {\n    return 'Object';\n  }\n};\n\nvar isCallable$e = isCallable$i;\nvar tryToString$5 = tryToString$6;\n\nvar $TypeError$f = TypeError;\n\n// `Assert: IsCallable(argument) is true`\nvar aCallable$7 = function (argument) {\n  if (isCallable$e(argument)) return argument;\n  throw new $TypeError$f(tryToString$5(argument) + ' is not a function');\n};\n\nvar aCallable$6 = aCallable$7;\nvar isNullOrUndefined$4 = isNullOrUndefined$6;\n\n// `GetMethod` abstract operation\n// https://tc39.es/ecma262/#sec-getmethod\nvar getMethod$3 = function (V, P) {\n  var func = V[P];\n  return isNullOrUndefined$4(func) ? undefined : aCallable$6(func);\n};\n\nvar call$c = functionCall;\nvar isCallable$d = isCallable$i;\nvar isObject$i = isObject$j;\n\nvar $TypeError$e = TypeError;\n\n// `OrdinaryToPrimitive` abstract operation\n// https://tc39.es/ecma262/#sec-ordinarytoprimitive\nvar ordinaryToPrimitive$1 = function (input, pref) {\n  var fn, val;\n  if (pref === 'string' && isCallable$d(fn = input.toString) && !isObject$i(val = call$c(fn, input))) return val;\n  if (isCallable$d(fn = input.valueOf) && !isObject$i(val = call$c(fn, input))) return val;\n  if (pref !== 'string' && isCallable$d(fn = input.toString) && !isObject$i(val = call$c(fn, input))) return val;\n  throw new $TypeError$e(\"Can't convert object to primitive value\");\n};\n\nvar shared$7 = {exports: {}};\n\nvar global$j = global$n;\n\n// eslint-disable-next-line es/no-object-defineproperty -- safe\nvar defineProperty$f = Object.defineProperty;\n\nvar defineGlobalProperty$1 = function (key, value) {\n  try {\n    defineProperty$f(global$j, key, { value: value, configurable: true, writable: true });\n  } catch (error) {\n    global$j[key] = value;\n  } return value;\n};\n\nvar global$i = global$n;\nvar defineGlobalProperty = defineGlobalProperty$1;\n\nvar SHARED = '__core-js_shared__';\nvar store$3 = global$i[SHARED] || defineGlobalProperty(SHARED, {});\n\nvar sharedStore = store$3;\n\nvar store$2 = sharedStore;\n\n(shared$7.exports = function (key, value) {\n  return store$2[key] || (store$2[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: '3.33.0',\n  mode: 'pure' ,\n  copyright: '© 2014-2023 Denis Pushkarev (zloirock.ru)',\n  license: 'https://github.com/zloirock/core-js/blob/v3.33.0/LICENSE',\n  source: 'https://github.com/zloirock/core-js'\n});\n\nvar sharedExports = shared$7.exports;\n\nvar requireObjectCoercible$3 = requireObjectCoercible$5;\n\nvar $Object$3 = Object;\n\n// `ToObject` abstract operation\n// https://tc39.es/ecma262/#sec-toobject\nvar toObject$e = function (argument) {\n  return $Object$3(requireObjectCoercible$3(argument));\n};\n\nvar uncurryThis$t = functionUncurryThis;\nvar toObject$d = toObject$e;\n\nvar hasOwnProperty = uncurryThis$t({}.hasOwnProperty);\n\n// `HasOwnProperty` abstract operation\n// https://tc39.es/ecma262/#sec-hasownproperty\n// eslint-disable-next-line es/no-object-hasown -- safe\nvar hasOwnProperty_1 = Object.hasOwn || function hasOwn(it, key) {\n  return hasOwnProperty(toObject$d(it), key);\n};\n\nvar uncurryThis$s = functionUncurryThis;\n\nvar id$2 = 0;\nvar postfix = Math.random();\nvar toString$b = uncurryThis$s(1.0.toString);\n\nvar uid$4 = function (key) {\n  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString$b(++id$2 + postfix, 36);\n};\n\nvar global$h = global$n;\nvar shared$6 = sharedExports;\nvar hasOwn$h = hasOwnProperty_1;\nvar uid$3 = uid$4;\nvar NATIVE_SYMBOL$4 = symbolConstructorDetection;\nvar USE_SYMBOL_AS_UID = useSymbolAsUid;\n\nvar Symbol$5 = global$h.Symbol;\nvar WellKnownSymbolsStore$2 = shared$6('wks');\nvar createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol$5['for'] || Symbol$5 : Symbol$5 && Symbol$5.withoutSetter || uid$3;\n\nvar wellKnownSymbol$m = function (name) {\n  if (!hasOwn$h(WellKnownSymbolsStore$2, name)) {\n    WellKnownSymbolsStore$2[name] = NATIVE_SYMBOL$4 && hasOwn$h(Symbol$5, name)\n      ? Symbol$5[name]\n      : createWellKnownSymbol('Symbol.' + name);\n  } return WellKnownSymbolsStore$2[name];\n};\n\nvar call$b = functionCall;\nvar isObject$h = isObject$j;\nvar isSymbol$4 = isSymbol$5;\nvar getMethod$2 = getMethod$3;\nvar ordinaryToPrimitive = ordinaryToPrimitive$1;\nvar wellKnownSymbol$l = wellKnownSymbol$m;\n\nvar $TypeError$d = TypeError;\nvar TO_PRIMITIVE = wellKnownSymbol$l('toPrimitive');\n\n// `ToPrimitive` abstract operation\n// https://tc39.es/ecma262/#sec-toprimitive\nvar toPrimitive$6 = function (input, pref) {\n  if (!isObject$h(input) || isSymbol$4(input)) return input;\n  var exoticToPrim = getMethod$2(input, TO_PRIMITIVE);\n  var result;\n  if (exoticToPrim) {\n    if (pref === undefined) pref = 'default';\n    result = call$b(exoticToPrim, input, pref);\n    if (!isObject$h(result) || isSymbol$4(result)) return result;\n    throw new $TypeError$d(\"Can't convert object to primitive value\");\n  }\n  if (pref === undefined) pref = 'number';\n  return ordinaryToPrimitive(input, pref);\n};\n\nvar toPrimitive$5 = toPrimitive$6;\nvar isSymbol$3 = isSymbol$5;\n\n// `ToPropertyKey` abstract operation\n// https://tc39.es/ecma262/#sec-topropertykey\nvar toPropertyKey$4 = function (argument) {\n  var key = toPrimitive$5(argument, 'string');\n  return isSymbol$3(key) ? key : key + '';\n};\n\nvar global$g = global$n;\nvar isObject$g = isObject$j;\n\nvar document$1 = global$g.document;\n// typeof document.createElement is 'object' in old IE\nvar EXISTS$1 = isObject$g(document$1) && isObject$g(document$1.createElement);\n\nvar documentCreateElement$1 = function (it) {\n  return EXISTS$1 ? document$1.createElement(it) : {};\n};\n\nvar DESCRIPTORS$h = descriptors;\nvar fails$r = fails$w;\nvar createElement = documentCreateElement$1;\n\n// Thanks to IE8 for its funny defineProperty\nvar ie8DomDefine = !DESCRIPTORS$h && !fails$r(function () {\n  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n  return Object.defineProperty(createElement('div'), 'a', {\n    get: function () { return 7; }\n  }).a !== 7;\n});\n\nvar DESCRIPTORS$g = descriptors;\nvar call$a = functionCall;\nvar propertyIsEnumerableModule$2 = objectPropertyIsEnumerable;\nvar createPropertyDescriptor$4 = createPropertyDescriptor$5;\nvar toIndexedObject$9 = toIndexedObject$a;\nvar toPropertyKey$3 = toPropertyKey$4;\nvar hasOwn$g = hasOwnProperty_1;\nvar IE8_DOM_DEFINE$1 = ie8DomDefine;\n\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar $getOwnPropertyDescriptor$2 = Object.getOwnPropertyDescriptor;\n\n// `Object.getOwnPropertyDescriptor` method\n// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor\nobjectGetOwnPropertyDescriptor.f = DESCRIPTORS$g ? $getOwnPropertyDescriptor$2 : function getOwnPropertyDescriptor(O, P) {\n  O = toIndexedObject$9(O);\n  P = toPropertyKey$3(P);\n  if (IE8_DOM_DEFINE$1) try {\n    return $getOwnPropertyDescriptor$2(O, P);\n  } catch (error) { /* empty */ }\n  if (hasOwn$g(O, P)) return createPropertyDescriptor$4(!call$a(propertyIsEnumerableModule$2.f, O, P), O[P]);\n};\n\nvar fails$q = fails$w;\nvar isCallable$c = isCallable$i;\n\nvar replacement = /#|\\.prototype\\./;\n\nvar isForced$1 = function (feature, detection) {\n  var value = data[normalize(feature)];\n  return value === POLYFILL ? true\n    : value === NATIVE ? false\n    : isCallable$c(detection) ? fails$q(detection)\n    : !!detection;\n};\n\nvar normalize = isForced$1.normalize = function (string) {\n  return String(string).replace(replacement, '.').toLowerCase();\n};\n\nvar data = isForced$1.data = {};\nvar NATIVE = isForced$1.NATIVE = 'N';\nvar POLYFILL = isForced$1.POLYFILL = 'P';\n\nvar isForced_1 = isForced$1;\n\nvar uncurryThis$r = functionUncurryThisClause;\nvar aCallable$5 = aCallable$7;\nvar NATIVE_BIND$1 = functionBindNative;\n\nvar bind$e = uncurryThis$r(uncurryThis$r.bind);\n\n// optional / simple context binding\nvar functionBindContext = function (fn, that) {\n  aCallable$5(fn);\n  return that === undefined ? fn : NATIVE_BIND$1 ? bind$e(fn, that) : function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n\nvar objectDefineProperty = {};\n\nvar DESCRIPTORS$f = descriptors;\nvar fails$p = fails$w;\n\n// V8 ~ Chrome 36-\n// https://bugs.chromium.org/p/v8/issues/detail?id=3334\nvar v8PrototypeDefineBug = DESCRIPTORS$f && fails$p(function () {\n  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n  return Object.defineProperty(function () { /* empty */ }, 'prototype', {\n    value: 42,\n    writable: false\n  }).prototype !== 42;\n});\n\nvar isObject$f = isObject$j;\n\nvar $String$3 = String;\nvar $TypeError$c = TypeError;\n\n// `Assert: Type(argument) is Object`\nvar anObject$d = function (argument) {\n  if (isObject$f(argument)) return argument;\n  throw new $TypeError$c($String$3(argument) + ' is not an object');\n};\n\nvar DESCRIPTORS$e = descriptors;\nvar IE8_DOM_DEFINE = ie8DomDefine;\nvar V8_PROTOTYPE_DEFINE_BUG$1 = v8PrototypeDefineBug;\nvar anObject$c = anObject$d;\nvar toPropertyKey$2 = toPropertyKey$4;\n\nvar $TypeError$b = TypeError;\n// eslint-disable-next-line es/no-object-defineproperty -- safe\nvar $defineProperty$1 = Object.defineProperty;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;\nvar ENUMERABLE = 'enumerable';\nvar CONFIGURABLE$1 = 'configurable';\nvar WRITABLE = 'writable';\n\n// `Object.defineProperty` method\n// https://tc39.es/ecma262/#sec-object.defineproperty\nobjectDefineProperty.f = DESCRIPTORS$e ? V8_PROTOTYPE_DEFINE_BUG$1 ? function defineProperty(O, P, Attributes) {\n  anObject$c(O);\n  P = toPropertyKey$2(P);\n  anObject$c(Attributes);\n  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {\n    var current = $getOwnPropertyDescriptor$1(O, P);\n    if (current && current[WRITABLE]) {\n      O[P] = Attributes.value;\n      Attributes = {\n        configurable: CONFIGURABLE$1 in Attributes ? Attributes[CONFIGURABLE$1] : current[CONFIGURABLE$1],\n        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],\n        writable: false\n      };\n    }\n  } return $defineProperty$1(O, P, Attributes);\n} : $defineProperty$1 : function defineProperty(O, P, Attributes) {\n  anObject$c(O);\n  P = toPropertyKey$2(P);\n  anObject$c(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return $defineProperty$1(O, P, Attributes);\n  } catch (error) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw new $TypeError$b('Accessors not supported');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n\nvar DESCRIPTORS$d = descriptors;\nvar definePropertyModule$3 = objectDefineProperty;\nvar createPropertyDescriptor$3 = createPropertyDescriptor$5;\n\nvar createNonEnumerableProperty$6 = DESCRIPTORS$d ? function (object, key, value) {\n  return definePropertyModule$3.f(object, key, createPropertyDescriptor$3(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n\nvar global$f = global$n;\nvar apply$4 = functionApply;\nvar uncurryThis$q = functionUncurryThisClause;\nvar isCallable$b = isCallable$i;\nvar getOwnPropertyDescriptor$8 = objectGetOwnPropertyDescriptor.f;\nvar isForced = isForced_1;\nvar path$u = path$w;\nvar bind$d = functionBindContext;\nvar createNonEnumerableProperty$5 = createNonEnumerableProperty$6;\nvar hasOwn$f = hasOwnProperty_1;\n\nvar wrapConstructor = function (NativeConstructor) {\n  var Wrapper = function (a, b, c) {\n    if (this instanceof Wrapper) {\n      switch (arguments.length) {\n        case 0: return new NativeConstructor();\n        case 1: return new NativeConstructor(a);\n        case 2: return new NativeConstructor(a, b);\n      } return new NativeConstructor(a, b, c);\n    } return apply$4(NativeConstructor, this, arguments);\n  };\n  Wrapper.prototype = NativeConstructor.prototype;\n  return Wrapper;\n};\n\n/*\n  options.target         - name of the target object\n  options.global         - target is the global object\n  options.stat           - export as static methods of target\n  options.proto          - export as prototype methods of target\n  options.real           - real prototype method for the `pure` version\n  options.forced         - export even if the native feature is available\n  options.bind           - bind methods to the target, required for the `pure` version\n  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version\n  options.unsafe         - use the simple assignment of property instead of delete + defineProperty\n  options.sham           - add a flag to not completely full polyfills\n  options.enumerable     - export as enumerable property\n  options.dontCallGetSet - prevent calling a getter on target\n  options.name           - the .name of the function if it does not match the key\n*/\nvar _export = function (options, source) {\n  var TARGET = options.target;\n  var GLOBAL = options.global;\n  var STATIC = options.stat;\n  var PROTO = options.proto;\n\n  var nativeSource = GLOBAL ? global$f : STATIC ? global$f[TARGET] : (global$f[TARGET] || {}).prototype;\n\n  var target = GLOBAL ? path$u : path$u[TARGET] || createNonEnumerableProperty$5(path$u, TARGET, {})[TARGET];\n  var targetPrototype = target.prototype;\n\n  var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;\n  var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;\n\n  for (key in source) {\n    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);\n    // contains in native\n    USE_NATIVE = !FORCED && nativeSource && hasOwn$f(nativeSource, key);\n\n    targetProperty = target[key];\n\n    if (USE_NATIVE) if (options.dontCallGetSet) {\n      descriptor = getOwnPropertyDescriptor$8(nativeSource, key);\n      nativeProperty = descriptor && descriptor.value;\n    } else nativeProperty = nativeSource[key];\n\n    // export native or implementation\n    sourceProperty = (USE_NATIVE && nativeProperty) ? nativeProperty : source[key];\n\n    if (USE_NATIVE && typeof targetProperty == typeof sourceProperty) continue;\n\n    // bind methods to global for calling from export context\n    if (options.bind && USE_NATIVE) resultProperty = bind$d(sourceProperty, global$f);\n    // wrap global constructors for prevent changes in this version\n    else if (options.wrap && USE_NATIVE) resultProperty = wrapConstructor(sourceProperty);\n    // make static versions for prototype methods\n    else if (PROTO && isCallable$b(sourceProperty)) resultProperty = uncurryThis$q(sourceProperty);\n    // default case\n    else resultProperty = sourceProperty;\n\n    // add a flag to not completely full polyfills\n    if (options.sham || (sourceProperty && sourceProperty.sham) || (targetProperty && targetProperty.sham)) {\n      createNonEnumerableProperty$5(resultProperty, 'sham', true);\n    }\n\n    createNonEnumerableProperty$5(target, key, resultProperty);\n\n    if (PROTO) {\n      VIRTUAL_PROTOTYPE = TARGET + 'Prototype';\n      if (!hasOwn$f(path$u, VIRTUAL_PROTOTYPE)) {\n        createNonEnumerableProperty$5(path$u, VIRTUAL_PROTOTYPE, {});\n      }\n      // export virtual prototype methods\n      createNonEnumerableProperty$5(path$u[VIRTUAL_PROTOTYPE], key, sourceProperty);\n      // export real prototype methods\n      if (options.real && targetPrototype && (FORCED || !targetPrototype[key])) {\n        createNonEnumerableProperty$5(targetPrototype, key, sourceProperty);\n      }\n    }\n  }\n};\n\nvar ceil = Math.ceil;\nvar floor$1 = Math.floor;\n\n// `Math.trunc` method\n// https://tc39.es/ecma262/#sec-math.trunc\n// eslint-disable-next-line es/no-math-trunc -- safe\nvar mathTrunc = Math.trunc || function trunc(x) {\n  var n = +x;\n  return (n > 0 ? floor$1 : ceil)(n);\n};\n\nvar trunc = mathTrunc;\n\n// `ToIntegerOrInfinity` abstract operation\n// https://tc39.es/ecma262/#sec-tointegerorinfinity\nvar toIntegerOrInfinity$4 = function (argument) {\n  var number = +argument;\n  // eslint-disable-next-line no-self-compare -- NaN check\n  return number !== number || number === 0 ? 0 : trunc(number);\n};\n\nvar toIntegerOrInfinity$3 = toIntegerOrInfinity$4;\n\nvar max$3 = Math.max;\nvar min$2 = Math.min;\n\n// Helper for a popular repeating case of the spec:\n// Let integer be ? ToInteger(index).\n// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\nvar toAbsoluteIndex$5 = function (index, length) {\n  var integer = toIntegerOrInfinity$3(index);\n  return integer < 0 ? max$3(integer + length, 0) : min$2(integer, length);\n};\n\nvar toIntegerOrInfinity$2 = toIntegerOrInfinity$4;\n\nvar min$1 = Math.min;\n\n// `ToLength` abstract operation\n// https://tc39.es/ecma262/#sec-tolength\nvar toLength$1 = function (argument) {\n  return argument > 0 ? min$1(toIntegerOrInfinity$2(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991\n};\n\nvar toLength = toLength$1;\n\n// `LengthOfArrayLike` abstract operation\n// https://tc39.es/ecma262/#sec-lengthofarraylike\nvar lengthOfArrayLike$c = function (obj) {\n  return toLength(obj.length);\n};\n\nvar toIndexedObject$8 = toIndexedObject$a;\nvar toAbsoluteIndex$4 = toAbsoluteIndex$5;\nvar lengthOfArrayLike$b = lengthOfArrayLike$c;\n\n// `Array.prototype.{ indexOf, includes }` methods implementation\nvar createMethod$4 = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIndexedObject$8($this);\n    var length = lengthOfArrayLike$b(O);\n    var index = toAbsoluteIndex$4(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare -- NaN check\n    if (IS_INCLUDES && el !== el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare -- NaN check\n      if (value !== value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) {\n      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\nvar arrayIncludes = {\n  // `Array.prototype.includes` method\n  // https://tc39.es/ecma262/#sec-array.prototype.includes\n  includes: createMethod$4(true),\n  // `Array.prototype.indexOf` method\n  // https://tc39.es/ecma262/#sec-array.prototype.indexof\n  indexOf: createMethod$4(false)\n};\n\nvar hiddenKeys$6 = {};\n\nvar uncurryThis$p = functionUncurryThis;\nvar hasOwn$e = hasOwnProperty_1;\nvar toIndexedObject$7 = toIndexedObject$a;\nvar indexOf$4 = arrayIncludes.indexOf;\nvar hiddenKeys$5 = hiddenKeys$6;\n\nvar push$b = uncurryThis$p([].push);\n\nvar objectKeysInternal = function (object, names) {\n  var O = toIndexedObject$7(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) !hasOwn$e(hiddenKeys$5, key) && hasOwn$e(O, key) && push$b(result, key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (hasOwn$e(O, key = names[i++])) {\n    ~indexOf$4(result, key) || push$b(result, key);\n  }\n  return result;\n};\n\n// IE8- don't enum bug keys\nvar enumBugKeys$3 = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf'\n];\n\nvar internalObjectKeys$1 = objectKeysInternal;\nvar enumBugKeys$2 = enumBugKeys$3;\n\n// `Object.keys` method\n// https://tc39.es/ecma262/#sec-object.keys\n// eslint-disable-next-line es/no-object-keys -- safe\nvar objectKeys$3 = Object.keys || function keys(O) {\n  return internalObjectKeys$1(O, enumBugKeys$2);\n};\n\nvar objectGetOwnPropertySymbols = {};\n\n// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe\nobjectGetOwnPropertySymbols.f = Object.getOwnPropertySymbols;\n\nvar DESCRIPTORS$c = descriptors;\nvar uncurryThis$o = functionUncurryThis;\nvar call$9 = functionCall;\nvar fails$o = fails$w;\nvar objectKeys$2 = objectKeys$3;\nvar getOwnPropertySymbolsModule$3 = objectGetOwnPropertySymbols;\nvar propertyIsEnumerableModule$1 = objectPropertyIsEnumerable;\nvar toObject$c = toObject$e;\nvar IndexedObject$2 = indexedObject;\n\n// eslint-disable-next-line es/no-object-assign -- safe\nvar $assign = Object.assign;\n// eslint-disable-next-line es/no-object-defineproperty -- required for testing\nvar defineProperty$e = Object.defineProperty;\nvar concat$6 = uncurryThis$o([].concat);\n\n// `Object.assign` method\n// https://tc39.es/ecma262/#sec-object.assign\nvar objectAssign = !$assign || fails$o(function () {\n  // should have correct order of operations (Edge bug)\n  if (DESCRIPTORS$c && $assign({ b: 1 }, $assign(defineProperty$e({}, 'a', {\n    enumerable: true,\n    get: function () {\n      defineProperty$e(this, 'b', {\n        value: 3,\n        enumerable: false\n      });\n    }\n  }), { b: 2 })).b !== 1) return true;\n  // should work with symbols and should have deterministic property order (V8 bug)\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line es/no-symbol -- safe\n  var symbol = Symbol('assign detection');\n  var alphabet = 'abcdefghijklmnopqrst';\n  A[symbol] = 7;\n  alphabet.split('').forEach(function (chr) { B[chr] = chr; });\n  return $assign({}, A)[symbol] !== 7 || objectKeys$2($assign({}, B)).join('') !== alphabet;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars -- required for `.length`\n  var T = toObject$c(target);\n  var argumentsLength = arguments.length;\n  var index = 1;\n  var getOwnPropertySymbols = getOwnPropertySymbolsModule$3.f;\n  var propertyIsEnumerable = propertyIsEnumerableModule$1.f;\n  while (argumentsLength > index) {\n    var S = IndexedObject$2(arguments[index++]);\n    var keys = getOwnPropertySymbols ? concat$6(objectKeys$2(S), getOwnPropertySymbols(S)) : objectKeys$2(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) {\n      key = keys[j++];\n      if (!DESCRIPTORS$c || call$9(propertyIsEnumerable, S, key)) T[key] = S[key];\n    }\n  } return T;\n} : $assign;\n\nvar $$O = _export;\nvar assign$5 = objectAssign;\n\n// `Object.assign` method\n// https://tc39.es/ecma262/#sec-object.assign\n// eslint-disable-next-line es/no-object-assign -- required for testing\n$$O({ target: 'Object', stat: true, arity: 2, forced: Object.assign !== assign$5 }, {\n  assign: assign$5\n});\n\nvar path$t = path$w;\n\nvar assign$4 = path$t.Object.assign;\n\nvar parent$1b = assign$4;\n\nvar assign$3 = parent$1b;\n\nvar assign$2 = assign$3;\n\nvar _Object$assign = /*@__PURE__*/getDefaultExportFromCjs(assign$2);\n\nvar uncurryThis$n = functionUncurryThis;\n\nvar arraySlice$5 = uncurryThis$n([].slice);\n\nvar uncurryThis$m = functionUncurryThis;\nvar aCallable$4 = aCallable$7;\nvar isObject$e = isObject$j;\nvar hasOwn$d = hasOwnProperty_1;\nvar arraySlice$4 = arraySlice$5;\nvar NATIVE_BIND = functionBindNative;\n\nvar $Function = Function;\nvar concat$5 = uncurryThis$m([].concat);\nvar join = uncurryThis$m([].join);\nvar factories = {};\n\nvar construct$4 = function (C, argsLength, args) {\n  if (!hasOwn$d(factories, argsLength)) {\n    var list = [];\n    var i = 0;\n    for (; i < argsLength; i++) list[i] = 'a[' + i + ']';\n    factories[argsLength] = $Function('C,a', 'return new C(' + join(list, ',') + ')');\n  } return factories[argsLength](C, args);\n};\n\n// `Function.prototype.bind` method implementation\n// https://tc39.es/ecma262/#sec-function.prototype.bind\n// eslint-disable-next-line es/no-function-prototype-bind -- detection\nvar functionBind = NATIVE_BIND ? $Function.bind : function bind(that /* , ...args */) {\n  var F = aCallable$4(this);\n  var Prototype = F.prototype;\n  var partArgs = arraySlice$4(arguments, 1);\n  var boundFunction = function bound(/* args... */) {\n    var args = concat$5(partArgs, arraySlice$4(arguments));\n    return this instanceof boundFunction ? construct$4(F, args.length, args) : F.apply(that, args);\n  };\n  if (isObject$e(Prototype)) boundFunction.prototype = Prototype;\n  return boundFunction;\n};\n\n// TODO: Remove from `core-js@4`\nvar $$N = _export;\nvar bind$c = functionBind;\n\n// `Function.prototype.bind` method\n// https://tc39.es/ecma262/#sec-function.prototype.bind\n// eslint-disable-next-line es/no-function-prototype-bind -- detection\n$$N({ target: 'Function', proto: true, forced: Function.bind !== bind$c }, {\n  bind: bind$c\n});\n\nvar path$s = path$w;\n\nvar entryVirtual$i = function (CONSTRUCTOR) {\n  return path$s[CONSTRUCTOR + 'Prototype'];\n};\n\nvar entryVirtual$h = entryVirtual$i;\n\nvar bind$b = entryVirtual$h('Function').bind;\n\nvar isPrototypeOf$j = objectIsPrototypeOf;\nvar method$f = bind$b;\n\nvar FunctionPrototype$2 = Function.prototype;\n\nvar bind$a = function (it) {\n  var own = it.bind;\n  return it === FunctionPrototype$2 || (isPrototypeOf$j(FunctionPrototype$2, it) && own === FunctionPrototype$2.bind) ? method$f : own;\n};\n\nvar parent$1a = bind$a;\n\nvar bind$9 = parent$1a;\n\nvar bind$8 = bind$9;\n\nvar _bindInstanceProperty$1 = /*@__PURE__*/getDefaultExportFromCjs(bind$8);\n\n/**\r\n * Draw a circle.\r\n *\r\n * @param ctx - The context this shape will be rendered to.\r\n * @param x - The position of the center on the x axis.\r\n * @param y - The position of the center on the y axis.\r\n * @param r - The radius of the circle.\r\n */\nfunction drawCircle(ctx, x, y, r) {\n  ctx.beginPath();\n  ctx.arc(x, y, r, 0, 2 * Math.PI, false);\n  ctx.closePath();\n}\n/**\r\n * Draw a square.\r\n *\r\n * @param ctx - The context this shape will be rendered to.\r\n * @param x - The position of the center on the x axis.\r\n * @param y - The position of the center on the y axis.\r\n * @param r - Half of the width and height of the square.\r\n */\nfunction drawSquare(ctx, x, y, r) {\n  ctx.beginPath();\n  ctx.rect(x - r, y - r, r * 2, r * 2);\n  ctx.closePath();\n}\n/**\r\n * Draw an equilateral triangle standing on a side.\r\n *\r\n * @param ctx - The context this shape will be rendered to.\r\n * @param x - The position of the center on the x axis.\r\n * @param y - The position of the center on the y axis.\r\n * @param r - Half of the length of the sides.\r\n * @remarks\r\n * http://en.wikipedia.org/wiki/Equilateral_triangle\r\n */\nfunction drawTriangle(ctx, x, y, r) {\n  ctx.beginPath();\n  // the change in radius and the offset is here to center the shape\n  r *= 1.15;\n  y += 0.275 * r;\n  var s = r * 2;\n  var s2 = s / 2;\n  var ir = Math.sqrt(3) / 6 * s; // radius of inner circle\n  var h = Math.sqrt(s * s - s2 * s2); // height\n  ctx.moveTo(x, y - (h - ir));\n  ctx.lineTo(x + s2, y + ir);\n  ctx.lineTo(x - s2, y + ir);\n  ctx.lineTo(x, y - (h - ir));\n  ctx.closePath();\n}\n/**\r\n * Draw an equilateral triangle standing on a vertex.\r\n *\r\n * @param ctx - The context this shape will be rendered to.\r\n * @param x - The position of the center on the x axis.\r\n * @param y - The position of the center on the y axis.\r\n * @param r - Half of the length of the sides.\r\n * @remarks\r\n * http://en.wikipedia.org/wiki/Equilateral_triangle\r\n */\nfunction drawTriangleDown(ctx, x, y, r) {\n  ctx.beginPath();\n  // the change in radius and the offset is here to center the shape\n  r *= 1.15;\n  y -= 0.275 * r;\n  var s = r * 2;\n  var s2 = s / 2;\n  var ir = Math.sqrt(3) / 6 * s; // radius of inner circle\n  var h = Math.sqrt(s * s - s2 * s2); // height\n  ctx.moveTo(x, y + (h - ir));\n  ctx.lineTo(x + s2, y - ir);\n  ctx.lineTo(x - s2, y - ir);\n  ctx.lineTo(x, y + (h - ir));\n  ctx.closePath();\n}\n/**\r\n * Draw a star.\r\n *\r\n * @param ctx - The context this shape will be rendered to.\r\n * @param x - The position of the center on the x axis.\r\n * @param y - The position of the center on the y axis.\r\n * @param r - The outer radius of the star.\r\n */\nfunction drawStar(ctx, x, y, r) {\n  // http://www.html5canvastutorials.com/labs/html5-canvas-star-spinner/\n  ctx.beginPath();\n  // the change in radius and the offset is here to center the shape\n  r *= 0.82;\n  y += 0.1 * r;\n  for (var n = 0; n < 10; n++) {\n    var radius = n % 2 === 0 ? r * 1.3 : r * 0.5;\n    ctx.lineTo(x + radius * Math.sin(n * 2 * Math.PI / 10), y - radius * Math.cos(n * 2 * Math.PI / 10));\n  }\n  ctx.closePath();\n}\n/**\r\n * Draw a diamond.\r\n *\r\n * @param ctx - The context this shape will be rendered to.\r\n * @param x - The position of the center on the x axis.\r\n * @param y - The position of the center on the y axis.\r\n * @param r - Half of the width and height of the diamond.\r\n * @remarks\r\n * http://www.html5canvastutorials.com/labs/html5-canvas-star-spinner/\r\n */\nfunction drawDiamond(ctx, x, y, r) {\n  ctx.beginPath();\n  ctx.lineTo(x, y + r);\n  ctx.lineTo(x + r, y);\n  ctx.lineTo(x, y - r);\n  ctx.lineTo(x - r, y);\n  ctx.closePath();\n}\n/**\r\n * Draw a rectangle with rounded corners.\r\n *\r\n * @param ctx - The context this shape will be rendered to.\r\n * @param x - The position of the center on the x axis.\r\n * @param y - The position of the center on the y axis.\r\n * @param w - The width of the rectangle.\r\n * @param h - The height of the rectangle.\r\n * @param r - The radius of the corners.\r\n * @remarks\r\n * http://stackoverflow.com/questions/1255512/how-to-draw-a-rounded-rectangle-on-html-canvas\r\n */\nfunction drawRoundRect(ctx, x, y, w, h, r) {\n  var r2d = Math.PI / 180;\n  if (w - 2 * r < 0) {\n    r = w / 2;\n  } //ensure that the radius isn't too large for x\n  if (h - 2 * r < 0) {\n    r = h / 2;\n  } //ensure that the radius isn't too large for y\n  ctx.beginPath();\n  ctx.moveTo(x + r, y);\n  ctx.lineTo(x + w - r, y);\n  ctx.arc(x + w - r, y + r, r, r2d * 270, r2d * 360, false);\n  ctx.lineTo(x + w, y + h - r);\n  ctx.arc(x + w - r, y + h - r, r, 0, r2d * 90, false);\n  ctx.lineTo(x + r, y + h);\n  ctx.arc(x + r, y + h - r, r, r2d * 90, r2d * 180, false);\n  ctx.lineTo(x, y + r);\n  ctx.arc(x + r, y + r, r, r2d * 180, r2d * 270, false);\n  ctx.closePath();\n}\n/**\r\n * Draw an ellipse.\r\n *\r\n * @param ctx - The context this shape will be rendered to.\r\n * @param x - The position of the center on the x axis.\r\n * @param y - The position of the center on the y axis.\r\n * @param w - The width of the ellipse.\r\n * @param h - The height of the ellipse.\r\n * @remarks\r\n * http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas\r\n *\r\n * Postfix '_vis' added to discern it from standard method ellipse().\r\n */\nfunction drawEllipse(ctx, x, y, w, h) {\n  var kappa = 0.5522848,\n    ox = w / 2 * kappa,\n    // control point offset horizontal\n    oy = h / 2 * kappa,\n    // control point offset vertical\n    xe = x + w,\n    // x-end\n    ye = y + h,\n    // y-end\n    xm = x + w / 2,\n    // x-middle\n    ym = y + h / 2; // y-middle\n  ctx.beginPath();\n  ctx.moveTo(x, ym);\n  ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n  ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n  ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n  ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n  ctx.closePath();\n}\n/**\r\n * Draw an isometric cylinder.\r\n *\r\n * @param ctx - The context this shape will be rendered to.\r\n * @param x - The position of the center on the x axis.\r\n * @param y - The position of the center on the y axis.\r\n * @param w - The width of the database.\r\n * @param h - The height of the database.\r\n * @remarks\r\n * http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas\r\n */\nfunction drawDatabase(ctx, x, y, w, h) {\n  var f = 1 / 3;\n  var wEllipse = w;\n  var hEllipse = h * f;\n  var kappa = 0.5522848,\n    ox = wEllipse / 2 * kappa,\n    // control point offset horizontal\n    oy = hEllipse / 2 * kappa,\n    // control point offset vertical\n    xe = x + wEllipse,\n    // x-end\n    ye = y + hEllipse,\n    // y-end\n    xm = x + wEllipse / 2,\n    // x-middle\n    ym = y + hEllipse / 2,\n    // y-middle\n    ymb = y + (h - hEllipse / 2),\n    // y-midlle, bottom ellipse\n    yeb = y + h; // y-end, bottom ellipse\n  ctx.beginPath();\n  ctx.moveTo(xe, ym);\n  ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n  ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n  ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n  ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n  ctx.lineTo(xe, ymb);\n  ctx.bezierCurveTo(xe, ymb + oy, xm + ox, yeb, xm, yeb);\n  ctx.bezierCurveTo(xm - ox, yeb, x, ymb + oy, x, ymb);\n  ctx.lineTo(x, ym);\n}\n/**\r\n * Draw a dashed line.\r\n *\r\n * @param ctx - The context this shape will be rendered to.\r\n * @param x - The start position on the x axis.\r\n * @param y - The start position on the y axis.\r\n * @param x2 - The end position on the x axis.\r\n * @param y2 - The end position on the y axis.\r\n * @param pattern - List of lengths starting with line and then alternating between space and line.\r\n * @author David Jordan\r\n * @remarks\r\n * date 2012-08-08\r\n * http://stackoverflow.com/questions/4576724/dotted-stroke-in-canvas\r\n */\nfunction drawDashedLine(ctx, x, y, x2, y2, pattern) {\n  ctx.beginPath();\n  ctx.moveTo(x, y);\n  var patternLength = pattern.length;\n  var dx = x2 - x;\n  var dy = y2 - y;\n  var slope = dy / dx;\n  var distRemaining = Math.sqrt(dx * dx + dy * dy);\n  var patternIndex = 0;\n  var draw = true;\n  var xStep = 0;\n  var dashLength = +pattern[0];\n  while (distRemaining >= 0.1) {\n    dashLength = +pattern[patternIndex++ % patternLength];\n    if (dashLength > distRemaining) {\n      dashLength = distRemaining;\n    }\n    xStep = Math.sqrt(dashLength * dashLength / (1 + slope * slope));\n    xStep = dx < 0 ? -xStep : xStep;\n    x += xStep;\n    y += slope * xStep;\n    if (draw === true) {\n      ctx.lineTo(x, y);\n    } else {\n      ctx.moveTo(x, y);\n    }\n    distRemaining -= dashLength;\n    draw = !draw;\n  }\n}\n/**\r\n * Draw a hexagon.\r\n *\r\n * @param ctx - The context this shape will be rendered to.\r\n * @param x - The position of the center on the x axis.\r\n * @param y - The position of the center on the y axis.\r\n * @param r - The radius of the hexagon.\r\n */\nfunction drawHexagon(ctx, x, y, r) {\n  ctx.beginPath();\n  var sides = 6;\n  var a = Math.PI * 2 / sides;\n  ctx.moveTo(x + r, y);\n  for (var i = 1; i < sides; i++) {\n    ctx.lineTo(x + r * Math.cos(a * i), y + r * Math.sin(a * i));\n  }\n  ctx.closePath();\n}\nvar shapeMap = {\n  circle: drawCircle,\n  dashedLine: drawDashedLine,\n  database: drawDatabase,\n  diamond: drawDiamond,\n  ellipse: drawEllipse,\n  ellipse_vis: drawEllipse,\n  hexagon: drawHexagon,\n  roundRect: drawRoundRect,\n  square: drawSquare,\n  star: drawStar,\n  triangle: drawTriangle,\n  triangleDown: drawTriangleDown\n};\n/**\r\n * Returns either custom or native drawing function base on supplied name.\r\n *\r\n * @param name - The name of the function. Either the name of a\r\n * CanvasRenderingContext2D property or an export from shapes.ts without the\r\n * draw prefix.\r\n * @returns The function that can be used for rendering. In case of native\r\n * CanvasRenderingContext2D function the API is normalized to\r\n * `(ctx: CanvasRenderingContext2D, ...originalArgs) => void`.\r\n */\nfunction getShape(name) {\n  if (Object.prototype.hasOwnProperty.call(shapeMap, name)) {\n    return shapeMap[name];\n  } else {\n    return function (ctx) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      CanvasRenderingContext2D.prototype[name].call(ctx, args);\n    };\n  }\n}\n\nvar componentEmitter = {exports: {}};\n\n(function (module) {\n\t/**\r\n\t * Expose `Emitter`.\r\n\t */\r\n\r\n\t{\r\n\t  module.exports = Emitter;\r\n\t}\r\n\r\n\t/**\r\n\t * Initialize a new `Emitter`.\r\n\t *\r\n\t * @api public\r\n\t */\r\n\r\n\tfunction Emitter(obj) {\r\n\t  if (obj) return mixin(obj);\r\n\t}\r\n\t/**\r\n\t * Mixin the emitter properties.\r\n\t *\r\n\t * @param {Object} obj\r\n\t * @return {Object}\r\n\t * @api private\r\n\t */\r\n\r\n\tfunction mixin(obj) {\r\n\t  for (var key in Emitter.prototype) {\r\n\t    obj[key] = Emitter.prototype[key];\r\n\t  }\r\n\t  return obj;\r\n\t}\r\n\r\n\t/**\r\n\t * Listen on the given `event` with `fn`.\r\n\t *\r\n\t * @param {String} event\r\n\t * @param {Function} fn\r\n\t * @return {Emitter}\r\n\t * @api public\r\n\t */\r\n\r\n\tEmitter.prototype.on =\r\n\tEmitter.prototype.addEventListener = function(event, fn){\r\n\t  this._callbacks = this._callbacks || {};\r\n\t  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\r\n\t    .push(fn);\r\n\t  return this;\r\n\t};\r\n\r\n\t/**\r\n\t * Adds an `event` listener that will be invoked a single\r\n\t * time then automatically removed.\r\n\t *\r\n\t * @param {String} event\r\n\t * @param {Function} fn\r\n\t * @return {Emitter}\r\n\t * @api public\r\n\t */\r\n\r\n\tEmitter.prototype.once = function(event, fn){\r\n\t  function on() {\r\n\t    this.off(event, on);\r\n\t    fn.apply(this, arguments);\r\n\t  }\r\n\r\n\t  on.fn = fn;\r\n\t  this.on(event, on);\r\n\t  return this;\r\n\t};\r\n\r\n\t/**\r\n\t * Remove the given callback for `event` or all\r\n\t * registered callbacks.\r\n\t *\r\n\t * @param {String} event\r\n\t * @param {Function} fn\r\n\t * @return {Emitter}\r\n\t * @api public\r\n\t */\r\n\r\n\tEmitter.prototype.off =\r\n\tEmitter.prototype.removeListener =\r\n\tEmitter.prototype.removeAllListeners =\r\n\tEmitter.prototype.removeEventListener = function(event, fn){\r\n\t  this._callbacks = this._callbacks || {};\r\n\r\n\t  // all\r\n\t  if (0 == arguments.length) {\r\n\t    this._callbacks = {};\r\n\t    return this;\r\n\t  }\r\n\r\n\t  // specific event\r\n\t  var callbacks = this._callbacks['$' + event];\r\n\t  if (!callbacks) return this;\r\n\r\n\t  // remove all handlers\r\n\t  if (1 == arguments.length) {\r\n\t    delete this._callbacks['$' + event];\r\n\t    return this;\r\n\t  }\r\n\r\n\t  // remove specific handler\r\n\t  var cb;\r\n\t  for (var i = 0; i < callbacks.length; i++) {\r\n\t    cb = callbacks[i];\r\n\t    if (cb === fn || cb.fn === fn) {\r\n\t      callbacks.splice(i, 1);\r\n\t      break;\r\n\t    }\r\n\t  }\r\n\r\n\t  // Remove event specific arrays for event types that no\r\n\t  // one is subscribed for to avoid memory leak.\r\n\t  if (callbacks.length === 0) {\r\n\t    delete this._callbacks['$' + event];\r\n\t  }\r\n\r\n\t  return this;\r\n\t};\r\n\r\n\t/**\r\n\t * Emit `event` with the given args.\r\n\t *\r\n\t * @param {String} event\r\n\t * @param {Mixed} ...\r\n\t * @return {Emitter}\r\n\t */\r\n\r\n\tEmitter.prototype.emit = function(event){\r\n\t  this._callbacks = this._callbacks || {};\r\n\r\n\t  var args = new Array(arguments.length - 1)\r\n\t    , callbacks = this._callbacks['$' + event];\r\n\r\n\t  for (var i = 1; i < arguments.length; i++) {\r\n\t    args[i - 1] = arguments[i];\r\n\t  }\r\n\r\n\t  if (callbacks) {\r\n\t    callbacks = callbacks.slice(0);\r\n\t    for (var i = 0, len = callbacks.length; i < len; ++i) {\r\n\t      callbacks[i].apply(this, args);\r\n\t    }\r\n\t  }\r\n\r\n\t  return this;\r\n\t};\r\n\r\n\t/**\r\n\t * Return array of callbacks for `event`.\r\n\t *\r\n\t * @param {String} event\r\n\t * @return {Array}\r\n\t * @api public\r\n\t */\r\n\r\n\tEmitter.prototype.listeners = function(event){\r\n\t  this._callbacks = this._callbacks || {};\r\n\t  return this._callbacks['$' + event] || [];\r\n\t};\r\n\r\n\t/**\r\n\t * Check if this emitter has `event` handlers.\r\n\t *\r\n\t * @param {String} event\r\n\t * @return {Boolean}\r\n\t * @api public\r\n\t */\r\n\r\n\tEmitter.prototype.hasListeners = function(event){\r\n\t  return !! this.listeners(event).length;\r\n\t}; \n} (componentEmitter));\n\nvar componentEmitterExports = componentEmitter.exports;\nvar Emitter = /*@__PURE__*/getDefaultExportFromCjs(componentEmitterExports);\n\nvar wellKnownSymbol$k = wellKnownSymbol$m;\n\nvar TO_STRING_TAG$3 = wellKnownSymbol$k('toStringTag');\nvar test$2 = {};\n\ntest$2[TO_STRING_TAG$3] = 'z';\n\nvar toStringTagSupport = String(test$2) === '[object z]';\n\nvar TO_STRING_TAG_SUPPORT$2 = toStringTagSupport;\nvar isCallable$a = isCallable$i;\nvar classofRaw = classofRaw$2;\nvar wellKnownSymbol$j = wellKnownSymbol$m;\n\nvar TO_STRING_TAG$2 = wellKnownSymbol$j('toStringTag');\nvar $Object$2 = Object;\n\n// ES3 wrong here\nvar CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) === 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (error) { /* empty */ }\n};\n\n// getting tag from ES6+ `Object.prototype.toString`\nvar classof$d = TO_STRING_TAG_SUPPORT$2 ? classofRaw : function (it) {\n  var O, tag, result;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (tag = tryGet(O = $Object$2(it), TO_STRING_TAG$2)) == 'string' ? tag\n    // builtinTag case\n    : CORRECT_ARGUMENTS ? classofRaw(O)\n    // ES3 arguments fallback\n    : (result = classofRaw(O)) === 'Object' && isCallable$a(O.callee) ? 'Arguments' : result;\n};\n\nvar classof$c = classof$d;\n\nvar $String$2 = String;\n\nvar toString$a = function (argument) {\n  if (classof$c(argument) === 'Symbol') throw new TypeError('Cannot convert a Symbol value to a string');\n  return $String$2(argument);\n};\n\nvar uncurryThis$l = functionUncurryThis;\nvar toIntegerOrInfinity$1 = toIntegerOrInfinity$4;\nvar toString$9 = toString$a;\nvar requireObjectCoercible$2 = requireObjectCoercible$5;\n\nvar charAt$3 = uncurryThis$l(''.charAt);\nvar charCodeAt$1 = uncurryThis$l(''.charCodeAt);\nvar stringSlice = uncurryThis$l(''.slice);\n\nvar createMethod$3 = function (CONVERT_TO_STRING) {\n  return function ($this, pos) {\n    var S = toString$9(requireObjectCoercible$2($this));\n    var position = toIntegerOrInfinity$1(pos);\n    var size = S.length;\n    var first, second;\n    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;\n    first = charCodeAt$1(S, position);\n    return first < 0xD800 || first > 0xDBFF || position + 1 === size\n      || (second = charCodeAt$1(S, position + 1)) < 0xDC00 || second > 0xDFFF\n        ? CONVERT_TO_STRING\n          ? charAt$3(S, position)\n          : first\n        : CONVERT_TO_STRING\n          ? stringSlice(S, position, position + 2)\n          : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;\n  };\n};\n\nvar stringMultibyte = {\n  // `String.prototype.codePointAt` method\n  // https://tc39.es/ecma262/#sec-string.prototype.codepointat\n  codeAt: createMethod$3(false),\n  // `String.prototype.at` method\n  // https://github.com/mathiasbynens/String.prototype.at\n  charAt: createMethod$3(true)\n};\n\nvar global$e = global$n;\nvar isCallable$9 = isCallable$i;\n\nvar WeakMap$1 = global$e.WeakMap;\n\nvar weakMapBasicDetection = isCallable$9(WeakMap$1) && /native code/.test(String(WeakMap$1));\n\nvar shared$5 = sharedExports;\nvar uid$2 = uid$4;\n\nvar keys$3 = shared$5('keys');\n\nvar sharedKey$4 = function (key) {\n  return keys$3[key] || (keys$3[key] = uid$2(key));\n};\n\nvar NATIVE_WEAK_MAP$1 = weakMapBasicDetection;\nvar global$d = global$n;\nvar isObject$d = isObject$j;\nvar createNonEnumerableProperty$4 = createNonEnumerableProperty$6;\nvar hasOwn$c = hasOwnProperty_1;\nvar shared$4 = sharedStore;\nvar sharedKey$3 = sharedKey$4;\nvar hiddenKeys$4 = hiddenKeys$6;\n\nvar OBJECT_ALREADY_INITIALIZED = 'Object already initialized';\nvar TypeError$2 = global$d.TypeError;\nvar WeakMap = global$d.WeakMap;\nvar set$3, get$6, has;\n\nvar enforce = function (it) {\n  return has(it) ? get$6(it) : set$3(it, {});\n};\n\nvar getterFor = function (TYPE) {\n  return function (it) {\n    var state;\n    if (!isObject$d(it) || (state = get$6(it)).type !== TYPE) {\n      throw new TypeError$2('Incompatible receiver, ' + TYPE + ' required');\n    } return state;\n  };\n};\n\nif (NATIVE_WEAK_MAP$1 || shared$4.state) {\n  var store$1 = shared$4.state || (shared$4.state = new WeakMap());\n  /* eslint-disable no-self-assign -- prototype methods protection */\n  store$1.get = store$1.get;\n  store$1.has = store$1.has;\n  store$1.set = store$1.set;\n  /* eslint-enable no-self-assign -- prototype methods protection */\n  set$3 = function (it, metadata) {\n    if (store$1.has(it)) throw new TypeError$2(OBJECT_ALREADY_INITIALIZED);\n    metadata.facade = it;\n    store$1.set(it, metadata);\n    return metadata;\n  };\n  get$6 = function (it) {\n    return store$1.get(it) || {};\n  };\n  has = function (it) {\n    return store$1.has(it);\n  };\n} else {\n  var STATE = sharedKey$3('state');\n  hiddenKeys$4[STATE] = true;\n  set$3 = function (it, metadata) {\n    if (hasOwn$c(it, STATE)) throw new TypeError$2(OBJECT_ALREADY_INITIALIZED);\n    metadata.facade = it;\n    createNonEnumerableProperty$4(it, STATE, metadata);\n    return metadata;\n  };\n  get$6 = function (it) {\n    return hasOwn$c(it, STATE) ? it[STATE] : {};\n  };\n  has = function (it) {\n    return hasOwn$c(it, STATE);\n  };\n}\n\nvar internalState = {\n  set: set$3,\n  get: get$6,\n  has: has,\n  enforce: enforce,\n  getterFor: getterFor\n};\n\nvar DESCRIPTORS$b = descriptors;\nvar hasOwn$b = hasOwnProperty_1;\n\nvar FunctionPrototype$1 = Function.prototype;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar getDescriptor = DESCRIPTORS$b && Object.getOwnPropertyDescriptor;\n\nvar EXISTS = hasOwn$b(FunctionPrototype$1, 'name');\n// additional protection from minified / mangled / dropped function names\nvar PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';\nvar CONFIGURABLE = EXISTS && (!DESCRIPTORS$b || (DESCRIPTORS$b && getDescriptor(FunctionPrototype$1, 'name').configurable));\n\nvar functionName = {\n  EXISTS: EXISTS,\n  PROPER: PROPER,\n  CONFIGURABLE: CONFIGURABLE\n};\n\nvar objectDefineProperties = {};\n\nvar DESCRIPTORS$a = descriptors;\nvar V8_PROTOTYPE_DEFINE_BUG = v8PrototypeDefineBug;\nvar definePropertyModule$2 = objectDefineProperty;\nvar anObject$b = anObject$d;\nvar toIndexedObject$6 = toIndexedObject$a;\nvar objectKeys$1 = objectKeys$3;\n\n// `Object.defineProperties` method\n// https://tc39.es/ecma262/#sec-object.defineproperties\n// eslint-disable-next-line es/no-object-defineproperties -- safe\nobjectDefineProperties.f = DESCRIPTORS$a && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject$b(O);\n  var props = toIndexedObject$6(Properties);\n  var keys = objectKeys$1(Properties);\n  var length = keys.length;\n  var index = 0;\n  var key;\n  while (length > index) definePropertyModule$2.f(O, key = keys[index++], props[key]);\n  return O;\n};\n\nvar getBuiltIn$a = getBuiltIn$c;\n\nvar html$1 = getBuiltIn$a('document', 'documentElement');\n\n/* global ActiveXObject -- old IE, WSH */\nvar anObject$a = anObject$d;\nvar definePropertiesModule$1 = objectDefineProperties;\nvar enumBugKeys$1 = enumBugKeys$3;\nvar hiddenKeys$3 = hiddenKeys$6;\nvar html = html$1;\nvar documentCreateElement = documentCreateElement$1;\nvar sharedKey$2 = sharedKey$4;\n\nvar GT = '>';\nvar LT = '<';\nvar PROTOTYPE$1 = 'prototype';\nvar SCRIPT = 'script';\nvar IE_PROTO$1 = sharedKey$2('IE_PROTO');\n\nvar EmptyConstructor = function () { /* empty */ };\n\nvar scriptTag = function (content) {\n  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;\n};\n\n// Create object with fake `null` prototype: use ActiveX Object with cleared prototype\nvar NullProtoObjectViaActiveX = function (activeXDocument) {\n  activeXDocument.write(scriptTag(''));\n  activeXDocument.close();\n  var temp = activeXDocument.parentWindow.Object;\n  activeXDocument = null; // avoid memory leak\n  return temp;\n};\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar NullProtoObjectViaIFrame = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = documentCreateElement('iframe');\n  var JS = 'java' + SCRIPT + ':';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  html.appendChild(iframe);\n  // https://github.com/zloirock/core-js/issues/475\n  iframe.src = String(JS);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(scriptTag('document.F=Object'));\n  iframeDocument.close();\n  return iframeDocument.F;\n};\n\n// Check for document.domain and active x support\n// No need to use active x approach when document.domain is not set\n// see https://github.com/es-shims/es5-shim/issues/150\n// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346\n// avoid IE GC bug\nvar activeXDocument;\nvar NullProtoObject = function () {\n  try {\n    activeXDocument = new ActiveXObject('htmlfile');\n  } catch (error) { /* ignore */ }\n  NullProtoObject = typeof document != 'undefined'\n    ? document.domain && activeXDocument\n      ? NullProtoObjectViaActiveX(activeXDocument) // old IE\n      : NullProtoObjectViaIFrame()\n    : NullProtoObjectViaActiveX(activeXDocument); // WSH\n  var length = enumBugKeys$1.length;\n  while (length--) delete NullProtoObject[PROTOTYPE$1][enumBugKeys$1[length]];\n  return NullProtoObject();\n};\n\nhiddenKeys$3[IE_PROTO$1] = true;\n\n// `Object.create` method\n// https://tc39.es/ecma262/#sec-object.create\n// eslint-disable-next-line es/no-object-create -- safe\nvar objectCreate = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    EmptyConstructor[PROTOTYPE$1] = anObject$a(O);\n    result = new EmptyConstructor();\n    EmptyConstructor[PROTOTYPE$1] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO$1] = O;\n  } else result = NullProtoObject();\n  return Properties === undefined ? result : definePropertiesModule$1.f(result, Properties);\n};\n\nvar fails$n = fails$w;\n\nvar correctPrototypeGetter = !fails$n(function () {\n  function F() { /* empty */ }\n  F.prototype.constructor = null;\n  // eslint-disable-next-line es/no-object-getprototypeof -- required for testing\n  return Object.getPrototypeOf(new F()) !== F.prototype;\n});\n\nvar hasOwn$a = hasOwnProperty_1;\nvar isCallable$8 = isCallable$i;\nvar toObject$b = toObject$e;\nvar sharedKey$1 = sharedKey$4;\nvar CORRECT_PROTOTYPE_GETTER$1 = correctPrototypeGetter;\n\nvar IE_PROTO = sharedKey$1('IE_PROTO');\nvar $Object$1 = Object;\nvar ObjectPrototype$2 = $Object$1.prototype;\n\n// `Object.getPrototypeOf` method\n// https://tc39.es/ecma262/#sec-object.getprototypeof\n// eslint-disable-next-line es/no-object-getprototypeof -- safe\nvar objectGetPrototypeOf = CORRECT_PROTOTYPE_GETTER$1 ? $Object$1.getPrototypeOf : function (O) {\n  var object = toObject$b(O);\n  if (hasOwn$a(object, IE_PROTO)) return object[IE_PROTO];\n  var constructor = object.constructor;\n  if (isCallable$8(constructor) && object instanceof constructor) {\n    return constructor.prototype;\n  } return object instanceof $Object$1 ? ObjectPrototype$2 : null;\n};\n\nvar createNonEnumerableProperty$3 = createNonEnumerableProperty$6;\n\nvar defineBuiltIn$5 = function (target, key, value, options) {\n  if (options && options.enumerable) target[key] = value;\n  else createNonEnumerableProperty$3(target, key, value);\n  return target;\n};\n\nvar fails$m = fails$w;\nvar isCallable$7 = isCallable$i;\nvar isObject$c = isObject$j;\nvar create$a = objectCreate;\nvar getPrototypeOf$8 = objectGetPrototypeOf;\nvar defineBuiltIn$4 = defineBuiltIn$5;\nvar wellKnownSymbol$i = wellKnownSymbol$m;\n\nvar ITERATOR$6 = wellKnownSymbol$i('iterator');\nvar BUGGY_SAFARI_ITERATORS$1 = false;\n\n// `%IteratorPrototype%` object\n// https://tc39.es/ecma262/#sec-%iteratorprototype%-object\nvar IteratorPrototype$1, PrototypeOfArrayIteratorPrototype, arrayIterator;\n\n/* eslint-disable es/no-array-prototype-keys -- safe */\nif ([].keys) {\n  arrayIterator = [].keys();\n  // Safari 8 has buggy iterators w/o `next`\n  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS$1 = true;\n  else {\n    PrototypeOfArrayIteratorPrototype = getPrototypeOf$8(getPrototypeOf$8(arrayIterator));\n    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype$1 = PrototypeOfArrayIteratorPrototype;\n  }\n}\n\nvar NEW_ITERATOR_PROTOTYPE = !isObject$c(IteratorPrototype$1) || fails$m(function () {\n  var test = {};\n  // FF44- legacy iterators case\n  return IteratorPrototype$1[ITERATOR$6].call(test) !== test;\n});\n\nif (NEW_ITERATOR_PROTOTYPE) IteratorPrototype$1 = {};\nelse IteratorPrototype$1 = create$a(IteratorPrototype$1);\n\n// `%IteratorPrototype%[@@iterator]()` method\n// https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator\nif (!isCallable$7(IteratorPrototype$1[ITERATOR$6])) {\n  defineBuiltIn$4(IteratorPrototype$1, ITERATOR$6, function () {\n    return this;\n  });\n}\n\nvar iteratorsCore = {\n  IteratorPrototype: IteratorPrototype$1,\n  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS$1\n};\n\nvar TO_STRING_TAG_SUPPORT$1 = toStringTagSupport;\nvar classof$b = classof$d;\n\n// `Object.prototype.toString` method implementation\n// https://tc39.es/ecma262/#sec-object.prototype.tostring\nvar objectToString = TO_STRING_TAG_SUPPORT$1 ? {}.toString : function toString() {\n  return '[object ' + classof$b(this) + ']';\n};\n\nvar TO_STRING_TAG_SUPPORT = toStringTagSupport;\nvar defineProperty$d = objectDefineProperty.f;\nvar createNonEnumerableProperty$2 = createNonEnumerableProperty$6;\nvar hasOwn$9 = hasOwnProperty_1;\nvar toString$8 = objectToString;\nvar wellKnownSymbol$h = wellKnownSymbol$m;\n\nvar TO_STRING_TAG$1 = wellKnownSymbol$h('toStringTag');\n\nvar setToStringTag$6 = function (it, TAG, STATIC, SET_METHOD) {\n  if (it) {\n    var target = STATIC ? it : it.prototype;\n    if (!hasOwn$9(target, TO_STRING_TAG$1)) {\n      defineProperty$d(target, TO_STRING_TAG$1, { configurable: true, value: TAG });\n    }\n    if (SET_METHOD && !TO_STRING_TAG_SUPPORT) {\n      createNonEnumerableProperty$2(target, 'toString', toString$8);\n    }\n  }\n};\n\nvar iterators = {};\n\nvar IteratorPrototype = iteratorsCore.IteratorPrototype;\nvar create$9 = objectCreate;\nvar createPropertyDescriptor$2 = createPropertyDescriptor$5;\nvar setToStringTag$5 = setToStringTag$6;\nvar Iterators$5 = iterators;\n\nvar returnThis$1 = function () { return this; };\n\nvar iteratorCreateConstructor = function (IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {\n  var TO_STRING_TAG = NAME + ' Iterator';\n  IteratorConstructor.prototype = create$9(IteratorPrototype, { next: createPropertyDescriptor$2(+!ENUMERABLE_NEXT, next) });\n  setToStringTag$5(IteratorConstructor, TO_STRING_TAG, false, true);\n  Iterators$5[TO_STRING_TAG] = returnThis$1;\n  return IteratorConstructor;\n};\n\nvar uncurryThis$k = functionUncurryThis;\nvar aCallable$3 = aCallable$7;\n\nvar functionUncurryThisAccessor = function (object, key, method) {\n  try {\n    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\n    return uncurryThis$k(aCallable$3(Object.getOwnPropertyDescriptor(object, key)[method]));\n  } catch (error) { /* empty */ }\n};\n\nvar isCallable$6 = isCallable$i;\n\nvar $String$1 = String;\nvar $TypeError$a = TypeError;\n\nvar aPossiblePrototype$1 = function (argument) {\n  if (typeof argument == 'object' || isCallable$6(argument)) return argument;\n  throw new $TypeError$a(\"Can't set \" + $String$1(argument) + ' as a prototype');\n};\n\n/* eslint-disable no-proto -- safe */\nvar uncurryThisAccessor = functionUncurryThisAccessor;\nvar anObject$9 = anObject$d;\nvar aPossiblePrototype = aPossiblePrototype$1;\n\n// `Object.setPrototypeOf` method\n// https://tc39.es/ecma262/#sec-object.setprototypeof\n// Works with __proto__ only. Old v8 can't work with null proto objects.\n// eslint-disable-next-line es/no-object-setprototypeof -- safe\nvar objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {\n  var CORRECT_SETTER = false;\n  var test = {};\n  var setter;\n  try {\n    setter = uncurryThisAccessor(Object.prototype, '__proto__', 'set');\n    setter(test, []);\n    CORRECT_SETTER = test instanceof Array;\n  } catch (error) { /* empty */ }\n  return function setPrototypeOf(O, proto) {\n    anObject$9(O);\n    aPossiblePrototype(proto);\n    if (CORRECT_SETTER) setter(O, proto);\n    else O.__proto__ = proto;\n    return O;\n  };\n}() : undefined);\n\nvar $$M = _export;\nvar call$8 = functionCall;\nvar FunctionName = functionName;\nvar createIteratorConstructor = iteratorCreateConstructor;\nvar getPrototypeOf$7 = objectGetPrototypeOf;\nvar setToStringTag$4 = setToStringTag$6;\nvar defineBuiltIn$3 = defineBuiltIn$5;\nvar wellKnownSymbol$g = wellKnownSymbol$m;\nvar Iterators$4 = iterators;\nvar IteratorsCore = iteratorsCore;\n\nvar PROPER_FUNCTION_NAME = FunctionName.PROPER;\nFunctionName.CONFIGURABLE;\nIteratorsCore.IteratorPrototype;\nvar BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;\nvar ITERATOR$5 = wellKnownSymbol$g('iterator');\nvar KEYS = 'keys';\nvar VALUES = 'values';\nvar ENTRIES = 'entries';\n\nvar returnThis = function () { return this; };\n\nvar iteratorDefine = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {\n  createIteratorConstructor(IteratorConstructor, NAME, next);\n\n  var getIterationMethod = function (KIND) {\n    if (KIND === DEFAULT && defaultIterator) return defaultIterator;\n    if (!BUGGY_SAFARI_ITERATORS && KIND && KIND in IterablePrototype) return IterablePrototype[KIND];\n\n    switch (KIND) {\n      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };\n      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };\n      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };\n    }\n\n    return function () { return new IteratorConstructor(this); };\n  };\n\n  var TO_STRING_TAG = NAME + ' Iterator';\n  var INCORRECT_VALUES_NAME = false;\n  var IterablePrototype = Iterable.prototype;\n  var nativeIterator = IterablePrototype[ITERATOR$5]\n    || IterablePrototype['@@iterator']\n    || DEFAULT && IterablePrototype[DEFAULT];\n  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);\n  var anyNativeIterator = NAME === 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;\n  var CurrentIteratorPrototype, methods, KEY;\n\n  // fix native\n  if (anyNativeIterator) {\n    CurrentIteratorPrototype = getPrototypeOf$7(anyNativeIterator.call(new Iterable()));\n    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag$4(CurrentIteratorPrototype, TO_STRING_TAG, true, true);\n      Iterators$4[TO_STRING_TAG] = returnThis;\n    }\n  }\n\n  // fix Array.prototype.{ values, @@iterator }.name in V8 / FF\n  if (PROPER_FUNCTION_NAME && DEFAULT === VALUES && nativeIterator && nativeIterator.name !== VALUES) {\n    {\n      INCORRECT_VALUES_NAME = true;\n      defaultIterator = function values() { return call$8(nativeIterator, this); };\n    }\n  }\n\n  // export additional methods\n  if (DEFAULT) {\n    methods = {\n      values: getIterationMethod(VALUES),\n      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),\n      entries: getIterationMethod(ENTRIES)\n    };\n    if (FORCED) for (KEY in methods) {\n      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {\n        defineBuiltIn$3(IterablePrototype, KEY, methods[KEY]);\n      }\n    } else $$M({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);\n  }\n\n  // define iterator\n  if ((FORCED) && IterablePrototype[ITERATOR$5] !== defaultIterator) {\n    defineBuiltIn$3(IterablePrototype, ITERATOR$5, defaultIterator, { name: DEFAULT });\n  }\n  Iterators$4[NAME] = defaultIterator;\n\n  return methods;\n};\n\n// `CreateIterResultObject` abstract operation\n// https://tc39.es/ecma262/#sec-createiterresultobject\nvar createIterResultObject$3 = function (value, done) {\n  return { value: value, done: done };\n};\n\nvar charAt$2 = stringMultibyte.charAt;\nvar toString$7 = toString$a;\nvar InternalStateModule$5 = internalState;\nvar defineIterator$2 = iteratorDefine;\nvar createIterResultObject$2 = createIterResultObject$3;\n\nvar STRING_ITERATOR = 'String Iterator';\nvar setInternalState$5 = InternalStateModule$5.set;\nvar getInternalState$2 = InternalStateModule$5.getterFor(STRING_ITERATOR);\n\n// `String.prototype[@@iterator]` method\n// https://tc39.es/ecma262/#sec-string.prototype-@@iterator\ndefineIterator$2(String, 'String', function (iterated) {\n  setInternalState$5(this, {\n    type: STRING_ITERATOR,\n    string: toString$7(iterated),\n    index: 0\n  });\n// `%StringIteratorPrototype%.next` method\n// https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next\n}, function next() {\n  var state = getInternalState$2(this);\n  var string = state.string;\n  var index = state.index;\n  var point;\n  if (index >= string.length) return createIterResultObject$2(undefined, true);\n  point = charAt$2(string, index);\n  state.index += point.length;\n  return createIterResultObject$2(point, false);\n});\n\nvar call$7 = functionCall;\nvar anObject$8 = anObject$d;\nvar getMethod$1 = getMethod$3;\n\nvar iteratorClose$2 = function (iterator, kind, value) {\n  var innerResult, innerError;\n  anObject$8(iterator);\n  try {\n    innerResult = getMethod$1(iterator, 'return');\n    if (!innerResult) {\n      if (kind === 'throw') throw value;\n      return value;\n    }\n    innerResult = call$7(innerResult, iterator);\n  } catch (error) {\n    innerError = true;\n    innerResult = error;\n  }\n  if (kind === 'throw') throw value;\n  if (innerError) throw innerResult;\n  anObject$8(innerResult);\n  return value;\n};\n\nvar anObject$7 = anObject$d;\nvar iteratorClose$1 = iteratorClose$2;\n\n// call something on iterator step with safe closing on error\nvar callWithSafeIterationClosing$1 = function (iterator, fn, value, ENTRIES) {\n  try {\n    return ENTRIES ? fn(anObject$7(value)[0], value[1]) : fn(value);\n  } catch (error) {\n    iteratorClose$1(iterator, 'throw', error);\n  }\n};\n\nvar wellKnownSymbol$f = wellKnownSymbol$m;\nvar Iterators$3 = iterators;\n\nvar ITERATOR$4 = wellKnownSymbol$f('iterator');\nvar ArrayPrototype$g = Array.prototype;\n\n// check on default Array iterator\nvar isArrayIteratorMethod$2 = function (it) {\n  return it !== undefined && (Iterators$3.Array === it || ArrayPrototype$g[ITERATOR$4] === it);\n};\n\nvar uncurryThis$j = functionUncurryThis;\nvar isCallable$5 = isCallable$i;\nvar store = sharedStore;\n\nvar functionToString = uncurryThis$j(Function.toString);\n\n// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper\nif (!isCallable$5(store.inspectSource)) {\n  store.inspectSource = function (it) {\n    return functionToString(it);\n  };\n}\n\nvar inspectSource$1 = store.inspectSource;\n\nvar uncurryThis$i = functionUncurryThis;\nvar fails$l = fails$w;\nvar isCallable$4 = isCallable$i;\nvar classof$a = classof$d;\nvar getBuiltIn$9 = getBuiltIn$c;\nvar inspectSource = inspectSource$1;\n\nvar noop = function () { /* empty */ };\nvar empty = [];\nvar construct$3 = getBuiltIn$9('Reflect', 'construct');\nvar constructorRegExp = /^\\s*(?:class|function)\\b/;\nvar exec$2 = uncurryThis$i(constructorRegExp.exec);\nvar INCORRECT_TO_STRING = !constructorRegExp.test(noop);\n\nvar isConstructorModern = function isConstructor(argument) {\n  if (!isCallable$4(argument)) return false;\n  try {\n    construct$3(noop, empty, argument);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nvar isConstructorLegacy = function isConstructor(argument) {\n  if (!isCallable$4(argument)) return false;\n  switch (classof$a(argument)) {\n    case 'AsyncFunction':\n    case 'GeneratorFunction':\n    case 'AsyncGeneratorFunction': return false;\n  }\n  try {\n    // we can't check .prototype since constructors produced by .bind haven't it\n    // `Function#toString` throws on some built-it function in some legacy engines\n    // (for example, `DOMQuad` and similar in FF41-)\n    return INCORRECT_TO_STRING || !!exec$2(constructorRegExp, inspectSource(argument));\n  } catch (error) {\n    return true;\n  }\n};\n\nisConstructorLegacy.sham = true;\n\n// `IsConstructor` abstract operation\n// https://tc39.es/ecma262/#sec-isconstructor\nvar isConstructor$4 = !construct$3 || fails$l(function () {\n  var called;\n  return isConstructorModern(isConstructorModern.call)\n    || !isConstructorModern(Object)\n    || !isConstructorModern(function () { called = true; })\n    || called;\n}) ? isConstructorLegacy : isConstructorModern;\n\nvar toPropertyKey$1 = toPropertyKey$4;\nvar definePropertyModule$1 = objectDefineProperty;\nvar createPropertyDescriptor$1 = createPropertyDescriptor$5;\n\nvar createProperty$6 = function (object, key, value) {\n  var propertyKey = toPropertyKey$1(key);\n  if (propertyKey in object) definePropertyModule$1.f(object, propertyKey, createPropertyDescriptor$1(0, value));\n  else object[propertyKey] = value;\n};\n\nvar classof$9 = classof$d;\nvar getMethod = getMethod$3;\nvar isNullOrUndefined$3 = isNullOrUndefined$6;\nvar Iterators$2 = iterators;\nvar wellKnownSymbol$e = wellKnownSymbol$m;\n\nvar ITERATOR$3 = wellKnownSymbol$e('iterator');\n\nvar getIteratorMethod$9 = function (it) {\n  if (!isNullOrUndefined$3(it)) return getMethod(it, ITERATOR$3)\n    || getMethod(it, '@@iterator')\n    || Iterators$2[classof$9(it)];\n};\n\nvar call$6 = functionCall;\nvar aCallable$2 = aCallable$7;\nvar anObject$6 = anObject$d;\nvar tryToString$4 = tryToString$6;\nvar getIteratorMethod$8 = getIteratorMethod$9;\n\nvar $TypeError$9 = TypeError;\n\nvar getIterator$2 = function (argument, usingIterator) {\n  var iteratorMethod = arguments.length < 2 ? getIteratorMethod$8(argument) : usingIterator;\n  if (aCallable$2(iteratorMethod)) return anObject$6(call$6(iteratorMethod, argument));\n  throw new $TypeError$9(tryToString$4(argument) + ' is not iterable');\n};\n\nvar bind$7 = functionBindContext;\nvar call$5 = functionCall;\nvar toObject$a = toObject$e;\nvar callWithSafeIterationClosing = callWithSafeIterationClosing$1;\nvar isArrayIteratorMethod$1 = isArrayIteratorMethod$2;\nvar isConstructor$3 = isConstructor$4;\nvar lengthOfArrayLike$a = lengthOfArrayLike$c;\nvar createProperty$5 = createProperty$6;\nvar getIterator$1 = getIterator$2;\nvar getIteratorMethod$7 = getIteratorMethod$9;\n\nvar $Array$3 = Array;\n\n// `Array.from` method implementation\n// https://tc39.es/ecma262/#sec-array.from\nvar arrayFrom = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n  var O = toObject$a(arrayLike);\n  var IS_CONSTRUCTOR = isConstructor$3(this);\n  var argumentsLength = arguments.length;\n  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;\n  var mapping = mapfn !== undefined;\n  if (mapping) mapfn = bind$7(mapfn, argumentsLength > 2 ? arguments[2] : undefined);\n  var iteratorMethod = getIteratorMethod$7(O);\n  var index = 0;\n  var length, result, step, iterator, next, value;\n  // if the target is not iterable or it's an array with the default iterator - use a simple case\n  if (iteratorMethod && !(this === $Array$3 && isArrayIteratorMethod$1(iteratorMethod))) {\n    iterator = getIterator$1(O, iteratorMethod);\n    next = iterator.next;\n    result = IS_CONSTRUCTOR ? new this() : [];\n    for (;!(step = call$5(next, iterator)).done; index++) {\n      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;\n      createProperty$5(result, index, value);\n    }\n  } else {\n    length = lengthOfArrayLike$a(O);\n    result = IS_CONSTRUCTOR ? new this(length) : $Array$3(length);\n    for (;length > index; index++) {\n      value = mapping ? mapfn(O[index], index) : O[index];\n      createProperty$5(result, index, value);\n    }\n  }\n  result.length = index;\n  return result;\n};\n\nvar wellKnownSymbol$d = wellKnownSymbol$m;\n\nvar ITERATOR$2 = wellKnownSymbol$d('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var called = 0;\n  var iteratorWithReturn = {\n    next: function () {\n      return { done: !!called++ };\n    },\n    'return': function () {\n      SAFE_CLOSING = true;\n    }\n  };\n  iteratorWithReturn[ITERATOR$2] = function () {\n    return this;\n  };\n  // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing\n  Array.from(iteratorWithReturn, function () { throw 2; });\n} catch (error) { /* empty */ }\n\nvar checkCorrectnessOfIteration$1 = function (exec, SKIP_CLOSING) {\n  try {\n    if (!SKIP_CLOSING && !SAFE_CLOSING) return false;\n  } catch (error) { return false; } // workaround of old WebKit + `eval` bug\n  var ITERATION_SUPPORT = false;\n  try {\n    var object = {};\n    object[ITERATOR$2] = function () {\n      return {\n        next: function () {\n          return { done: ITERATION_SUPPORT = true };\n        }\n      };\n    };\n    exec(object);\n  } catch (error) { /* empty */ }\n  return ITERATION_SUPPORT;\n};\n\nvar $$L = _export;\nvar from$6 = arrayFrom;\nvar checkCorrectnessOfIteration = checkCorrectnessOfIteration$1;\n\nvar INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {\n  // eslint-disable-next-line es/no-array-from -- required for testing\n  Array.from(iterable);\n});\n\n// `Array.from` method\n// https://tc39.es/ecma262/#sec-array.from\n$$L({ target: 'Array', stat: true, forced: INCORRECT_ITERATION }, {\n  from: from$6\n});\n\nvar path$r = path$w;\n\nvar from$5 = path$r.Array.from;\n\nvar parent$19 = from$5;\n\nvar from$4 = parent$19;\n\nvar from$3 = from$4;\n\nvar _Array$from$1 = /*@__PURE__*/getDefaultExportFromCjs(from$3);\n\nvar toIndexedObject$5 = toIndexedObject$a;\nvar Iterators$1 = iterators;\nvar InternalStateModule$4 = internalState;\nobjectDefineProperty.f;\nvar defineIterator$1 = iteratorDefine;\nvar createIterResultObject$1 = createIterResultObject$3;\n\nvar ARRAY_ITERATOR = 'Array Iterator';\nvar setInternalState$4 = InternalStateModule$4.set;\nvar getInternalState$1 = InternalStateModule$4.getterFor(ARRAY_ITERATOR);\n\n// `Array.prototype.entries` method\n// https://tc39.es/ecma262/#sec-array.prototype.entries\n// `Array.prototype.keys` method\n// https://tc39.es/ecma262/#sec-array.prototype.keys\n// `Array.prototype.values` method\n// https://tc39.es/ecma262/#sec-array.prototype.values\n// `Array.prototype[@@iterator]` method\n// https://tc39.es/ecma262/#sec-array.prototype-@@iterator\n// `CreateArrayIterator` internal method\n// https://tc39.es/ecma262/#sec-createarrayiterator\ndefineIterator$1(Array, 'Array', function (iterated, kind) {\n  setInternalState$4(this, {\n    type: ARRAY_ITERATOR,\n    target: toIndexedObject$5(iterated), // target\n    index: 0,                          // next index\n    kind: kind                         // kind\n  });\n// `%ArrayIteratorPrototype%.next` method\n// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next\n}, function () {\n  var state = getInternalState$1(this);\n  var target = state.target;\n  var kind = state.kind;\n  var index = state.index++;\n  if (!target || index >= target.length) {\n    state.target = undefined;\n    return createIterResultObject$1(undefined, true);\n  }\n  switch (kind) {\n    case 'keys': return createIterResultObject$1(index, false);\n    case 'values': return createIterResultObject$1(target[index], false);\n  } return createIterResultObject$1([index, target[index]], false);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values%\n// https://tc39.es/ecma262/#sec-createunmappedargumentsobject\n// https://tc39.es/ecma262/#sec-createmappedargumentsobject\nIterators$1.Arguments = Iterators$1.Array;\n\nvar getIteratorMethod$6 = getIteratorMethod$9;\n\nvar getIteratorMethod_1 = getIteratorMethod$6;\n\n// iterable DOM collections\n// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods\nvar domIterables = {\n  CSSRuleList: 0,\n  CSSStyleDeclaration: 0,\n  CSSValueList: 0,\n  ClientRectList: 0,\n  DOMRectList: 0,\n  DOMStringList: 0,\n  DOMTokenList: 1,\n  DataTransferItemList: 0,\n  FileList: 0,\n  HTMLAllCollection: 0,\n  HTMLCollection: 0,\n  HTMLFormElement: 0,\n  HTMLSelectElement: 0,\n  MediaList: 0,\n  MimeTypeArray: 0,\n  NamedNodeMap: 0,\n  NodeList: 1,\n  PaintRequestList: 0,\n  Plugin: 0,\n  PluginArray: 0,\n  SVGLengthList: 0,\n  SVGNumberList: 0,\n  SVGPathSegList: 0,\n  SVGPointList: 0,\n  SVGStringList: 0,\n  SVGTransformList: 0,\n  SourceBufferList: 0,\n  StyleSheetList: 0,\n  TextTrackCueList: 0,\n  TextTrackList: 0,\n  TouchList: 0\n};\n\nvar DOMIterables$2 = domIterables;\nvar global$c = global$n;\nvar classof$8 = classof$d;\nvar createNonEnumerableProperty$1 = createNonEnumerableProperty$6;\nvar Iterators = iterators;\nvar wellKnownSymbol$c = wellKnownSymbol$m;\n\nvar TO_STRING_TAG = wellKnownSymbol$c('toStringTag');\n\nfor (var COLLECTION_NAME in DOMIterables$2) {\n  var Collection = global$c[COLLECTION_NAME];\n  var CollectionPrototype = Collection && Collection.prototype;\n  if (CollectionPrototype && classof$8(CollectionPrototype) !== TO_STRING_TAG) {\n    createNonEnumerableProperty$1(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);\n  }\n  Iterators[COLLECTION_NAME] = Iterators.Array;\n}\n\nvar parent$18 = getIteratorMethod_1;\n\n\nvar getIteratorMethod$5 = parent$18;\n\nvar parent$17 = getIteratorMethod$5;\n\nvar getIteratorMethod$4 = parent$17;\n\nvar parent$16 = getIteratorMethod$4;\n\nvar getIteratorMethod$3 = parent$16;\n\nvar getIteratorMethod$2 = getIteratorMethod$3;\n\nvar _getIteratorMethod$1 = /*@__PURE__*/getDefaultExportFromCjs(getIteratorMethod$2);\n\nvar getIteratorMethod$1 = getIteratorMethod$2;\n\nvar _getIteratorMethod = /*@__PURE__*/getDefaultExportFromCjs(getIteratorMethod$1);\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar defineProperty$c = {exports: {}};\n\nvar $$K = _export;\nvar DESCRIPTORS$9 = descriptors;\nvar defineProperty$b = objectDefineProperty.f;\n\n// `Object.defineProperty` method\n// https://tc39.es/ecma262/#sec-object.defineproperty\n// eslint-disable-next-line es/no-object-defineproperty -- safe\n$$K({ target: 'Object', stat: true, forced: Object.defineProperty !== defineProperty$b, sham: !DESCRIPTORS$9 }, {\n  defineProperty: defineProperty$b\n});\n\nvar path$q = path$w;\n\nvar Object$5 = path$q.Object;\n\nvar defineProperty$a = defineProperty$c.exports = function defineProperty(it, key, desc) {\n  return Object$5.defineProperty(it, key, desc);\n};\n\nif (Object$5.defineProperty.sham) defineProperty$a.sham = true;\n\nvar definePropertyExports = defineProperty$c.exports;\n\nvar parent$15 = definePropertyExports;\n\nvar defineProperty$9 = parent$15;\n\nvar parent$14 = defineProperty$9;\n\nvar defineProperty$8 = parent$14;\n\nvar parent$13 = defineProperty$8;\n\nvar defineProperty$7 = parent$13;\n\nvar defineProperty$6 = defineProperty$7;\n\nvar _Object$defineProperty$1 = /*@__PURE__*/getDefaultExportFromCjs(defineProperty$6);\n\nvar classof$7 = classofRaw$2;\n\n// `IsArray` abstract operation\n// https://tc39.es/ecma262/#sec-isarray\n// eslint-disable-next-line es/no-array-isarray -- safe\nvar isArray$e = Array.isArray || function isArray(argument) {\n  return classof$7(argument) === 'Array';\n};\n\nvar $TypeError$8 = TypeError;\nvar MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF; // 2 ** 53 - 1 == 9007199254740991\n\nvar doesNotExceedSafeInteger$3 = function (it) {\n  if (it > MAX_SAFE_INTEGER) throw $TypeError$8('Maximum allowed index exceeded');\n  return it;\n};\n\nvar isArray$d = isArray$e;\nvar isConstructor$2 = isConstructor$4;\nvar isObject$b = isObject$j;\nvar wellKnownSymbol$b = wellKnownSymbol$m;\n\nvar SPECIES$3 = wellKnownSymbol$b('species');\nvar $Array$2 = Array;\n\n// a part of `ArraySpeciesCreate` abstract operation\n// https://tc39.es/ecma262/#sec-arrayspeciescreate\nvar arraySpeciesConstructor$1 = function (originalArray) {\n  var C;\n  if (isArray$d(originalArray)) {\n    C = originalArray.constructor;\n    // cross-realm fallback\n    if (isConstructor$2(C) && (C === $Array$2 || isArray$d(C.prototype))) C = undefined;\n    else if (isObject$b(C)) {\n      C = C[SPECIES$3];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? $Array$2 : C;\n};\n\nvar arraySpeciesConstructor = arraySpeciesConstructor$1;\n\n// `ArraySpeciesCreate` abstract operation\n// https://tc39.es/ecma262/#sec-arrayspeciescreate\nvar arraySpeciesCreate$3 = function (originalArray, length) {\n  return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);\n};\n\nvar fails$k = fails$w;\nvar wellKnownSymbol$a = wellKnownSymbol$m;\nvar V8_VERSION$1 = engineV8Version;\n\nvar SPECIES$2 = wellKnownSymbol$a('species');\n\nvar arrayMethodHasSpeciesSupport$5 = function (METHOD_NAME) {\n  // We can't use this feature detection in V8 since it causes\n  // deoptimization and serious performance degradation\n  // https://github.com/zloirock/core-js/issues/677\n  return V8_VERSION$1 >= 51 || !fails$k(function () {\n    var array = [];\n    var constructor = array.constructor = {};\n    constructor[SPECIES$2] = function () {\n      return { foo: 1 };\n    };\n    return array[METHOD_NAME](Boolean).foo !== 1;\n  });\n};\n\nvar $$J = _export;\nvar fails$j = fails$w;\nvar isArray$c = isArray$e;\nvar isObject$a = isObject$j;\nvar toObject$9 = toObject$e;\nvar lengthOfArrayLike$9 = lengthOfArrayLike$c;\nvar doesNotExceedSafeInteger$2 = doesNotExceedSafeInteger$3;\nvar createProperty$4 = createProperty$6;\nvar arraySpeciesCreate$2 = arraySpeciesCreate$3;\nvar arrayMethodHasSpeciesSupport$4 = arrayMethodHasSpeciesSupport$5;\nvar wellKnownSymbol$9 = wellKnownSymbol$m;\nvar V8_VERSION = engineV8Version;\n\nvar IS_CONCAT_SPREADABLE = wellKnownSymbol$9('isConcatSpreadable');\n\n// We can't use this feature detection in V8 since it causes\n// deoptimization and serious performance degradation\n// https://github.com/zloirock/core-js/issues/679\nvar IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails$j(function () {\n  var array = [];\n  array[IS_CONCAT_SPREADABLE] = false;\n  return array.concat()[0] !== array;\n});\n\nvar isConcatSpreadable = function (O) {\n  if (!isObject$a(O)) return false;\n  var spreadable = O[IS_CONCAT_SPREADABLE];\n  return spreadable !== undefined ? !!spreadable : isArray$c(O);\n};\n\nvar FORCED$a = !IS_CONCAT_SPREADABLE_SUPPORT || !arrayMethodHasSpeciesSupport$4('concat');\n\n// `Array.prototype.concat` method\n// https://tc39.es/ecma262/#sec-array.prototype.concat\n// with adding support of @@isConcatSpreadable and @@species\n$$J({ target: 'Array', proto: true, arity: 1, forced: FORCED$a }, {\n  // eslint-disable-next-line no-unused-vars -- required for `.length`\n  concat: function concat(arg) {\n    var O = toObject$9(this);\n    var A = arraySpeciesCreate$2(O, 0);\n    var n = 0;\n    var i, k, length, len, E;\n    for (i = -1, length = arguments.length; i < length; i++) {\n      E = i === -1 ? O : arguments[i];\n      if (isConcatSpreadable(E)) {\n        len = lengthOfArrayLike$9(E);\n        doesNotExceedSafeInteger$2(n + len);\n        for (k = 0; k < len; k++, n++) if (k in E) createProperty$4(A, n, E[k]);\n      } else {\n        doesNotExceedSafeInteger$2(n + 1);\n        createProperty$4(A, n++, E);\n      }\n    }\n    A.length = n;\n    return A;\n  }\n});\n\nvar objectGetOwnPropertyNames = {};\n\nvar internalObjectKeys = objectKeysInternal;\nvar enumBugKeys = enumBugKeys$3;\n\nvar hiddenKeys$2 = enumBugKeys.concat('length', 'prototype');\n\n// `Object.getOwnPropertyNames` method\n// https://tc39.es/ecma262/#sec-object.getownpropertynames\n// eslint-disable-next-line es/no-object-getownpropertynames -- safe\nobjectGetOwnPropertyNames.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return internalObjectKeys(O, hiddenKeys$2);\n};\n\nvar objectGetOwnPropertyNamesExternal = {};\n\nvar toAbsoluteIndex$3 = toAbsoluteIndex$5;\nvar lengthOfArrayLike$8 = lengthOfArrayLike$c;\nvar createProperty$3 = createProperty$6;\n\nvar $Array$1 = Array;\nvar max$2 = Math.max;\n\nvar arraySliceSimple = function (O, start, end) {\n  var length = lengthOfArrayLike$8(O);\n  var k = toAbsoluteIndex$3(start, length);\n  var fin = toAbsoluteIndex$3(end === undefined ? length : end, length);\n  var result = $Array$1(max$2(fin - k, 0));\n  var n = 0;\n  for (; k < fin; k++, n++) createProperty$3(result, n, O[k]);\n  result.length = n;\n  return result;\n};\n\n/* eslint-disable es/no-object-getownpropertynames -- safe */\nvar classof$6 = classofRaw$2;\nvar toIndexedObject$4 = toIndexedObject$a;\nvar $getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;\nvar arraySlice$3 = arraySliceSimple;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return $getOwnPropertyNames$1(it);\n  } catch (error) {\n    return arraySlice$3(windowNames);\n  }\n};\n\n// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nobjectGetOwnPropertyNamesExternal.f = function getOwnPropertyNames(it) {\n  return windowNames && classof$6(it) === 'Window'\n    ? getWindowNames(it)\n    : $getOwnPropertyNames$1(toIndexedObject$4(it));\n};\n\nvar defineProperty$5 = objectDefineProperty;\n\nvar defineBuiltInAccessor$3 = function (target, name, descriptor) {\n  return defineProperty$5.f(target, name, descriptor);\n};\n\nvar wellKnownSymbolWrapped = {};\n\nvar wellKnownSymbol$8 = wellKnownSymbol$m;\n\nwellKnownSymbolWrapped.f = wellKnownSymbol$8;\n\nvar path$p = path$w;\nvar hasOwn$8 = hasOwnProperty_1;\nvar wrappedWellKnownSymbolModule$1 = wellKnownSymbolWrapped;\nvar defineProperty$4 = objectDefineProperty.f;\n\nvar wellKnownSymbolDefine = function (NAME) {\n  var Symbol = path$p.Symbol || (path$p.Symbol = {});\n  if (!hasOwn$8(Symbol, NAME)) defineProperty$4(Symbol, NAME, {\n    value: wrappedWellKnownSymbolModule$1.f(NAME)\n  });\n};\n\nvar call$4 = functionCall;\nvar getBuiltIn$8 = getBuiltIn$c;\nvar wellKnownSymbol$7 = wellKnownSymbol$m;\nvar defineBuiltIn$2 = defineBuiltIn$5;\n\nvar symbolDefineToPrimitive = function () {\n  var Symbol = getBuiltIn$8('Symbol');\n  var SymbolPrototype = Symbol && Symbol.prototype;\n  var valueOf = SymbolPrototype && SymbolPrototype.valueOf;\n  var TO_PRIMITIVE = wellKnownSymbol$7('toPrimitive');\n\n  if (SymbolPrototype && !SymbolPrototype[TO_PRIMITIVE]) {\n    // `Symbol.prototype[@@toPrimitive]` method\n    // https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive\n    // eslint-disable-next-line no-unused-vars -- required for .length\n    defineBuiltIn$2(SymbolPrototype, TO_PRIMITIVE, function (hint) {\n      return call$4(valueOf, this);\n    }, { arity: 1 });\n  }\n};\n\nvar bind$6 = functionBindContext;\nvar uncurryThis$h = functionUncurryThis;\nvar IndexedObject$1 = indexedObject;\nvar toObject$8 = toObject$e;\nvar lengthOfArrayLike$7 = lengthOfArrayLike$c;\nvar arraySpeciesCreate$1 = arraySpeciesCreate$3;\n\nvar push$a = uncurryThis$h([].push);\n\n// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation\nvar createMethod$2 = function (TYPE) {\n  var IS_MAP = TYPE === 1;\n  var IS_FILTER = TYPE === 2;\n  var IS_SOME = TYPE === 3;\n  var IS_EVERY = TYPE === 4;\n  var IS_FIND_INDEX = TYPE === 6;\n  var IS_FILTER_REJECT = TYPE === 7;\n  var NO_HOLES = TYPE === 5 || IS_FIND_INDEX;\n  return function ($this, callbackfn, that, specificCreate) {\n    var O = toObject$8($this);\n    var self = IndexedObject$1(O);\n    var boundFunction = bind$6(callbackfn, that);\n    var length = lengthOfArrayLike$7(self);\n    var index = 0;\n    var create = specificCreate || arraySpeciesCreate$1;\n    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;\n    var value, result;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      value = self[index];\n      result = boundFunction(value, index, O);\n      if (TYPE) {\n        if (IS_MAP) target[index] = result; // map\n        else if (result) switch (TYPE) {\n          case 3: return true;              // some\n          case 5: return value;             // find\n          case 6: return index;             // findIndex\n          case 2: push$a(target, value);      // filter\n        } else switch (TYPE) {\n          case 4: return false;             // every\n          case 7: push$a(target, value);      // filterReject\n        }\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;\n  };\n};\n\nvar arrayIteration = {\n  // `Array.prototype.forEach` method\n  // https://tc39.es/ecma262/#sec-array.prototype.foreach\n  forEach: createMethod$2(0),\n  // `Array.prototype.map` method\n  // https://tc39.es/ecma262/#sec-array.prototype.map\n  map: createMethod$2(1),\n  // `Array.prototype.filter` method\n  // https://tc39.es/ecma262/#sec-array.prototype.filter\n  filter: createMethod$2(2),\n  // `Array.prototype.some` method\n  // https://tc39.es/ecma262/#sec-array.prototype.some\n  some: createMethod$2(3),\n  // `Array.prototype.every` method\n  // https://tc39.es/ecma262/#sec-array.prototype.every\n  every: createMethod$2(4),\n  // `Array.prototype.find` method\n  // https://tc39.es/ecma262/#sec-array.prototype.find\n  find: createMethod$2(5),\n  // `Array.prototype.findIndex` method\n  // https://tc39.es/ecma262/#sec-array.prototype.findIndex\n  findIndex: createMethod$2(6),\n  // `Array.prototype.filterReject` method\n  // https://github.com/tc39/proposal-array-filtering\n  filterReject: createMethod$2(7)\n};\n\nvar $$I = _export;\nvar global$b = global$n;\nvar call$3 = functionCall;\nvar uncurryThis$g = functionUncurryThis;\nvar DESCRIPTORS$8 = descriptors;\nvar NATIVE_SYMBOL$3 = symbolConstructorDetection;\nvar fails$i = fails$w;\nvar hasOwn$7 = hasOwnProperty_1;\nvar isPrototypeOf$i = objectIsPrototypeOf;\nvar anObject$5 = anObject$d;\nvar toIndexedObject$3 = toIndexedObject$a;\nvar toPropertyKey = toPropertyKey$4;\nvar $toString = toString$a;\nvar createPropertyDescriptor = createPropertyDescriptor$5;\nvar nativeObjectCreate = objectCreate;\nvar objectKeys = objectKeys$3;\nvar getOwnPropertyNamesModule$2 = objectGetOwnPropertyNames;\nvar getOwnPropertyNamesExternal = objectGetOwnPropertyNamesExternal;\nvar getOwnPropertySymbolsModule$2 = objectGetOwnPropertySymbols;\nvar getOwnPropertyDescriptorModule$2 = objectGetOwnPropertyDescriptor;\nvar definePropertyModule = objectDefineProperty;\nvar definePropertiesModule = objectDefineProperties;\nvar propertyIsEnumerableModule = objectPropertyIsEnumerable;\nvar defineBuiltIn$1 = defineBuiltIn$5;\nvar defineBuiltInAccessor$2 = defineBuiltInAccessor$3;\nvar shared$3 = sharedExports;\nvar sharedKey = sharedKey$4;\nvar hiddenKeys$1 = hiddenKeys$6;\nvar uid$1 = uid$4;\nvar wellKnownSymbol$6 = wellKnownSymbol$m;\nvar wrappedWellKnownSymbolModule = wellKnownSymbolWrapped;\nvar defineWellKnownSymbol$l = wellKnownSymbolDefine;\nvar defineSymbolToPrimitive$1 = symbolDefineToPrimitive;\nvar setToStringTag$3 = setToStringTag$6;\nvar InternalStateModule$3 = internalState;\nvar $forEach$1 = arrayIteration.forEach;\n\nvar HIDDEN = sharedKey('hidden');\nvar SYMBOL = 'Symbol';\nvar PROTOTYPE = 'prototype';\n\nvar setInternalState$3 = InternalStateModule$3.set;\nvar getInternalState = InternalStateModule$3.getterFor(SYMBOL);\n\nvar ObjectPrototype$1 = Object[PROTOTYPE];\nvar $Symbol = global$b.Symbol;\nvar SymbolPrototype = $Symbol && $Symbol[PROTOTYPE];\nvar RangeError$1 = global$b.RangeError;\nvar TypeError$1 = global$b.TypeError;\nvar QObject = global$b.QObject;\nvar nativeGetOwnPropertyDescriptor$1 = getOwnPropertyDescriptorModule$2.f;\nvar nativeDefineProperty = definePropertyModule.f;\nvar nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;\nvar nativePropertyIsEnumerable = propertyIsEnumerableModule.f;\nvar push$9 = uncurryThis$g([].push);\n\nvar AllSymbols = shared$3('symbols');\nvar ObjectPrototypeSymbols = shared$3('op-symbols');\nvar WellKnownSymbolsStore$1 = shared$3('wks');\n\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar fallbackDefineProperty = function (O, P, Attributes) {\n  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor$1(ObjectPrototype$1, P);\n  if (ObjectPrototypeDescriptor) delete ObjectPrototype$1[P];\n  nativeDefineProperty(O, P, Attributes);\n  if (ObjectPrototypeDescriptor && O !== ObjectPrototype$1) {\n    nativeDefineProperty(ObjectPrototype$1, P, ObjectPrototypeDescriptor);\n  }\n};\n\nvar setSymbolDescriptor = DESCRIPTORS$8 && fails$i(function () {\n  return nativeObjectCreate(nativeDefineProperty({}, 'a', {\n    get: function () { return nativeDefineProperty(this, 'a', { value: 7 }).a; }\n  })).a !== 7;\n}) ? fallbackDefineProperty : nativeDefineProperty;\n\nvar wrap = function (tag, description) {\n  var symbol = AllSymbols[tag] = nativeObjectCreate(SymbolPrototype);\n  setInternalState$3(symbol, {\n    type: SYMBOL,\n    tag: tag,\n    description: description\n  });\n  if (!DESCRIPTORS$8) symbol.description = description;\n  return symbol;\n};\n\nvar $defineProperty = function defineProperty(O, P, Attributes) {\n  if (O === ObjectPrototype$1) $defineProperty(ObjectPrototypeSymbols, P, Attributes);\n  anObject$5(O);\n  var key = toPropertyKey(P);\n  anObject$5(Attributes);\n  if (hasOwn$7(AllSymbols, key)) {\n    if (!Attributes.enumerable) {\n      if (!hasOwn$7(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));\n      O[HIDDEN][key] = true;\n    } else {\n      if (hasOwn$7(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;\n      Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });\n    } return setSymbolDescriptor(O, key, Attributes);\n  } return nativeDefineProperty(O, key, Attributes);\n};\n\nvar $defineProperties = function defineProperties(O, Properties) {\n  anObject$5(O);\n  var properties = toIndexedObject$3(Properties);\n  var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));\n  $forEach$1(keys, function (key) {\n    if (!DESCRIPTORS$8 || call$3($propertyIsEnumerable, properties, key)) $defineProperty(O, key, properties[key]);\n  });\n  return O;\n};\n\nvar $create = function create(O, Properties) {\n  return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);\n};\n\nvar $propertyIsEnumerable = function propertyIsEnumerable(V) {\n  var P = toPropertyKey(V);\n  var enumerable = call$3(nativePropertyIsEnumerable, this, P);\n  if (this === ObjectPrototype$1 && hasOwn$7(AllSymbols, P) && !hasOwn$7(ObjectPrototypeSymbols, P)) return false;\n  return enumerable || !hasOwn$7(this, P) || !hasOwn$7(AllSymbols, P) || hasOwn$7(this, HIDDEN) && this[HIDDEN][P]\n    ? enumerable : true;\n};\n\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {\n  var it = toIndexedObject$3(O);\n  var key = toPropertyKey(P);\n  if (it === ObjectPrototype$1 && hasOwn$7(AllSymbols, key) && !hasOwn$7(ObjectPrototypeSymbols, key)) return;\n  var descriptor = nativeGetOwnPropertyDescriptor$1(it, key);\n  if (descriptor && hasOwn$7(AllSymbols, key) && !(hasOwn$7(it, HIDDEN) && it[HIDDEN][key])) {\n    descriptor.enumerable = true;\n  }\n  return descriptor;\n};\n\nvar $getOwnPropertyNames = function getOwnPropertyNames(O) {\n  var names = nativeGetOwnPropertyNames(toIndexedObject$3(O));\n  var result = [];\n  $forEach$1(names, function (key) {\n    if (!hasOwn$7(AllSymbols, key) && !hasOwn$7(hiddenKeys$1, key)) push$9(result, key);\n  });\n  return result;\n};\n\nvar $getOwnPropertySymbols = function (O) {\n  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype$1;\n  var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject$3(O));\n  var result = [];\n  $forEach$1(names, function (key) {\n    if (hasOwn$7(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || hasOwn$7(ObjectPrototype$1, key))) {\n      push$9(result, AllSymbols[key]);\n    }\n  });\n  return result;\n};\n\n// `Symbol` constructor\n// https://tc39.es/ecma262/#sec-symbol-constructor\nif (!NATIVE_SYMBOL$3) {\n  $Symbol = function Symbol() {\n    if (isPrototypeOf$i(SymbolPrototype, this)) throw new TypeError$1('Symbol is not a constructor');\n    var description = !arguments.length || arguments[0] === undefined ? undefined : $toString(arguments[0]);\n    var tag = uid$1(description);\n    var setter = function (value) {\n      if (this === ObjectPrototype$1) call$3(setter, ObjectPrototypeSymbols, value);\n      if (hasOwn$7(this, HIDDEN) && hasOwn$7(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      var descriptor = createPropertyDescriptor(1, value);\n      try {\n        setSymbolDescriptor(this, tag, descriptor);\n      } catch (error) {\n        if (!(error instanceof RangeError$1)) throw error;\n        fallbackDefineProperty(this, tag, descriptor);\n      }\n    };\n    if (DESCRIPTORS$8 && USE_SETTER) setSymbolDescriptor(ObjectPrototype$1, tag, { configurable: true, set: setter });\n    return wrap(tag, description);\n  };\n\n  SymbolPrototype = $Symbol[PROTOTYPE];\n\n  defineBuiltIn$1(SymbolPrototype, 'toString', function toString() {\n    return getInternalState(this).tag;\n  });\n\n  defineBuiltIn$1($Symbol, 'withoutSetter', function (description) {\n    return wrap(uid$1(description), description);\n  });\n\n  propertyIsEnumerableModule.f = $propertyIsEnumerable;\n  definePropertyModule.f = $defineProperty;\n  definePropertiesModule.f = $defineProperties;\n  getOwnPropertyDescriptorModule$2.f = $getOwnPropertyDescriptor;\n  getOwnPropertyNamesModule$2.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;\n  getOwnPropertySymbolsModule$2.f = $getOwnPropertySymbols;\n\n  wrappedWellKnownSymbolModule.f = function (name) {\n    return wrap(wellKnownSymbol$6(name), name);\n  };\n\n  if (DESCRIPTORS$8) {\n    // https://github.com/tc39/proposal-Symbol-description\n    defineBuiltInAccessor$2(SymbolPrototype, 'description', {\n      configurable: true,\n      get: function description() {\n        return getInternalState(this).description;\n      }\n    });\n  }\n}\n\n$$I({ global: true, constructor: true, wrap: true, forced: !NATIVE_SYMBOL$3, sham: !NATIVE_SYMBOL$3 }, {\n  Symbol: $Symbol\n});\n\n$forEach$1(objectKeys(WellKnownSymbolsStore$1), function (name) {\n  defineWellKnownSymbol$l(name);\n});\n\n$$I({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL$3 }, {\n  useSetter: function () { USE_SETTER = true; },\n  useSimple: function () { USE_SETTER = false; }\n});\n\n$$I({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL$3, sham: !DESCRIPTORS$8 }, {\n  // `Object.create` method\n  // https://tc39.es/ecma262/#sec-object.create\n  create: $create,\n  // `Object.defineProperty` method\n  // https://tc39.es/ecma262/#sec-object.defineproperty\n  defineProperty: $defineProperty,\n  // `Object.defineProperties` method\n  // https://tc39.es/ecma262/#sec-object.defineproperties\n  defineProperties: $defineProperties,\n  // `Object.getOwnPropertyDescriptor` method\n  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor\n});\n\n$$I({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL$3 }, {\n  // `Object.getOwnPropertyNames` method\n  // https://tc39.es/ecma262/#sec-object.getownpropertynames\n  getOwnPropertyNames: $getOwnPropertyNames\n});\n\n// `Symbol.prototype[@@toPrimitive]` method\n// https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive\ndefineSymbolToPrimitive$1();\n\n// `Symbol.prototype[@@toStringTag]` property\n// https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag\nsetToStringTag$3($Symbol, SYMBOL);\n\nhiddenKeys$1[HIDDEN] = true;\n\nvar NATIVE_SYMBOL$2 = symbolConstructorDetection;\n\n/* eslint-disable es/no-symbol -- safe */\nvar symbolRegistryDetection = NATIVE_SYMBOL$2 && !!Symbol['for'] && !!Symbol.keyFor;\n\nvar $$H = _export;\nvar getBuiltIn$7 = getBuiltIn$c;\nvar hasOwn$6 = hasOwnProperty_1;\nvar toString$6 = toString$a;\nvar shared$2 = sharedExports;\nvar NATIVE_SYMBOL_REGISTRY$1 = symbolRegistryDetection;\n\nvar StringToSymbolRegistry = shared$2('string-to-symbol-registry');\nvar SymbolToStringRegistry$1 = shared$2('symbol-to-string-registry');\n\n// `Symbol.for` method\n// https://tc39.es/ecma262/#sec-symbol.for\n$$H({ target: 'Symbol', stat: true, forced: !NATIVE_SYMBOL_REGISTRY$1 }, {\n  'for': function (key) {\n    var string = toString$6(key);\n    if (hasOwn$6(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];\n    var symbol = getBuiltIn$7('Symbol')(string);\n    StringToSymbolRegistry[string] = symbol;\n    SymbolToStringRegistry$1[symbol] = string;\n    return symbol;\n  }\n});\n\nvar $$G = _export;\nvar hasOwn$5 = hasOwnProperty_1;\nvar isSymbol$2 = isSymbol$5;\nvar tryToString$3 = tryToString$6;\nvar shared$1 = sharedExports;\nvar NATIVE_SYMBOL_REGISTRY = symbolRegistryDetection;\n\nvar SymbolToStringRegistry = shared$1('symbol-to-string-registry');\n\n// `Symbol.keyFor` method\n// https://tc39.es/ecma262/#sec-symbol.keyfor\n$$G({ target: 'Symbol', stat: true, forced: !NATIVE_SYMBOL_REGISTRY }, {\n  keyFor: function keyFor(sym) {\n    if (!isSymbol$2(sym)) throw new TypeError(tryToString$3(sym) + ' is not a symbol');\n    if (hasOwn$5(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];\n  }\n});\n\nvar uncurryThis$f = functionUncurryThis;\nvar isArray$b = isArray$e;\nvar isCallable$3 = isCallable$i;\nvar classof$5 = classofRaw$2;\nvar toString$5 = toString$a;\n\nvar push$8 = uncurryThis$f([].push);\n\nvar getJsonReplacerFunction = function (replacer) {\n  if (isCallable$3(replacer)) return replacer;\n  if (!isArray$b(replacer)) return;\n  var rawLength = replacer.length;\n  var keys = [];\n  for (var i = 0; i < rawLength; i++) {\n    var element = replacer[i];\n    if (typeof element == 'string') push$8(keys, element);\n    else if (typeof element == 'number' || classof$5(element) === 'Number' || classof$5(element) === 'String') push$8(keys, toString$5(element));\n  }\n  var keysLength = keys.length;\n  var root = true;\n  return function (key, value) {\n    if (root) {\n      root = false;\n      return value;\n    }\n    if (isArray$b(this)) return value;\n    for (var j = 0; j < keysLength; j++) if (keys[j] === key) return value;\n  };\n};\n\nvar $$F = _export;\nvar getBuiltIn$6 = getBuiltIn$c;\nvar apply$3 = functionApply;\nvar call$2 = functionCall;\nvar uncurryThis$e = functionUncurryThis;\nvar fails$h = fails$w;\nvar isCallable$2 = isCallable$i;\nvar isSymbol$1 = isSymbol$5;\nvar arraySlice$2 = arraySlice$5;\nvar getReplacerFunction = getJsonReplacerFunction;\nvar NATIVE_SYMBOL$1 = symbolConstructorDetection;\n\nvar $String = String;\nvar $stringify = getBuiltIn$6('JSON', 'stringify');\nvar exec$1 = uncurryThis$e(/./.exec);\nvar charAt$1 = uncurryThis$e(''.charAt);\nvar charCodeAt = uncurryThis$e(''.charCodeAt);\nvar replace$1 = uncurryThis$e(''.replace);\nvar numberToString = uncurryThis$e(1.0.toString);\n\nvar tester = /[\\uD800-\\uDFFF]/g;\nvar low = /^[\\uD800-\\uDBFF]$/;\nvar hi = /^[\\uDC00-\\uDFFF]$/;\n\nvar WRONG_SYMBOLS_CONVERSION = !NATIVE_SYMBOL$1 || fails$h(function () {\n  var symbol = getBuiltIn$6('Symbol')('stringify detection');\n  // MS Edge converts symbol values to JSON as {}\n  return $stringify([symbol]) !== '[null]'\n    // WebKit converts symbol values to JSON as null\n    || $stringify({ a: symbol }) !== '{}'\n    // V8 throws on boxed symbols\n    || $stringify(Object(symbol)) !== '{}';\n});\n\n// https://github.com/tc39/proposal-well-formed-stringify\nvar ILL_FORMED_UNICODE = fails$h(function () {\n  return $stringify('\\uDF06\\uD834') !== '\"\\\\udf06\\\\ud834\"'\n    || $stringify('\\uDEAD') !== '\"\\\\udead\"';\n});\n\nvar stringifyWithSymbolsFix = function (it, replacer) {\n  var args = arraySlice$2(arguments);\n  var $replacer = getReplacerFunction(replacer);\n  if (!isCallable$2($replacer) && (it === undefined || isSymbol$1(it))) return; // IE8 returns string on undefined\n  args[1] = function (key, value) {\n    // some old implementations (like WebKit) could pass numbers as keys\n    if (isCallable$2($replacer)) value = call$2($replacer, this, $String(key), value);\n    if (!isSymbol$1(value)) return value;\n  };\n  return apply$3($stringify, null, args);\n};\n\nvar fixIllFormed = function (match, offset, string) {\n  var prev = charAt$1(string, offset - 1);\n  var next = charAt$1(string, offset + 1);\n  if ((exec$1(low, match) && !exec$1(hi, next)) || (exec$1(hi, match) && !exec$1(low, prev))) {\n    return '\\\\u' + numberToString(charCodeAt(match, 0), 16);\n  } return match;\n};\n\nif ($stringify) {\n  // `JSON.stringify` method\n  // https://tc39.es/ecma262/#sec-json.stringify\n  $$F({ target: 'JSON', stat: true, arity: 3, forced: WRONG_SYMBOLS_CONVERSION || ILL_FORMED_UNICODE }, {\n    // eslint-disable-next-line no-unused-vars -- required for `.length`\n    stringify: function stringify(it, replacer, space) {\n      var args = arraySlice$2(arguments);\n      var result = apply$3(WRONG_SYMBOLS_CONVERSION ? stringifyWithSymbolsFix : $stringify, null, args);\n      return ILL_FORMED_UNICODE && typeof result == 'string' ? replace$1(result, tester, fixIllFormed) : result;\n    }\n  });\n}\n\nvar $$E = _export;\nvar NATIVE_SYMBOL = symbolConstructorDetection;\nvar fails$g = fails$w;\nvar getOwnPropertySymbolsModule$1 = objectGetOwnPropertySymbols;\nvar toObject$7 = toObject$e;\n\n// V8 ~ Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives\n// https://bugs.chromium.org/p/v8/issues/detail?id=3443\nvar FORCED$9 = !NATIVE_SYMBOL || fails$g(function () { getOwnPropertySymbolsModule$1.f(1); });\n\n// `Object.getOwnPropertySymbols` method\n// https://tc39.es/ecma262/#sec-object.getownpropertysymbols\n$$E({ target: 'Object', stat: true, forced: FORCED$9 }, {\n  getOwnPropertySymbols: function getOwnPropertySymbols(it) {\n    var $getOwnPropertySymbols = getOwnPropertySymbolsModule$1.f;\n    return $getOwnPropertySymbols ? $getOwnPropertySymbols(toObject$7(it)) : [];\n  }\n});\n\nvar defineWellKnownSymbol$k = wellKnownSymbolDefine;\n\n// `Symbol.asyncIterator` well-known symbol\n// https://tc39.es/ecma262/#sec-symbol.asynciterator\ndefineWellKnownSymbol$k('asyncIterator');\n\nvar defineWellKnownSymbol$j = wellKnownSymbolDefine;\n\n// `Symbol.hasInstance` well-known symbol\n// https://tc39.es/ecma262/#sec-symbol.hasinstance\ndefineWellKnownSymbol$j('hasInstance');\n\nvar defineWellKnownSymbol$i = wellKnownSymbolDefine;\n\n// `Symbol.isConcatSpreadable` well-known symbol\n// https://tc39.es/ecma262/#sec-symbol.isconcatspreadable\ndefineWellKnownSymbol$i('isConcatSpreadable');\n\nvar defineWellKnownSymbol$h = wellKnownSymbolDefine;\n\n// `Symbol.iterator` well-known symbol\n// https://tc39.es/ecma262/#sec-symbol.iterator\ndefineWellKnownSymbol$h('iterator');\n\nvar defineWellKnownSymbol$g = wellKnownSymbolDefine;\n\n// `Symbol.match` well-known symbol\n// https://tc39.es/ecma262/#sec-symbol.match\ndefineWellKnownSymbol$g('match');\n\nvar defineWellKnownSymbol$f = wellKnownSymbolDefine;\n\n// `Symbol.matchAll` well-known symbol\n// https://tc39.es/ecma262/#sec-symbol.matchall\ndefineWellKnownSymbol$f('matchAll');\n\nvar defineWellKnownSymbol$e = wellKnownSymbolDefine;\n\n// `Symbol.replace` well-known symbol\n// https://tc39.es/ecma262/#sec-symbol.replace\ndefineWellKnownSymbol$e('replace');\n\nvar defineWellKnownSymbol$d = wellKnownSymbolDefine;\n\n// `Symbol.search` well-known symbol\n// https://tc39.es/ecma262/#sec-symbol.search\ndefineWellKnownSymbol$d('search');\n\nvar defineWellKnownSymbol$c = wellKnownSymbolDefine;\n\n// `Symbol.species` well-known symbol\n// https://tc39.es/ecma262/#sec-symbol.species\ndefineWellKnownSymbol$c('species');\n\nvar defineWellKnownSymbol$b = wellKnownSymbolDefine;\n\n// `Symbol.split` well-known symbol\n// https://tc39.es/ecma262/#sec-symbol.split\ndefineWellKnownSymbol$b('split');\n\nvar defineWellKnownSymbol$a = wellKnownSymbolDefine;\nvar defineSymbolToPrimitive = symbolDefineToPrimitive;\n\n// `Symbol.toPrimitive` well-known symbol\n// https://tc39.es/ecma262/#sec-symbol.toprimitive\ndefineWellKnownSymbol$a('toPrimitive');\n\n// `Symbol.prototype[@@toPrimitive]` method\n// https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive\ndefineSymbolToPrimitive();\n\nvar getBuiltIn$5 = getBuiltIn$c;\nvar defineWellKnownSymbol$9 = wellKnownSymbolDefine;\nvar setToStringTag$2 = setToStringTag$6;\n\n// `Symbol.toStringTag` well-known symbol\n// https://tc39.es/ecma262/#sec-symbol.tostringtag\ndefineWellKnownSymbol$9('toStringTag');\n\n// `Symbol.prototype[@@toStringTag]` property\n// https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag\nsetToStringTag$2(getBuiltIn$5('Symbol'), 'Symbol');\n\nvar defineWellKnownSymbol$8 = wellKnownSymbolDefine;\n\n// `Symbol.unscopables` well-known symbol\n// https://tc39.es/ecma262/#sec-symbol.unscopables\ndefineWellKnownSymbol$8('unscopables');\n\nvar global$a = global$n;\nvar setToStringTag$1 = setToStringTag$6;\n\n// JSON[@@toStringTag] property\n// https://tc39.es/ecma262/#sec-json-@@tostringtag\nsetToStringTag$1(global$a.JSON, 'JSON', true);\n\nvar path$o = path$w;\n\nvar symbol$5 = path$o.Symbol;\n\nvar parent$12 = symbol$5;\n\n\nvar symbol$4 = parent$12;\n\nvar wellKnownSymbol$5 = wellKnownSymbol$m;\nvar defineProperty$3 = objectDefineProperty.f;\n\nvar METADATA$1 = wellKnownSymbol$5('metadata');\nvar FunctionPrototype = Function.prototype;\n\n// Function.prototype[@@metadata]\n// https://github.com/tc39/proposal-decorator-metadata\nif (FunctionPrototype[METADATA$1] === undefined) {\n  defineProperty$3(FunctionPrototype, METADATA$1, {\n    value: null\n  });\n}\n\nvar defineWellKnownSymbol$7 = wellKnownSymbolDefine;\n\n// `Symbol.asyncDispose` well-known symbol\n// https://github.com/tc39/proposal-async-explicit-resource-management\ndefineWellKnownSymbol$7('asyncDispose');\n\nvar defineWellKnownSymbol$6 = wellKnownSymbolDefine;\n\n// `Symbol.dispose` well-known symbol\n// https://github.com/tc39/proposal-explicit-resource-management\ndefineWellKnownSymbol$6('dispose');\n\n// TODO: Remove from `core-js@4`\nvar defineWellKnownSymbol$5 = wellKnownSymbolDefine;\n\n// `Symbol.metadata` well-known symbol\n// https://github.com/tc39/proposal-decorators\ndefineWellKnownSymbol$5('metadata');\n\nvar parent$11 = symbol$4;\n\n\n\n\n\n\nvar symbol$3 = parent$11;\n\nvar getBuiltIn$4 = getBuiltIn$c;\nvar uncurryThis$d = functionUncurryThis;\n\nvar Symbol$4 = getBuiltIn$4('Symbol');\nvar keyFor = Symbol$4.keyFor;\nvar thisSymbolValue$1 = uncurryThis$d(Symbol$4.prototype.valueOf);\n\n// `Symbol.isRegisteredSymbol` method\n// https://tc39.es/proposal-symbol-predicates/#sec-symbol-isregisteredsymbol\nvar symbolIsRegistered = Symbol$4.isRegisteredSymbol || function isRegisteredSymbol(value) {\n  try {\n    return keyFor(thisSymbolValue$1(value)) !== undefined;\n  } catch (error) {\n    return false;\n  }\n};\n\nvar $$D = _export;\nvar isRegisteredSymbol$1 = symbolIsRegistered;\n\n// `Symbol.isRegisteredSymbol` method\n// https://tc39.es/proposal-symbol-predicates/#sec-symbol-isregisteredsymbol\n$$D({ target: 'Symbol', stat: true }, {\n  isRegisteredSymbol: isRegisteredSymbol$1\n});\n\nvar shared = sharedExports;\nvar getBuiltIn$3 = getBuiltIn$c;\nvar uncurryThis$c = functionUncurryThis;\nvar isSymbol = isSymbol$5;\nvar wellKnownSymbol$4 = wellKnownSymbol$m;\n\nvar Symbol$3 = getBuiltIn$3('Symbol');\nvar $isWellKnownSymbol = Symbol$3.isWellKnownSymbol;\nvar getOwnPropertyNames$4 = getBuiltIn$3('Object', 'getOwnPropertyNames');\nvar thisSymbolValue = uncurryThis$c(Symbol$3.prototype.valueOf);\nvar WellKnownSymbolsStore = shared('wks');\n\nfor (var i = 0, symbolKeys = getOwnPropertyNames$4(Symbol$3), symbolKeysLength = symbolKeys.length; i < symbolKeysLength; i++) {\n  // some old engines throws on access to some keys like `arguments` or `caller`\n  try {\n    var symbolKey = symbolKeys[i];\n    if (isSymbol(Symbol$3[symbolKey])) wellKnownSymbol$4(symbolKey);\n  } catch (error) { /* empty */ }\n}\n\n// `Symbol.isWellKnownSymbol` method\n// https://tc39.es/proposal-symbol-predicates/#sec-symbol-iswellknownsymbol\n// We should patch it for newly added well-known symbols. If it's not required, this module just will not be injected\nvar symbolIsWellKnown = function isWellKnownSymbol(value) {\n  if ($isWellKnownSymbol && $isWellKnownSymbol(value)) return true;\n  try {\n    var symbol = thisSymbolValue(value);\n    for (var j = 0, keys = getOwnPropertyNames$4(WellKnownSymbolsStore), keysLength = keys.length; j < keysLength; j++) {\n      // eslint-disable-next-line eqeqeq -- polyfilled symbols case\n      if (WellKnownSymbolsStore[keys[j]] == symbol) return true;\n    }\n  } catch (error) { /* empty */ }\n  return false;\n};\n\nvar $$C = _export;\nvar isWellKnownSymbol$1 = symbolIsWellKnown;\n\n// `Symbol.isWellKnownSymbol` method\n// https://tc39.es/proposal-symbol-predicates/#sec-symbol-iswellknownsymbol\n// We should patch it for newly added well-known symbols. If it's not required, this module just will not be injected\n$$C({ target: 'Symbol', stat: true, forced: true }, {\n  isWellKnownSymbol: isWellKnownSymbol$1\n});\n\nvar defineWellKnownSymbol$4 = wellKnownSymbolDefine;\n\n// `Symbol.matcher` well-known symbol\n// https://github.com/tc39/proposal-pattern-matching\ndefineWellKnownSymbol$4('matcher');\n\nvar defineWellKnownSymbol$3 = wellKnownSymbolDefine;\n\n// `Symbol.observable` well-known symbol\n// https://github.com/tc39/proposal-observable\ndefineWellKnownSymbol$3('observable');\n\nvar $$B = _export;\nvar isRegisteredSymbol = symbolIsRegistered;\n\n// `Symbol.isRegistered` method\n// obsolete version of https://tc39.es/proposal-symbol-predicates/#sec-symbol-isregisteredsymbol\n$$B({ target: 'Symbol', stat: true, name: 'isRegisteredSymbol' }, {\n  isRegistered: isRegisteredSymbol\n});\n\nvar $$A = _export;\nvar isWellKnownSymbol = symbolIsWellKnown;\n\n// `Symbol.isWellKnown` method\n// obsolete version of https://tc39.es/proposal-symbol-predicates/#sec-symbol-iswellknownsymbol\n// We should patch it for newly added well-known symbols. If it's not required, this module just will not be injected\n$$A({ target: 'Symbol', stat: true, name: 'isWellKnownSymbol', forced: true }, {\n  isWellKnown: isWellKnownSymbol\n});\n\nvar defineWellKnownSymbol$2 = wellKnownSymbolDefine;\n\n// `Symbol.metadataKey` well-known symbol\n// https://github.com/tc39/proposal-decorator-metadata\ndefineWellKnownSymbol$2('metadataKey');\n\n// TODO: remove from `core-js@4`\nvar defineWellKnownSymbol$1 = wellKnownSymbolDefine;\n\n// `Symbol.patternMatch` well-known symbol\n// https://github.com/tc39/proposal-pattern-matching\ndefineWellKnownSymbol$1('patternMatch');\n\n// TODO: remove from `core-js@4`\nvar defineWellKnownSymbol = wellKnownSymbolDefine;\n\ndefineWellKnownSymbol('replaceAll');\n\nvar parent$10 = symbol$3;\n\n\n\n\n// TODO: Remove from `core-js@4`\n\n\n\n\n\n\nvar symbol$2 = parent$10;\n\nvar symbol$1 = symbol$2;\n\nvar _Symbol$1 = /*@__PURE__*/getDefaultExportFromCjs(symbol$1);\n\nvar WrappedWellKnownSymbolModule$1 = wellKnownSymbolWrapped;\n\nvar iterator$4 = WrappedWellKnownSymbolModule$1.f('iterator');\n\nvar parent$$ = iterator$4;\n\n\nvar iterator$3 = parent$$;\n\nvar parent$_ = iterator$3;\n\nvar iterator$2 = parent$_;\n\nvar parent$Z = iterator$2;\n\nvar iterator$1 = parent$Z;\n\nvar iterator = iterator$1;\n\nvar _Symbol$iterator = /*@__PURE__*/getDefaultExportFromCjs(iterator);\n\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof _Symbol$1 && \"symbol\" == typeof _Symbol$iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof _Symbol$1 && o.constructor === _Symbol$1 && o !== _Symbol$1.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\n\nvar WrappedWellKnownSymbolModule = wellKnownSymbolWrapped;\n\nvar toPrimitive$4 = WrappedWellKnownSymbolModule.f('toPrimitive');\n\nvar parent$Y = toPrimitive$4;\n\nvar toPrimitive$3 = parent$Y;\n\nvar parent$X = toPrimitive$3;\n\nvar toPrimitive$2 = parent$X;\n\nvar parent$W = toPrimitive$2;\n\nvar toPrimitive$1 = parent$W;\n\nvar toPrimitive = toPrimitive$1;\n\nvar _Symbol$toPrimitive = /*@__PURE__*/getDefaultExportFromCjs(toPrimitive);\n\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[_Symbol$toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    _Object$defineProperty$1(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  _Object$defineProperty$1(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nvar $$z = _export;\nvar isArray$a = isArray$e;\n\n// `Array.isArray` method\n// https://tc39.es/ecma262/#sec-array.isarray\n$$z({ target: 'Array', stat: true }, {\n  isArray: isArray$a\n});\n\nvar path$n = path$w;\n\nvar isArray$9 = path$n.Array.isArray;\n\nvar parent$V = isArray$9;\n\nvar isArray$8 = parent$V;\n\nvar parent$U = isArray$8;\n\nvar isArray$7 = parent$U;\n\nvar parent$T = isArray$7;\n\nvar isArray$6 = parent$T;\n\nvar isArray$5 = isArray$6;\n\nvar _Array$isArray$1 = /*@__PURE__*/getDefaultExportFromCjs(isArray$5);\n\nfunction _arrayWithHoles(arr) {\n  if (_Array$isArray$1(arr)) return arr;\n}\n\nvar DESCRIPTORS$7 = descriptors;\nvar isArray$4 = isArray$e;\n\nvar $TypeError$7 = TypeError;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar getOwnPropertyDescriptor$7 = Object.getOwnPropertyDescriptor;\n\n// Safari < 13 does not throw an error in this case\nvar SILENT_ON_NON_WRITABLE_LENGTH_SET = DESCRIPTORS$7 && !function () {\n  // makes no sense without proper strict mode support\n  if (this !== undefined) return true;\n  try {\n    // eslint-disable-next-line es/no-object-defineproperty -- safe\n    Object.defineProperty([], 'length', { writable: false }).length = 1;\n  } catch (error) {\n    return error instanceof TypeError;\n  }\n}();\n\nvar arraySetLength = SILENT_ON_NON_WRITABLE_LENGTH_SET ? function (O, length) {\n  if (isArray$4(O) && !getOwnPropertyDescriptor$7(O, 'length').writable) {\n    throw new $TypeError$7('Cannot set read only .length');\n  } return O.length = length;\n} : function (O, length) {\n  return O.length = length;\n};\n\nvar $$y = _export;\nvar toObject$6 = toObject$e;\nvar lengthOfArrayLike$6 = lengthOfArrayLike$c;\nvar setArrayLength$1 = arraySetLength;\nvar doesNotExceedSafeInteger$1 = doesNotExceedSafeInteger$3;\nvar fails$f = fails$w;\n\nvar INCORRECT_TO_LENGTH = fails$f(function () {\n  return [].push.call({ length: 0x100000000 }, 1) !== 4294967297;\n});\n\n// V8 and Safari <= 15.4, FF < 23 throws InternalError\n// https://bugs.chromium.org/p/v8/issues/detail?id=12681\nvar properErrorOnNonWritableLength = function () {\n  try {\n    // eslint-disable-next-line es/no-object-defineproperty -- safe\n    Object.defineProperty([], 'length', { writable: false }).push();\n  } catch (error) {\n    return error instanceof TypeError;\n  }\n};\n\nvar FORCED$8 = INCORRECT_TO_LENGTH || !properErrorOnNonWritableLength();\n\n// `Array.prototype.push` method\n// https://tc39.es/ecma262/#sec-array.prototype.push\n$$y({ target: 'Array', proto: true, arity: 1, forced: FORCED$8 }, {\n  // eslint-disable-next-line no-unused-vars -- required for `.length`\n  push: function push(item) {\n    var O = toObject$6(this);\n    var len = lengthOfArrayLike$6(O);\n    var argCount = arguments.length;\n    doesNotExceedSafeInteger$1(len + argCount);\n    for (var i = 0; i < argCount; i++) {\n      O[len] = arguments[i];\n      len++;\n    }\n    setArrayLength$1(O, len);\n    return len;\n  }\n});\n\nvar entryVirtual$g = entryVirtual$i;\n\nvar push$7 = entryVirtual$g('Array').push;\n\nvar isPrototypeOf$h = objectIsPrototypeOf;\nvar method$e = push$7;\n\nvar ArrayPrototype$f = Array.prototype;\n\nvar push$6 = function (it) {\n  var own = it.push;\n  return it === ArrayPrototype$f || (isPrototypeOf$h(ArrayPrototype$f, it) && own === ArrayPrototype$f.push) ? method$e : own;\n};\n\nvar parent$S = push$6;\n\nvar push$5 = parent$S;\n\nvar parent$R = push$5;\n\nvar push$4 = parent$R;\n\nvar parent$Q = push$4;\n\nvar push$3 = parent$Q;\n\nvar push$2 = push$3;\n\nvar _pushInstanceProperty = /*@__PURE__*/getDefaultExportFromCjs(push$2);\n\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof _Symbol$1 && _getIteratorMethod$1(r) || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (_pushInstanceProperty(a).call(a, e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\n\nvar $$x = _export;\nvar isArray$3 = isArray$e;\nvar isConstructor$1 = isConstructor$4;\nvar isObject$9 = isObject$j;\nvar toAbsoluteIndex$2 = toAbsoluteIndex$5;\nvar lengthOfArrayLike$5 = lengthOfArrayLike$c;\nvar toIndexedObject$2 = toIndexedObject$a;\nvar createProperty$2 = createProperty$6;\nvar wellKnownSymbol$3 = wellKnownSymbol$m;\nvar arrayMethodHasSpeciesSupport$3 = arrayMethodHasSpeciesSupport$5;\nvar nativeSlice = arraySlice$5;\n\nvar HAS_SPECIES_SUPPORT$3 = arrayMethodHasSpeciesSupport$3('slice');\n\nvar SPECIES$1 = wellKnownSymbol$3('species');\nvar $Array = Array;\nvar max$1 = Math.max;\n\n// `Array.prototype.slice` method\n// https://tc39.es/ecma262/#sec-array.prototype.slice\n// fallback for not array-like ES3 strings and DOM objects\n$$x({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$3 }, {\n  slice: function slice(start, end) {\n    var O = toIndexedObject$2(this);\n    var length = lengthOfArrayLike$5(O);\n    var k = toAbsoluteIndex$2(start, length);\n    var fin = toAbsoluteIndex$2(end === undefined ? length : end, length);\n    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible\n    var Constructor, result, n;\n    if (isArray$3(O)) {\n      Constructor = O.constructor;\n      // cross-realm fallback\n      if (isConstructor$1(Constructor) && (Constructor === $Array || isArray$3(Constructor.prototype))) {\n        Constructor = undefined;\n      } else if (isObject$9(Constructor)) {\n        Constructor = Constructor[SPECIES$1];\n        if (Constructor === null) Constructor = undefined;\n      }\n      if (Constructor === $Array || Constructor === undefined) {\n        return nativeSlice(O, k, fin);\n      }\n    }\n    result = new (Constructor === undefined ? $Array : Constructor)(max$1(fin - k, 0));\n    for (n = 0; k < fin; k++, n++) if (k in O) createProperty$2(result, n, O[k]);\n    result.length = n;\n    return result;\n  }\n});\n\nvar entryVirtual$f = entryVirtual$i;\n\nvar slice$6 = entryVirtual$f('Array').slice;\n\nvar isPrototypeOf$g = objectIsPrototypeOf;\nvar method$d = slice$6;\n\nvar ArrayPrototype$e = Array.prototype;\n\nvar slice$5 = function (it) {\n  var own = it.slice;\n  return it === ArrayPrototype$e || (isPrototypeOf$g(ArrayPrototype$e, it) && own === ArrayPrototype$e.slice) ? method$d : own;\n};\n\nvar parent$P = slice$5;\n\nvar slice$4 = parent$P;\n\nvar parent$O = slice$4;\n\nvar slice$3 = parent$O;\n\nvar parent$N = slice$3;\n\nvar slice$2 = parent$N;\n\nvar slice$1 = slice$2;\n\nvar _sliceInstanceProperty$1 = /*@__PURE__*/getDefaultExportFromCjs(slice$1);\n\nvar parent$M = from$4;\n\nvar from$2 = parent$M;\n\nvar parent$L = from$2;\n\nvar from$1 = parent$L;\n\nvar from = from$1;\n\nvar _Array$from = /*@__PURE__*/getDefaultExportFromCjs(from);\n\nfunction _arrayLikeToArray$7(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\n\nfunction _unsupportedIterableToArray$7(o, minLen) {\n  var _context;\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray$7(o, minLen);\n  var n = _sliceInstanceProperty$1(_context = Object.prototype.toString.call(o)).call(_context, 8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return _Array$from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$7(o, minLen);\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$7(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (_Array$isArray$1(arr)) return _arrayLikeToArray$7(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof _Symbol$1 !== \"undefined\" && _getIteratorMethod$1(iter) != null || iter[\"@@iterator\"] != null) return _Array$from(iter);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$7(arr) || _nonIterableSpread();\n}\n\nvar symbol = symbol$4;\n\nvar _Symbol = /*@__PURE__*/getDefaultExportFromCjs(symbol);\n\nvar entryVirtual$e = entryVirtual$i;\n\nvar concat$4 = entryVirtual$e('Array').concat;\n\nvar isPrototypeOf$f = objectIsPrototypeOf;\nvar method$c = concat$4;\n\nvar ArrayPrototype$d = Array.prototype;\n\nvar concat$3 = function (it) {\n  var own = it.concat;\n  return it === ArrayPrototype$d || (isPrototypeOf$f(ArrayPrototype$d, it) && own === ArrayPrototype$d.concat) ? method$c : own;\n};\n\nvar parent$K = concat$3;\n\nvar concat$2 = parent$K;\n\nvar concat$1 = concat$2;\n\nvar _concatInstanceProperty = /*@__PURE__*/getDefaultExportFromCjs(concat$1);\n\nvar slice = slice$4;\n\nvar _sliceInstanceProperty = /*@__PURE__*/getDefaultExportFromCjs(slice);\n\nvar getBuiltIn$2 = getBuiltIn$c;\nvar uncurryThis$b = functionUncurryThis;\nvar getOwnPropertyNamesModule$1 = objectGetOwnPropertyNames;\nvar getOwnPropertySymbolsModule = objectGetOwnPropertySymbols;\nvar anObject$4 = anObject$d;\n\nvar concat = uncurryThis$b([].concat);\n\n// all object keys, includes non-enumerable and symbols\nvar ownKeys$5 = getBuiltIn$2('Reflect', 'ownKeys') || function ownKeys(it) {\n  var keys = getOwnPropertyNamesModule$1.f(anObject$4(it));\n  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\n  return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;\n};\n\nvar isArray$2 = isArray$8;\n\nvar _Array$isArray = /*@__PURE__*/getDefaultExportFromCjs(isArray$2);\n\nvar $$w = _export;\nvar $map = arrayIteration.map;\nvar arrayMethodHasSpeciesSupport$2 = arrayMethodHasSpeciesSupport$5;\n\nvar HAS_SPECIES_SUPPORT$2 = arrayMethodHasSpeciesSupport$2('map');\n\n// `Array.prototype.map` method\n// https://tc39.es/ecma262/#sec-array.prototype.map\n// with adding support of @@species\n$$w({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$2 }, {\n  map: function map(callbackfn /* , thisArg */) {\n    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\nvar entryVirtual$d = entryVirtual$i;\n\nvar map$6 = entryVirtual$d('Array').map;\n\nvar isPrototypeOf$e = objectIsPrototypeOf;\nvar method$b = map$6;\n\nvar ArrayPrototype$c = Array.prototype;\n\nvar map$5 = function (it) {\n  var own = it.map;\n  return it === ArrayPrototype$c || (isPrototypeOf$e(ArrayPrototype$c, it) && own === ArrayPrototype$c.map) ? method$b : own;\n};\n\nvar parent$J = map$5;\n\nvar map$4 = parent$J;\n\nvar map$3 = map$4;\n\nvar _mapInstanceProperty = /*@__PURE__*/getDefaultExportFromCjs(map$3);\n\nvar $$v = _export;\nvar toObject$5 = toObject$e;\nvar nativeKeys = objectKeys$3;\nvar fails$e = fails$w;\n\nvar FAILS_ON_PRIMITIVES$3 = fails$e(function () { nativeKeys(1); });\n\n// `Object.keys` method\n// https://tc39.es/ecma262/#sec-object.keys\n$$v({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$3 }, {\n  keys: function keys(it) {\n    return nativeKeys(toObject$5(it));\n  }\n});\n\nvar path$m = path$w;\n\nvar keys$2 = path$m.Object.keys;\n\nvar parent$I = keys$2;\n\nvar keys$1 = parent$I;\n\nvar keys = keys$1;\n\nvar _Object$keys = /*@__PURE__*/getDefaultExportFromCjs(keys);\n\n// TODO: Remove from `core-js@4`\nvar $$u = _export;\nvar uncurryThis$a = functionUncurryThis;\n\nvar $Date = Date;\nvar thisTimeValue = uncurryThis$a($Date.prototype.getTime);\n\n// `Date.now` method\n// https://tc39.es/ecma262/#sec-date.now\n$$u({ target: 'Date', stat: true }, {\n  now: function now() {\n    return thisTimeValue(new $Date());\n  }\n});\n\nvar path$l = path$w;\n\nvar now$3 = path$l.Date.now;\n\nvar parent$H = now$3;\n\nvar now$2 = parent$H;\n\nvar now$1 = now$2;\n\nvar _Date$now = /*@__PURE__*/getDefaultExportFromCjs(now$1);\n\nvar fails$d = fails$w;\n\nvar arrayMethodIsStrict$6 = function (METHOD_NAME, argument) {\n  var method = [][METHOD_NAME];\n  return !!method && fails$d(function () {\n    // eslint-disable-next-line no-useless-call -- required for testing\n    method.call(null, argument || function () { return 1; }, 1);\n  });\n};\n\nvar $forEach = arrayIteration.forEach;\nvar arrayMethodIsStrict$5 = arrayMethodIsStrict$6;\n\nvar STRICT_METHOD$3 = arrayMethodIsStrict$5('forEach');\n\n// `Array.prototype.forEach` method implementation\n// https://tc39.es/ecma262/#sec-array.prototype.foreach\nvar arrayForEach = !STRICT_METHOD$3 ? function forEach(callbackfn /* , thisArg */) {\n  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n// eslint-disable-next-line es/no-array-prototype-foreach -- safe\n} : [].forEach;\n\nvar $$t = _export;\nvar forEach$6 = arrayForEach;\n\n// `Array.prototype.forEach` method\n// https://tc39.es/ecma262/#sec-array.prototype.foreach\n// eslint-disable-next-line es/no-array-prototype-foreach -- safe\n$$t({ target: 'Array', proto: true, forced: [].forEach !== forEach$6 }, {\n  forEach: forEach$6\n});\n\nvar entryVirtual$c = entryVirtual$i;\n\nvar forEach$5 = entryVirtual$c('Array').forEach;\n\nvar parent$G = forEach$5;\n\nvar forEach$4 = parent$G;\n\nvar classof$4 = classof$d;\nvar hasOwn$4 = hasOwnProperty_1;\nvar isPrototypeOf$d = objectIsPrototypeOf;\nvar method$a = forEach$4;\n\nvar ArrayPrototype$b = Array.prototype;\n\nvar DOMIterables$1 = {\n  DOMTokenList: true,\n  NodeList: true\n};\n\nvar forEach$3 = function (it) {\n  var own = it.forEach;\n  return it === ArrayPrototype$b || (isPrototypeOf$d(ArrayPrototype$b, it) && own === ArrayPrototype$b.forEach)\n    || hasOwn$4(DOMIterables$1, classof$4(it)) ? method$a : own;\n};\n\nvar forEach$2 = forEach$3;\n\nvar _forEachInstanceProperty = /*@__PURE__*/getDefaultExportFromCjs(forEach$2);\n\nvar $$s = _export;\nvar uncurryThis$9 = functionUncurryThis;\nvar isArray$1 = isArray$e;\n\nvar nativeReverse = uncurryThis$9([].reverse);\nvar test$1 = [1, 2];\n\n// `Array.prototype.reverse` method\n// https://tc39.es/ecma262/#sec-array.prototype.reverse\n// fix for Safari 12.0 bug\n// https://bugs.webkit.org/show_bug.cgi?id=188794\n$$s({ target: 'Array', proto: true, forced: String(test$1) === String(test$1.reverse()) }, {\n  reverse: function reverse() {\n    // eslint-disable-next-line no-self-assign -- dirty hack\n    if (isArray$1(this)) this.length = this.length;\n    return nativeReverse(this);\n  }\n});\n\nvar entryVirtual$b = entryVirtual$i;\n\nvar reverse$3 = entryVirtual$b('Array').reverse;\n\nvar isPrototypeOf$c = objectIsPrototypeOf;\nvar method$9 = reverse$3;\n\nvar ArrayPrototype$a = Array.prototype;\n\nvar reverse$2 = function (it) {\n  var own = it.reverse;\n  return it === ArrayPrototype$a || (isPrototypeOf$c(ArrayPrototype$a, it) && own === ArrayPrototype$a.reverse) ? method$9 : own;\n};\n\nvar parent$F = reverse$2;\n\nvar reverse$1 = parent$F;\n\nvar reverse = reverse$1;\n\nvar _reverseInstanceProperty = /*@__PURE__*/getDefaultExportFromCjs(reverse);\n\nvar tryToString$2 = tryToString$6;\n\nvar $TypeError$6 = TypeError;\n\nvar deletePropertyOrThrow$2 = function (O, P) {\n  if (!delete O[P]) throw new $TypeError$6('Cannot delete property ' + tryToString$2(P) + ' of ' + tryToString$2(O));\n};\n\nvar $$r = _export;\nvar toObject$4 = toObject$e;\nvar toAbsoluteIndex$1 = toAbsoluteIndex$5;\nvar toIntegerOrInfinity = toIntegerOrInfinity$4;\nvar lengthOfArrayLike$4 = lengthOfArrayLike$c;\nvar setArrayLength = arraySetLength;\nvar doesNotExceedSafeInteger = doesNotExceedSafeInteger$3;\nvar arraySpeciesCreate = arraySpeciesCreate$3;\nvar createProperty$1 = createProperty$6;\nvar deletePropertyOrThrow$1 = deletePropertyOrThrow$2;\nvar arrayMethodHasSpeciesSupport$1 = arrayMethodHasSpeciesSupport$5;\n\nvar HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport$1('splice');\n\nvar max = Math.max;\nvar min = Math.min;\n\n// `Array.prototype.splice` method\n// https://tc39.es/ecma262/#sec-array.prototype.splice\n// with adding support of @@species\n$$r({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$1 }, {\n  splice: function splice(start, deleteCount /* , ...items */) {\n    var O = toObject$4(this);\n    var len = lengthOfArrayLike$4(O);\n    var actualStart = toAbsoluteIndex$1(start, len);\n    var argumentsLength = arguments.length;\n    var insertCount, actualDeleteCount, A, k, from, to;\n    if (argumentsLength === 0) {\n      insertCount = actualDeleteCount = 0;\n    } else if (argumentsLength === 1) {\n      insertCount = 0;\n      actualDeleteCount = len - actualStart;\n    } else {\n      insertCount = argumentsLength - 2;\n      actualDeleteCount = min(max(toIntegerOrInfinity(deleteCount), 0), len - actualStart);\n    }\n    doesNotExceedSafeInteger(len + insertCount - actualDeleteCount);\n    A = arraySpeciesCreate(O, actualDeleteCount);\n    for (k = 0; k < actualDeleteCount; k++) {\n      from = actualStart + k;\n      if (from in O) createProperty$1(A, k, O[from]);\n    }\n    A.length = actualDeleteCount;\n    if (insertCount < actualDeleteCount) {\n      for (k = actualStart; k < len - actualDeleteCount; k++) {\n        from = k + actualDeleteCount;\n        to = k + insertCount;\n        if (from in O) O[to] = O[from];\n        else deletePropertyOrThrow$1(O, to);\n      }\n      for (k = len; k > len - actualDeleteCount + insertCount; k--) deletePropertyOrThrow$1(O, k - 1);\n    } else if (insertCount > actualDeleteCount) {\n      for (k = len - actualDeleteCount; k > actualStart; k--) {\n        from = k + actualDeleteCount - 1;\n        to = k + insertCount - 1;\n        if (from in O) O[to] = O[from];\n        else deletePropertyOrThrow$1(O, to);\n      }\n    }\n    for (k = 0; k < insertCount; k++) {\n      O[k + actualStart] = arguments[k + 2];\n    }\n    setArrayLength(O, len - actualDeleteCount + insertCount);\n    return A;\n  }\n});\n\nvar entryVirtual$a = entryVirtual$i;\n\nvar splice$4 = entryVirtual$a('Array').splice;\n\nvar isPrototypeOf$b = objectIsPrototypeOf;\nvar method$8 = splice$4;\n\nvar ArrayPrototype$9 = Array.prototype;\n\nvar splice$3 = function (it) {\n  var own = it.splice;\n  return it === ArrayPrototype$9 || (isPrototypeOf$b(ArrayPrototype$9, it) && own === ArrayPrototype$9.splice) ? method$8 : own;\n};\n\nvar parent$E = splice$3;\n\nvar splice$2 = parent$E;\n\nvar splice$1 = splice$2;\n\nvar _spliceInstanceProperty = /*@__PURE__*/getDefaultExportFromCjs(splice$1);\n\nvar $$q = _export;\nvar $includes = arrayIncludes.includes;\nvar fails$c = fails$w;\n\n// FF99+ bug\nvar BROKEN_ON_SPARSE = fails$c(function () {\n  // eslint-disable-next-line es/no-array-prototype-includes -- detection\n  return !Array(1).includes();\n});\n\n// `Array.prototype.includes` method\n// https://tc39.es/ecma262/#sec-array.prototype.includes\n$$q({ target: 'Array', proto: true, forced: BROKEN_ON_SPARSE }, {\n  includes: function includes(el /* , fromIndex = 0 */) {\n    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\nvar entryVirtual$9 = entryVirtual$i;\n\nvar includes$4 = entryVirtual$9('Array').includes;\n\nvar isObject$8 = isObject$j;\nvar classof$3 = classofRaw$2;\nvar wellKnownSymbol$2 = wellKnownSymbol$m;\n\nvar MATCH$1 = wellKnownSymbol$2('match');\n\n// `IsRegExp` abstract operation\n// https://tc39.es/ecma262/#sec-isregexp\nvar isRegexp = function (it) {\n  var isRegExp;\n  return isObject$8(it) && ((isRegExp = it[MATCH$1]) !== undefined ? !!isRegExp : classof$3(it) === 'RegExp');\n};\n\nvar isRegExp = isRegexp;\n\nvar $TypeError$5 = TypeError;\n\nvar notARegexp = function (it) {\n  if (isRegExp(it)) {\n    throw new $TypeError$5(\"The method doesn't accept regular expressions\");\n  } return it;\n};\n\nvar wellKnownSymbol$1 = wellKnownSymbol$m;\n\nvar MATCH = wellKnownSymbol$1('match');\n\nvar correctIsRegexpLogic = function (METHOD_NAME) {\n  var regexp = /./;\n  try {\n    '/./'[METHOD_NAME](regexp);\n  } catch (error1) {\n    try {\n      regexp[MATCH] = false;\n      return '/./'[METHOD_NAME](regexp);\n    } catch (error2) { /* empty */ }\n  } return false;\n};\n\nvar $$p = _export;\nvar uncurryThis$8 = functionUncurryThis;\nvar notARegExp = notARegexp;\nvar requireObjectCoercible$1 = requireObjectCoercible$5;\nvar toString$4 = toString$a;\nvar correctIsRegExpLogic = correctIsRegexpLogic;\n\nvar stringIndexOf = uncurryThis$8(''.indexOf);\n\n// `String.prototype.includes` method\n// https://tc39.es/ecma262/#sec-string.prototype.includes\n$$p({ target: 'String', proto: true, forced: !correctIsRegExpLogic('includes') }, {\n  includes: function includes(searchString /* , position = 0 */) {\n    return !!~stringIndexOf(\n      toString$4(requireObjectCoercible$1(this)),\n      toString$4(notARegExp(searchString)),\n      arguments.length > 1 ? arguments[1] : undefined\n    );\n  }\n});\n\nvar entryVirtual$8 = entryVirtual$i;\n\nvar includes$3 = entryVirtual$8('String').includes;\n\nvar isPrototypeOf$a = objectIsPrototypeOf;\nvar arrayMethod = includes$4;\nvar stringMethod = includes$3;\n\nvar ArrayPrototype$8 = Array.prototype;\nvar StringPrototype = String.prototype;\n\nvar includes$2 = function (it) {\n  var own = it.includes;\n  if (it === ArrayPrototype$8 || (isPrototypeOf$a(ArrayPrototype$8, it) && own === ArrayPrototype$8.includes)) return arrayMethod;\n  if (typeof it == 'string' || it === StringPrototype || (isPrototypeOf$a(StringPrototype, it) && own === StringPrototype.includes)) {\n    return stringMethod;\n  } return own;\n};\n\nvar parent$D = includes$2;\n\nvar includes$1 = parent$D;\n\nvar includes = includes$1;\n\nvar _includesInstanceProperty = /*@__PURE__*/getDefaultExportFromCjs(includes);\n\nvar $$o = _export;\nvar fails$b = fails$w;\nvar toObject$3 = toObject$e;\nvar nativeGetPrototypeOf = objectGetPrototypeOf;\nvar CORRECT_PROTOTYPE_GETTER = correctPrototypeGetter;\n\nvar FAILS_ON_PRIMITIVES$2 = fails$b(function () { nativeGetPrototypeOf(1); });\n\n// `Object.getPrototypeOf` method\n// https://tc39.es/ecma262/#sec-object.getprototypeof\n$$o({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$2, sham: !CORRECT_PROTOTYPE_GETTER }, {\n  getPrototypeOf: function getPrototypeOf(it) {\n    return nativeGetPrototypeOf(toObject$3(it));\n  }\n});\n\nvar path$k = path$w;\n\nvar getPrototypeOf$6 = path$k.Object.getPrototypeOf;\n\nvar parent$C = getPrototypeOf$6;\n\nvar getPrototypeOf$5 = parent$C;\n\nvar getPrototypeOf$4 = getPrototypeOf$5;\n\nvar _Object$getPrototypeOf$1 = /*@__PURE__*/getDefaultExportFromCjs(getPrototypeOf$4);\n\nvar $$n = _export;\nvar $filter = arrayIteration.filter;\nvar arrayMethodHasSpeciesSupport = arrayMethodHasSpeciesSupport$5;\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter');\n\n// `Array.prototype.filter` method\n// https://tc39.es/ecma262/#sec-array.prototype.filter\n// with adding support of @@species\n$$n({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {\n  filter: function filter(callbackfn /* , thisArg */) {\n    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\nvar entryVirtual$7 = entryVirtual$i;\n\nvar filter$3 = entryVirtual$7('Array').filter;\n\nvar isPrototypeOf$9 = objectIsPrototypeOf;\nvar method$7 = filter$3;\n\nvar ArrayPrototype$7 = Array.prototype;\n\nvar filter$2 = function (it) {\n  var own = it.filter;\n  return it === ArrayPrototype$7 || (isPrototypeOf$9(ArrayPrototype$7, it) && own === ArrayPrototype$7.filter) ? method$7 : own;\n};\n\nvar parent$B = filter$2;\n\nvar filter$1 = parent$B;\n\nvar filter = filter$1;\n\nvar _filterInstanceProperty = /*@__PURE__*/getDefaultExportFromCjs(filter);\n\n// a string of all valid unicode whitespaces\nvar whitespaces$3 = '\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u2000\\u2001\\u2002' +\n  '\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n\nvar uncurryThis$7 = functionUncurryThis;\nvar requireObjectCoercible = requireObjectCoercible$5;\nvar toString$3 = toString$a;\nvar whitespaces$2 = whitespaces$3;\n\nvar replace = uncurryThis$7(''.replace);\nvar ltrim = RegExp('^[' + whitespaces$2 + ']+');\nvar rtrim = RegExp('(^|[^' + whitespaces$2 + '])[' + whitespaces$2 + ']+$');\n\n// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation\nvar createMethod$1 = function (TYPE) {\n  return function ($this) {\n    var string = toString$3(requireObjectCoercible($this));\n    if (TYPE & 1) string = replace(string, ltrim, '');\n    if (TYPE & 2) string = replace(string, rtrim, '$1');\n    return string;\n  };\n};\n\nvar stringTrim = {\n  // `String.prototype.{ trimLeft, trimStart }` methods\n  // https://tc39.es/ecma262/#sec-string.prototype.trimstart\n  start: createMethod$1(1),\n  // `String.prototype.{ trimRight, trimEnd }` methods\n  // https://tc39.es/ecma262/#sec-string.prototype.trimend\n  end: createMethod$1(2),\n  // `String.prototype.trim` method\n  // https://tc39.es/ecma262/#sec-string.prototype.trim\n  trim: createMethod$1(3)\n};\n\nvar global$9 = global$n;\nvar fails$a = fails$w;\nvar uncurryThis$6 = functionUncurryThis;\nvar toString$2 = toString$a;\nvar trim$1 = stringTrim.trim;\nvar whitespaces$1 = whitespaces$3;\n\nvar $parseInt$1 = global$9.parseInt;\nvar Symbol$2 = global$9.Symbol;\nvar ITERATOR$1 = Symbol$2 && Symbol$2.iterator;\nvar hex = /^[+-]?0x/i;\nvar exec = uncurryThis$6(hex.exec);\nvar FORCED$7 = $parseInt$1(whitespaces$1 + '08') !== 8 || $parseInt$1(whitespaces$1 + '0x16') !== 22\n  // MS Edge 18- broken with boxed symbols\n  || (ITERATOR$1 && !fails$a(function () { $parseInt$1(Object(ITERATOR$1)); }));\n\n// `parseInt` method\n// https://tc39.es/ecma262/#sec-parseint-string-radix\nvar numberParseInt = FORCED$7 ? function parseInt(string, radix) {\n  var S = trim$1(toString$2(string));\n  return $parseInt$1(S, (radix >>> 0) || (exec(hex, S) ? 16 : 10));\n} : $parseInt$1;\n\nvar $$m = _export;\nvar $parseInt = numberParseInt;\n\n// `parseInt` method\n// https://tc39.es/ecma262/#sec-parseint-string-radix\n$$m({ global: true, forced: parseInt !== $parseInt }, {\n  parseInt: $parseInt\n});\n\nvar path$j = path$w;\n\nvar _parseInt$3 = path$j.parseInt;\n\nvar parent$A = _parseInt$3;\n\nvar _parseInt$2 = parent$A;\n\nvar _parseInt = _parseInt$2;\n\nvar _parseInt$1 = /*@__PURE__*/getDefaultExportFromCjs(_parseInt);\n\n/* eslint-disable es/no-array-prototype-indexof -- required for testing */\nvar $$l = _export;\nvar uncurryThis$5 = functionUncurryThisClause;\nvar $indexOf = arrayIncludes.indexOf;\nvar arrayMethodIsStrict$4 = arrayMethodIsStrict$6;\n\nvar nativeIndexOf = uncurryThis$5([].indexOf);\n\nvar NEGATIVE_ZERO = !!nativeIndexOf && 1 / nativeIndexOf([1], 1, -0) < 0;\nvar FORCED$6 = NEGATIVE_ZERO || !arrayMethodIsStrict$4('indexOf');\n\n// `Array.prototype.indexOf` method\n// https://tc39.es/ecma262/#sec-array.prototype.indexof\n$$l({ target: 'Array', proto: true, forced: FORCED$6 }, {\n  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {\n    var fromIndex = arguments.length > 1 ? arguments[1] : undefined;\n    return NEGATIVE_ZERO\n      // convert -0 to +0\n      ? nativeIndexOf(this, searchElement, fromIndex) || 0\n      : $indexOf(this, searchElement, fromIndex);\n  }\n});\n\nvar entryVirtual$6 = entryVirtual$i;\n\nvar indexOf$3 = entryVirtual$6('Array').indexOf;\n\nvar isPrototypeOf$8 = objectIsPrototypeOf;\nvar method$6 = indexOf$3;\n\nvar ArrayPrototype$6 = Array.prototype;\n\nvar indexOf$2 = function (it) {\n  var own = it.indexOf;\n  return it === ArrayPrototype$6 || (isPrototypeOf$8(ArrayPrototype$6, it) && own === ArrayPrototype$6.indexOf) ? method$6 : own;\n};\n\nvar parent$z = indexOf$2;\n\nvar indexOf$1 = parent$z;\n\nvar indexOf = indexOf$1;\n\nvar _indexOfInstanceProperty = /*@__PURE__*/getDefaultExportFromCjs(indexOf);\n\n// TODO: Remove from `core-js@4`\nvar $$k = _export;\nvar DESCRIPTORS$6 = descriptors;\nvar create$8 = objectCreate;\n\n// `Object.create` method\n// https://tc39.es/ecma262/#sec-object.create\n$$k({ target: 'Object', stat: true, sham: !DESCRIPTORS$6 }, {\n  create: create$8\n});\n\nvar path$i = path$w;\n\nvar Object$4 = path$i.Object;\n\nvar create$7 = function create(P, D) {\n  return Object$4.create(P, D);\n};\n\nvar parent$y = create$7;\n\nvar create$6 = parent$y;\n\nvar create$5 = create$6;\n\nvar _Object$create$1 = /*@__PURE__*/getDefaultExportFromCjs(create$5);\n\nvar path$h = path$w;\nvar apply$2 = functionApply;\n\n// eslint-disable-next-line es/no-json -- safe\nif (!path$h.JSON) path$h.JSON = { stringify: JSON.stringify };\n\n// eslint-disable-next-line no-unused-vars -- required for `.length`\nvar stringify$2 = function stringify(it, replacer, space) {\n  return apply$2(path$h.JSON.stringify, null, arguments);\n};\n\nvar parent$x = stringify$2;\n\nvar stringify$1 = parent$x;\n\nvar stringify = stringify$1;\n\nvar _JSON$stringify = /*@__PURE__*/getDefaultExportFromCjs(stringify);\n\n/* global Bun -- Deno case */\nvar engineIsBun = typeof Bun == 'function' && Bun && typeof Bun.version == 'string';\n\nvar $TypeError$4 = TypeError;\n\nvar validateArgumentsLength$1 = function (passed, required) {\n  if (passed < required) throw new $TypeError$4('Not enough arguments');\n  return passed;\n};\n\nvar global$8 = global$n;\nvar apply$1 = functionApply;\nvar isCallable$1 = isCallable$i;\nvar ENGINE_IS_BUN = engineIsBun;\nvar USER_AGENT = engineUserAgent;\nvar arraySlice$1 = arraySlice$5;\nvar validateArgumentsLength = validateArgumentsLength$1;\n\nvar Function$1 = global$8.Function;\n// dirty IE9- and Bun 0.3.0- checks\nvar WRAP = /MSIE .\\./.test(USER_AGENT) || ENGINE_IS_BUN && (function () {\n  var version = global$8.Bun.version.split('.');\n  return version.length < 3 || version[0] === '0' && (version[1] < 3 || version[1] === '3' && version[2] === '0');\n})();\n\n// IE9- / Bun 0.3.0- setTimeout / setInterval / setImmediate additional parameters fix\n// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers\n// https://github.com/oven-sh/bun/issues/1633\nvar schedulersFix$2 = function (scheduler, hasTimeArg) {\n  var firstParamIndex = hasTimeArg ? 2 : 1;\n  return WRAP ? function (handler, timeout /* , ...arguments */) {\n    var boundArgs = validateArgumentsLength(arguments.length, 1) > firstParamIndex;\n    var fn = isCallable$1(handler) ? handler : Function$1(handler);\n    var params = boundArgs ? arraySlice$1(arguments, firstParamIndex) : [];\n    var callback = boundArgs ? function () {\n      apply$1(fn, this, params);\n    } : fn;\n    return hasTimeArg ? scheduler(callback, timeout) : scheduler(callback);\n  } : scheduler;\n};\n\nvar $$j = _export;\nvar global$7 = global$n;\nvar schedulersFix$1 = schedulersFix$2;\n\nvar setInterval$2 = schedulersFix$1(global$7.setInterval, true);\n\n// Bun / IE9- setInterval additional parameters fix\n// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval\n$$j({ global: true, bind: true, forced: global$7.setInterval !== setInterval$2 }, {\n  setInterval: setInterval$2\n});\n\nvar $$i = _export;\nvar global$6 = global$n;\nvar schedulersFix = schedulersFix$2;\n\nvar setTimeout$3 = schedulersFix(global$6.setTimeout, true);\n\n// Bun / IE9- setTimeout additional parameters fix\n// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\n$$i({ global: true, bind: true, forced: global$6.setTimeout !== setTimeout$3 }, {\n  setTimeout: setTimeout$3\n});\n\nvar path$g = path$w;\n\nvar setTimeout$2 = path$g.setTimeout;\n\nvar setTimeout$1 = setTimeout$2;\n\nvar _setTimeout = /*@__PURE__*/getDefaultExportFromCjs(setTimeout$1);\n\nvar toObject$2 = toObject$e;\nvar toAbsoluteIndex = toAbsoluteIndex$5;\nvar lengthOfArrayLike$3 = lengthOfArrayLike$c;\n\n// `Array.prototype.fill` method implementation\n// https://tc39.es/ecma262/#sec-array.prototype.fill\nvar arrayFill = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject$2(this);\n  var length = lengthOfArrayLike$3(O);\n  var argumentsLength = arguments.length;\n  var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);\n  var end = argumentsLength > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n\nvar $$h = _export;\nvar fill$4 = arrayFill;\n\n// `Array.prototype.fill` method\n// https://tc39.es/ecma262/#sec-array.prototype.fill\n$$h({ target: 'Array', proto: true }, {\n  fill: fill$4\n});\n\nvar entryVirtual$5 = entryVirtual$i;\n\nvar fill$3 = entryVirtual$5('Array').fill;\n\nvar isPrototypeOf$7 = objectIsPrototypeOf;\nvar method$5 = fill$3;\n\nvar ArrayPrototype$5 = Array.prototype;\n\nvar fill$2 = function (it) {\n  var own = it.fill;\n  return it === ArrayPrototype$5 || (isPrototypeOf$7(ArrayPrototype$5, it) && own === ArrayPrototype$5.fill) ? method$5 : own;\n};\n\nvar parent$w = fill$2;\n\nvar fill$1 = parent$w;\n\nvar fill = fill$1;\n\nvar _fillInstanceProperty = /*@__PURE__*/getDefaultExportFromCjs(fill);\n\n/*! Hammer.JS - v2.0.17-rc - 2019-12-16\n * http://naver.github.io/egjs\n *\n * Forked By Naver egjs\n * Copyright (c) hammerjs\n * Licensed under the MIT license */\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized$1(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\n/**\n * @private\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\n\nif (typeof Object.assign !== 'function') {\n  assign = function assign(target) {\n    if (target === undefined || target === null) {\n      throw new TypeError('Cannot convert undefined or null to object');\n    }\n\n    var output = Object(target);\n\n    for (var index = 1; index < arguments.length; index++) {\n      var source = arguments[index];\n\n      if (source !== undefined && source !== null) {\n        for (var nextKey in source) {\n          if (source.hasOwnProperty(nextKey)) {\n            output[nextKey] = source[nextKey];\n          }\n        }\n      }\n    }\n\n    return output;\n  };\n} else {\n  assign = Object.assign;\n}\n\nvar assign$1 = assign;\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = typeof document === \"undefined\" ? {\n  style: {}\n} : document.createElement('div');\nvar TYPE_FUNCTION = 'function';\nvar round = Math.round,\n    abs$1 = Math.abs;\nvar now = Date.now;\n\n/**\n * @private\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\n\nfunction prefixed(obj, property) {\n  var prefix;\n  var prop;\n  var camelProp = property[0].toUpperCase() + property.slice(1);\n  var i = 0;\n\n  while (i < VENDOR_PREFIXES.length) {\n    prefix = VENDOR_PREFIXES[i];\n    prop = prefix ? prefix + camelProp : property;\n\n    if (prop in obj) {\n      return prop;\n    }\n\n    i++;\n  }\n\n  return undefined;\n}\n\n/* eslint-disable no-new-func, no-nested-ternary */\nvar win;\n\nif (typeof window === \"undefined\") {\n  // window is undefined in node.js\n  win = {};\n} else {\n  win = window;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\nfunction getTouchActionProps() {\n  if (!NATIVE_TOUCH_ACTION) {\n    return false;\n  }\n\n  var touchMap = {};\n  var cssSupports = win.CSS && win.CSS.supports;\n  ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function (val) {\n    // If css.supports is not supported but there is native touch-action assume it supports\n    // all values. This is the case for IE 10 and 11.\n    return touchMap[val] = cssSupports ? win.CSS.supports('touch-action', val) : true;\n  });\n  return touchMap;\n}\n\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\n\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\nvar SUPPORT_TOUCH = 'ontouchstart' in win;\nvar SUPPORT_POINTER_EVENTS = prefixed(win, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\nvar COMPUTE_INTERVAL = 25;\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * @private\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n  var i;\n\n  if (!obj) {\n    return;\n  }\n\n  if (obj.forEach) {\n    obj.forEach(iterator, context);\n  } else if (obj.length !== undefined) {\n    i = 0;\n\n    while (i < obj.length) {\n      iterator.call(context, obj[i], i, obj);\n      i++;\n    }\n  } else {\n    for (i in obj) {\n      obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n    }\n  }\n}\n\n/**\n * @private\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\n\nfunction boolOrFn(val, args) {\n  if (typeof val === TYPE_FUNCTION) {\n    return val.apply(args ? args[0] || undefined : undefined, args);\n  }\n\n  return val;\n}\n\n/**\n * @private\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n  return str.indexOf(find) > -1;\n}\n\n/**\n * @private\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\n\nfunction cleanTouchActions(actions) {\n  // none\n  if (inStr(actions, TOUCH_ACTION_NONE)) {\n    return TOUCH_ACTION_NONE;\n  }\n\n  var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n  var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y); // if both pan-x and pan-y are set (different recognizers\n  // for different directions, e.g. horizontal pan but vertical swipe?)\n  // we need none (as otherwise with pan-x pan-y combined none of these\n  // recognizers will work, since the browser would handle all panning\n\n  if (hasPanX && hasPanY) {\n    return TOUCH_ACTION_NONE;\n  } // pan-x OR pan-y\n\n\n  if (hasPanX || hasPanY) {\n    return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n  } // manipulation\n\n\n  if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n    return TOUCH_ACTION_MANIPULATION;\n  }\n\n  return TOUCH_ACTION_AUTO;\n}\n\n/**\n * @private\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\n\nvar TouchAction =\n/*#__PURE__*/\nfunction () {\n  function TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n  }\n  /**\n   * @private\n   * set the touchAction value on the element or enable the polyfill\n   * @param {String} value\n   */\n\n\n  var _proto = TouchAction.prototype;\n\n  _proto.set = function set(value) {\n    // find out the touch-action by the event handlers\n    if (value === TOUCH_ACTION_COMPUTE) {\n      value = this.compute();\n    }\n\n    if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n      this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n    }\n\n    this.actions = value.toLowerCase().trim();\n  };\n  /**\n   * @private\n   * just re-set the touchAction value\n   */\n\n\n  _proto.update = function update() {\n    this.set(this.manager.options.touchAction);\n  };\n  /**\n   * @private\n   * compute the value for the touchAction property based on the recognizer's settings\n   * @returns {String} value\n   */\n\n\n  _proto.compute = function compute() {\n    var actions = [];\n    each(this.manager.recognizers, function (recognizer) {\n      if (boolOrFn(recognizer.options.enable, [recognizer])) {\n        actions = actions.concat(recognizer.getTouchAction());\n      }\n    });\n    return cleanTouchActions(actions.join(' '));\n  };\n  /**\n   * @private\n   * this method is called on each input cycle and provides the preventing of the browser behavior\n   * @param {Object} input\n   */\n\n\n  _proto.preventDefaults = function preventDefaults(input) {\n    var srcEvent = input.srcEvent;\n    var direction = input.offsetDirection; // if the touch action did prevented once this session\n\n    if (this.manager.session.prevented) {\n      srcEvent.preventDefault();\n      return;\n    }\n\n    var actions = this.actions;\n    var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n    if (hasNone) {\n      // do not prevent defaults if this is a tap gesture\n      var isTapPointer = input.pointers.length === 1;\n      var isTapMovement = input.distance < 2;\n      var isTapTouchTime = input.deltaTime < 250;\n\n      if (isTapPointer && isTapMovement && isTapTouchTime) {\n        return;\n      }\n    }\n\n    if (hasPanX && hasPanY) {\n      // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n      return;\n    }\n\n    if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) {\n      return this.preventSrc(srcEvent);\n    }\n  };\n  /**\n   * @private\n   * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n   * @param {Object} srcEvent\n   */\n\n\n  _proto.preventSrc = function preventSrc(srcEvent) {\n    this.manager.session.prevented = true;\n    srcEvent.preventDefault();\n  };\n\n  return TouchAction;\n}();\n\n/**\n * @private\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n  while (node) {\n    if (node === parent) {\n      return true;\n    }\n\n    node = node.parentNode;\n  }\n\n  return false;\n}\n\n/**\n * @private\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\n\nfunction getCenter(pointers) {\n  var pointersLength = pointers.length; // no need to loop when only one touch\n\n  if (pointersLength === 1) {\n    return {\n      x: round(pointers[0].clientX),\n      y: round(pointers[0].clientY)\n    };\n  }\n\n  var x = 0;\n  var y = 0;\n  var i = 0;\n\n  while (i < pointersLength) {\n    x += pointers[i].clientX;\n    y += pointers[i].clientY;\n    i++;\n  }\n\n  return {\n    x: round(x / pointersLength),\n    y: round(y / pointersLength)\n  };\n}\n\n/**\n * @private\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\n\nfunction simpleCloneInputData(input) {\n  // make a simple copy of the pointers because we will get a reference if we don't\n  // we only need clientXY for the calculations\n  var pointers = [];\n  var i = 0;\n\n  while (i < input.pointers.length) {\n    pointers[i] = {\n      clientX: round(input.pointers[i].clientX),\n      clientY: round(input.pointers[i].clientY)\n    };\n    i++;\n  }\n\n  return {\n    timeStamp: now(),\n    pointers: pointers,\n    center: getCenter(pointers),\n    deltaX: input.deltaX,\n    deltaY: input.deltaY\n  };\n}\n\n/**\n * @private\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\n\nfunction getDistance(p1, p2, props) {\n  if (!props) {\n    props = PROPS_XY;\n  }\n\n  var x = p2[props[0]] - p1[props[0]];\n  var y = p2[props[1]] - p1[props[1]];\n  return Math.sqrt(x * x + y * y);\n}\n\n/**\n * @private\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\n\nfunction getAngle(p1, p2, props) {\n  if (!props) {\n    props = PROPS_XY;\n  }\n\n  var x = p2[props[0]] - p1[props[0]];\n  var y = p2[props[1]] - p1[props[1]];\n  return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * @private\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\n\nfunction getDirection(x, y) {\n  if (x === y) {\n    return DIRECTION_NONE;\n  }\n\n  if (abs$1(x) >= abs$1(y)) {\n    return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n  }\n\n  return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\nfunction computeDeltaXY(session, input) {\n  var center = input.center; // let { offsetDelta:offset = {}, prevDelta = {}, prevInput = {} } = session;\n  // jscs throwing error on defalut destructured values and without defaults tests fail\n\n  var offset = session.offsetDelta || {};\n  var prevDelta = session.prevDelta || {};\n  var prevInput = session.prevInput || {};\n\n  if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n    prevDelta = session.prevDelta = {\n      x: prevInput.deltaX || 0,\n      y: prevInput.deltaY || 0\n    };\n    offset = session.offsetDelta = {\n      x: center.x,\n      y: center.y\n    };\n  }\n\n  input.deltaX = prevDelta.x + (center.x - offset.x);\n  input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * @private\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n  return {\n    x: x / deltaTime || 0,\n    y: y / deltaTime || 0\n  };\n}\n\n/**\n * @private\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\n\nfunction getScale(start, end) {\n  return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\n/**\n * @private\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\n\nfunction getRotation(start, end) {\n  return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * @private\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\n\nfunction computeIntervalInputData(session, input) {\n  var last = session.lastInterval || input;\n  var deltaTime = input.timeStamp - last.timeStamp;\n  var velocity;\n  var velocityX;\n  var velocityY;\n  var direction;\n\n  if (input.eventType !== INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n    var deltaX = input.deltaX - last.deltaX;\n    var deltaY = input.deltaY - last.deltaY;\n    var v = getVelocity(deltaTime, deltaX, deltaY);\n    velocityX = v.x;\n    velocityY = v.y;\n    velocity = abs$1(v.x) > abs$1(v.y) ? v.x : v.y;\n    direction = getDirection(deltaX, deltaY);\n    session.lastInterval = input;\n  } else {\n    // use latest velocity info if it doesn't overtake a minimum period\n    velocity = last.velocity;\n    velocityX = last.velocityX;\n    velocityY = last.velocityY;\n    direction = last.direction;\n  }\n\n  input.velocity = velocity;\n  input.velocityX = velocityX;\n  input.velocityY = velocityY;\n  input.direction = direction;\n}\n\n/**\n* @private\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\n\nfunction computeInputData(manager, input) {\n  var session = manager.session;\n  var pointers = input.pointers;\n  var pointersLength = pointers.length; // store the first input to calculate the distance and direction\n\n  if (!session.firstInput) {\n    session.firstInput = simpleCloneInputData(input);\n  } // to compute scale and rotation we need to store the multiple touches\n\n\n  if (pointersLength > 1 && !session.firstMultiple) {\n    session.firstMultiple = simpleCloneInputData(input);\n  } else if (pointersLength === 1) {\n    session.firstMultiple = false;\n  }\n\n  var firstInput = session.firstInput,\n      firstMultiple = session.firstMultiple;\n  var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n  var center = input.center = getCenter(pointers);\n  input.timeStamp = now();\n  input.deltaTime = input.timeStamp - firstInput.timeStamp;\n  input.angle = getAngle(offsetCenter, center);\n  input.distance = getDistance(offsetCenter, center);\n  computeDeltaXY(session, input);\n  input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n  var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n  input.overallVelocityX = overallVelocity.x;\n  input.overallVelocityY = overallVelocity.y;\n  input.overallVelocity = abs$1(overallVelocity.x) > abs$1(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;\n  input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n  input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n  input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;\n  computeIntervalInputData(session, input); // find the correct target\n\n  var target = manager.element;\n  var srcEvent = input.srcEvent;\n  var srcEventTarget;\n\n  if (srcEvent.composedPath) {\n    srcEventTarget = srcEvent.composedPath()[0];\n  } else if (srcEvent.path) {\n    srcEventTarget = srcEvent.path[0];\n  } else {\n    srcEventTarget = srcEvent.target;\n  }\n\n  if (hasParent(srcEventTarget, target)) {\n    target = srcEventTarget;\n  }\n\n  input.target = target;\n}\n\n/**\n * @private\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\n\nfunction inputHandler(manager, eventType, input) {\n  var pointersLen = input.pointers.length;\n  var changedPointersLen = input.changedPointers.length;\n  var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;\n  var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;\n  input.isFirst = !!isFirst;\n  input.isFinal = !!isFinal;\n\n  if (isFirst) {\n    manager.session = {};\n  } // source event is the normalized value of the domEvents\n  // like 'touchstart, mouseup, pointerdown'\n\n\n  input.eventType = eventType; // compute scale, rotation etc\n\n  computeInputData(manager, input); // emit secret event\n\n  manager.emit('hammer.input', input);\n  manager.recognize(input);\n  manager.session.prevInput = input;\n}\n\n/**\n * @private\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n  return str.trim().split(/\\s+/g);\n}\n\n/**\n * @private\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\n\nfunction addEventListeners(target, types, handler) {\n  each(splitStr(types), function (type) {\n    target.addEventListener(type, handler, false);\n  });\n}\n\n/**\n * @private\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\n\nfunction removeEventListeners(target, types, handler) {\n  each(splitStr(types), function (type) {\n    target.removeEventListener(type, handler, false);\n  });\n}\n\n/**\n * @private\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n  var doc = element.ownerDocument || element;\n  return doc.defaultView || doc.parentWindow || window;\n}\n\n/**\n * @private\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\n\nvar Input =\n/*#__PURE__*/\nfunction () {\n  function Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget; // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n\n    this.domHandler = function (ev) {\n      if (boolOrFn(manager.options.enable, [manager])) {\n        self.handler(ev);\n      }\n    };\n\n    this.init();\n  }\n  /**\n   * @private\n   * should handle the inputEvent data and trigger the callback\n   * @virtual\n   */\n\n\n  var _proto = Input.prototype;\n\n  _proto.handler = function handler() {};\n  /**\n   * @private\n   * bind the events\n   */\n\n\n  _proto.init = function init() {\n    this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n    this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n    this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n  };\n  /**\n   * @private\n   * unbind the events\n   */\n\n\n  _proto.destroy = function destroy() {\n    this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n    this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n    this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n  };\n\n  return Input;\n}();\n\n/**\n * @private\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n  if (src.indexOf && !findByKey) {\n    return src.indexOf(find);\n  } else {\n    var i = 0;\n\n    while (i < src.length) {\n      if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) {\n        // do not use === here, test fails\n        return i;\n      }\n\n      i++;\n    }\n\n    return -1;\n  }\n}\n\nvar POINTER_INPUT_MAP = {\n  pointerdown: INPUT_START,\n  pointermove: INPUT_MOVE,\n  pointerup: INPUT_END,\n  pointercancel: INPUT_CANCEL,\n  pointerout: INPUT_CANCEL\n}; // in IE10 the pointer types is defined as an enum\n\nvar IE10_POINTER_TYPE_ENUM = {\n  2: INPUT_TYPE_TOUCH,\n  3: INPUT_TYPE_PEN,\n  4: INPUT_TYPE_MOUSE,\n  5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n\n};\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel'; // IE10 has prefixed support, and case-sensitive\n\nif (win.MSPointerEvent && !win.PointerEvent) {\n  POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n  POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n/**\n * @private\n * Pointer events input\n * @constructor\n * @extends Input\n */\n\n\nvar PointerEventInput =\n/*#__PURE__*/\nfunction (_Input) {\n  _inheritsLoose(PointerEventInput, _Input);\n\n  function PointerEventInput() {\n    var _this;\n\n    var proto = PointerEventInput.prototype;\n    proto.evEl = POINTER_ELEMENT_EVENTS;\n    proto.evWin = POINTER_WINDOW_EVENTS;\n    _this = _Input.apply(this, arguments) || this;\n    _this.store = _this.manager.session.pointerEvents = [];\n    return _this;\n  }\n  /**\n   * @private\n   * handle mouse events\n   * @param {Object} ev\n   */\n\n\n  var _proto = PointerEventInput.prototype;\n\n  _proto.handler = function handler(ev) {\n    var store = this.store;\n    var removePointer = false;\n    var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n    var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n    var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n    var isTouch = pointerType === INPUT_TYPE_TOUCH; // get index of the event in the store\n\n    var storeIndex = inArray(store, ev.pointerId, 'pointerId'); // start and mouse must be down\n\n    if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n      if (storeIndex < 0) {\n        store.push(ev);\n        storeIndex = store.length - 1;\n      }\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n      removePointer = true;\n    } // it not found, so the pointer hasn't been down (so it's probably a hover)\n\n\n    if (storeIndex < 0) {\n      return;\n    } // update the event in the store\n\n\n    store[storeIndex] = ev;\n    this.callback(this.manager, eventType, {\n      pointers: store,\n      changedPointers: [ev],\n      pointerType: pointerType,\n      srcEvent: ev\n    });\n\n    if (removePointer) {\n      // remove from the store\n      store.splice(storeIndex, 1);\n    }\n  };\n\n  return PointerEventInput;\n}(Input);\n\n/**\n * @private\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n  return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * @private\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\n\nfunction uniqueArray(src, key, sort) {\n  var results = [];\n  var values = [];\n  var i = 0;\n\n  while (i < src.length) {\n    var val = key ? src[i][key] : src[i];\n\n    if (inArray(values, val) < 0) {\n      results.push(src[i]);\n    }\n\n    values[i] = val;\n    i++;\n  }\n\n  if (sort) {\n    if (!key) {\n      results = results.sort();\n    } else {\n      results = results.sort(function (a, b) {\n        return a[key] > b[key];\n      });\n    }\n  }\n\n  return results;\n}\n\nvar TOUCH_INPUT_MAP = {\n  touchstart: INPUT_START,\n  touchmove: INPUT_MOVE,\n  touchend: INPUT_END,\n  touchcancel: INPUT_CANCEL\n};\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n/**\n * @private\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\n\nvar TouchInput =\n/*#__PURE__*/\nfunction (_Input) {\n  _inheritsLoose(TouchInput, _Input);\n\n  function TouchInput() {\n    var _this;\n\n    TouchInput.prototype.evTarget = TOUCH_TARGET_EVENTS;\n    _this = _Input.apply(this, arguments) || this;\n    _this.targetIds = {}; // this.evTarget = TOUCH_TARGET_EVENTS;\n\n    return _this;\n  }\n\n  var _proto = TouchInput.prototype;\n\n  _proto.handler = function handler(ev) {\n    var type = TOUCH_INPUT_MAP[ev.type];\n    var touches = getTouches.call(this, ev, type);\n\n    if (!touches) {\n      return;\n    }\n\n    this.callback(this.manager, type, {\n      pointers: touches[0],\n      changedPointers: touches[1],\n      pointerType: INPUT_TYPE_TOUCH,\n      srcEvent: ev\n    });\n  };\n\n  return TouchInput;\n}(Input);\n\nfunction getTouches(ev, type) {\n  var allTouches = toArray(ev.touches);\n  var targetIds = this.targetIds; // when there is only one touch, the process can be simplified\n\n  if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n    targetIds[allTouches[0].identifier] = true;\n    return [allTouches, allTouches];\n  }\n\n  var i;\n  var targetTouches;\n  var changedTouches = toArray(ev.changedTouches);\n  var changedTargetTouches = [];\n  var target = this.target; // get target touches from touches\n\n  targetTouches = allTouches.filter(function (touch) {\n    return hasParent(touch.target, target);\n  }); // collect touches\n\n  if (type === INPUT_START) {\n    i = 0;\n\n    while (i < targetTouches.length) {\n      targetIds[targetTouches[i].identifier] = true;\n      i++;\n    }\n  } // filter changed touches to only contain touches that exist in the collected target ids\n\n\n  i = 0;\n\n  while (i < changedTouches.length) {\n    if (targetIds[changedTouches[i].identifier]) {\n      changedTargetTouches.push(changedTouches[i]);\n    } // cleanup removed touches\n\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n      delete targetIds[changedTouches[i].identifier];\n    }\n\n    i++;\n  }\n\n  if (!changedTargetTouches.length) {\n    return;\n  }\n\n  return [// merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n  uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true), changedTargetTouches];\n}\n\nvar MOUSE_INPUT_MAP = {\n  mousedown: INPUT_START,\n  mousemove: INPUT_MOVE,\n  mouseup: INPUT_END\n};\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n/**\n * @private\n * Mouse events input\n * @constructor\n * @extends Input\n */\n\nvar MouseInput =\n/*#__PURE__*/\nfunction (_Input) {\n  _inheritsLoose(MouseInput, _Input);\n\n  function MouseInput() {\n    var _this;\n\n    var proto = MouseInput.prototype;\n    proto.evEl = MOUSE_ELEMENT_EVENTS;\n    proto.evWin = MOUSE_WINDOW_EVENTS;\n    _this = _Input.apply(this, arguments) || this;\n    _this.pressed = false; // mousedown state\n\n    return _this;\n  }\n  /**\n   * @private\n   * handle mouse events\n   * @param {Object} ev\n   */\n\n\n  var _proto = MouseInput.prototype;\n\n  _proto.handler = function handler(ev) {\n    var eventType = MOUSE_INPUT_MAP[ev.type]; // on start we want to have the left mouse button down\n\n    if (eventType & INPUT_START && ev.button === 0) {\n      this.pressed = true;\n    }\n\n    if (eventType & INPUT_MOVE && ev.which !== 1) {\n      eventType = INPUT_END;\n    } // mouse must be down\n\n\n    if (!this.pressed) {\n      return;\n    }\n\n    if (eventType & INPUT_END) {\n      this.pressed = false;\n    }\n\n    this.callback(this.manager, eventType, {\n      pointers: [ev],\n      changedPointers: [ev],\n      pointerType: INPUT_TYPE_MOUSE,\n      srcEvent: ev\n    });\n  };\n\n  return MouseInput;\n}(Input);\n\n/**\n * @private\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction setLastTouch(eventData) {\n  var _eventData$changedPoi = eventData.changedPointers,\n      touch = _eventData$changedPoi[0];\n\n  if (touch.identifier === this.primaryTouch) {\n    var lastTouch = {\n      x: touch.clientX,\n      y: touch.clientY\n    };\n    var lts = this.lastTouches;\n    this.lastTouches.push(lastTouch);\n\n    var removeLastTouch = function removeLastTouch() {\n      var i = lts.indexOf(lastTouch);\n\n      if (i > -1) {\n        lts.splice(i, 1);\n      }\n    };\n\n    setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n  }\n}\n\nfunction recordTouches(eventType, eventData) {\n  if (eventType & INPUT_START) {\n    this.primaryTouch = eventData.changedPointers[0].identifier;\n    setLastTouch.call(this, eventData);\n  } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n    setLastTouch.call(this, eventData);\n  }\n}\n\nfunction isSyntheticEvent(eventData) {\n  var x = eventData.srcEvent.clientX;\n  var y = eventData.srcEvent.clientY;\n\n  for (var i = 0; i < this.lastTouches.length; i++) {\n    var t = this.lastTouches[i];\n    var dx = Math.abs(x - t.x);\n    var dy = Math.abs(y - t.y);\n\n    if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar TouchMouseInput =\n/*#__PURE__*/\nfunction () {\n  var TouchMouseInput =\n  /*#__PURE__*/\n  function (_Input) {\n    _inheritsLoose(TouchMouseInput, _Input);\n\n    function TouchMouseInput(_manager, callback) {\n      var _this;\n\n      _this = _Input.call(this, _manager, callback) || this;\n\n      _this.handler = function (manager, inputEvent, inputData) {\n        var isTouch = inputData.pointerType === INPUT_TYPE_TOUCH;\n        var isMouse = inputData.pointerType === INPUT_TYPE_MOUSE;\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n          return;\n        } // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n\n\n        if (isTouch) {\n          recordTouches.call(_assertThisInitialized$1(_assertThisInitialized$1(_this)), inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(_assertThisInitialized$1(_assertThisInitialized$1(_this)), inputData)) {\n          return;\n        }\n\n        _this.callback(manager, inputEvent, inputData);\n      };\n\n      _this.touch = new TouchInput(_this.manager, _this.handler);\n      _this.mouse = new MouseInput(_this.manager, _this.handler);\n      _this.primaryTouch = null;\n      _this.lastTouches = [];\n      return _this;\n    }\n    /**\n     * @private\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n\n\n    var _proto = TouchMouseInput.prototype;\n\n    /**\n     * @private\n     * remove the event listeners\n     */\n    _proto.destroy = function destroy() {\n      this.touch.destroy();\n      this.mouse.destroy();\n    };\n\n    return TouchMouseInput;\n  }(Input);\n\n  return TouchMouseInput;\n}();\n\n/**\n * @private\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\n\nfunction createInputInstance(manager) {\n  var Type; // let inputClass = manager.options.inputClass;\n\n  var inputClass = manager.options.inputClass;\n\n  if (inputClass) {\n    Type = inputClass;\n  } else if (SUPPORT_POINTER_EVENTS) {\n    Type = PointerEventInput;\n  } else if (SUPPORT_ONLY_TOUCH) {\n    Type = TouchInput;\n  } else if (!SUPPORT_TOUCH) {\n    Type = MouseInput;\n  } else {\n    Type = TouchMouseInput;\n  }\n\n  return new Type(manager, inputHandler);\n}\n\n/**\n * @private\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\n\nfunction invokeArrayArg(arg, fn, context) {\n  if (Array.isArray(arg)) {\n    each(arg, context[fn], context);\n    return true;\n  }\n\n  return false;\n}\n\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * @private\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n  return _uniqueId++;\n}\n\n/**\n * @private\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n  var manager = recognizer.manager;\n\n  if (manager) {\n    return manager.get(otherRecognizer);\n  }\n\n  return otherRecognizer;\n}\n\n/**\n * @private\n * get a usable string, used as event postfix\n * @param {constant} state\n * @returns {String} state\n */\n\nfunction stateStr(state) {\n  if (state & STATE_CANCELLED) {\n    return 'cancel';\n  } else if (state & STATE_ENDED) {\n    return 'end';\n  } else if (state & STATE_CHANGED) {\n    return 'move';\n  } else if (state & STATE_BEGAN) {\n    return 'start';\n  }\n\n  return '';\n}\n\n/**\n * @private\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\n\n/**\n * @private\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\n\nvar Recognizer =\n/*#__PURE__*/\nfunction () {\n  function Recognizer(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.options = _extends({\n      enable: true\n    }, options);\n    this.id = uniqueId();\n    this.manager = null; // default is enable true\n\n    this.state = STATE_POSSIBLE;\n    this.simultaneous = {};\n    this.requireFail = [];\n  }\n  /**\n   * @private\n   * set options\n   * @param {Object} options\n   * @return {Recognizer}\n   */\n\n\n  var _proto = Recognizer.prototype;\n\n  _proto.set = function set(options) {\n    assign$1(this.options, options); // also update the touchAction, in case something changed about the directions/enabled state\n\n    this.manager && this.manager.touchAction.update();\n    return this;\n  };\n  /**\n   * @private\n   * recognize simultaneous with an other recognizer.\n   * @param {Recognizer} otherRecognizer\n   * @returns {Recognizer} this\n   */\n\n\n  _proto.recognizeWith = function recognizeWith(otherRecognizer) {\n    if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n      return this;\n    }\n\n    var simultaneous = this.simultaneous;\n    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\n    if (!simultaneous[otherRecognizer.id]) {\n      simultaneous[otherRecognizer.id] = otherRecognizer;\n      otherRecognizer.recognizeWith(this);\n    }\n\n    return this;\n  };\n  /**\n   * @private\n   * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n   * @param {Recognizer} otherRecognizer\n   * @returns {Recognizer} this\n   */\n\n\n  _proto.dropRecognizeWith = function dropRecognizeWith(otherRecognizer) {\n    if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n      return this;\n    }\n\n    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n    delete this.simultaneous[otherRecognizer.id];\n    return this;\n  };\n  /**\n   * @private\n   * recognizer can only run when an other is failing\n   * @param {Recognizer} otherRecognizer\n   * @returns {Recognizer} this\n   */\n\n\n  _proto.requireFailure = function requireFailure(otherRecognizer) {\n    if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n      return this;\n    }\n\n    var requireFail = this.requireFail;\n    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\n    if (inArray(requireFail, otherRecognizer) === -1) {\n      requireFail.push(otherRecognizer);\n      otherRecognizer.requireFailure(this);\n    }\n\n    return this;\n  };\n  /**\n   * @private\n   * drop the requireFailure link. it does not remove the link on the other recognizer.\n   * @param {Recognizer} otherRecognizer\n   * @returns {Recognizer} this\n   */\n\n\n  _proto.dropRequireFailure = function dropRequireFailure(otherRecognizer) {\n    if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n      return this;\n    }\n\n    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n    var index = inArray(this.requireFail, otherRecognizer);\n\n    if (index > -1) {\n      this.requireFail.splice(index, 1);\n    }\n\n    return this;\n  };\n  /**\n   * @private\n   * has require failures boolean\n   * @returns {boolean}\n   */\n\n\n  _proto.hasRequireFailures = function hasRequireFailures() {\n    return this.requireFail.length > 0;\n  };\n  /**\n   * @private\n   * if the recognizer can recognize simultaneous with an other recognizer\n   * @param {Recognizer} otherRecognizer\n   * @returns {Boolean}\n   */\n\n\n  _proto.canRecognizeWith = function canRecognizeWith(otherRecognizer) {\n    return !!this.simultaneous[otherRecognizer.id];\n  };\n  /**\n   * @private\n   * You should use `tryEmit` instead of `emit` directly to check\n   * that all the needed recognizers has failed before emitting.\n   * @param {Object} input\n   */\n\n\n  _proto.emit = function emit(input) {\n    var self = this;\n    var state = this.state;\n\n    function emit(event) {\n      self.manager.emit(event, input);\n    } // 'panstart' and 'panmove'\n\n\n    if (state < STATE_ENDED) {\n      emit(self.options.event + stateStr(state));\n    }\n\n    emit(self.options.event); // simple 'eventName' events\n\n    if (input.additionalEvent) {\n      // additional event(panleft, panright, pinchin, pinchout...)\n      emit(input.additionalEvent);\n    } // panend and pancancel\n\n\n    if (state >= STATE_ENDED) {\n      emit(self.options.event + stateStr(state));\n    }\n  };\n  /**\n   * @private\n   * Check that all the require failure recognizers has failed,\n   * if true, it emits a gesture event,\n   * otherwise, setup the state to FAILED.\n   * @param {Object} input\n   */\n\n\n  _proto.tryEmit = function tryEmit(input) {\n    if (this.canEmit()) {\n      return this.emit(input);\n    } // it's failing anyway\n\n\n    this.state = STATE_FAILED;\n  };\n  /**\n   * @private\n   * can we emit?\n   * @returns {boolean}\n   */\n\n\n  _proto.canEmit = function canEmit() {\n    var i = 0;\n\n    while (i < this.requireFail.length) {\n      if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n        return false;\n      }\n\n      i++;\n    }\n\n    return true;\n  };\n  /**\n   * @private\n   * update the recognizer\n   * @param {Object} inputData\n   */\n\n\n  _proto.recognize = function recognize(inputData) {\n    // make a new copy of the inputData\n    // so we can change the inputData without messing up the other recognizers\n    var inputDataClone = assign$1({}, inputData); // is is enabled and allow recognizing?\n\n    if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n      this.reset();\n      this.state = STATE_FAILED;\n      return;\n    } // reset when we've reached the end\n\n\n    if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n      this.state = STATE_POSSIBLE;\n    }\n\n    this.state = this.process(inputDataClone); // the recognizer has recognized a gesture\n    // so trigger an event\n\n    if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n      this.tryEmit(inputDataClone);\n    }\n  };\n  /**\n   * @private\n   * return the state of the recognizer\n   * the actual recognizing happens in this method\n   * @virtual\n   * @param {Object} inputData\n   * @returns {constant} STATE\n   */\n\n  /* jshint ignore:start */\n\n\n  _proto.process = function process(inputData) {};\n  /* jshint ignore:end */\n\n  /**\n   * @private\n   * return the preferred touch-action\n   * @virtual\n   * @returns {Array}\n   */\n\n\n  _proto.getTouchAction = function getTouchAction() {};\n  /**\n   * @private\n   * called when the gesture isn't allowed to recognize\n   * like when another is being recognized or it is disabled\n   * @virtual\n   */\n\n\n  _proto.reset = function reset() {};\n\n  return Recognizer;\n}();\n\n/**\n * @private\n * A tap is recognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\n\nvar TapRecognizer =\n/*#__PURE__*/\nfunction (_Recognizer) {\n  _inheritsLoose(TapRecognizer, _Recognizer);\n\n  function TapRecognizer(options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    _this = _Recognizer.call(this, _extends({\n      event: 'tap',\n      pointers: 1,\n      taps: 1,\n      interval: 300,\n      // max time between the multi-tap taps\n      time: 250,\n      // max time of the pointer to be down (like finger on the screen)\n      threshold: 9,\n      // a minimal movement is ok, but keep it low\n      posThreshold: 10\n    }, options)) || this; // previous time and center,\n    // used for tap counting\n\n    _this.pTime = false;\n    _this.pCenter = false;\n    _this._timer = null;\n    _this._input = null;\n    _this.count = 0;\n    return _this;\n  }\n\n  var _proto = TapRecognizer.prototype;\n\n  _proto.getTouchAction = function getTouchAction() {\n    return [TOUCH_ACTION_MANIPULATION];\n  };\n\n  _proto.process = function process(input) {\n    var _this2 = this;\n\n    var options = this.options;\n    var validPointers = input.pointers.length === options.pointers;\n    var validMovement = input.distance < options.threshold;\n    var validTouchTime = input.deltaTime < options.time;\n    this.reset();\n\n    if (input.eventType & INPUT_START && this.count === 0) {\n      return this.failTimeout();\n    } // we only allow little movement\n    // and we've reached an end event, so a tap is possible\n\n\n    if (validMovement && validTouchTime && validPointers) {\n      if (input.eventType !== INPUT_END) {\n        return this.failTimeout();\n      }\n\n      var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;\n      var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n      this.pTime = input.timeStamp;\n      this.pCenter = input.center;\n\n      if (!validMultiTap || !validInterval) {\n        this.count = 1;\n      } else {\n        this.count += 1;\n      }\n\n      this._input = input; // if tap count matches we have recognized it,\n      // else it has began recognizing...\n\n      var tapCount = this.count % options.taps;\n\n      if (tapCount === 0) {\n        // no failing requirements, immediately trigger the tap event\n        // or wait as long as the multitap interval to trigger\n        if (!this.hasRequireFailures()) {\n          return STATE_RECOGNIZED;\n        } else {\n          this._timer = setTimeout(function () {\n            _this2.state = STATE_RECOGNIZED;\n\n            _this2.tryEmit();\n          }, options.interval);\n          return STATE_BEGAN;\n        }\n      }\n    }\n\n    return STATE_FAILED;\n  };\n\n  _proto.failTimeout = function failTimeout() {\n    var _this3 = this;\n\n    this._timer = setTimeout(function () {\n      _this3.state = STATE_FAILED;\n    }, this.options.interval);\n    return STATE_FAILED;\n  };\n\n  _proto.reset = function reset() {\n    clearTimeout(this._timer);\n  };\n\n  _proto.emit = function emit() {\n    if (this.state === STATE_RECOGNIZED) {\n      this._input.tapCount = this.count;\n      this.manager.emit(this.options.event, this._input);\n    }\n  };\n\n  return TapRecognizer;\n}(Recognizer);\n\n/**\n * @private\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\n\nvar AttrRecognizer =\n/*#__PURE__*/\nfunction (_Recognizer) {\n  _inheritsLoose(AttrRecognizer, _Recognizer);\n\n  function AttrRecognizer(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return _Recognizer.call(this, _extends({\n      pointers: 1\n    }, options)) || this;\n  }\n  /**\n   * @private\n   * Used to check if it the recognizer receives valid input, like input.distance > 10.\n   * @memberof AttrRecognizer\n   * @param {Object} input\n   * @returns {Boolean} recognized\n   */\n\n\n  var _proto = AttrRecognizer.prototype;\n\n  _proto.attrTest = function attrTest(input) {\n    var optionPointers = this.options.pointers;\n    return optionPointers === 0 || input.pointers.length === optionPointers;\n  };\n  /**\n   * @private\n   * Process the input and return the state for the recognizer\n   * @memberof AttrRecognizer\n   * @param {Object} input\n   * @returns {*} State\n   */\n\n\n  _proto.process = function process(input) {\n    var state = this.state;\n    var eventType = input.eventType;\n    var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n    var isValid = this.attrTest(input); // on cancel input and we've recognized before, return STATE_CANCELLED\n\n    if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n      return state | STATE_CANCELLED;\n    } else if (isRecognized || isValid) {\n      if (eventType & INPUT_END) {\n        return state | STATE_ENDED;\n      } else if (!(state & STATE_BEGAN)) {\n        return STATE_BEGAN;\n      }\n\n      return state | STATE_CHANGED;\n    }\n\n    return STATE_FAILED;\n  };\n\n  return AttrRecognizer;\n}(Recognizer);\n\n/**\n * @private\n * direction cons to string\n * @param {constant} direction\n * @returns {String}\n */\n\nfunction directionStr(direction) {\n  if (direction === DIRECTION_DOWN) {\n    return 'down';\n  } else if (direction === DIRECTION_UP) {\n    return 'up';\n  } else if (direction === DIRECTION_LEFT) {\n    return 'left';\n  } else if (direction === DIRECTION_RIGHT) {\n    return 'right';\n  }\n\n  return '';\n}\n\n/**\n * @private\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\n\nvar PanRecognizer =\n/*#__PURE__*/\nfunction (_AttrRecognizer) {\n  _inheritsLoose(PanRecognizer, _AttrRecognizer);\n\n  function PanRecognizer(options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    _this = _AttrRecognizer.call(this, _extends({\n      event: 'pan',\n      threshold: 10,\n      pointers: 1,\n      direction: DIRECTION_ALL\n    }, options)) || this;\n    _this.pX = null;\n    _this.pY = null;\n    return _this;\n  }\n\n  var _proto = PanRecognizer.prototype;\n\n  _proto.getTouchAction = function getTouchAction() {\n    var direction = this.options.direction;\n    var actions = [];\n\n    if (direction & DIRECTION_HORIZONTAL) {\n      actions.push(TOUCH_ACTION_PAN_Y);\n    }\n\n    if (direction & DIRECTION_VERTICAL) {\n      actions.push(TOUCH_ACTION_PAN_X);\n    }\n\n    return actions;\n  };\n\n  _proto.directionTest = function directionTest(input) {\n    var options = this.options;\n    var hasMoved = true;\n    var distance = input.distance;\n    var direction = input.direction;\n    var x = input.deltaX;\n    var y = input.deltaY; // lock to axis?\n\n    if (!(direction & options.direction)) {\n      if (options.direction & DIRECTION_HORIZONTAL) {\n        direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n        hasMoved = x !== this.pX;\n        distance = Math.abs(input.deltaX);\n      } else {\n        direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n        hasMoved = y !== this.pY;\n        distance = Math.abs(input.deltaY);\n      }\n    }\n\n    input.direction = direction;\n    return hasMoved && distance > options.threshold && direction & options.direction;\n  };\n\n  _proto.attrTest = function attrTest(input) {\n    return AttrRecognizer.prototype.attrTest.call(this, input) && ( // replace with a super call\n    this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));\n  };\n\n  _proto.emit = function emit(input) {\n    this.pX = input.deltaX;\n    this.pY = input.deltaY;\n    var direction = directionStr(input.direction);\n\n    if (direction) {\n      input.additionalEvent = this.options.event + direction;\n    }\n\n    _AttrRecognizer.prototype.emit.call(this, input);\n  };\n\n  return PanRecognizer;\n}(AttrRecognizer);\n\n/**\n * @private\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\n\nvar SwipeRecognizer =\n/*#__PURE__*/\nfunction (_AttrRecognizer) {\n  _inheritsLoose(SwipeRecognizer, _AttrRecognizer);\n\n  function SwipeRecognizer(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return _AttrRecognizer.call(this, _extends({\n      event: 'swipe',\n      threshold: 10,\n      velocity: 0.3,\n      direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n      pointers: 1\n    }, options)) || this;\n  }\n\n  var _proto = SwipeRecognizer.prototype;\n\n  _proto.getTouchAction = function getTouchAction() {\n    return PanRecognizer.prototype.getTouchAction.call(this);\n  };\n\n  _proto.attrTest = function attrTest(input) {\n    var direction = this.options.direction;\n    var velocity;\n\n    if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n      velocity = input.overallVelocity;\n    } else if (direction & DIRECTION_HORIZONTAL) {\n      velocity = input.overallVelocityX;\n    } else if (direction & DIRECTION_VERTICAL) {\n      velocity = input.overallVelocityY;\n    }\n\n    return _AttrRecognizer.prototype.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers === this.options.pointers && abs$1(velocity) > this.options.velocity && input.eventType & INPUT_END;\n  };\n\n  _proto.emit = function emit(input) {\n    var direction = directionStr(input.offsetDirection);\n\n    if (direction) {\n      this.manager.emit(this.options.event + direction, input);\n    }\n\n    this.manager.emit(this.options.event, input);\n  };\n\n  return SwipeRecognizer;\n}(AttrRecognizer);\n\n/**\n * @private\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\n\nvar PinchRecognizer =\n/*#__PURE__*/\nfunction (_AttrRecognizer) {\n  _inheritsLoose(PinchRecognizer, _AttrRecognizer);\n\n  function PinchRecognizer(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return _AttrRecognizer.call(this, _extends({\n      event: 'pinch',\n      threshold: 0,\n      pointers: 2\n    }, options)) || this;\n  }\n\n  var _proto = PinchRecognizer.prototype;\n\n  _proto.getTouchAction = function getTouchAction() {\n    return [TOUCH_ACTION_NONE];\n  };\n\n  _proto.attrTest = function attrTest(input) {\n    return _AttrRecognizer.prototype.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n  };\n\n  _proto.emit = function emit(input) {\n    if (input.scale !== 1) {\n      var inOut = input.scale < 1 ? 'in' : 'out';\n      input.additionalEvent = this.options.event + inOut;\n    }\n\n    _AttrRecognizer.prototype.emit.call(this, input);\n  };\n\n  return PinchRecognizer;\n}(AttrRecognizer);\n\n/**\n * @private\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\n\nvar RotateRecognizer =\n/*#__PURE__*/\nfunction (_AttrRecognizer) {\n  _inheritsLoose(RotateRecognizer, _AttrRecognizer);\n\n  function RotateRecognizer(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return _AttrRecognizer.call(this, _extends({\n      event: 'rotate',\n      threshold: 0,\n      pointers: 2\n    }, options)) || this;\n  }\n\n  var _proto = RotateRecognizer.prototype;\n\n  _proto.getTouchAction = function getTouchAction() {\n    return [TOUCH_ACTION_NONE];\n  };\n\n  _proto.attrTest = function attrTest(input) {\n    return _AttrRecognizer.prototype.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n  };\n\n  return RotateRecognizer;\n}(AttrRecognizer);\n\n/**\n * @private\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\n\nvar PressRecognizer =\n/*#__PURE__*/\nfunction (_Recognizer) {\n  _inheritsLoose(PressRecognizer, _Recognizer);\n\n  function PressRecognizer(options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    _this = _Recognizer.call(this, _extends({\n      event: 'press',\n      pointers: 1,\n      time: 251,\n      // minimal time of the pointer to be pressed\n      threshold: 9\n    }, options)) || this;\n    _this._timer = null;\n    _this._input = null;\n    return _this;\n  }\n\n  var _proto = PressRecognizer.prototype;\n\n  _proto.getTouchAction = function getTouchAction() {\n    return [TOUCH_ACTION_AUTO];\n  };\n\n  _proto.process = function process(input) {\n    var _this2 = this;\n\n    var options = this.options;\n    var validPointers = input.pointers.length === options.pointers;\n    var validMovement = input.distance < options.threshold;\n    var validTime = input.deltaTime > options.time;\n    this._input = input; // we only allow little movement\n    // and we've reached an end event, so a tap is possible\n\n    if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {\n      this.reset();\n    } else if (input.eventType & INPUT_START) {\n      this.reset();\n      this._timer = setTimeout(function () {\n        _this2.state = STATE_RECOGNIZED;\n\n        _this2.tryEmit();\n      }, options.time);\n    } else if (input.eventType & INPUT_END) {\n      return STATE_RECOGNIZED;\n    }\n\n    return STATE_FAILED;\n  };\n\n  _proto.reset = function reset() {\n    clearTimeout(this._timer);\n  };\n\n  _proto.emit = function emit(input) {\n    if (this.state !== STATE_RECOGNIZED) {\n      return;\n    }\n\n    if (input && input.eventType & INPUT_END) {\n      this.manager.emit(this.options.event + \"up\", input);\n    } else {\n      this._input.timeStamp = now();\n      this.manager.emit(this.options.event, this._input);\n    }\n  };\n\n  return PressRecognizer;\n}(Recognizer);\n\nvar defaults = {\n  /**\n   * @private\n   * set if DOM events are being triggered.\n   * But this is slower and unused by simple implementations, so disabled by default.\n   * @type {Boolean}\n   * @default false\n   */\n  domEvents: false,\n\n  /**\n   * @private\n   * The value for the touchAction property/fallback.\n   * When set to `compute` it will magically set the correct value based on the added recognizers.\n   * @type {String}\n   * @default compute\n   */\n  touchAction: TOUCH_ACTION_COMPUTE,\n\n  /**\n   * @private\n   * @type {Boolean}\n   * @default true\n   */\n  enable: true,\n\n  /**\n   * @private\n   * EXPERIMENTAL FEATURE -- can be removed/changed\n   * Change the parent input target element.\n   * If Null, then it is being set the to main element.\n   * @type {Null|EventTarget}\n   * @default null\n   */\n  inputTarget: null,\n\n  /**\n   * @private\n   * force an input class\n   * @type {Null|Function}\n   * @default null\n   */\n  inputClass: null,\n\n  /**\n   * @private\n   * Some CSS properties can be used to improve the working of Hammer.\n   * Add them to this method and they will be set when creating a new Manager.\n   * @namespace\n   */\n  cssProps: {\n    /**\n     * @private\n     * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n     * @type {String}\n     * @default 'none'\n     */\n    userSelect: \"none\",\n\n    /**\n     * @private\n     * Disable the Windows Phone grippers when pressing an element.\n     * @type {String}\n     * @default 'none'\n     */\n    touchSelect: \"none\",\n\n    /**\n     * @private\n     * Disables the default callout shown when you touch and hold a touch target.\n     * On iOS, when you touch and hold a touch target such as a link, Safari displays\n     * a callout containing information about the link. This property allows you to disable that callout.\n     * @type {String}\n     * @default 'none'\n     */\n    touchCallout: \"none\",\n\n    /**\n     * @private\n     * Specifies whether zooming is enabled. Used by IE10>\n     * @type {String}\n     * @default 'none'\n     */\n    contentZooming: \"none\",\n\n    /**\n     * @private\n     * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n     * @type {String}\n     * @default 'none'\n     */\n    userDrag: \"none\",\n\n    /**\n     * @private\n     * Overrides the highlight color shown when the user taps a link or a JavaScript\n     * clickable element in iOS. This property obeys the alpha value, if specified.\n     * @type {String}\n     * @default 'rgba(0,0,0,0)'\n     */\n    tapHighlightColor: \"rgba(0,0,0,0)\"\n  }\n};\n/**\n * @private\n * Default recognizer setup when calling `Hammer()`\n * When creating a new Manager these will be skipped.\n * This is separated with other defaults because of tree-shaking.\n * @type {Array}\n */\n\nvar preset = [[RotateRecognizer, {\n  enable: false\n}], [PinchRecognizer, {\n  enable: false\n}, ['rotate']], [SwipeRecognizer, {\n  direction: DIRECTION_HORIZONTAL\n}], [PanRecognizer, {\n  direction: DIRECTION_HORIZONTAL\n}, ['swipe']], [TapRecognizer], [TapRecognizer, {\n  event: 'doubletap',\n  taps: 2\n}, ['tap']], [PressRecognizer]];\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n/**\n * @private\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\n\nfunction toggleCssProps(manager, add) {\n  var element = manager.element;\n\n  if (!element.style) {\n    return;\n  }\n\n  var prop;\n  each(manager.options.cssProps, function (value, name) {\n    prop = prefixed(element.style, name);\n\n    if (add) {\n      manager.oldCssProps[prop] = element.style[prop];\n      element.style[prop] = value;\n    } else {\n      element.style[prop] = manager.oldCssProps[prop] || \"\";\n    }\n  });\n\n  if (!add) {\n    manager.oldCssProps = {};\n  }\n}\n/**\n * @private\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\n\n\nfunction triggerDomEvent(event, data) {\n  var gestureEvent = document.createEvent(\"Event\");\n  gestureEvent.initEvent(event, true, true);\n  gestureEvent.gesture = data;\n  data.target.dispatchEvent(gestureEvent);\n}\n/**\n* @private\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\n\n\nvar Manager =\n/*#__PURE__*/\nfunction () {\n  function Manager(element, options) {\n    var _this = this;\n\n    this.options = assign$1({}, defaults, options || {});\n    this.options.inputTarget = this.options.inputTarget || element;\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n    toggleCssProps(this, true);\n    each(this.options.recognizers, function (item) {\n      var recognizer = _this.add(new item[0](item[1]));\n\n      item[2] && recognizer.recognizeWith(item[2]);\n      item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n  }\n  /**\n   * @private\n   * set options\n   * @param {Object} options\n   * @returns {Manager}\n   */\n\n\n  var _proto = Manager.prototype;\n\n  _proto.set = function set(options) {\n    assign$1(this.options, options); // Options that need a little more setup\n\n    if (options.touchAction) {\n      this.touchAction.update();\n    }\n\n    if (options.inputTarget) {\n      // Clean up existing event listeners and reinitialize\n      this.input.destroy();\n      this.input.target = options.inputTarget;\n      this.input.init();\n    }\n\n    return this;\n  };\n  /**\n   * @private\n   * stop recognizing for this session.\n   * This session will be discarded, when a new [input]start event is fired.\n   * When forced, the recognizer cycle is stopped immediately.\n   * @param {Boolean} [force]\n   */\n\n\n  _proto.stop = function stop(force) {\n    this.session.stopped = force ? FORCED_STOP : STOP;\n  };\n  /**\n   * @private\n   * run the recognizers!\n   * called by the inputHandler function on every movement of the pointers (touches)\n   * it walks through all the recognizers and tries to detect the gesture that is being made\n   * @param {Object} inputData\n   */\n\n\n  _proto.recognize = function recognize(inputData) {\n    var session = this.session;\n\n    if (session.stopped) {\n      return;\n    } // run the touch-action polyfill\n\n\n    this.touchAction.preventDefaults(inputData);\n    var recognizer;\n    var recognizers = this.recognizers; // this holds the recognizer that is being recognized.\n    // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n    // if no recognizer is detecting a thing, it is set to `null`\n\n    var curRecognizer = session.curRecognizer; // reset when the last recognizer is recognized\n    // or when we're in a new session\n\n    if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {\n      session.curRecognizer = null;\n      curRecognizer = null;\n    }\n\n    var i = 0;\n\n    while (i < recognizers.length) {\n      recognizer = recognizers[i]; // find out if we are allowed try to recognize the input for this one.\n      // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n      // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n      //      that is being recognized.\n      // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n      //      this can be setup with the `recognizeWith()` method on the recognizer.\n\n      if (session.stopped !== FORCED_STOP && ( // 1\n      !curRecognizer || recognizer === curRecognizer || // 2\n      recognizer.canRecognizeWith(curRecognizer))) {\n        // 3\n        recognizer.recognize(inputData);\n      } else {\n        recognizer.reset();\n      } // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n      // current active recognizer. but only if we don't already have an active recognizer\n\n\n      if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n        session.curRecognizer = recognizer;\n        curRecognizer = recognizer;\n      }\n\n      i++;\n    }\n  };\n  /**\n   * @private\n   * get a recognizer by its event name.\n   * @param {Recognizer|String} recognizer\n   * @returns {Recognizer|Null}\n   */\n\n\n  _proto.get = function get(recognizer) {\n    if (recognizer instanceof Recognizer) {\n      return recognizer;\n    }\n\n    var recognizers = this.recognizers;\n\n    for (var i = 0; i < recognizers.length; i++) {\n      if (recognizers[i].options.event === recognizer) {\n        return recognizers[i];\n      }\n    }\n\n    return null;\n  };\n  /**\n   * @private add a recognizer to the manager\n   * existing recognizers with the same event name will be removed\n   * @param {Recognizer} recognizer\n   * @returns {Recognizer|Manager}\n   */\n\n\n  _proto.add = function add(recognizer) {\n    if (invokeArrayArg(recognizer, \"add\", this)) {\n      return this;\n    } // remove existing\n\n\n    var existing = this.get(recognizer.options.event);\n\n    if (existing) {\n      this.remove(existing);\n    }\n\n    this.recognizers.push(recognizer);\n    recognizer.manager = this;\n    this.touchAction.update();\n    return recognizer;\n  };\n  /**\n   * @private\n   * remove a recognizer by name or instance\n   * @param {Recognizer|String} recognizer\n   * @returns {Manager}\n   */\n\n\n  _proto.remove = function remove(recognizer) {\n    if (invokeArrayArg(recognizer, \"remove\", this)) {\n      return this;\n    }\n\n    var targetRecognizer = this.get(recognizer); // let's make sure this recognizer exists\n\n    if (recognizer) {\n      var recognizers = this.recognizers;\n      var index = inArray(recognizers, targetRecognizer);\n\n      if (index !== -1) {\n        recognizers.splice(index, 1);\n        this.touchAction.update();\n      }\n    }\n\n    return this;\n  };\n  /**\n   * @private\n   * bind event\n   * @param {String} events\n   * @param {Function} handler\n   * @returns {EventEmitter} this\n   */\n\n\n  _proto.on = function on(events, handler) {\n    if (events === undefined || handler === undefined) {\n      return this;\n    }\n\n    var handlers = this.handlers;\n    each(splitStr(events), function (event) {\n      handlers[event] = handlers[event] || [];\n      handlers[event].push(handler);\n    });\n    return this;\n  };\n  /**\n   * @private unbind event, leave emit blank to remove all handlers\n   * @param {String} events\n   * @param {Function} [handler]\n   * @returns {EventEmitter} this\n   */\n\n\n  _proto.off = function off(events, handler) {\n    if (events === undefined) {\n      return this;\n    }\n\n    var handlers = this.handlers;\n    each(splitStr(events), function (event) {\n      if (!handler) {\n        delete handlers[event];\n      } else {\n        handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n      }\n    });\n    return this;\n  };\n  /**\n   * @private emit event to the listeners\n   * @param {String} event\n   * @param {Object} data\n   */\n\n\n  _proto.emit = function emit(event, data) {\n    // we also want to trigger dom events\n    if (this.options.domEvents) {\n      triggerDomEvent(event, data);\n    } // no handlers, so skip it all\n\n\n    var handlers = this.handlers[event] && this.handlers[event].slice();\n\n    if (!handlers || !handlers.length) {\n      return;\n    }\n\n    data.type = event;\n\n    data.preventDefault = function () {\n      data.srcEvent.preventDefault();\n    };\n\n    var i = 0;\n\n    while (i < handlers.length) {\n      handlers[i](data);\n      i++;\n    }\n  };\n  /**\n   * @private\n   * destroy the manager and unbinds all events\n   * it doesn't unbind dom events, that is the user own responsibility\n   */\n\n\n  _proto.destroy = function destroy() {\n    this.element && toggleCssProps(this, false);\n    this.handlers = {};\n    this.session = {};\n    this.input.destroy();\n    this.element = null;\n  };\n\n  return Manager;\n}();\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n  touchstart: INPUT_START,\n  touchmove: INPUT_MOVE,\n  touchend: INPUT_END,\n  touchcancel: INPUT_CANCEL\n};\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n/**\n * @private\n * Touch events input\n * @constructor\n * @extends Input\n */\n\nvar SingleTouchInput =\n/*#__PURE__*/\nfunction (_Input) {\n  _inheritsLoose(SingleTouchInput, _Input);\n\n  function SingleTouchInput() {\n    var _this;\n\n    var proto = SingleTouchInput.prototype;\n    proto.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    proto.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    _this = _Input.apply(this, arguments) || this;\n    _this.started = false;\n    return _this;\n  }\n\n  var _proto = SingleTouchInput.prototype;\n\n  _proto.handler = function handler(ev) {\n    var type = SINGLE_TOUCH_INPUT_MAP[ev.type]; // should we handle the touch events?\n\n    if (type === INPUT_START) {\n      this.started = true;\n    }\n\n    if (!this.started) {\n      return;\n    }\n\n    var touches = normalizeSingleTouches.call(this, ev, type); // when done, reset the started state\n\n    if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n      this.started = false;\n    }\n\n    this.callback(this.manager, type, {\n      pointers: touches[0],\n      changedPointers: touches[1],\n      pointerType: INPUT_TYPE_TOUCH,\n      srcEvent: ev\n    });\n  };\n\n  return SingleTouchInput;\n}(Input);\n\nfunction normalizeSingleTouches(ev, type) {\n  var all = toArray(ev.touches);\n  var changed = toArray(ev.changedTouches);\n\n  if (type & (INPUT_END | INPUT_CANCEL)) {\n    all = uniqueArray(all.concat(changed), 'identifier', true);\n  }\n\n  return [all, changed];\n}\n\n/**\n * @private\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n  var deprecationMessage = \"DEPRECATED METHOD: \" + name + \"\\n\" + message + \" AT \\n\";\n  return function () {\n    var e = new Error('get-stack-trace');\n    var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '').replace(/^\\s+at\\s+/gm, '').replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n    var log = window.console && (window.console.warn || window.console.log);\n\n    if (log) {\n      log.call(window.console, deprecationMessage, stack);\n    }\n\n    return method.apply(this, arguments);\n  };\n}\n\n/**\n * @private\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\n\nvar extend = deprecate(function (dest, src, merge) {\n  var keys = Object.keys(src);\n  var i = 0;\n\n  while (i < keys.length) {\n    if (!merge || merge && dest[keys[i]] === undefined) {\n      dest[keys[i]] = src[keys[i]];\n    }\n\n    i++;\n  }\n\n  return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * @private\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\n\nvar merge$2 = deprecate(function (dest, src) {\n  return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * @private\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\n\nfunction inherit(child, base, properties) {\n  var baseP = base.prototype;\n  var childP;\n  childP = child.prototype = Object.create(baseP);\n  childP.constructor = child;\n  childP._super = baseP;\n\n  if (properties) {\n    assign$1(childP, properties);\n  }\n}\n\n/**\n * @private\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n  return function boundFn() {\n    return fn.apply(context, arguments);\n  };\n}\n\n/**\n * @private\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\n\nvar Hammer$2 =\n/*#__PURE__*/\nfunction () {\n  var Hammer =\n  /**\n    * @private\n    * @const {string}\n    */\n  function Hammer(element, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return new Manager(element, _extends({\n      recognizers: preset.concat()\n    }, options));\n  };\n\n  Hammer.VERSION = \"2.0.17-rc\";\n  Hammer.DIRECTION_ALL = DIRECTION_ALL;\n  Hammer.DIRECTION_DOWN = DIRECTION_DOWN;\n  Hammer.DIRECTION_LEFT = DIRECTION_LEFT;\n  Hammer.DIRECTION_RIGHT = DIRECTION_RIGHT;\n  Hammer.DIRECTION_UP = DIRECTION_UP;\n  Hammer.DIRECTION_HORIZONTAL = DIRECTION_HORIZONTAL;\n  Hammer.DIRECTION_VERTICAL = DIRECTION_VERTICAL;\n  Hammer.DIRECTION_NONE = DIRECTION_NONE;\n  Hammer.DIRECTION_DOWN = DIRECTION_DOWN;\n  Hammer.INPUT_START = INPUT_START;\n  Hammer.INPUT_MOVE = INPUT_MOVE;\n  Hammer.INPUT_END = INPUT_END;\n  Hammer.INPUT_CANCEL = INPUT_CANCEL;\n  Hammer.STATE_POSSIBLE = STATE_POSSIBLE;\n  Hammer.STATE_BEGAN = STATE_BEGAN;\n  Hammer.STATE_CHANGED = STATE_CHANGED;\n  Hammer.STATE_ENDED = STATE_ENDED;\n  Hammer.STATE_RECOGNIZED = STATE_RECOGNIZED;\n  Hammer.STATE_CANCELLED = STATE_CANCELLED;\n  Hammer.STATE_FAILED = STATE_FAILED;\n  Hammer.Manager = Manager;\n  Hammer.Input = Input;\n  Hammer.TouchAction = TouchAction;\n  Hammer.TouchInput = TouchInput;\n  Hammer.MouseInput = MouseInput;\n  Hammer.PointerEventInput = PointerEventInput;\n  Hammer.TouchMouseInput = TouchMouseInput;\n  Hammer.SingleTouchInput = SingleTouchInput;\n  Hammer.Recognizer = Recognizer;\n  Hammer.AttrRecognizer = AttrRecognizer;\n  Hammer.Tap = TapRecognizer;\n  Hammer.Pan = PanRecognizer;\n  Hammer.Swipe = SwipeRecognizer;\n  Hammer.Pinch = PinchRecognizer;\n  Hammer.Rotate = RotateRecognizer;\n  Hammer.Press = PressRecognizer;\n  Hammer.on = addEventListeners;\n  Hammer.off = removeEventListeners;\n  Hammer.each = each;\n  Hammer.merge = merge$2;\n  Hammer.extend = extend;\n  Hammer.bindFn = bindFn;\n  Hammer.assign = assign$1;\n  Hammer.inherit = inherit;\n  Hammer.bindFn = bindFn;\n  Hammer.prefixed = prefixed;\n  Hammer.toArray = toArray;\n  Hammer.inArray = inArray;\n  Hammer.uniqueArray = uniqueArray;\n  Hammer.splitStr = splitStr;\n  Hammer.boolOrFn = boolOrFn;\n  Hammer.hasParent = hasParent;\n  Hammer.addEventListeners = addEventListeners;\n  Hammer.removeEventListeners = removeEventListeners;\n  Hammer.defaults = assign$1({}, defaults, {\n    preset: preset\n  });\n  return Hammer;\n}();\n\n//  style loader but by script tag, not by the loader.\n\nHammer$2.defaults;\n\nvar RealHammer = Hammer$2;\n\nfunction _createForOfIteratorHelper$6(o, allowArrayLike) { var it = typeof _Symbol !== \"undefined\" && _getIteratorMethod(o) || o[\"@@iterator\"]; if (!it) { if (_Array$isArray(o) || (it = _unsupportedIterableToArray$6(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray$6(o, minLen) { var _context17; if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray$6(o, minLen); var n = _sliceInstanceProperty(_context17 = Object.prototype.toString.call(o)).call(_context17, 8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return _Array$from$1(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$6(o, minLen); }\nfunction _arrayLikeToArray$6(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n/**\r\n * Use this symbol to delete properies in deepObjectAssign.\r\n */\n_Symbol(\"DELETE\");\n\n/**\r\n * Seedable, fast and reasonably good (not crypto but more than okay for our\r\n * needs) random number generator.\r\n *\r\n * @remarks\r\n * Adapted from {@link https://web.archive.org/web/20110429100736/http://baagoe.com:80/en/RandomMusings/javascript}.\r\n * Original algorithm created by Johannes Baagøe \\<baagoe\\@baagoe.com\\> in 2010.\r\n */\n/**\r\n * Create a seeded pseudo random generator based on Alea by Johannes Baagøe.\r\n *\r\n * @param seed - All supplied arguments will be used as a seed. In case nothing\r\n * is supplied the current time will be used to seed the generator.\r\n * @returns A ready to use seeded generator.\r\n */\nfunction Alea() {\n  for (var _len3 = arguments.length, seed = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    seed[_key3] = arguments[_key3];\n  }\n  return AleaImplementation(seed.length ? seed : [_Date$now()]);\n}\n/**\r\n * An implementation of [[Alea]] without user input validation.\r\n *\r\n * @param seed - The data that will be used to seed the generator.\r\n * @returns A ready to use seeded generator.\r\n */\nfunction AleaImplementation(seed) {\n  var _mashSeed = mashSeed(seed),\n    _mashSeed2 = _slicedToArray(_mashSeed, 3),\n    s0 = _mashSeed2[0],\n    s1 = _mashSeed2[1],\n    s2 = _mashSeed2[2];\n  var c = 1;\n  var random = function random() {\n    var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\n    s0 = s1;\n    s1 = s2;\n    return s2 = t - (c = t | 0);\n  };\n  random.uint32 = function () {\n    return random() * 0x100000000;\n  }; // 2^32\n  random.fract53 = function () {\n    return random() + (random() * 0x200000 | 0) * 1.1102230246251565e-16;\n  }; // 2^-53\n  random.algorithm = \"Alea\";\n  random.seed = seed;\n  random.version = \"0.9\";\n  return random;\n}\n/**\r\n * Turn arbitrary data into values [[AleaImplementation]] can use to generate\r\n * random numbers.\r\n *\r\n * @param seed - Arbitrary data that will be used as the seed.\r\n * @returns Three numbers to use as initial values for [[AleaImplementation]].\r\n */\nfunction mashSeed() {\n  var mash = Mash();\n  var s0 = mash(\" \");\n  var s1 = mash(\" \");\n  var s2 = mash(\" \");\n  for (var i = 0; i < arguments.length; i++) {\n    s0 -= mash(i < 0 || arguments.length <= i ? undefined : arguments[i]);\n    if (s0 < 0) {\n      s0 += 1;\n    }\n    s1 -= mash(i < 0 || arguments.length <= i ? undefined : arguments[i]);\n    if (s1 < 0) {\n      s1 += 1;\n    }\n    s2 -= mash(i < 0 || arguments.length <= i ? undefined : arguments[i]);\n    if (s2 < 0) {\n      s2 += 1;\n    }\n  }\n  return [s0, s1, s2];\n}\n/**\r\n * Create a new mash function.\r\n *\r\n * @returns A nonpure function that takes arbitrary [[Mashable]] data and turns\r\n * them into numbers.\r\n */\nfunction Mash() {\n  var n = 0xefc8249d;\n  return function (data) {\n    var string = data.toString();\n    for (var i = 0; i < string.length; i++) {\n      n += string.charCodeAt(i);\n      var h = 0.02519603282416938 * n;\n      n = h >>> 0;\n      h -= n;\n      h *= n;\n      n = h >>> 0;\n      h -= n;\n      n += h * 0x100000000; // 2^32\n    }\n\n    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n  };\n}\n\n/**\n * Setup a mock hammer.js object, for unit testing.\n *\n * Inspiration: https://github.com/uber/deck.gl/pull/658\n *\n * @returns {{on: noop, off: noop, destroy: noop, emit: noop, get: get}}\n */\nfunction hammerMock() {\n  var noop = function noop() {};\n  return {\n    on: noop,\n    off: noop,\n    destroy: noop,\n    emit: noop,\n    get: function get() {\n      return {\n        set: noop\n      };\n    }\n  };\n}\nvar Hammer$1 = typeof window !== \"undefined\" ? window.Hammer || RealHammer : function () {\n  // hammer.js is only available in a browser, not in node.js. Replacing it with a mock object.\n  return hammerMock();\n};\n\n/**\n * Turn an element into an clickToUse element.\n * When not active, the element has a transparent overlay. When the overlay is\n * clicked, the mode is changed to active.\n * When active, the element is displayed with a blue border around it, and\n * the interactive contents of the element can be used. When clicked outside\n * the element, the elements mode is changed to inactive.\n *\n * @param {Element} container\n * @class Activator\n */\nfunction Activator$1(container) {\n  var _this = this,\n    _context3;\n  this._cleanupQueue = [];\n  this.active = false;\n  this._dom = {\n    container: container,\n    overlay: document.createElement(\"div\")\n  };\n  this._dom.overlay.classList.add(\"vis-overlay\");\n  this._dom.container.appendChild(this._dom.overlay);\n  this._cleanupQueue.push(function () {\n    _this._dom.overlay.parentNode.removeChild(_this._dom.overlay);\n  });\n  var hammer = Hammer$1(this._dom.overlay);\n  hammer.on(\"tap\", _bindInstanceProperty$1(_context3 = this._onTapOverlay).call(_context3, this));\n  this._cleanupQueue.push(function () {\n    hammer.destroy();\n    // FIXME: cleaning up hammer instances doesn't work (Timeline not removed\n    // from memory)\n  });\n\n  // block all touch events (except tap)\n  var events = [\"tap\", \"doubletap\", \"press\", \"pinch\", \"pan\", \"panstart\", \"panmove\", \"panend\"];\n  _forEachInstanceProperty(events).call(events, function (event) {\n    hammer.on(event, function (event) {\n      event.srcEvent.stopPropagation();\n    });\n  });\n\n  // attach a click event to the window, in order to deactivate when clicking outside the timeline\n  if (document && document.body) {\n    this._onClick = function (event) {\n      if (!_hasParent(event.target, container)) {\n        _this.deactivate();\n      }\n    };\n    document.body.addEventListener(\"click\", this._onClick);\n    this._cleanupQueue.push(function () {\n      document.body.removeEventListener(\"click\", _this._onClick);\n    });\n  }\n\n  // prepare escape key listener for deactivating when active\n  this._escListener = function (event) {\n    if (\"key\" in event ? event.key === \"Escape\" : event.keyCode === 27 /* the keyCode is for IE11 */) {\n      _this.deactivate();\n    }\n  };\n}\n\n// turn into an event emitter\nEmitter(Activator$1.prototype);\n\n// The currently active activator\nActivator$1.current = null;\n\n/**\n * Destroy the activator. Cleans up all created DOM and event listeners\n */\nActivator$1.prototype.destroy = function () {\n  var _context4, _context5;\n  this.deactivate();\n  var _iterator2 = _createForOfIteratorHelper$6(_reverseInstanceProperty(_context4 = _spliceInstanceProperty(_context5 = this._cleanupQueue).call(_context5, 0)).call(_context4)),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var callback = _step2.value;\n      callback();\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n};\n\n/**\n * Activate the element\n * Overlay is hidden, element is decorated with a blue shadow border\n */\nActivator$1.prototype.activate = function () {\n  // we allow only one active activator at a time\n  if (Activator$1.current) {\n    Activator$1.current.deactivate();\n  }\n  Activator$1.current = this;\n  this.active = true;\n  this._dom.overlay.style.display = \"none\";\n  this._dom.container.classList.add(\"vis-active\");\n  this.emit(\"change\");\n  this.emit(\"activate\");\n\n  // ugly hack: bind ESC after emitting the events, as the Network rebinds all\n  // keyboard events on a 'change' event\n  document.body.addEventListener(\"keydown\", this._escListener);\n};\n\n/**\n * Deactivate the element\n * Overlay is displayed on top of the element\n */\nActivator$1.prototype.deactivate = function () {\n  this.active = false;\n  this._dom.overlay.style.display = \"block\";\n  this._dom.container.classList.remove(\"vis-active\");\n  document.body.removeEventListener(\"keydown\", this._escListener);\n  this.emit(\"change\");\n  this.emit(\"deactivate\");\n};\n\n/**\n * Handle a tap event: activate the container\n *\n * @param {Event}  event   The event\n * @private\n */\nActivator$1.prototype._onTapOverlay = function (event) {\n  // activate the container\n  this.activate();\n  event.srcEvent.stopPropagation();\n};\n\n/**\n * Test whether the element has the requested parent element somewhere in\n * its chain of parent nodes.\n *\n * @param {HTMLElement} element\n * @param {HTMLElement} parent\n * @returns {boolean} Returns true when the parent is found somewhere in the\n *                    chain of parent nodes.\n * @private\n */\nfunction _hasParent(element, parent) {\n  while (element) {\n    if (element === parent) {\n      return true;\n    }\n    element = element.parentNode;\n  }\n  return false;\n}\n// Color REs\nvar fullHexRE = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\nvar shortHexRE = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\nvar rgbRE = /^rgb\\( *(1?\\d{1,2}|2[0-4]\\d|25[0-5]) *, *(1?\\d{1,2}|2[0-4]\\d|25[0-5]) *, *(1?\\d{1,2}|2[0-4]\\d|25[0-5]) *\\)$/i;\nvar rgbaRE = /^rgba\\( *(1?\\d{1,2}|2[0-4]\\d|25[0-5]) *, *(1?\\d{1,2}|2[0-4]\\d|25[0-5]) *, *(1?\\d{1,2}|2[0-4]\\d|25[0-5]) *, *([01]|0?\\.\\d+) *\\)$/i;\n/**\r\n * Remove everything in the DOM object.\r\n *\r\n * @param DOMobject - Node whose child nodes will be recursively deleted.\r\n */\nfunction recursiveDOMDelete(DOMobject) {\n  if (DOMobject) {\n    while (DOMobject.hasChildNodes() === true) {\n      var child = DOMobject.firstChild;\n      if (child) {\n        recursiveDOMDelete(child);\n        DOMobject.removeChild(child);\n      }\n    }\n  }\n}\n/**\r\n * Test whether given object is a string.\r\n *\r\n * @param value - Input value of unknown type.\r\n * @returns True if string, false otherwise.\r\n */\nfunction isString(value) {\n  return value instanceof String || typeof value === \"string\";\n}\n/**\r\n * Test whether given object is a object (not primitive or null).\r\n *\r\n * @param value - Input value of unknown type.\r\n * @returns True if not null object, false otherwise.\r\n */\nfunction isObject$7(value) {\n  return _typeof(value) === \"object\" && value !== null;\n}\n/**\r\n * Copy property from b to a if property present in a.\r\n * If property in b explicitly set to null, delete it if `allowDeletion` set.\r\n *\r\n * Internal helper routine, should not be exported. Not added to `exports` for that reason.\r\n *\r\n * @param a - Target object.\r\n * @param b - Source object.\r\n * @param prop - Name of property to copy from b to a.\r\n * @param allowDeletion - If true, delete property in a if explicitly set to null in b.\r\n */\nfunction copyOrDelete(a, b, prop, allowDeletion) {\n  var doDeletion = false;\n  if (allowDeletion === true) {\n    doDeletion = b[prop] === null && a[prop] !== undefined;\n  }\n  if (doDeletion) {\n    delete a[prop];\n  } else {\n    a[prop] = b[prop]; // Remember, this is a reference copy!\n  }\n}\n/**\r\n * Fill an object with a possibly partially defined other object.\r\n *\r\n * Only copies values for the properties already present in a.\r\n * That means an object is not created on a property if only the b object has it.\r\n *\r\n * @param a - The object that will have it's properties updated.\r\n * @param b - The object with property updates.\r\n * @param allowDeletion - If true, delete properties in a that are explicitly set to null in b.\r\n */\nfunction fillIfDefined(a, b) {\n  var allowDeletion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  // NOTE: iteration of properties of a\n  // NOTE: prototype properties iterated over as well\n  for (var prop in a) {\n    if (b[prop] !== undefined) {\n      if (b[prop] === null || _typeof(b[prop]) !== \"object\") {\n        // Note: typeof null === 'object'\n        copyOrDelete(a, b, prop, allowDeletion);\n      } else {\n        var aProp = a[prop];\n        var bProp = b[prop];\n        if (isObject$7(aProp) && isObject$7(bProp)) {\n          fillIfDefined(aProp, bProp, allowDeletion);\n        }\n      }\n    }\n  }\n}\n/**\r\n * Extend object a with selected properties of object b.\r\n * Only properties with defined values are copied.\r\n *\r\n * @remarks\r\n * Previous version of this routine implied that multiple source objects could\r\n * be used; however, the implementation was **wrong**. Since multiple (\\>1)\r\n * sources weren't used anywhere in the `vis.js` code, this has been removed\r\n * @param props - Names of first-level properties to copy over.\r\n * @param a - Target object.\r\n * @param b - Source object.\r\n * @param allowDeletion - If true, delete property in a if explicitly set to null in b.\r\n * @returns Argument a.\r\n */\nfunction selectiveDeepExtend(props, a, b) {\n  var allowDeletion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  // TODO: add support for Arrays to deepExtend\n  if (_Array$isArray(b)) {\n    throw new TypeError(\"Arrays are not supported by deepExtend\");\n  }\n  for (var p = 0; p < props.length; p++) {\n    var prop = props[p];\n    if (Object.prototype.hasOwnProperty.call(b, prop)) {\n      if (b[prop] && b[prop].constructor === Object) {\n        if (a[prop] === undefined) {\n          a[prop] = {};\n        }\n        if (a[prop].constructor === Object) {\n          deepExtend(a[prop], b[prop], false, allowDeletion);\n        } else {\n          copyOrDelete(a, b, prop, allowDeletion);\n        }\n      } else if (_Array$isArray(b[prop])) {\n        throw new TypeError(\"Arrays are not supported by deepExtend\");\n      } else {\n        copyOrDelete(a, b, prop, allowDeletion);\n      }\n    }\n  }\n  return a;\n}\n/**\r\n * Extend object `a` with properties of object `b`, ignoring properties which\r\n * are explicitly specified to be excluded.\r\n *\r\n * @remarks\r\n * The properties of `b` are considered for copying. Properties which are\r\n * themselves objects are are also extended. Only properties with defined\r\n * values are copied.\r\n * @param propsToExclude - Names of properties which should *not* be copied.\r\n * @param a - Object to extend.\r\n * @param b - Object to take properties from for extension.\r\n * @param allowDeletion - If true, delete properties in a that are explicitly\r\n * set to null in b.\r\n * @returns Argument a.\r\n */\nfunction selectiveNotDeepExtend(propsToExclude, a, b) {\n  var allowDeletion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  // TODO: add support for Arrays to deepExtend\n  // NOTE: array properties have an else-below; apparently, there is a problem here.\n  if (_Array$isArray(b)) {\n    throw new TypeError(\"Arrays are not supported by deepExtend\");\n  }\n  for (var prop in b) {\n    if (!Object.prototype.hasOwnProperty.call(b, prop)) {\n      continue;\n    } // Handle local properties only\n    if (_includesInstanceProperty(propsToExclude).call(propsToExclude, prop)) {\n      continue;\n    } // In exclusion list, skip\n    if (b[prop] && b[prop].constructor === Object) {\n      if (a[prop] === undefined) {\n        a[prop] = {};\n      }\n      if (a[prop].constructor === Object) {\n        deepExtend(a[prop], b[prop]); // NOTE: allowDeletion not propagated!\n      } else {\n        copyOrDelete(a, b, prop, allowDeletion);\n      }\n    } else if (_Array$isArray(b[prop])) {\n      a[prop] = [];\n      for (var i = 0; i < b[prop].length; i++) {\n        a[prop].push(b[prop][i]);\n      }\n    } else {\n      copyOrDelete(a, b, prop, allowDeletion);\n    }\n  }\n  return a;\n}\n/**\r\n * Deep extend an object a with the properties of object b.\r\n *\r\n * @param a - Target object.\r\n * @param b - Source object.\r\n * @param protoExtend - If true, the prototype values will also be extended.\r\n * (That is the options objects that inherit from others will also get the\r\n * inherited options).\r\n * @param allowDeletion - If true, the values of fields that are null will be deleted.\r\n * @returns Argument a.\r\n */\nfunction deepExtend(a, b) {\n  var protoExtend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var allowDeletion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  for (var prop in b) {\n    if (Object.prototype.hasOwnProperty.call(b, prop) || protoExtend === true) {\n      if (_typeof(b[prop]) === \"object\" && b[prop] !== null && _Object$getPrototypeOf$1(b[prop]) === Object.prototype) {\n        if (a[prop] === undefined) {\n          a[prop] = deepExtend({}, b[prop], protoExtend); // NOTE: allowDeletion not propagated!\n        } else if (_typeof(a[prop]) === \"object\" && a[prop] !== null && _Object$getPrototypeOf$1(a[prop]) === Object.prototype) {\n          deepExtend(a[prop], b[prop], protoExtend); // NOTE: allowDeletion not propagated!\n        } else {\n          copyOrDelete(a, b, prop, allowDeletion);\n        }\n      } else if (_Array$isArray(b[prop])) {\n        var _context6;\n        a[prop] = _sliceInstanceProperty(_context6 = b[prop]).call(_context6);\n      } else {\n        copyOrDelete(a, b, prop, allowDeletion);\n      }\n    }\n  }\n  return a;\n}\n/**\r\n * Used to extend an array and copy it. This is used to propagate paths recursively.\r\n *\r\n * @param arr - First part.\r\n * @param newValue - The value to be aadded into the array.\r\n * @returns A new array with all items from arr and newValue (which is last).\r\n */\nfunction copyAndExtendArray(arr, newValue) {\n  var _context7;\n  return _concatInstanceProperty(_context7 = []).call(_context7, _toConsumableArray(arr), [newValue]);\n}\n/**\r\n * Used to extend an array and copy it. This is used to propagate paths recursively.\r\n *\r\n * @param arr - The array to be copied.\r\n * @returns Shallow copy of arr.\r\n */\nfunction copyArray(arr) {\n  return _sliceInstanceProperty(arr).call(arr);\n}\n/**\r\n * Retrieve the absolute left value of a DOM element.\r\n *\r\n * @param elem - A dom element, for example a div.\r\n * @returns The absolute left position of this element in the browser page.\r\n */\nfunction getAbsoluteLeft(elem) {\n  return elem.getBoundingClientRect().left;\n}\n/**\r\n * Retrieve the absolute top value of a DOM element.\r\n *\r\n * @param elem - A dom element, for example a div.\r\n * @returns The absolute top position of this element in the browser page.\r\n */\nfunction getAbsoluteTop(elem) {\n  return elem.getBoundingClientRect().top;\n}\n/**\r\n * For each method for both arrays and objects.\r\n * In case of an array, the built-in Array.forEach() is applied (**No, it's not!**).\r\n * In case of an Object, the method loops over all properties of the object.\r\n *\r\n * @param object - An Object or Array to be iterated over.\r\n * @param callback - Array.forEach-like callback.\r\n */\nfunction forEach$1(object, callback) {\n  if (_Array$isArray(object)) {\n    // array\n    var len = object.length;\n    for (var i = 0; i < len; i++) {\n      callback(object[i], i, object);\n    }\n  } else {\n    // object\n    for (var key in object) {\n      if (Object.prototype.hasOwnProperty.call(object, key)) {\n        callback(object[key], key, object);\n      }\n    }\n  }\n}\n/**\r\n * Convert hex color string into RGB color object.\r\n *\r\n * @remarks\r\n * {@link http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb}\r\n * @param hex - Hex color string (3 or 6 digits, with or without #).\r\n * @returns RGB color object.\r\n */\nfunction hexToRGB(hex) {\n  var result;\n  switch (hex.length) {\n    case 3:\n    case 4:\n      result = shortHexRE.exec(hex);\n      return result ? {\n        r: _parseInt$1(result[1] + result[1], 16),\n        g: _parseInt$1(result[2] + result[2], 16),\n        b: _parseInt$1(result[3] + result[3], 16)\n      } : null;\n    case 6:\n    case 7:\n      result = fullHexRE.exec(hex);\n      return result ? {\n        r: _parseInt$1(result[1], 16),\n        g: _parseInt$1(result[2], 16),\n        b: _parseInt$1(result[3], 16)\n      } : null;\n    default:\n      return null;\n  }\n}\n/**\r\n * This function takes string color in hex or RGB format and adds the opacity, RGBA is passed through unchanged.\r\n *\r\n * @param color - The color string (hex, RGB, RGBA).\r\n * @param opacity - The new opacity.\r\n * @returns RGBA string, for example 'rgba(255, 0, 127, 0.3)'.\r\n */\nfunction overrideOpacity(color, opacity) {\n  if (_includesInstanceProperty(color).call(color, \"rgba\")) {\n    return color;\n  } else if (_includesInstanceProperty(color).call(color, \"rgb\")) {\n    var rgb = color.substr(_indexOfInstanceProperty(color).call(color, \"(\") + 1).replace(\")\", \"\").split(\",\");\n    return \"rgba(\" + rgb[0] + \",\" + rgb[1] + \",\" + rgb[2] + \",\" + opacity + \")\";\n  } else {\n    var _rgb = hexToRGB(color);\n    if (_rgb == null) {\n      return color;\n    } else {\n      return \"rgba(\" + _rgb.r + \",\" + _rgb.g + \",\" + _rgb.b + \",\" + opacity + \")\";\n    }\n  }\n}\n/**\r\n * Convert RGB \\<0, 255\\> into hex color string.\r\n *\r\n * @param red - Red channel.\r\n * @param green - Green channel.\r\n * @param blue - Blue channel.\r\n * @returns Hex color string (for example: '#0acdc0').\r\n */\nfunction RGBToHex(red, green, blue) {\n  var _context10;\n  return \"#\" + _sliceInstanceProperty(_context10 = ((1 << 24) + (red << 16) + (green << 8) + blue).toString(16)).call(_context10, 1);\n}\n/**\r\n * Parse a color property into an object with border, background, and highlight colors.\r\n *\r\n * @param inputColor - Shorthand color string or input color object.\r\n * @param defaultColor - Full color object to fill in missing values in inputColor.\r\n * @returns Color object.\r\n */\nfunction parseColor(inputColor, defaultColor) {\n  if (isString(inputColor)) {\n    var colorStr = inputColor;\n    if (isValidRGB(colorStr)) {\n      var _context11;\n      var rgb = _mapInstanceProperty(_context11 = colorStr.substr(4).substr(0, colorStr.length - 5).split(\",\")).call(_context11, function (value) {\n        return _parseInt$1(value);\n      });\n      colorStr = RGBToHex(rgb[0], rgb[1], rgb[2]);\n    }\n    if (isValidHex(colorStr) === true) {\n      var hsv = hexToHSV(colorStr);\n      var lighterColorHSV = {\n        h: hsv.h,\n        s: hsv.s * 0.8,\n        v: Math.min(1, hsv.v * 1.02)\n      };\n      var darkerColorHSV = {\n        h: hsv.h,\n        s: Math.min(1, hsv.s * 1.25),\n        v: hsv.v * 0.8\n      };\n      var darkerColorHex = HSVToHex(darkerColorHSV.h, darkerColorHSV.s, darkerColorHSV.v);\n      var lighterColorHex = HSVToHex(lighterColorHSV.h, lighterColorHSV.s, lighterColorHSV.v);\n      return {\n        background: colorStr,\n        border: darkerColorHex,\n        highlight: {\n          background: lighterColorHex,\n          border: darkerColorHex\n        },\n        hover: {\n          background: lighterColorHex,\n          border: darkerColorHex\n        }\n      };\n    } else {\n      return {\n        background: colorStr,\n        border: colorStr,\n        highlight: {\n          background: colorStr,\n          border: colorStr\n        },\n        hover: {\n          background: colorStr,\n          border: colorStr\n        }\n      };\n    }\n  } else {\n    if (defaultColor) {\n      var color = {\n        background: inputColor.background || defaultColor.background,\n        border: inputColor.border || defaultColor.border,\n        highlight: isString(inputColor.highlight) ? {\n          border: inputColor.highlight,\n          background: inputColor.highlight\n        } : {\n          background: inputColor.highlight && inputColor.highlight.background || defaultColor.highlight.background,\n          border: inputColor.highlight && inputColor.highlight.border || defaultColor.highlight.border\n        },\n        hover: isString(inputColor.hover) ? {\n          border: inputColor.hover,\n          background: inputColor.hover\n        } : {\n          border: inputColor.hover && inputColor.hover.border || defaultColor.hover.border,\n          background: inputColor.hover && inputColor.hover.background || defaultColor.hover.background\n        }\n      };\n      return color;\n    } else {\n      var _color = {\n        background: inputColor.background || undefined,\n        border: inputColor.border || undefined,\n        highlight: isString(inputColor.highlight) ? {\n          border: inputColor.highlight,\n          background: inputColor.highlight\n        } : {\n          background: inputColor.highlight && inputColor.highlight.background || undefined,\n          border: inputColor.highlight && inputColor.highlight.border || undefined\n        },\n        hover: isString(inputColor.hover) ? {\n          border: inputColor.hover,\n          background: inputColor.hover\n        } : {\n          border: inputColor.hover && inputColor.hover.border || undefined,\n          background: inputColor.hover && inputColor.hover.background || undefined\n        }\n      };\n      return _color;\n    }\n  }\n}\n/**\r\n * Convert RGB \\<0, 255\\> into HSV object.\r\n *\r\n * @remarks\r\n * {@link http://www.javascripter.net/faq/rgb2hsv.htm}\r\n * @param red - Red channel.\r\n * @param green - Green channel.\r\n * @param blue - Blue channel.\r\n * @returns HSV color object.\r\n */\nfunction RGBToHSV(red, green, blue) {\n  red = red / 255;\n  green = green / 255;\n  blue = blue / 255;\n  var minRGB = Math.min(red, Math.min(green, blue));\n  var maxRGB = Math.max(red, Math.max(green, blue));\n  // Black-gray-white\n  if (minRGB === maxRGB) {\n    return {\n      h: 0,\n      s: 0,\n      v: minRGB\n    };\n  }\n  // Colors other than black-gray-white:\n  var d = red === minRGB ? green - blue : blue === minRGB ? red - green : blue - red;\n  var h = red === minRGB ? 3 : blue === minRGB ? 1 : 5;\n  var hue = 60 * (h - d / (maxRGB - minRGB)) / 360;\n  var saturation = (maxRGB - minRGB) / maxRGB;\n  var value = maxRGB;\n  return {\n    h: hue,\n    s: saturation,\n    v: value\n  };\n}\n/**\r\n * Convert HSV \\<0, 1\\> into RGB color object.\r\n *\r\n * @remarks\r\n * {@link https://gist.github.com/mjijackson/5311256}\r\n * @param h - Hue.\r\n * @param s - Saturation.\r\n * @param v - Value.\r\n * @returns RGB color object.\r\n */\nfunction HSVToRGB(h, s, v) {\n  var r;\n  var g;\n  var b;\n  var i = Math.floor(h * 6);\n  var f = h * 6 - i;\n  var p = v * (1 - s);\n  var q = v * (1 - f * s);\n  var t = v * (1 - (1 - f) * s);\n  switch (i % 6) {\n    case 0:\n      r = v, g = t, b = p;\n      break;\n    case 1:\n      r = q, g = v, b = p;\n      break;\n    case 2:\n      r = p, g = v, b = t;\n      break;\n    case 3:\n      r = p, g = q, b = v;\n      break;\n    case 4:\n      r = t, g = p, b = v;\n      break;\n    case 5:\n      r = v, g = p, b = q;\n      break;\n  }\n  return {\n    r: Math.floor(r * 255),\n    g: Math.floor(g * 255),\n    b: Math.floor(b * 255)\n  };\n}\n/**\r\n * Convert HSV \\<0, 1\\> into hex color string.\r\n *\r\n * @param h - Hue.\r\n * @param s - Saturation.\r\n * @param v - Value.\r\n * @returns Hex color string.\r\n */\nfunction HSVToHex(h, s, v) {\n  var rgb = HSVToRGB(h, s, v);\n  return RGBToHex(rgb.r, rgb.g, rgb.b);\n}\n/**\r\n * Convert hex color string into HSV \\<0, 1\\>.\r\n *\r\n * @param hex - Hex color string.\r\n * @returns HSV color object.\r\n */\nfunction hexToHSV(hex) {\n  var rgb = hexToRGB(hex);\n  if (!rgb) {\n    throw new TypeError(\"'\".concat(hex, \"' is not a valid color.\"));\n  }\n  return RGBToHSV(rgb.r, rgb.g, rgb.b);\n}\n/**\r\n * Validate hex color string.\r\n *\r\n * @param hex - Unknown string that may contain a color.\r\n * @returns True if the string is valid, false otherwise.\r\n */\nfunction isValidHex(hex) {\n  var isOk = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(hex);\n  return isOk;\n}\n/**\r\n * Validate RGB color string.\r\n *\r\n * @param rgb - Unknown string that may contain a color.\r\n * @returns True if the string is valid, false otherwise.\r\n */\nfunction isValidRGB(rgb) {\n  return rgbRE.test(rgb);\n}\n/**\r\n * Validate RGBA color string.\r\n *\r\n * @param rgba - Unknown string that may contain a color.\r\n * @returns True if the string is valid, false otherwise.\r\n */\nfunction isValidRGBA(rgba) {\n  return rgbaRE.test(rgba);\n}\n/**\r\n * This recursively redirects the prototype of JSON objects to the referenceObject.\r\n * This is used for default options.\r\n *\r\n * @param referenceObject - The original object.\r\n * @returns The Element if the referenceObject is an Element, or a new object inheriting from the referenceObject.\r\n */\nfunction bridgeObject(referenceObject) {\n  if (referenceObject === null || _typeof(referenceObject) !== \"object\") {\n    return null;\n  }\n  if (referenceObject instanceof Element) {\n    // Avoid bridging DOM objects\n    return referenceObject;\n  }\n  var objectTo = _Object$create$1(referenceObject);\n  for (var i in referenceObject) {\n    if (Object.prototype.hasOwnProperty.call(referenceObject, i)) {\n      if (_typeof(referenceObject[i]) == \"object\") {\n        objectTo[i] = bridgeObject(referenceObject[i]);\n      }\n    }\n  }\n  return objectTo;\n}\n/**\r\n * This is used to set the options of subobjects in the options object.\r\n *\r\n * A requirement of these subobjects is that they have an 'enabled' element\r\n * which is optional for the user but mandatory for the program.\r\n *\r\n * The added value here of the merge is that option 'enabled' is set as required.\r\n *\r\n * @param mergeTarget - Either this.options or the options used for the groups.\r\n * @param options - Options.\r\n * @param option - Option key in the options argument.\r\n * @param globalOptions - Global options, passed in to determine value of option 'enabled'.\r\n */\nfunction mergeOptions(mergeTarget, options, option) {\n  var globalOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  // Local helpers\n  var isPresent = function isPresent(obj) {\n    return obj !== null && obj !== undefined;\n  };\n  var isObject = function isObject(obj) {\n    return obj !== null && _typeof(obj) === \"object\";\n  };\n  // https://stackoverflow.com/a/34491287/1223531\n  var isEmpty = function isEmpty(obj) {\n    for (var x in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, x)) {\n        return false;\n      }\n    }\n    return true;\n  };\n  // Guards\n  if (!isObject(mergeTarget)) {\n    throw new Error(\"Parameter mergeTarget must be an object\");\n  }\n  if (!isObject(options)) {\n    throw new Error(\"Parameter options must be an object\");\n  }\n  if (!isPresent(option)) {\n    throw new Error(\"Parameter option must have a value\");\n  }\n  if (!isObject(globalOptions)) {\n    throw new Error(\"Parameter globalOptions must be an object\");\n  }\n  //\n  // Actual merge routine, separated from main logic\n  // Only a single level of options is merged. Deeper levels are ref'd. This may actually be an issue.\n  //\n  var doMerge = function doMerge(target, options, option) {\n    if (!isObject(target[option])) {\n      target[option] = {};\n    }\n    var src = options[option];\n    var dst = target[option];\n    for (var prop in src) {\n      if (Object.prototype.hasOwnProperty.call(src, prop)) {\n        dst[prop] = src[prop];\n      }\n    }\n  };\n  // Local initialization\n  var srcOption = options[option];\n  var globalPassed = isObject(globalOptions) && !isEmpty(globalOptions);\n  var globalOption = globalPassed ? globalOptions[option] : undefined;\n  var globalEnabled = globalOption ? globalOption.enabled : undefined;\n  /////////////////////////////////////////\n  // Main routine\n  /////////////////////////////////////////\n  if (srcOption === undefined) {\n    return; // Nothing to do\n  }\n\n  if (typeof srcOption === \"boolean\") {\n    if (!isObject(mergeTarget[option])) {\n      mergeTarget[option] = {};\n    }\n    mergeTarget[option].enabled = srcOption;\n    return;\n  }\n  if (srcOption === null && !isObject(mergeTarget[option])) {\n    // If possible, explicit copy from globals\n    if (isPresent(globalOption)) {\n      mergeTarget[option] = _Object$create$1(globalOption);\n    } else {\n      return; // Nothing to do\n    }\n  }\n\n  if (!isObject(srcOption)) {\n    return;\n  }\n  //\n  // Ensure that 'enabled' is properly set. It is required internally\n  // Note that the value from options will always overwrite the existing value\n  //\n  var enabled = true; // default value\n  if (srcOption.enabled !== undefined) {\n    enabled = srcOption.enabled;\n  } else {\n    // Take from globals, if present\n    if (globalEnabled !== undefined) {\n      enabled = globalOption.enabled;\n    }\n  }\n  doMerge(mergeTarget, options, option);\n  mergeTarget[option].enabled = enabled;\n}\n/*\r\n * Easing Functions.\r\n * Only considering the t value for the range [0, 1] => [0, 1].\r\n *\r\n * Inspiration: from http://gizma.com/easing/\r\n * https://gist.github.com/gre/1650294\r\n */\nvar easingFunctions = {\n  /**\r\n   * Provides no easing and no acceleration.\r\n   *\r\n   * @param t - Time.\r\n   * @returns Value at time t.\r\n   */\n  linear: function linear(t) {\n    return t;\n  },\n  /**\r\n   * Accelerate from zero velocity.\r\n   *\r\n   * @param t - Time.\r\n   * @returns Value at time t.\r\n   */\n  easeInQuad: function easeInQuad(t) {\n    return t * t;\n  },\n  /**\r\n   * Decelerate to zero velocity.\r\n   *\r\n   * @param t - Time.\r\n   * @returns Value at time t.\r\n   */\n  easeOutQuad: function easeOutQuad(t) {\n    return t * (2 - t);\n  },\n  /**\r\n   * Accelerate until halfway, then decelerate.\r\n   *\r\n   * @param t - Time.\r\n   * @returns Value at time t.\r\n   */\n  easeInOutQuad: function easeInOutQuad(t) {\n    return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n  },\n  /**\r\n   * Accelerate from zero velocity.\r\n   *\r\n   * @param t - Time.\r\n   * @returns Value at time t.\r\n   */\n  easeInCubic: function easeInCubic(t) {\n    return t * t * t;\n  },\n  /**\r\n   * Decelerate to zero velocity.\r\n   *\r\n   * @param t - Time.\r\n   * @returns Value at time t.\r\n   */\n  easeOutCubic: function easeOutCubic(t) {\n    return --t * t * t + 1;\n  },\n  /**\r\n   * Accelerate until halfway, then decelerate.\r\n   *\r\n   * @param t - Time.\r\n   * @returns Value at time t.\r\n   */\n  easeInOutCubic: function easeInOutCubic(t) {\n    return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n  },\n  /**\r\n   * Accelerate from zero velocity.\r\n   *\r\n   * @param t - Time.\r\n   * @returns Value at time t.\r\n   */\n  easeInQuart: function easeInQuart(t) {\n    return t * t * t * t;\n  },\n  /**\r\n   * Decelerate to zero velocity.\r\n   *\r\n   * @param t - Time.\r\n   * @returns Value at time t.\r\n   */\n  easeOutQuart: function easeOutQuart(t) {\n    return 1 - --t * t * t * t;\n  },\n  /**\r\n   * Accelerate until halfway, then decelerate.\r\n   *\r\n   * @param t - Time.\r\n   * @returns Value at time t.\r\n   */\n  easeInOutQuart: function easeInOutQuart(t) {\n    return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n  },\n  /**\r\n   * Accelerate from zero velocity.\r\n   *\r\n   * @param t - Time.\r\n   * @returns Value at time t.\r\n   */\n  easeInQuint: function easeInQuint(t) {\n    return t * t * t * t * t;\n  },\n  /**\r\n   * Decelerate to zero velocity.\r\n   *\r\n   * @param t - Time.\r\n   * @returns Value at time t.\r\n   */\n  easeOutQuint: function easeOutQuint(t) {\n    return 1 + --t * t * t * t * t;\n  },\n  /**\r\n   * Accelerate until halfway, then decelerate.\r\n   *\r\n   * @param t - Time.\r\n   * @returns Value at time t.\r\n   */\n  easeInOutQuint: function easeInOutQuint(t) {\n    return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n  }\n};\n// @TODO: This doesn't work properly.\n// It works only for single property objects,\n// otherwise it combines all of the types in a union.\n// export function topMost<K1 extends string, V1> (\n//   pile: Record<K1, undefined | V1>[],\n//   accessors: K1 | [K1]\n// ): undefined | V1\n// export function topMost<K1 extends string, K2 extends string, V1, V2> (\n//   pile: Record<K1, undefined | V1 | Record<K2, undefined | V2>>[],\n//   accessors: [K1, K2]\n// ): undefined | V1 | V2\n// export function topMost<K1 extends string, K2 extends string, K3 extends string, V1, V2, V3> (\n//   pile: Record<K1, undefined | V1 | Record<K2, undefined | V2 | Record<K3, undefined | V3>>>[],\n//   accessors: [K1, K2, K3]\n// ): undefined | V1 | V2 | V3\n/**\r\n * Get the top most property value from a pile of objects.\r\n *\r\n * @param pile - Array of objects, no required format.\r\n * @param accessors - Array of property names.\r\n * For example `object['foo']['bar']` → `['foo', 'bar']`.\r\n * @returns Value of the property with given accessors path from the first pile item where it's not undefined.\r\n */\nfunction topMost(pile, accessors) {\n  var candidate;\n  if (!_Array$isArray(accessors)) {\n    accessors = [accessors];\n  }\n  var _iterator3 = _createForOfIteratorHelper$6(pile),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var member = _step3.value;\n      if (member) {\n        candidate = member[accessors[0]];\n        for (var i = 1; i < accessors.length; i++) {\n          if (candidate) {\n            candidate = candidate[accessors[i]];\n          }\n        }\n        if (typeof candidate !== \"undefined\") {\n          break;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  return candidate;\n}\nvar htmlColors = {\n  black: \"#000000\",\n  navy: \"#000080\",\n  darkblue: \"#00008B\",\n  mediumblue: \"#0000CD\",\n  blue: \"#0000FF\",\n  darkgreen: \"#006400\",\n  green: \"#008000\",\n  teal: \"#008080\",\n  darkcyan: \"#008B8B\",\n  deepskyblue: \"#00BFFF\",\n  darkturquoise: \"#00CED1\",\n  mediumspringgreen: \"#00FA9A\",\n  lime: \"#00FF00\",\n  springgreen: \"#00FF7F\",\n  aqua: \"#00FFFF\",\n  cyan: \"#00FFFF\",\n  midnightblue: \"#191970\",\n  dodgerblue: \"#1E90FF\",\n  lightseagreen: \"#20B2AA\",\n  forestgreen: \"#228B22\",\n  seagreen: \"#2E8B57\",\n  darkslategray: \"#2F4F4F\",\n  limegreen: \"#32CD32\",\n  mediumseagreen: \"#3CB371\",\n  turquoise: \"#40E0D0\",\n  royalblue: \"#4169E1\",\n  steelblue: \"#4682B4\",\n  darkslateblue: \"#483D8B\",\n  mediumturquoise: \"#48D1CC\",\n  indigo: \"#4B0082\",\n  darkolivegreen: \"#556B2F\",\n  cadetblue: \"#5F9EA0\",\n  cornflowerblue: \"#6495ED\",\n  mediumaquamarine: \"#66CDAA\",\n  dimgray: \"#696969\",\n  slateblue: \"#6A5ACD\",\n  olivedrab: \"#6B8E23\",\n  slategray: \"#708090\",\n  lightslategray: \"#778899\",\n  mediumslateblue: \"#7B68EE\",\n  lawngreen: \"#7CFC00\",\n  chartreuse: \"#7FFF00\",\n  aquamarine: \"#7FFFD4\",\n  maroon: \"#800000\",\n  purple: \"#800080\",\n  olive: \"#808000\",\n  gray: \"#808080\",\n  skyblue: \"#87CEEB\",\n  lightskyblue: \"#87CEFA\",\n  blueviolet: \"#8A2BE2\",\n  darkred: \"#8B0000\",\n  darkmagenta: \"#8B008B\",\n  saddlebrown: \"#8B4513\",\n  darkseagreen: \"#8FBC8F\",\n  lightgreen: \"#90EE90\",\n  mediumpurple: \"#9370D8\",\n  darkviolet: \"#9400D3\",\n  palegreen: \"#98FB98\",\n  darkorchid: \"#9932CC\",\n  yellowgreen: \"#9ACD32\",\n  sienna: \"#A0522D\",\n  brown: \"#A52A2A\",\n  darkgray: \"#A9A9A9\",\n  lightblue: \"#ADD8E6\",\n  greenyellow: \"#ADFF2F\",\n  paleturquoise: \"#AFEEEE\",\n  lightsteelblue: \"#B0C4DE\",\n  powderblue: \"#B0E0E6\",\n  firebrick: \"#B22222\",\n  darkgoldenrod: \"#B8860B\",\n  mediumorchid: \"#BA55D3\",\n  rosybrown: \"#BC8F8F\",\n  darkkhaki: \"#BDB76B\",\n  silver: \"#C0C0C0\",\n  mediumvioletred: \"#C71585\",\n  indianred: \"#CD5C5C\",\n  peru: \"#CD853F\",\n  chocolate: \"#D2691E\",\n  tan: \"#D2B48C\",\n  lightgrey: \"#D3D3D3\",\n  palevioletred: \"#D87093\",\n  thistle: \"#D8BFD8\",\n  orchid: \"#DA70D6\",\n  goldenrod: \"#DAA520\",\n  crimson: \"#DC143C\",\n  gainsboro: \"#DCDCDC\",\n  plum: \"#DDA0DD\",\n  burlywood: \"#DEB887\",\n  lightcyan: \"#E0FFFF\",\n  lavender: \"#E6E6FA\",\n  darksalmon: \"#E9967A\",\n  violet: \"#EE82EE\",\n  palegoldenrod: \"#EEE8AA\",\n  lightcoral: \"#F08080\",\n  khaki: \"#F0E68C\",\n  aliceblue: \"#F0F8FF\",\n  honeydew: \"#F0FFF0\",\n  azure: \"#F0FFFF\",\n  sandybrown: \"#F4A460\",\n  wheat: \"#F5DEB3\",\n  beige: \"#F5F5DC\",\n  whitesmoke: \"#F5F5F5\",\n  mintcream: \"#F5FFFA\",\n  ghostwhite: \"#F8F8FF\",\n  salmon: \"#FA8072\",\n  antiquewhite: \"#FAEBD7\",\n  linen: \"#FAF0E6\",\n  lightgoldenrodyellow: \"#FAFAD2\",\n  oldlace: \"#FDF5E6\",\n  red: \"#FF0000\",\n  fuchsia: \"#FF00FF\",\n  magenta: \"#FF00FF\",\n  deeppink: \"#FF1493\",\n  orangered: \"#FF4500\",\n  tomato: \"#FF6347\",\n  hotpink: \"#FF69B4\",\n  coral: \"#FF7F50\",\n  darkorange: \"#FF8C00\",\n  lightsalmon: \"#FFA07A\",\n  orange: \"#FFA500\",\n  lightpink: \"#FFB6C1\",\n  pink: \"#FFC0CB\",\n  gold: \"#FFD700\",\n  peachpuff: \"#FFDAB9\",\n  navajowhite: \"#FFDEAD\",\n  moccasin: \"#FFE4B5\",\n  bisque: \"#FFE4C4\",\n  mistyrose: \"#FFE4E1\",\n  blanchedalmond: \"#FFEBCD\",\n  papayawhip: \"#FFEFD5\",\n  lavenderblush: \"#FFF0F5\",\n  seashell: \"#FFF5EE\",\n  cornsilk: \"#FFF8DC\",\n  lemonchiffon: \"#FFFACD\",\n  floralwhite: \"#FFFAF0\",\n  snow: \"#FFFAFA\",\n  yellow: \"#FFFF00\",\n  lightyellow: \"#FFFFE0\",\n  ivory: \"#FFFFF0\",\n  white: \"#FFFFFF\"\n};\n\n/**\n * @param {number} [pixelRatio=1]\n */\nvar ColorPicker$1 = /*#__PURE__*/function () {\n  /**\n   * @param {number} [pixelRatio=1]\n   */\n  function ColorPicker() {\n    var pixelRatio = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    _classCallCheck(this, ColorPicker);\n    this.pixelRatio = pixelRatio;\n    this.generated = false;\n    this.centerCoordinates = {\n      x: 289 / 2,\n      y: 289 / 2\n    };\n    this.r = 289 * 0.49;\n    this.color = {\n      r: 255,\n      g: 255,\n      b: 255,\n      a: 1.0\n    };\n    this.hueCircle = undefined;\n    this.initialColor = {\n      r: 255,\n      g: 255,\n      b: 255,\n      a: 1.0\n    };\n    this.previousColor = undefined;\n    this.applied = false;\n\n    // bound by\n    this.updateCallback = function () {};\n    this.closeCallback = function () {};\n\n    // create all DOM elements\n    this._create();\n  }\n\n  /**\n   * this inserts the colorPicker into a div from the DOM\n   *\n   * @param {Element} container\n   */\n  _createClass(ColorPicker, [{\n    key: \"insertTo\",\n    value: function insertTo(container) {\n      if (this.hammer !== undefined) {\n        this.hammer.destroy();\n        this.hammer = undefined;\n      }\n      this.container = container;\n      this.container.appendChild(this.frame);\n      this._bindHammer();\n      this._setSize();\n    }\n\n    /**\n     * the callback is executed on apply and save. Bind it to the application\n     *\n     * @param {Function} callback\n     */\n  }, {\n    key: \"setUpdateCallback\",\n    value: function setUpdateCallback(callback) {\n      if (typeof callback === \"function\") {\n        this.updateCallback = callback;\n      } else {\n        throw new Error(\"Function attempted to set as colorPicker update callback is not a function.\");\n      }\n    }\n\n    /**\n     * the callback is executed on apply and save. Bind it to the application\n     *\n     * @param {Function} callback\n     */\n  }, {\n    key: \"setCloseCallback\",\n    value: function setCloseCallback(callback) {\n      if (typeof callback === \"function\") {\n        this.closeCallback = callback;\n      } else {\n        throw new Error(\"Function attempted to set as colorPicker closing callback is not a function.\");\n      }\n    }\n\n    /**\n     *\n     * @param {string} color\n     * @returns {string}\n     * @private\n     */\n  }, {\n    key: \"_isColorString\",\n    value: function _isColorString(color) {\n      if (typeof color === \"string\") {\n        return htmlColors[color];\n      }\n    }\n\n    /**\n     * Set the color of the colorPicker\n     * Supported formats:\n     * 'red'                   --> HTML color string\n     * '#ffffff'               --> hex string\n     * 'rgb(255,255,255)'      --> rgb string\n     * 'rgba(255,255,255,1.0)' --> rgba string\n     * {r:255,g:255,b:255}     --> rgb object\n     * {r:255,g:255,b:255,a:1.0} --> rgba object\n     *\n     * @param {string | object} color\n     * @param {boolean} [setInitial=true]\n     */\n  }, {\n    key: \"setColor\",\n    value: function setColor(color) {\n      var setInitial = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (color === \"none\") {\n        return;\n      }\n      var rgba;\n\n      // if a html color shorthand is used, convert to hex\n      var htmlColor = this._isColorString(color);\n      if (htmlColor !== undefined) {\n        color = htmlColor;\n      }\n\n      // check format\n      if (isString(color) === true) {\n        if (isValidRGB(color) === true) {\n          var rgbaArray = color.substr(4).substr(0, color.length - 5).split(\",\");\n          rgba = {\n            r: rgbaArray[0],\n            g: rgbaArray[1],\n            b: rgbaArray[2],\n            a: 1.0\n          };\n        } else if (isValidRGBA(color) === true) {\n          var _rgbaArray = color.substr(5).substr(0, color.length - 6).split(\",\");\n          rgba = {\n            r: _rgbaArray[0],\n            g: _rgbaArray[1],\n            b: _rgbaArray[2],\n            a: _rgbaArray[3]\n          };\n        } else if (isValidHex(color) === true) {\n          var rgbObj = hexToRGB(color);\n          rgba = {\n            r: rgbObj.r,\n            g: rgbObj.g,\n            b: rgbObj.b,\n            a: 1.0\n          };\n        }\n      } else {\n        if (color instanceof Object) {\n          if (color.r !== undefined && color.g !== undefined && color.b !== undefined) {\n            var alpha = color.a !== undefined ? color.a : \"1.0\";\n            rgba = {\n              r: color.r,\n              g: color.g,\n              b: color.b,\n              a: alpha\n            };\n          }\n        }\n      }\n\n      // set color\n      if (rgba === undefined) {\n        throw new Error(\"Unknown color passed to the colorPicker. Supported are strings: rgb, hex, rgba. Object: rgb ({r:r,g:g,b:b,[a:a]}). Supplied: \" + _JSON$stringify(color));\n      } else {\n        this._setColor(rgba, setInitial);\n      }\n    }\n\n    /**\n     * this shows the color picker.\n     * The hue circle is constructed once and stored.\n     */\n  }, {\n    key: \"show\",\n    value: function show() {\n      if (this.closeCallback !== undefined) {\n        this.closeCallback();\n        this.closeCallback = undefined;\n      }\n      this.applied = false;\n      this.frame.style.display = \"block\";\n      this._generateHueCircle();\n    }\n\n    // ------------------------------------------ PRIVATE ----------------------------- //\n\n    /**\n     * Hide the picker. Is called by the cancel button.\n     * Optional boolean to store the previous color for easy access later on.\n     *\n     * @param {boolean} [storePrevious=true]\n     * @private\n     */\n  }, {\n    key: \"_hide\",\n    value: function _hide() {\n      var _this2 = this;\n      var storePrevious = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      // store the previous color for next time;\n      if (storePrevious === true) {\n        this.previousColor = _Object$assign({}, this.color);\n      }\n      if (this.applied === true) {\n        this.updateCallback(this.initialColor);\n      }\n      this.frame.style.display = \"none\";\n\n      // call the closing callback, restoring the onclick method.\n      // this is in a setTimeout because it will trigger the show again before the click is done.\n      _setTimeout(function () {\n        if (_this2.closeCallback !== undefined) {\n          _this2.closeCallback();\n          _this2.closeCallback = undefined;\n        }\n      }, 0);\n    }\n\n    /**\n     * bound to the save button. Saves and hides.\n     *\n     * @private\n     */\n  }, {\n    key: \"_save\",\n    value: function _save() {\n      this.updateCallback(this.color);\n      this.applied = false;\n      this._hide();\n    }\n\n    /**\n     * Bound to apply button. Saves but does not close. Is undone by the cancel button.\n     *\n     * @private\n     */\n  }, {\n    key: \"_apply\",\n    value: function _apply() {\n      this.applied = true;\n      this.updateCallback(this.color);\n      this._updatePicker(this.color);\n    }\n\n    /**\n     * load the color from the previous session.\n     *\n     * @private\n     */\n  }, {\n    key: \"_loadLast\",\n    value: function _loadLast() {\n      if (this.previousColor !== undefined) {\n        this.setColor(this.previousColor, false);\n      } else {\n        alert(\"There is no last color to load...\");\n      }\n    }\n\n    /**\n     * set the color, place the picker\n     *\n     * @param {object} rgba\n     * @param {boolean} [setInitial=true]\n     * @private\n     */\n  }, {\n    key: \"_setColor\",\n    value: function _setColor(rgba) {\n      var setInitial = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      // store the initial color\n      if (setInitial === true) {\n        this.initialColor = _Object$assign({}, rgba);\n      }\n      this.color = rgba;\n      var hsv = RGBToHSV(rgba.r, rgba.g, rgba.b);\n      var angleConvert = 2 * Math.PI;\n      var radius = this.r * hsv.s;\n      var x = this.centerCoordinates.x + radius * Math.sin(angleConvert * hsv.h);\n      var y = this.centerCoordinates.y + radius * Math.cos(angleConvert * hsv.h);\n      this.colorPickerSelector.style.left = x - 0.5 * this.colorPickerSelector.clientWidth + \"px\";\n      this.colorPickerSelector.style.top = y - 0.5 * this.colorPickerSelector.clientHeight + \"px\";\n      this._updatePicker(rgba);\n    }\n\n    /**\n     * bound to opacity control\n     *\n     * @param {number} value\n     * @private\n     */\n  }, {\n    key: \"_setOpacity\",\n    value: function _setOpacity(value) {\n      this.color.a = value / 100;\n      this._updatePicker(this.color);\n    }\n\n    /**\n     * bound to brightness control\n     *\n     * @param {number} value\n     * @private\n     */\n  }, {\n    key: \"_setBrightness\",\n    value: function _setBrightness(value) {\n      var hsv = RGBToHSV(this.color.r, this.color.g, this.color.b);\n      hsv.v = value / 100;\n      var rgba = HSVToRGB(hsv.h, hsv.s, hsv.v);\n      rgba[\"a\"] = this.color.a;\n      this.color = rgba;\n      this._updatePicker();\n    }\n\n    /**\n     * update the color picker. A black circle overlays the hue circle to mimic the brightness decreasing.\n     *\n     * @param {object} rgba\n     * @private\n     */\n  }, {\n    key: \"_updatePicker\",\n    value: function _updatePicker() {\n      var rgba = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.color;\n      var hsv = RGBToHSV(rgba.r, rgba.g, rgba.b);\n      var ctx = this.colorPickerCanvas.getContext(\"2d\");\n      if (this.pixelRation === undefined) {\n        this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);\n      }\n      ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);\n\n      // clear the canvas\n      var w = this.colorPickerCanvas.clientWidth;\n      var h = this.colorPickerCanvas.clientHeight;\n      ctx.clearRect(0, 0, w, h);\n      ctx.putImageData(this.hueCircle, 0, 0);\n      ctx.fillStyle = \"rgba(0,0,0,\" + (1 - hsv.v) + \")\";\n      ctx.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r);\n      _fillInstanceProperty(ctx).call(ctx);\n      this.brightnessRange.value = 100 * hsv.v;\n      this.opacityRange.value = 100 * rgba.a;\n      this.initialColorDiv.style.backgroundColor = \"rgba(\" + this.initialColor.r + \",\" + this.initialColor.g + \",\" + this.initialColor.b + \",\" + this.initialColor.a + \")\";\n      this.newColorDiv.style.backgroundColor = \"rgba(\" + this.color.r + \",\" + this.color.g + \",\" + this.color.b + \",\" + this.color.a + \")\";\n    }\n\n    /**\n     * used by create to set the size of the canvas.\n     *\n     * @private\n     */\n  }, {\n    key: \"_setSize\",\n    value: function _setSize() {\n      this.colorPickerCanvas.style.width = \"100%\";\n      this.colorPickerCanvas.style.height = \"100%\";\n      this.colorPickerCanvas.width = 289 * this.pixelRatio;\n      this.colorPickerCanvas.height = 289 * this.pixelRatio;\n    }\n\n    /**\n     * create all dom elements\n     * TODO: cleanup, lots of similar dom elements\n     *\n     * @private\n     */\n  }, {\n    key: \"_create\",\n    value: function _create() {\n      var _context12, _context13, _context14, _context15;\n      this.frame = document.createElement(\"div\");\n      this.frame.className = \"vis-color-picker\";\n      this.colorPickerDiv = document.createElement(\"div\");\n      this.colorPickerSelector = document.createElement(\"div\");\n      this.colorPickerSelector.className = \"vis-selector\";\n      this.colorPickerDiv.appendChild(this.colorPickerSelector);\n      this.colorPickerCanvas = document.createElement(\"canvas\");\n      this.colorPickerDiv.appendChild(this.colorPickerCanvas);\n      if (!this.colorPickerCanvas.getContext) {\n        var noCanvas = document.createElement(\"DIV\");\n        noCanvas.style.color = \"red\";\n        noCanvas.style.fontWeight = \"bold\";\n        noCanvas.style.padding = \"10px\";\n        noCanvas.innerText = \"Error: your browser does not support HTML canvas\";\n        this.colorPickerCanvas.appendChild(noCanvas);\n      } else {\n        var ctx = this.colorPickerCanvas.getContext(\"2d\");\n        this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);\n        this.colorPickerCanvas.getContext(\"2d\").setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);\n      }\n      this.colorPickerDiv.className = \"vis-color\";\n      this.opacityDiv = document.createElement(\"div\");\n      this.opacityDiv.className = \"vis-opacity\";\n      this.brightnessDiv = document.createElement(\"div\");\n      this.brightnessDiv.className = \"vis-brightness\";\n      this.arrowDiv = document.createElement(\"div\");\n      this.arrowDiv.className = \"vis-arrow\";\n      this.opacityRange = document.createElement(\"input\");\n      try {\n        this.opacityRange.type = \"range\"; // Not supported on IE9\n        this.opacityRange.min = \"0\";\n        this.opacityRange.max = \"100\";\n      } catch (err) {\n        // TODO: Add some error handling.\n      }\n      this.opacityRange.value = \"100\";\n      this.opacityRange.className = \"vis-range\";\n      this.brightnessRange = document.createElement(\"input\");\n      try {\n        this.brightnessRange.type = \"range\"; // Not supported on IE9\n        this.brightnessRange.min = \"0\";\n        this.brightnessRange.max = \"100\";\n      } catch (err) {\n        // TODO: Add some error handling.\n      }\n      this.brightnessRange.value = \"100\";\n      this.brightnessRange.className = \"vis-range\";\n      this.opacityDiv.appendChild(this.opacityRange);\n      this.brightnessDiv.appendChild(this.brightnessRange);\n      var me = this;\n      this.opacityRange.onchange = function () {\n        me._setOpacity(this.value);\n      };\n      this.opacityRange.oninput = function () {\n        me._setOpacity(this.value);\n      };\n      this.brightnessRange.onchange = function () {\n        me._setBrightness(this.value);\n      };\n      this.brightnessRange.oninput = function () {\n        me._setBrightness(this.value);\n      };\n      this.brightnessLabel = document.createElement(\"div\");\n      this.brightnessLabel.className = \"vis-label vis-brightness\";\n      this.brightnessLabel.innerText = \"brightness:\";\n      this.opacityLabel = document.createElement(\"div\");\n      this.opacityLabel.className = \"vis-label vis-opacity\";\n      this.opacityLabel.innerText = \"opacity:\";\n      this.newColorDiv = document.createElement(\"div\");\n      this.newColorDiv.className = \"vis-new-color\";\n      this.newColorDiv.innerText = \"new\";\n      this.initialColorDiv = document.createElement(\"div\");\n      this.initialColorDiv.className = \"vis-initial-color\";\n      this.initialColorDiv.innerText = \"initial\";\n      this.cancelButton = document.createElement(\"div\");\n      this.cancelButton.className = \"vis-button vis-cancel\";\n      this.cancelButton.innerText = \"cancel\";\n      this.cancelButton.onclick = _bindInstanceProperty$1(_context12 = this._hide).call(_context12, this, false);\n      this.applyButton = document.createElement(\"div\");\n      this.applyButton.className = \"vis-button vis-apply\";\n      this.applyButton.innerText = \"apply\";\n      this.applyButton.onclick = _bindInstanceProperty$1(_context13 = this._apply).call(_context13, this);\n      this.saveButton = document.createElement(\"div\");\n      this.saveButton.className = \"vis-button vis-save\";\n      this.saveButton.innerText = \"save\";\n      this.saveButton.onclick = _bindInstanceProperty$1(_context14 = this._save).call(_context14, this);\n      this.loadButton = document.createElement(\"div\");\n      this.loadButton.className = \"vis-button vis-load\";\n      this.loadButton.innerText = \"load last\";\n      this.loadButton.onclick = _bindInstanceProperty$1(_context15 = this._loadLast).call(_context15, this);\n      this.frame.appendChild(this.colorPickerDiv);\n      this.frame.appendChild(this.arrowDiv);\n      this.frame.appendChild(this.brightnessLabel);\n      this.frame.appendChild(this.brightnessDiv);\n      this.frame.appendChild(this.opacityLabel);\n      this.frame.appendChild(this.opacityDiv);\n      this.frame.appendChild(this.newColorDiv);\n      this.frame.appendChild(this.initialColorDiv);\n      this.frame.appendChild(this.cancelButton);\n      this.frame.appendChild(this.applyButton);\n      this.frame.appendChild(this.saveButton);\n      this.frame.appendChild(this.loadButton);\n    }\n\n    /**\n     * bind hammer to the color picker\n     *\n     * @private\n     */\n  }, {\n    key: \"_bindHammer\",\n    value: function _bindHammer() {\n      var _this3 = this;\n      this.drag = {};\n      this.pinch = {};\n      this.hammer = new Hammer$1(this.colorPickerCanvas);\n      this.hammer.get(\"pinch\").set({\n        enable: true\n      });\n      this.hammer.on(\"hammer.input\", function (event) {\n        if (event.isFirst) {\n          _this3._moveSelector(event);\n        }\n      });\n      this.hammer.on(\"tap\", function (event) {\n        _this3._moveSelector(event);\n      });\n      this.hammer.on(\"panstart\", function (event) {\n        _this3._moveSelector(event);\n      });\n      this.hammer.on(\"panmove\", function (event) {\n        _this3._moveSelector(event);\n      });\n      this.hammer.on(\"panend\", function (event) {\n        _this3._moveSelector(event);\n      });\n    }\n\n    /**\n     * generate the hue circle. This is relatively heavy (200ms) and is done only once on the first time it is shown.\n     *\n     * @private\n     */\n  }, {\n    key: \"_generateHueCircle\",\n    value: function _generateHueCircle() {\n      if (this.generated === false) {\n        var ctx = this.colorPickerCanvas.getContext(\"2d\");\n        if (this.pixelRation === undefined) {\n          this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);\n        }\n        ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);\n\n        // clear the canvas\n        var w = this.colorPickerCanvas.clientWidth;\n        var h = this.colorPickerCanvas.clientHeight;\n        ctx.clearRect(0, 0, w, h);\n\n        // draw hue circle\n        var x, y, hue, sat;\n        this.centerCoordinates = {\n          x: w * 0.5,\n          y: h * 0.5\n        };\n        this.r = 0.49 * w;\n        var angleConvert = 2 * Math.PI / 360;\n        var hfac = 1 / 360;\n        var sfac = 1 / this.r;\n        var rgb;\n        for (hue = 0; hue < 360; hue++) {\n          for (sat = 0; sat < this.r; sat++) {\n            x = this.centerCoordinates.x + sat * Math.sin(angleConvert * hue);\n            y = this.centerCoordinates.y + sat * Math.cos(angleConvert * hue);\n            rgb = HSVToRGB(hue * hfac, sat * sfac, 1);\n            ctx.fillStyle = \"rgb(\" + rgb.r + \",\" + rgb.g + \",\" + rgb.b + \")\";\n            ctx.fillRect(x - 0.5, y - 0.5, 2, 2);\n          }\n        }\n        ctx.strokeStyle = \"rgba(0,0,0,1)\";\n        ctx.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r);\n        ctx.stroke();\n        this.hueCircle = ctx.getImageData(0, 0, w, h);\n      }\n      this.generated = true;\n    }\n\n    /**\n     * move the selector. This is called by hammer functions.\n     *\n     * @param {Event}  event   The event\n     * @private\n     */\n  }, {\n    key: \"_moveSelector\",\n    value: function _moveSelector(event) {\n      var rect = this.colorPickerDiv.getBoundingClientRect();\n      var left = event.center.x - rect.left;\n      var top = event.center.y - rect.top;\n      var centerY = 0.5 * this.colorPickerDiv.clientHeight;\n      var centerX = 0.5 * this.colorPickerDiv.clientWidth;\n      var x = left - centerX;\n      var y = top - centerY;\n      var angle = Math.atan2(x, y);\n      var radius = 0.98 * Math.min(Math.sqrt(x * x + y * y), centerX);\n      var newTop = Math.cos(angle) * radius + centerY;\n      var newLeft = Math.sin(angle) * radius + centerX;\n      this.colorPickerSelector.style.top = newTop - 0.5 * this.colorPickerSelector.clientHeight + \"px\";\n      this.colorPickerSelector.style.left = newLeft - 0.5 * this.colorPickerSelector.clientWidth + \"px\";\n\n      // set color\n      var h = angle / (2 * Math.PI);\n      h = h < 0 ? h + 1 : h;\n      var s = radius / this.r;\n      var hsv = RGBToHSV(this.color.r, this.color.g, this.color.b);\n      hsv.h = h;\n      hsv.s = s;\n      var rgba = HSVToRGB(hsv.h, hsv.s, hsv.v);\n      rgba[\"a\"] = this.color.a;\n      this.color = rgba;\n\n      // update previews\n      this.initialColorDiv.style.backgroundColor = \"rgba(\" + this.initialColor.r + \",\" + this.initialColor.g + \",\" + this.initialColor.b + \",\" + this.initialColor.a + \")\";\n      this.newColorDiv.style.backgroundColor = \"rgba(\" + this.color.r + \",\" + this.color.g + \",\" + this.color.b + \",\" + this.color.a + \")\";\n    }\n  }]);\n  return ColorPicker;\n}();\n\n/**\n * Wrap given text (last argument) in HTML elements (all preceding arguments).\n *\n * @param {...any} rest - List of tag names followed by inner text.\n * @returns An element or a text node.\n */\nfunction wrapInTag() {\n  for (var _len5 = arguments.length, rest = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    rest[_key5] = arguments[_key5];\n  }\n  if (rest.length < 1) {\n    throw new TypeError(\"Invalid arguments.\");\n  } else if (rest.length === 1) {\n    return document.createTextNode(rest[0]);\n  } else {\n    var element = document.createElement(rest[0]);\n    element.appendChild(wrapInTag.apply(void 0, _toConsumableArray(_sliceInstanceProperty(rest).call(rest, 1))));\n    return element;\n  }\n}\n\n/**\n * The way this works is for all properties of this.possible options, you can supply the property name in any form to list the options.\n * Boolean options are recognised as Boolean\n * Number options should be written as array: [default value, min value, max value, stepsize]\n * Colors should be written as array: ['color', '#ffffff']\n * Strings with should be written as array: [option1, option2, option3, ..]\n *\n * The options are matched with their counterparts in each of the modules and the values used in the configuration are\n */\nvar Configurator$1 = /*#__PURE__*/function () {\n  /**\n   * @param {object} parentModule        | the location where parentModule.setOptions() can be called\n   * @param {object} defaultContainer    | the default container of the module\n   * @param {object} configureOptions    | the fully configured and predefined options set found in allOptions.js\n   * @param {number} pixelRatio          | canvas pixel ratio\n   * @param {Function} hideOption        | custom logic to dynamically hide options\n   */\n  function Configurator(parentModule, defaultContainer, configureOptions) {\n    var pixelRatio = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    var hideOption = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function () {\n      return false;\n    };\n    _classCallCheck(this, Configurator);\n    this.parent = parentModule;\n    this.changedOptions = [];\n    this.container = defaultContainer;\n    this.allowCreation = false;\n    this.hideOption = hideOption;\n    this.options = {};\n    this.initialized = false;\n    this.popupCounter = 0;\n    this.defaultOptions = {\n      enabled: false,\n      filter: true,\n      container: undefined,\n      showButton: true\n    };\n    _Object$assign(this.options, this.defaultOptions);\n    this.configureOptions = configureOptions;\n    this.moduleOptions = {};\n    this.domElements = [];\n    this.popupDiv = {};\n    this.popupLimit = 5;\n    this.popupHistory = {};\n    this.colorPicker = new ColorPicker$1(pixelRatio);\n    this.wrapper = undefined;\n  }\n\n  /**\n   * refresh all options.\n   * Because all modules parse their options by themselves, we just use their options. We copy them here.\n   *\n   * @param {object} options\n   */\n  _createClass(Configurator, [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      if (options !== undefined) {\n        // reset the popup history because the indices may have been changed.\n        this.popupHistory = {};\n        this._removePopup();\n        var enabled = true;\n        if (typeof options === \"string\") {\n          this.options.filter = options;\n        } else if (_Array$isArray(options)) {\n          this.options.filter = options.join();\n        } else if (_typeof(options) === \"object\") {\n          if (options == null) {\n            throw new TypeError(\"options cannot be null\");\n          }\n          if (options.container !== undefined) {\n            this.options.container = options.container;\n          }\n          if (_filterInstanceProperty(options) !== undefined) {\n            this.options.filter = _filterInstanceProperty(options);\n          }\n          if (options.showButton !== undefined) {\n            this.options.showButton = options.showButton;\n          }\n          if (options.enabled !== undefined) {\n            enabled = options.enabled;\n          }\n        } else if (typeof options === \"boolean\") {\n          this.options.filter = true;\n          enabled = options;\n        } else if (typeof options === \"function\") {\n          this.options.filter = options;\n          enabled = true;\n        }\n        if (_filterInstanceProperty(this.options) === false) {\n          enabled = false;\n        }\n        this.options.enabled = enabled;\n      }\n      this._clean();\n    }\n\n    /**\n     *\n     * @param {object} moduleOptions\n     */\n  }, {\n    key: \"setModuleOptions\",\n    value: function setModuleOptions(moduleOptions) {\n      this.moduleOptions = moduleOptions;\n      if (this.options.enabled === true) {\n        this._clean();\n        if (this.options.container !== undefined) {\n          this.container = this.options.container;\n        }\n        this._create();\n      }\n    }\n\n    /**\n     * Create all DOM elements\n     *\n     * @private\n     */\n  }, {\n    key: \"_create\",\n    value: function _create() {\n      this._clean();\n      this.changedOptions = [];\n      var filter = _filterInstanceProperty(this.options);\n      var counter = 0;\n      var show = false;\n      for (var _option in this.configureOptions) {\n        if (Object.prototype.hasOwnProperty.call(this.configureOptions, _option)) {\n          this.allowCreation = false;\n          show = false;\n          if (typeof filter === \"function\") {\n            show = filter(_option, []);\n            show = show || this._handleObject(this.configureOptions[_option], [_option], true);\n          } else if (filter === true || _indexOfInstanceProperty(filter).call(filter, _option) !== -1) {\n            show = true;\n          }\n          if (show !== false) {\n            this.allowCreation = true;\n\n            // linebreak between categories\n            if (counter > 0) {\n              this._makeItem([]);\n            }\n            // a header for the category\n            this._makeHeader(_option);\n\n            // get the sub options\n            this._handleObject(this.configureOptions[_option], [_option]);\n          }\n          counter++;\n        }\n      }\n      this._makeButton();\n      this._push();\n      //~ this.colorPicker.insertTo(this.container);\n    }\n\n    /**\n     * draw all DOM elements on the screen\n     *\n     * @private\n     */\n  }, {\n    key: \"_push\",\n    value: function _push() {\n      this.wrapper = document.createElement(\"div\");\n      this.wrapper.className = \"vis-configuration-wrapper\";\n      this.container.appendChild(this.wrapper);\n      for (var i = 0; i < this.domElements.length; i++) {\n        this.wrapper.appendChild(this.domElements[i]);\n      }\n      this._showPopupIfNeeded();\n    }\n\n    /**\n     * delete all DOM elements\n     *\n     * @private\n     */\n  }, {\n    key: \"_clean\",\n    value: function _clean() {\n      for (var i = 0; i < this.domElements.length; i++) {\n        this.wrapper.removeChild(this.domElements[i]);\n      }\n      if (this.wrapper !== undefined) {\n        this.container.removeChild(this.wrapper);\n        this.wrapper = undefined;\n      }\n      this.domElements = [];\n      this._removePopup();\n    }\n\n    /**\n     * get the value from the actualOptions if it exists\n     *\n     * @param {Array} path    | where to look for the actual option\n     * @returns {*}\n     * @private\n     */\n  }, {\n    key: \"_getValue\",\n    value: function _getValue(path) {\n      var base = this.moduleOptions;\n      for (var i = 0; i < path.length; i++) {\n        if (base[path[i]] !== undefined) {\n          base = base[path[i]];\n        } else {\n          base = undefined;\n          break;\n        }\n      }\n      return base;\n    }\n\n    /**\n     * all option elements are wrapped in an item\n     *\n     * @param {Array} path    | where to look for the actual option\n     * @param {Array.<Element>} domElements\n     * @returns {number}\n     * @private\n     */\n  }, {\n    key: \"_makeItem\",\n    value: function _makeItem(path) {\n      if (this.allowCreation === true) {\n        var item = document.createElement(\"div\");\n        item.className = \"vis-configuration vis-config-item vis-config-s\" + path.length;\n        for (var _len6 = arguments.length, domElements = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n          domElements[_key6 - 1] = arguments[_key6];\n        }\n        _forEachInstanceProperty(domElements).call(domElements, function (element) {\n          item.appendChild(element);\n        });\n        this.domElements.push(item);\n        return this.domElements.length;\n      }\n      return 0;\n    }\n\n    /**\n     * header for major subjects\n     *\n     * @param {string} name\n     * @private\n     */\n  }, {\n    key: \"_makeHeader\",\n    value: function _makeHeader(name) {\n      var div = document.createElement(\"div\");\n      div.className = \"vis-configuration vis-config-header\";\n      div.innerText = name;\n      this._makeItem([], div);\n    }\n\n    /**\n     * make a label, if it is an object label, it gets different styling.\n     *\n     * @param {string} name\n     * @param {Array} path    | where to look for the actual option\n     * @param {string} objectLabel\n     * @returns {HTMLElement}\n     * @private\n     */\n  }, {\n    key: \"_makeLabel\",\n    value: function _makeLabel(name, path) {\n      var objectLabel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var div = document.createElement(\"div\");\n      div.className = \"vis-configuration vis-config-label vis-config-s\" + path.length;\n      if (objectLabel === true) {\n        while (div.firstChild) {\n          div.removeChild(div.firstChild);\n        }\n        div.appendChild(wrapInTag(\"i\", \"b\", name));\n      } else {\n        div.innerText = name + \":\";\n      }\n      return div;\n    }\n\n    /**\n     * make a dropdown list for multiple possible string optoins\n     *\n     * @param {Array.<number>} arr\n     * @param {number} value\n     * @param {Array} path    | where to look for the actual option\n     * @private\n     */\n  }, {\n    key: \"_makeDropdown\",\n    value: function _makeDropdown(arr, value, path) {\n      var select = document.createElement(\"select\");\n      select.className = \"vis-configuration vis-config-select\";\n      var selectedValue = 0;\n      if (value !== undefined) {\n        if (_indexOfInstanceProperty(arr).call(arr, value) !== -1) {\n          selectedValue = _indexOfInstanceProperty(arr).call(arr, value);\n        }\n      }\n      for (var i = 0; i < arr.length; i++) {\n        var _option2 = document.createElement(\"option\");\n        _option2.value = arr[i];\n        if (i === selectedValue) {\n          _option2.selected = \"selected\";\n        }\n        _option2.innerText = arr[i];\n        select.appendChild(_option2);\n      }\n      var me = this;\n      select.onchange = function () {\n        me._update(this.value, path);\n      };\n      var label = this._makeLabel(path[path.length - 1], path);\n      this._makeItem(path, label, select);\n    }\n\n    /**\n     * make a range object for numeric options\n     *\n     * @param {Array.<number>} arr\n     * @param {number} value\n     * @param {Array} path    | where to look for the actual option\n     * @private\n     */\n  }, {\n    key: \"_makeRange\",\n    value: function _makeRange(arr, value, path) {\n      var defaultValue = arr[0];\n      var min = arr[1];\n      var max = arr[2];\n      var step = arr[3];\n      var range = document.createElement(\"input\");\n      range.className = \"vis-configuration vis-config-range\";\n      try {\n        range.type = \"range\"; // not supported on IE9\n        range.min = min;\n        range.max = max;\n      } catch (err) {\n        // TODO: Add some error handling.\n      }\n      range.step = step;\n\n      // set up the popup settings in case they are needed.\n      var popupString = \"\";\n      var popupValue = 0;\n      if (value !== undefined) {\n        var factor = 1.2;\n        if (value < 0 && value * factor < min) {\n          range.min = Math.ceil(value * factor);\n          popupValue = range.min;\n          popupString = \"range increased\";\n        } else if (value / factor < min) {\n          range.min = Math.ceil(value / factor);\n          popupValue = range.min;\n          popupString = \"range increased\";\n        }\n        if (value * factor > max && max !== 1) {\n          range.max = Math.ceil(value * factor);\n          popupValue = range.max;\n          popupString = \"range increased\";\n        }\n        range.value = value;\n      } else {\n        range.value = defaultValue;\n      }\n      var input = document.createElement(\"input\");\n      input.className = \"vis-configuration vis-config-rangeinput\";\n      input.value = range.value;\n      var me = this;\n      range.onchange = function () {\n        input.value = this.value;\n        me._update(Number(this.value), path);\n      };\n      range.oninput = function () {\n        input.value = this.value;\n      };\n      var label = this._makeLabel(path[path.length - 1], path);\n      var itemIndex = this._makeItem(path, label, range, input);\n\n      // if a popup is needed AND it has not been shown for this value, show it.\n      if (popupString !== \"\" && this.popupHistory[itemIndex] !== popupValue) {\n        this.popupHistory[itemIndex] = popupValue;\n        this._setupPopup(popupString, itemIndex);\n      }\n    }\n\n    /**\n     * make a button object\n     *\n     * @private\n     */\n  }, {\n    key: \"_makeButton\",\n    value: function _makeButton() {\n      var _this4 = this;\n      if (this.options.showButton === true) {\n        var generateButton = document.createElement(\"div\");\n        generateButton.className = \"vis-configuration vis-config-button\";\n        generateButton.innerText = \"generate options\";\n        generateButton.onclick = function () {\n          _this4._printOptions();\n        };\n        generateButton.onmouseover = function () {\n          generateButton.className = \"vis-configuration vis-config-button hover\";\n        };\n        generateButton.onmouseout = function () {\n          generateButton.className = \"vis-configuration vis-config-button\";\n        };\n        this.optionsContainer = document.createElement(\"div\");\n        this.optionsContainer.className = \"vis-configuration vis-config-option-container\";\n        this.domElements.push(this.optionsContainer);\n        this.domElements.push(generateButton);\n      }\n    }\n\n    /**\n     * prepare the popup\n     *\n     * @param {string} string\n     * @param {number} index\n     * @private\n     */\n  }, {\n    key: \"_setupPopup\",\n    value: function _setupPopup(string, index) {\n      var _this5 = this;\n      if (this.initialized === true && this.allowCreation === true && this.popupCounter < this.popupLimit) {\n        var div = document.createElement(\"div\");\n        div.id = \"vis-configuration-popup\";\n        div.className = \"vis-configuration-popup\";\n        div.innerText = string;\n        div.onclick = function () {\n          _this5._removePopup();\n        };\n        this.popupCounter += 1;\n        this.popupDiv = {\n          html: div,\n          index: index\n        };\n      }\n    }\n\n    /**\n     * remove the popup from the dom\n     *\n     * @private\n     */\n  }, {\n    key: \"_removePopup\",\n    value: function _removePopup() {\n      if (this.popupDiv.html !== undefined) {\n        this.popupDiv.html.parentNode.removeChild(this.popupDiv.html);\n        clearTimeout(this.popupDiv.hideTimeout);\n        clearTimeout(this.popupDiv.deleteTimeout);\n        this.popupDiv = {};\n      }\n    }\n\n    /**\n     * Show the popup if it is needed.\n     *\n     * @private\n     */\n  }, {\n    key: \"_showPopupIfNeeded\",\n    value: function _showPopupIfNeeded() {\n      var _this6 = this;\n      if (this.popupDiv.html !== undefined) {\n        var correspondingElement = this.domElements[this.popupDiv.index];\n        var rect = correspondingElement.getBoundingClientRect();\n        this.popupDiv.html.style.left = rect.left + \"px\";\n        this.popupDiv.html.style.top = rect.top - 30 + \"px\"; // 30 is the height;\n        document.body.appendChild(this.popupDiv.html);\n        this.popupDiv.hideTimeout = _setTimeout(function () {\n          _this6.popupDiv.html.style.opacity = 0;\n        }, 1500);\n        this.popupDiv.deleteTimeout = _setTimeout(function () {\n          _this6._removePopup();\n        }, 1800);\n      }\n    }\n\n    /**\n     * make a checkbox for boolean options.\n     *\n     * @param {number} defaultValue\n     * @param {number} value\n     * @param {Array} path    | where to look for the actual option\n     * @private\n     */\n  }, {\n    key: \"_makeCheckbox\",\n    value: function _makeCheckbox(defaultValue, value, path) {\n      var checkbox = document.createElement(\"input\");\n      checkbox.type = \"checkbox\";\n      checkbox.className = \"vis-configuration vis-config-checkbox\";\n      checkbox.checked = defaultValue;\n      if (value !== undefined) {\n        checkbox.checked = value;\n        if (value !== defaultValue) {\n          if (_typeof(defaultValue) === \"object\") {\n            if (value !== defaultValue.enabled) {\n              this.changedOptions.push({\n                path: path,\n                value: value\n              });\n            }\n          } else {\n            this.changedOptions.push({\n              path: path,\n              value: value\n            });\n          }\n        }\n      }\n      var me = this;\n      checkbox.onchange = function () {\n        me._update(this.checked, path);\n      };\n      var label = this._makeLabel(path[path.length - 1], path);\n      this._makeItem(path, label, checkbox);\n    }\n\n    /**\n     * make a text input field for string options.\n     *\n     * @param {number} defaultValue\n     * @param {number} value\n     * @param {Array} path    | where to look for the actual option\n     * @private\n     */\n  }, {\n    key: \"_makeTextInput\",\n    value: function _makeTextInput(defaultValue, value, path) {\n      var checkbox = document.createElement(\"input\");\n      checkbox.type = \"text\";\n      checkbox.className = \"vis-configuration vis-config-text\";\n      checkbox.value = value;\n      if (value !== defaultValue) {\n        this.changedOptions.push({\n          path: path,\n          value: value\n        });\n      }\n      var me = this;\n      checkbox.onchange = function () {\n        me._update(this.value, path);\n      };\n      var label = this._makeLabel(path[path.length - 1], path);\n      this._makeItem(path, label, checkbox);\n    }\n\n    /**\n     * make a color field with a color picker for color fields\n     *\n     * @param {Array.<number>} arr\n     * @param {number} value\n     * @param {Array} path    | where to look for the actual option\n     * @private\n     */\n  }, {\n    key: \"_makeColorField\",\n    value: function _makeColorField(arr, value, path) {\n      var _this7 = this;\n      var defaultColor = arr[1];\n      var div = document.createElement(\"div\");\n      value = value === undefined ? defaultColor : value;\n      if (value !== \"none\") {\n        div.className = \"vis-configuration vis-config-colorBlock\";\n        div.style.backgroundColor = value;\n      } else {\n        div.className = \"vis-configuration vis-config-colorBlock none\";\n      }\n      value = value === undefined ? defaultColor : value;\n      div.onclick = function () {\n        _this7._showColorPicker(value, div, path);\n      };\n      var label = this._makeLabel(path[path.length - 1], path);\n      this._makeItem(path, label, div);\n    }\n\n    /**\n     * used by the color buttons to call the color picker.\n     *\n     * @param {number} value\n     * @param {HTMLElement} div\n     * @param {Array} path    | where to look for the actual option\n     * @private\n     */\n  }, {\n    key: \"_showColorPicker\",\n    value: function _showColorPicker(value, div, path) {\n      var _this8 = this;\n      // clear the callback from this div\n      div.onclick = function () {};\n      this.colorPicker.insertTo(div);\n      this.colorPicker.show();\n      this.colorPicker.setColor(value);\n      this.colorPicker.setUpdateCallback(function (color) {\n        var colorString = \"rgba(\" + color.r + \",\" + color.g + \",\" + color.b + \",\" + color.a + \")\";\n        div.style.backgroundColor = colorString;\n        _this8._update(colorString, path);\n      });\n\n      // on close of the colorpicker, restore the callback.\n      this.colorPicker.setCloseCallback(function () {\n        div.onclick = function () {\n          _this8._showColorPicker(value, div, path);\n        };\n      });\n    }\n\n    /**\n     * parse an object and draw the correct items\n     *\n     * @param {object} obj\n     * @param {Array} [path=[]]    | where to look for the actual option\n     * @param {boolean} [checkOnly=false]\n     * @returns {boolean}\n     * @private\n     */\n  }, {\n    key: \"_handleObject\",\n    value: function _handleObject(obj) {\n      var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var checkOnly = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var show = false;\n      var filter = _filterInstanceProperty(this.options);\n      var visibleInSet = false;\n      for (var subObj in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, subObj)) {\n          show = true;\n          var item = obj[subObj];\n          var newPath = copyAndExtendArray(path, subObj);\n          if (typeof filter === \"function\") {\n            show = filter(subObj, path);\n\n            // if needed we must go deeper into the object.\n            if (show === false) {\n              if (!_Array$isArray(item) && typeof item !== \"string\" && typeof item !== \"boolean\" && item instanceof Object) {\n                this.allowCreation = false;\n                show = this._handleObject(item, newPath, true);\n                this.allowCreation = checkOnly === false;\n              }\n            }\n          }\n          if (show !== false) {\n            visibleInSet = true;\n            var value = this._getValue(newPath);\n            if (_Array$isArray(item)) {\n              this._handleArray(item, value, newPath);\n            } else if (typeof item === \"string\") {\n              this._makeTextInput(item, value, newPath);\n            } else if (typeof item === \"boolean\") {\n              this._makeCheckbox(item, value, newPath);\n            } else if (item instanceof Object) {\n              // skip the options that are not enabled\n              if (!this.hideOption(path, subObj, this.moduleOptions)) {\n                // initially collapse options with an disabled enabled option.\n                if (item.enabled !== undefined) {\n                  var enabledPath = copyAndExtendArray(newPath, \"enabled\");\n                  var enabledValue = this._getValue(enabledPath);\n                  if (enabledValue === true) {\n                    var label = this._makeLabel(subObj, newPath, true);\n                    this._makeItem(newPath, label);\n                    visibleInSet = this._handleObject(item, newPath) || visibleInSet;\n                  } else {\n                    this._makeCheckbox(item, enabledValue, newPath);\n                  }\n                } else {\n                  var _label = this._makeLabel(subObj, newPath, true);\n                  this._makeItem(newPath, _label);\n                  visibleInSet = this._handleObject(item, newPath) || visibleInSet;\n                }\n              }\n            } else {\n              console.error(\"dont know how to handle\", item, subObj, newPath);\n            }\n          }\n        }\n      }\n      return visibleInSet;\n    }\n\n    /**\n     * handle the array type of option\n     *\n     * @param {Array.<number>} arr\n     * @param {number} value\n     * @param {Array} path    | where to look for the actual option\n     * @private\n     */\n  }, {\n    key: \"_handleArray\",\n    value: function _handleArray(arr, value, path) {\n      if (typeof arr[0] === \"string\" && arr[0] === \"color\") {\n        this._makeColorField(arr, value, path);\n        if (arr[1] !== value) {\n          this.changedOptions.push({\n            path: path,\n            value: value\n          });\n        }\n      } else if (typeof arr[0] === \"string\") {\n        this._makeDropdown(arr, value, path);\n        if (arr[0] !== value) {\n          this.changedOptions.push({\n            path: path,\n            value: value\n          });\n        }\n      } else if (typeof arr[0] === \"number\") {\n        this._makeRange(arr, value, path);\n        if (arr[0] !== value) {\n          this.changedOptions.push({\n            path: path,\n            value: Number(value)\n          });\n        }\n      }\n    }\n\n    /**\n     * called to update the network with the new settings.\n     *\n     * @param {number} value\n     * @param {Array} path    | where to look for the actual option\n     * @private\n     */\n  }, {\n    key: \"_update\",\n    value: function _update(value, path) {\n      var options = this._constructOptions(value, path);\n      if (this.parent.body && this.parent.body.emitter && this.parent.body.emitter.emit) {\n        this.parent.body.emitter.emit(\"configChange\", options);\n      }\n      this.initialized = true;\n      this.parent.setOptions(options);\n    }\n\n    /**\n     *\n     * @param {string | boolean} value\n     * @param {Array.<string>} path\n     * @param {{}} optionsObj\n     * @returns {{}}\n     * @private\n     */\n  }, {\n    key: \"_constructOptions\",\n    value: function _constructOptions(value, path) {\n      var optionsObj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var pointer = optionsObj;\n\n      // when dropdown boxes can be string or boolean, we typecast it into correct types\n      value = value === \"true\" ? true : value;\n      value = value === \"false\" ? false : value;\n      for (var i = 0; i < path.length; i++) {\n        if (path[i] !== \"global\") {\n          if (pointer[path[i]] === undefined) {\n            pointer[path[i]] = {};\n          }\n          if (i !== path.length - 1) {\n            pointer = pointer[path[i]];\n          } else {\n            pointer[path[i]] = value;\n          }\n        }\n      }\n      return optionsObj;\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"_printOptions\",\n    value: function _printOptions() {\n      var options = this.getOptions();\n      while (this.optionsContainer.firstChild) {\n        this.optionsContainer.removeChild(this.optionsContainer.firstChild);\n      }\n      this.optionsContainer.appendChild(wrapInTag(\"pre\", \"const options = \" + _JSON$stringify(options, null, 2)));\n    }\n\n    /**\n     *\n     * @returns {{}} options\n     */\n  }, {\n    key: \"getOptions\",\n    value: function getOptions() {\n      var options = {};\n      for (var i = 0; i < this.changedOptions.length; i++) {\n        this._constructOptions(this.changedOptions[i].value, this.changedOptions[i].path, options);\n      }\n      return options;\n    }\n  }]);\n  return Configurator;\n}();\n\n/**\n * Popup is a class to create a popup window with some text\n */\nvar Popup$1 = /*#__PURE__*/function () {\n  /**\n   * @param {Element} container       The container object.\n   * @param {string}  overflowMethod  How the popup should act to overflowing ('flip' or 'cap')\n   */\n  function Popup(container, overflowMethod) {\n    _classCallCheck(this, Popup);\n    this.container = container;\n    this.overflowMethod = overflowMethod || \"cap\";\n    this.x = 0;\n    this.y = 0;\n    this.padding = 5;\n    this.hidden = false;\n\n    // create the frame\n    this.frame = document.createElement(\"div\");\n    this.frame.className = \"vis-tooltip\";\n    this.container.appendChild(this.frame);\n  }\n\n  /**\n   * @param {number} x   Horizontal position of the popup window\n   * @param {number} y   Vertical position of the popup window\n   */\n  _createClass(Popup, [{\n    key: \"setPosition\",\n    value: function setPosition(x, y) {\n      this.x = _parseInt$1(x);\n      this.y = _parseInt$1(y);\n    }\n\n    /**\n     * Set the content for the popup window. This can be HTML code or text.\n     *\n     * @param {string | Element} content\n     */\n  }, {\n    key: \"setText\",\n    value: function setText(content) {\n      if (content instanceof Element) {\n        while (this.frame.firstChild) {\n          this.frame.removeChild(this.frame.firstChild);\n        }\n        this.frame.appendChild(content);\n      } else {\n        // String containing literal text, element has to be used for HTML due to\n        // XSS risks associated with innerHTML (i.e. prevent XSS by accident).\n        this.frame.innerText = content;\n      }\n    }\n\n    /**\n     * Show the popup window\n     *\n     * @param {boolean} [doShow]    Show or hide the window\n     */\n  }, {\n    key: \"show\",\n    value: function show(doShow) {\n      if (doShow === undefined) {\n        doShow = true;\n      }\n      if (doShow === true) {\n        var height = this.frame.clientHeight;\n        var width = this.frame.clientWidth;\n        var maxHeight = this.frame.parentNode.clientHeight;\n        var maxWidth = this.frame.parentNode.clientWidth;\n        var left = 0,\n          top = 0;\n        if (this.overflowMethod == \"flip\") {\n          var isLeft = false,\n            isTop = true; // Where around the position it's located\n\n          if (this.y - height < this.padding) {\n            isTop = false;\n          }\n          if (this.x + width > maxWidth - this.padding) {\n            isLeft = true;\n          }\n          if (isLeft) {\n            left = this.x - width;\n          } else {\n            left = this.x;\n          }\n          if (isTop) {\n            top = this.y - height;\n          } else {\n            top = this.y;\n          }\n        } else {\n          top = this.y - height;\n          if (top + height + this.padding > maxHeight) {\n            top = maxHeight - height - this.padding;\n          }\n          if (top < this.padding) {\n            top = this.padding;\n          }\n          left = this.x;\n          if (left + width + this.padding > maxWidth) {\n            left = maxWidth - width - this.padding;\n          }\n          if (left < this.padding) {\n            left = this.padding;\n          }\n        }\n        this.frame.style.left = left + \"px\";\n        this.frame.style.top = top + \"px\";\n        this.frame.style.visibility = \"visible\";\n        this.hidden = false;\n      } else {\n        this.hide();\n      }\n    }\n\n    /**\n     * Hide the popup window\n     */\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.hidden = true;\n      this.frame.style.left = \"0\";\n      this.frame.style.top = \"0\";\n      this.frame.style.visibility = \"hidden\";\n    }\n\n    /**\n     * Remove the popup window\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.frame.parentNode.removeChild(this.frame); // Remove element from DOM\n    }\n  }]);\n  return Popup;\n}();\nvar errorFound = false;\nvar allOptions$1;\nvar VALIDATOR_PRINT_STYLE$1 = \"background: #FFeeee; color: #dd0000\";\n\n/**\n *  Used to validate options.\n */\nvar Validator$1 = /*#__PURE__*/function () {\n  function Validator() {\n    _classCallCheck(this, Validator);\n  }\n  _createClass(Validator, null, [{\n    key: \"validate\",\n    value:\n    /**\n     * Main function to be called\n     *\n     * @param {object} options\n     * @param {object} referenceOptions\n     * @param {object} subObject\n     * @returns {boolean}\n     * @static\n     */\n    function validate(options, referenceOptions, subObject) {\n      errorFound = false;\n      allOptions$1 = referenceOptions;\n      var usedOptions = referenceOptions;\n      if (subObject !== undefined) {\n        usedOptions = referenceOptions[subObject];\n      }\n      Validator.parse(options, usedOptions, []);\n      return errorFound;\n    }\n\n    /**\n     * Will traverse an object recursively and check every value\n     *\n     * @param {object} options\n     * @param {object} referenceOptions\n     * @param {Array} path    | where to look for the actual option\n     * @static\n     */\n  }, {\n    key: \"parse\",\n    value: function parse(options, referenceOptions, path) {\n      for (var _option3 in options) {\n        if (Object.prototype.hasOwnProperty.call(options, _option3)) {\n          Validator.check(_option3, options, referenceOptions, path);\n        }\n      }\n    }\n\n    /**\n     * Check every value. If the value is an object, call the parse function on that object.\n     *\n     * @param {string} option\n     * @param {object} options\n     * @param {object} referenceOptions\n     * @param {Array} path    | where to look for the actual option\n     * @static\n     */\n  }, {\n    key: \"check\",\n    value: function check(option, options, referenceOptions, path) {\n      if (referenceOptions[option] === undefined && referenceOptions.__any__ === undefined) {\n        Validator.getSuggestion(option, referenceOptions, path);\n        return;\n      }\n      var referenceOption = option;\n      var is_object = true;\n      if (referenceOptions[option] === undefined && referenceOptions.__any__ !== undefined) {\n        // NOTE: This only triggers if the __any__ is in the top level of the options object.\n        //       THAT'S A REALLY BAD PLACE TO ALLOW IT!!!!\n        // TODO: Examine if needed, remove if possible\n\n        // __any__ is a wildcard. Any value is accepted and will be further analysed by reference.\n        referenceOption = \"__any__\";\n\n        // if the any-subgroup is not a predefined object in the configurator,\n        // we do not look deeper into the object.\n        is_object = Validator.getType(options[option]) === \"object\";\n      }\n      var refOptionObj = referenceOptions[referenceOption];\n      if (is_object && refOptionObj.__type__ !== undefined) {\n        refOptionObj = refOptionObj.__type__;\n      }\n      Validator.checkFields(option, options, referenceOptions, referenceOption, refOptionObj, path);\n    }\n\n    /**\n     *\n     * @param {string}  option           | the option property\n     * @param {object}  options          | The supplied options object\n     * @param {object}  referenceOptions | The reference options containing all options and their allowed formats\n     * @param {string}  referenceOption  | Usually this is the same as option, except when handling an __any__ tag.\n     * @param {string}  refOptionObj     | This is the type object from the reference options\n     * @param {Array}   path             | where in the object is the option\n     * @static\n     */\n  }, {\n    key: \"checkFields\",\n    value: function checkFields(option, options, referenceOptions, referenceOption, refOptionObj, path) {\n      var log = function log(message) {\n        console.error(\"%c\" + message + Validator.printLocation(path, option), VALIDATOR_PRINT_STYLE$1);\n      };\n      var optionType = Validator.getType(options[option]);\n      var refOptionType = refOptionObj[optionType];\n      if (refOptionType !== undefined) {\n        // if the type is correct, we check if it is supposed to be one of a few select values\n        if (Validator.getType(refOptionType) === \"array\" && _indexOfInstanceProperty(refOptionType).call(refOptionType, options[option]) === -1) {\n          log('Invalid option detected in \"' + option + '\".' + \" Allowed values are:\" + Validator.print(refOptionType) + ' not \"' + options[option] + '\". ');\n          errorFound = true;\n        } else if (optionType === \"object\" && referenceOption !== \"__any__\") {\n          path = copyAndExtendArray(path, option);\n          Validator.parse(options[option], referenceOptions[referenceOption], path);\n        }\n      } else if (refOptionObj[\"any\"] === undefined) {\n        // type of the field is incorrect and the field cannot be any\n        log('Invalid type received for \"' + option + '\". Expected: ' + Validator.print(_Object$keys(refOptionObj)) + \". Received [\" + optionType + '] \"' + options[option] + '\"');\n        errorFound = true;\n      }\n    }\n\n    /**\n     *\n     * @param {object | boolean | number | string | Array.<number> | Date | Node | Moment | undefined | null} object\n     * @returns {string}\n     * @static\n     */\n  }, {\n    key: \"getType\",\n    value: function getType(object) {\n      var type = _typeof(object);\n      if (type === \"object\") {\n        if (object === null) {\n          return \"null\";\n        }\n        if (object instanceof Boolean) {\n          return \"boolean\";\n        }\n        if (object instanceof Number) {\n          return \"number\";\n        }\n        if (object instanceof String) {\n          return \"string\";\n        }\n        if (_Array$isArray(object)) {\n          return \"array\";\n        }\n        if (object instanceof Date) {\n          return \"date\";\n        }\n        if (object.nodeType !== undefined) {\n          return \"dom\";\n        }\n        if (object._isAMomentObject === true) {\n          return \"moment\";\n        }\n        return \"object\";\n      } else if (type === \"number\") {\n        return \"number\";\n      } else if (type === \"boolean\") {\n        return \"boolean\";\n      } else if (type === \"string\") {\n        return \"string\";\n      } else if (type === undefined) {\n        return \"undefined\";\n      }\n      return type;\n    }\n\n    /**\n     * @param {string} option\n     * @param {object} options\n     * @param {Array.<string>} path\n     * @static\n     */\n  }, {\n    key: \"getSuggestion\",\n    value: function getSuggestion(option, options, path) {\n      var localSearch = Validator.findInOptions(option, options, path, false);\n      var globalSearch = Validator.findInOptions(option, allOptions$1, [], true);\n      var localSearchThreshold = 8;\n      var globalSearchThreshold = 4;\n      var msg;\n      if (localSearch.indexMatch !== undefined) {\n        msg = \" in \" + Validator.printLocation(localSearch.path, option, \"\") + 'Perhaps it was incomplete? Did you mean: \"' + localSearch.indexMatch + '\"?\\n\\n';\n      } else if (globalSearch.distance <= globalSearchThreshold && localSearch.distance > globalSearch.distance) {\n        msg = \" in \" + Validator.printLocation(localSearch.path, option, \"\") + \"Perhaps it was misplaced? Matching option found at: \" + Validator.printLocation(globalSearch.path, globalSearch.closestMatch, \"\");\n      } else if (localSearch.distance <= localSearchThreshold) {\n        msg = '. Did you mean \"' + localSearch.closestMatch + '\"?' + Validator.printLocation(localSearch.path, option);\n      } else {\n        msg = \". Did you mean one of these: \" + Validator.print(_Object$keys(options)) + Validator.printLocation(path, option);\n      }\n      console.error('%cUnknown option detected: \"' + option + '\"' + msg, VALIDATOR_PRINT_STYLE$1);\n      errorFound = true;\n    }\n\n    /**\n     * traverse the options in search for a match.\n     *\n     * @param {string} option\n     * @param {object} options\n     * @param {Array} path    | where to look for the actual option\n     * @param {boolean} [recursive=false]\n     * @returns {{closestMatch: string, path: Array, distance: number}}\n     * @static\n     */\n  }, {\n    key: \"findInOptions\",\n    value: function findInOptions(option, options, path) {\n      var recursive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var min = 1e9;\n      var closestMatch = \"\";\n      var closestMatchPath = [];\n      var lowerCaseOption = option.toLowerCase();\n      var indexMatch = undefined;\n      for (var op in options) {\n        var distance = void 0;\n        if (options[op].__type__ !== undefined && recursive === true) {\n          var result = Validator.findInOptions(option, options[op], copyAndExtendArray(path, op));\n          if (min > result.distance) {\n            closestMatch = result.closestMatch;\n            closestMatchPath = result.path;\n            min = result.distance;\n            indexMatch = result.indexMatch;\n          }\n        } else {\n          var _context16;\n          if (_indexOfInstanceProperty(_context16 = op.toLowerCase()).call(_context16, lowerCaseOption) !== -1) {\n            indexMatch = op;\n          }\n          distance = Validator.levenshteinDistance(option, op);\n          if (min > distance) {\n            closestMatch = op;\n            closestMatchPath = copyArray(path);\n            min = distance;\n          }\n        }\n      }\n      return {\n        closestMatch: closestMatch,\n        path: closestMatchPath,\n        distance: min,\n        indexMatch: indexMatch\n      };\n    }\n\n    /**\n     * @param {Array.<string>} path\n     * @param {object} option\n     * @param {string} prefix\n     * @returns {string}\n     * @static\n     */\n  }, {\n    key: \"printLocation\",\n    value: function printLocation(path, option) {\n      var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"Problem value found at: \\n\";\n      var str = \"\\n\\n\" + prefix + \"options = {\\n\";\n      for (var i = 0; i < path.length; i++) {\n        for (var j = 0; j < i + 1; j++) {\n          str += \"  \";\n        }\n        str += path[i] + \": {\\n\";\n      }\n      for (var _j = 0; _j < path.length + 1; _j++) {\n        str += \"  \";\n      }\n      str += option + \"\\n\";\n      for (var _i5 = 0; _i5 < path.length + 1; _i5++) {\n        for (var _j2 = 0; _j2 < path.length - _i5; _j2++) {\n          str += \"  \";\n        }\n        str += \"}\\n\";\n      }\n      return str + \"\\n\\n\";\n    }\n\n    /**\n     * @param {object} options\n     * @returns {string}\n     * @static\n     */\n  }, {\n    key: \"print\",\n    value: function print(options) {\n      return _JSON$stringify(options).replace(/(\")|(\\[)|(\\])|(,\"__type__\")/g, \"\").replace(/(,)/g, \", \");\n    }\n\n    /**\n     *  Compute the edit distance between the two given strings\n     * http://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance#JavaScript\n     *\n     * Copyright (c) 2011 Andrei Mackenzie\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n     *\n     * @param {string} a\n     * @param {string} b\n     * @returns {Array.<Array.<number>>}}\n     * @static\n     */\n  }, {\n    key: \"levenshteinDistance\",\n    value: function levenshteinDistance(a, b) {\n      if (a.length === 0) return b.length;\n      if (b.length === 0) return a.length;\n      var matrix = [];\n\n      // increment along the first column of each row\n      var i;\n      for (i = 0; i <= b.length; i++) {\n        matrix[i] = [i];\n      }\n\n      // increment each column in the first row\n      var j;\n      for (j = 0; j <= a.length; j++) {\n        matrix[0][j] = j;\n      }\n\n      // Fill in the rest of the matrix\n      for (i = 1; i <= b.length; i++) {\n        for (j = 1; j <= a.length; j++) {\n          if (b.charAt(i - 1) == a.charAt(j - 1)) {\n            matrix[i][j] = matrix[i - 1][j - 1];\n          } else {\n            matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1,\n            // substitution\n            Math.min(matrix[i][j - 1] + 1,\n            // insertion\n            matrix[i - 1][j] + 1)); // deletion\n          }\n        }\n      }\n\n      return matrix[b.length][a.length];\n    }\n  }]);\n  return Validator;\n}();\nvar Activator = Activator$1;\nvar Configurator = Configurator$1;\nvar Hammer = Hammer$1;\nvar Popup = Popup$1;\nvar VALIDATOR_PRINT_STYLE = VALIDATOR_PRINT_STYLE$1;\nvar Validator = Validator$1;\n\n/* eslint-disable no-prototype-builtins */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-var */\n\n/**\n * Parse a text source containing data in DOT language into a JSON object.\n * The object contains two lists: one with nodes and one with edges.\n *\n * DOT language reference: http://www.graphviz.org/doc/info/lang.html\n *\n * DOT language attributes: http://graphviz.org/content/attrs\n *\n * @param {string} data     Text containing a graph in DOT-notation\n * @returns {object} graph   An object containing two parameters:\n *                          {Object[]} nodes\n *                          {Object[]} edges\n *\n * -------------------------------------------\n * TODO\n * ====\n *\n * For label handling, this is an incomplete implementation. From docs (quote #3015):\n *\n * > the escape sequences \"\\n\", \"\\l\" and \"\\r\" divide the label into lines, centered,\n * > left-justified, and right-justified, respectively.\n *\n * Source: http://www.graphviz.org/content/attrs#kescString\n *\n * > As another aid for readability, dot allows double-quoted strings to span multiple physical\n * > lines using the standard C convention of a backslash immediately preceding a newline\n * > character\n * > In addition, double-quoted strings can be concatenated using a '+' operator.\n * > As HTML strings can contain newline characters, which are used solely for formatting,\n * > the language does not allow escaped newlines or concatenation operators to be used\n * > within them.\n *\n * - Currently, only '\\\\n' is handled\n * - Note that text explicitly says 'labels'; the dot parser currently handles escape\n *   sequences in **all** strings.\n */\nfunction parseDOT(data) {\n  dot = data;\n  return parseGraph();\n}\n\n// mapping of attributes from DOT (the keys) to vis.js (the values)\nvar NODE_ATTR_MAPPING = {\n  fontsize: \"font.size\",\n  fontcolor: \"font.color\",\n  labelfontcolor: \"font.color\",\n  fontname: \"font.face\",\n  color: [\"color.border\", \"color.background\"],\n  fillcolor: \"color.background\",\n  tooltip: \"title\",\n  labeltooltip: \"title\"\n};\nvar EDGE_ATTR_MAPPING = _Object$create$1(NODE_ATTR_MAPPING);\nEDGE_ATTR_MAPPING.color = \"color.color\";\nEDGE_ATTR_MAPPING.style = \"dashes\";\n\n// token types enumeration\nvar TOKENTYPE = {\n  NULL: 0,\n  DELIMITER: 1,\n  IDENTIFIER: 2,\n  UNKNOWN: 3\n};\n\n// map with all delimiters\nvar DELIMITERS = {\n  \"{\": true,\n  \"}\": true,\n  \"[\": true,\n  \"]\": true,\n  \";\": true,\n  \"=\": true,\n  \",\": true,\n  \"->\": true,\n  \"--\": true\n};\nvar dot = \"\"; // current dot file\nvar index = 0; // current index in dot file\nvar c = \"\"; // current token character in expr\nvar token = \"\"; // current token\nvar tokenType = TOKENTYPE.NULL; // type of the token\n\n/**\n * Get the first character from the dot file.\n * The character is stored into the char c. If the end of the dot file is\n * reached, the function puts an empty string in c.\n */\nfunction first() {\n  index = 0;\n  c = dot.charAt(0);\n}\n\n/**\n * Get the next character from the dot file.\n * The character is stored into the char c. If the end of the dot file is\n * reached, the function puts an empty string in c.\n */\nfunction next() {\n  index++;\n  c = dot.charAt(index);\n}\n\n/**\n * Preview the next character from the dot file.\n *\n * @returns {string} cNext\n */\nfunction nextPreview() {\n  return dot.charAt(index + 1);\n}\n\n/**\n * Test whether given character is alphabetic or numeric ( a-zA-Z_0-9.:# )\n *\n * @param {string} c\n * @returns {boolean} isAlphaNumeric\n */\nfunction isAlphaNumeric(c) {\n  var charCode = c.charCodeAt(0);\n  if (charCode < 47) {\n    // #.\n    return charCode === 35 || charCode === 46;\n  }\n  if (charCode < 59) {\n    // 0-9 and :\n    return charCode > 47;\n  }\n  if (charCode < 91) {\n    // A-Z\n    return charCode > 64;\n  }\n  if (charCode < 96) {\n    // _\n    return charCode === 95;\n  }\n  if (charCode < 123) {\n    // a-z\n    return charCode > 96;\n  }\n  return false;\n}\n\n/**\n * Merge all options of object b into object b\n *\n * @param {object} a\n * @param {object} b\n * @returns {object} a\n */\nfunction merge$1(a, b) {\n  if (!a) {\n    a = {};\n  }\n  if (b) {\n    for (var name in b) {\n      if (b.hasOwnProperty(name)) {\n        a[name] = b[name];\n      }\n    }\n  }\n  return a;\n}\n\n/**\n * Set a value in an object, where the provided parameter name can be a\n * path with nested parameters. For example:\n *\n *     var obj = {a: 2};\n *     setValue(obj, 'b.c', 3);     // obj = {a: 2, b: {c: 3}}\n *\n * @param {object} obj\n * @param {string} path  A parameter name or dot-separated parameter path,\n *                      like \"color.highlight.border\".\n * @param {*} value\n */\nfunction setValue(obj, path, value) {\n  var keys = path.split(\".\");\n  var o = obj;\n  while (keys.length) {\n    var key = keys.shift();\n    if (keys.length) {\n      // this isn't the end point\n      if (!o[key]) {\n        o[key] = {};\n      }\n      o = o[key];\n    } else {\n      // this is the end point\n      o[key] = value;\n    }\n  }\n}\n\n/**\n * Add a node to a graph object. If there is already a node with\n * the same id, their attributes will be merged.\n *\n * @param {object} graph\n * @param {object} node\n */\nfunction addNode(graph, node) {\n  var i, len;\n  var current = null;\n\n  // find root graph (in case of subgraph)\n  var graphs = [graph]; // list with all graphs from current graph to root graph\n  var root = graph;\n  while (root.parent) {\n    graphs.push(root.parent);\n    root = root.parent;\n  }\n\n  // find existing node (at root level) by its id\n  if (root.nodes) {\n    for (i = 0, len = root.nodes.length; i < len; i++) {\n      if (node.id === root.nodes[i].id) {\n        current = root.nodes[i];\n        break;\n      }\n    }\n  }\n  if (!current) {\n    // this is a new node\n    current = {\n      id: node.id\n    };\n    if (graph.node) {\n      // clone default attributes\n      current.attr = merge$1(current.attr, graph.node);\n    }\n  }\n\n  // add node to this (sub)graph and all its parent graphs\n  for (i = graphs.length - 1; i >= 0; i--) {\n    var _context;\n    var g = graphs[i];\n    if (!g.nodes) {\n      g.nodes = [];\n    }\n    if (_indexOfInstanceProperty(_context = g.nodes).call(_context, current) === -1) {\n      g.nodes.push(current);\n    }\n  }\n\n  // merge attributes\n  if (node.attr) {\n    current.attr = merge$1(current.attr, node.attr);\n  }\n}\n\n/**\n * Add an edge to a graph object\n *\n * @param {object} graph\n * @param {object} edge\n */\nfunction addEdge(graph, edge) {\n  if (!graph.edges) {\n    graph.edges = [];\n  }\n  graph.edges.push(edge);\n  if (graph.edge) {\n    var attr = merge$1({}, graph.edge); // clone default attributes\n    edge.attr = merge$1(attr, edge.attr); // merge attributes\n  }\n}\n\n/**\n * Create an edge to a graph object\n *\n * @param {object} graph\n * @param {string | number | object} from\n * @param {string | number | object} to\n * @param {string} type\n * @param {object | null} attr\n * @returns {object} edge\n */\nfunction createEdge(graph, from, to, type, attr) {\n  var edge = {\n    from: from,\n    to: to,\n    type: type\n  };\n  if (graph.edge) {\n    edge.attr = merge$1({}, graph.edge); // clone default attributes\n  }\n\n  edge.attr = merge$1(edge.attr || {}, attr); // merge attributes\n\n  // Move arrows attribute from attr to edge temporally created in\n  // parseAttributeList().\n  if (attr != null) {\n    if (attr.hasOwnProperty(\"arrows\") && attr[\"arrows\"] != null) {\n      edge[\"arrows\"] = {\n        to: {\n          enabled: true,\n          type: attr.arrows.type\n        }\n      };\n      attr[\"arrows\"] = null;\n    }\n  }\n  return edge;\n}\n\n/**\n * Get next token in the current dot file.\n * The token and token type are available as token and tokenType\n */\nfunction getToken() {\n  tokenType = TOKENTYPE.NULL;\n  token = \"\";\n\n  // skip over whitespaces\n  while (c === \" \" || c === \"\\t\" || c === \"\\n\" || c === \"\\r\") {\n    // space, tab, enter\n    next();\n  }\n  do {\n    var isComment = false;\n\n    // skip comment\n    if (c === \"#\") {\n      // find the previous non-space character\n      var i = index - 1;\n      while (dot.charAt(i) === \" \" || dot.charAt(i) === \"\\t\") {\n        i--;\n      }\n      if (dot.charAt(i) === \"\\n\" || dot.charAt(i) === \"\") {\n        // the # is at the start of a line, this is indeed a line comment\n        while (c != \"\" && c != \"\\n\") {\n          next();\n        }\n        isComment = true;\n      }\n    }\n    if (c === \"/\" && nextPreview() === \"/\") {\n      // skip line comment\n      while (c != \"\" && c != \"\\n\") {\n        next();\n      }\n      isComment = true;\n    }\n    if (c === \"/\" && nextPreview() === \"*\") {\n      // skip block comment\n      while (c != \"\") {\n        if (c === \"*\" && nextPreview() === \"/\") {\n          // end of block comment found. skip these last two characters\n          next();\n          next();\n          break;\n        } else {\n          next();\n        }\n      }\n      isComment = true;\n    }\n\n    // skip over whitespaces\n    while (c === \" \" || c === \"\\t\" || c === \"\\n\" || c === \"\\r\") {\n      // space, tab, enter\n      next();\n    }\n  } while (isComment);\n\n  // check for end of dot file\n  if (c === \"\") {\n    // token is still empty\n    tokenType = TOKENTYPE.DELIMITER;\n    return;\n  }\n\n  // check for delimiters consisting of 2 characters\n  var c2 = c + nextPreview();\n  if (DELIMITERS[c2]) {\n    tokenType = TOKENTYPE.DELIMITER;\n    token = c2;\n    next();\n    next();\n    return;\n  }\n\n  // check for delimiters consisting of 1 character\n  if (DELIMITERS[c]) {\n    tokenType = TOKENTYPE.DELIMITER;\n    token = c;\n    next();\n    return;\n  }\n\n  // check for an identifier (number or string)\n  // TODO: more precise parsing of numbers/strings (and the port separator ':')\n  if (isAlphaNumeric(c) || c === \"-\") {\n    token += c;\n    next();\n    while (isAlphaNumeric(c)) {\n      token += c;\n      next();\n    }\n    if (token === \"false\") {\n      token = false; // convert to boolean\n    } else if (token === \"true\") {\n      token = true; // convert to boolean\n    } else if (!isNaN(Number(token))) {\n      token = Number(token); // convert to number\n    }\n\n    tokenType = TOKENTYPE.IDENTIFIER;\n    return;\n  }\n\n  // check for a string enclosed by double quotes\n  if (c === '\"') {\n    next();\n    while (c != \"\" && (c != '\"' || c === '\"' && nextPreview() === '\"')) {\n      if (c === '\"') {\n        // skip the escape character\n        token += c;\n        next();\n      } else if (c === \"\\\\\" && nextPreview() === \"n\") {\n        // Honor a newline escape sequence\n        token += \"\\n\";\n        next();\n      } else {\n        token += c;\n      }\n      next();\n    }\n    if (c != '\"') {\n      throw newSyntaxError('End of string \" expected');\n    }\n    next();\n    tokenType = TOKENTYPE.IDENTIFIER;\n    return;\n  }\n\n  // something unknown is found, wrong characters, a syntax error\n  tokenType = TOKENTYPE.UNKNOWN;\n  while (c != \"\") {\n    token += c;\n    next();\n  }\n  throw new SyntaxError('Syntax error in part \"' + chop(token, 30) + '\"');\n}\n\n/**\n * Parse a graph.\n *\n * @returns {object} graph\n */\nfunction parseGraph() {\n  var graph = {};\n  first();\n  getToken();\n\n  // optional strict keyword\n  if (token === \"strict\") {\n    graph.strict = true;\n    getToken();\n  }\n\n  // graph or digraph keyword\n  if (token === \"graph\" || token === \"digraph\") {\n    graph.type = token;\n    getToken();\n  }\n\n  // optional graph id\n  if (tokenType === TOKENTYPE.IDENTIFIER) {\n    graph.id = token;\n    getToken();\n  }\n\n  // open angle bracket\n  if (token != \"{\") {\n    throw newSyntaxError(\"Angle bracket { expected\");\n  }\n  getToken();\n\n  // statements\n  parseStatements(graph);\n\n  // close angle bracket\n  if (token != \"}\") {\n    throw newSyntaxError(\"Angle bracket } expected\");\n  }\n  getToken();\n\n  // end of file\n  if (token !== \"\") {\n    throw newSyntaxError(\"End of file expected\");\n  }\n  getToken();\n\n  // remove temporary default options\n  delete graph.node;\n  delete graph.edge;\n  delete graph.graph;\n  return graph;\n}\n\n/**\n * Parse a list with statements.\n *\n * @param {object} graph\n */\nfunction parseStatements(graph) {\n  while (token !== \"\" && token != \"}\") {\n    parseStatement(graph);\n    if (token === \";\") {\n      getToken();\n    }\n  }\n}\n\n/**\n * Parse a single statement. Can be a an attribute statement, node\n * statement, a series of node statements and edge statements, or a\n * parameter.\n *\n * @param {object} graph\n */\nfunction parseStatement(graph) {\n  // parse subgraph\n  var subgraph = parseSubgraph(graph);\n  if (subgraph) {\n    // edge statements\n    parseEdge(graph, subgraph);\n    return;\n  }\n\n  // parse an attribute statement\n  var attr = parseAttributeStatement(graph);\n  if (attr) {\n    return;\n  }\n\n  // parse node\n  if (tokenType != TOKENTYPE.IDENTIFIER) {\n    throw newSyntaxError(\"Identifier expected\");\n  }\n  var id = token; // id can be a string or a number\n  getToken();\n  if (token === \"=\") {\n    // id statement\n    getToken();\n    if (tokenType != TOKENTYPE.IDENTIFIER) {\n      throw newSyntaxError(\"Identifier expected\");\n    }\n    graph[id] = token;\n    getToken();\n    // TODO: implement comma separated list with \"a_list: ID=ID [','] [a_list] \"\n  } else {\n    parseNodeStatement(graph, id);\n  }\n}\n\n/**\n * Parse a subgraph\n *\n * @param {object} graph    parent graph object\n * @returns {object | null} subgraph\n */\nfunction parseSubgraph(graph) {\n  var subgraph = null;\n\n  // optional subgraph keyword\n  if (token === \"subgraph\") {\n    subgraph = {};\n    subgraph.type = \"subgraph\";\n    getToken();\n\n    // optional graph id\n    if (tokenType === TOKENTYPE.IDENTIFIER) {\n      subgraph.id = token;\n      getToken();\n    }\n  }\n\n  // open angle bracket\n  if (token === \"{\") {\n    getToken();\n    if (!subgraph) {\n      subgraph = {};\n    }\n    subgraph.parent = graph;\n    subgraph.node = graph.node;\n    subgraph.edge = graph.edge;\n    subgraph.graph = graph.graph;\n\n    // statements\n    parseStatements(subgraph);\n\n    // close angle bracket\n    if (token != \"}\") {\n      throw newSyntaxError(\"Angle bracket } expected\");\n    }\n    getToken();\n\n    // remove temporary default options\n    delete subgraph.node;\n    delete subgraph.edge;\n    delete subgraph.graph;\n    delete subgraph.parent;\n\n    // register at the parent graph\n    if (!graph.subgraphs) {\n      graph.subgraphs = [];\n    }\n    graph.subgraphs.push(subgraph);\n  }\n  return subgraph;\n}\n\n/**\n * parse an attribute statement like \"node [shape=circle fontSize=16]\".\n * Available keywords are 'node', 'edge', 'graph'.\n * The previous list with default attributes will be replaced\n *\n * @param {object} graph\n * @returns {string | null} keyword Returns the name of the parsed attribute\n *                                  (node, edge, graph), or null if nothing\n *                                  is parsed.\n */\nfunction parseAttributeStatement(graph) {\n  // attribute statements\n  if (token === \"node\") {\n    getToken();\n\n    // node attributes\n    graph.node = parseAttributeList();\n    return \"node\";\n  } else if (token === \"edge\") {\n    getToken();\n\n    // edge attributes\n    graph.edge = parseAttributeList();\n    return \"edge\";\n  } else if (token === \"graph\") {\n    getToken();\n\n    // graph attributes\n    graph.graph = parseAttributeList();\n    return \"graph\";\n  }\n  return null;\n}\n\n/**\n * parse a node statement\n *\n * @param {object} graph\n * @param {string | number} id\n */\nfunction parseNodeStatement(graph, id) {\n  // node statement\n  var node = {\n    id: id\n  };\n  var attr = parseAttributeList();\n  if (attr) {\n    node.attr = attr;\n  }\n  addNode(graph, node);\n\n  // edge statements\n  parseEdge(graph, id);\n}\n\n/**\n * Parse an edge or a series of edges\n *\n * @param {object} graph\n * @param {string | number} from        Id of the from node\n */\nfunction parseEdge(graph, from) {\n  while (token === \"->\" || token === \"--\") {\n    var to;\n    var type = token;\n    getToken();\n    var subgraph = parseSubgraph(graph);\n    if (subgraph) {\n      to = subgraph;\n    } else {\n      if (tokenType != TOKENTYPE.IDENTIFIER) {\n        throw newSyntaxError(\"Identifier or subgraph expected\");\n      }\n      to = token;\n      addNode(graph, {\n        id: to\n      });\n      getToken();\n    }\n\n    // parse edge attributes\n    var attr = parseAttributeList();\n\n    // create edge\n    var edge = createEdge(graph, from, to, type, attr);\n    addEdge(graph, edge);\n    from = to;\n  }\n}\n\n/**\n * Parse a set with attributes,\n * for example [label=\"1.000\", shape=solid]\n *\n * @returns {object | null} attr\n */\nfunction parseAttributeList() {\n  var i;\n  var attr = null;\n\n  // edge styles of dot and vis\n  var edgeStyles = {\n    dashed: true,\n    solid: false,\n    dotted: [1, 5]\n  };\n\n  /**\n   * Define arrow types.\n   * vis currently supports types defined in 'arrowTypes'.\n   * Details of arrow shapes are described in\n   * http://www.graphviz.org/content/arrow-shapes\n   */\n  var arrowTypes = {\n    dot: \"circle\",\n    box: \"box\",\n    crow: \"crow\",\n    curve: \"curve\",\n    icurve: \"inv_curve\",\n    normal: \"triangle\",\n    inv: \"inv_triangle\",\n    diamond: \"diamond\",\n    tee: \"bar\",\n    vee: \"vee\"\n  };\n\n  /**\n   * 'attr_list' contains attributes for checking if some of them are affected\n   * later. For instance, both of 'arrowhead' and 'dir' (edge style defined\n   * in DOT) make changes to 'arrows' attribute in vis.\n   */\n  var attr_list = new Array();\n  var attr_names = new Array(); // used for checking the case.\n\n  // parse attributes\n  while (token === \"[\") {\n    getToken();\n    attr = {};\n    while (token !== \"\" && token != \"]\") {\n      if (tokenType != TOKENTYPE.IDENTIFIER) {\n        throw newSyntaxError(\"Attribute name expected\");\n      }\n      var name = token;\n      getToken();\n      if (token != \"=\") {\n        throw newSyntaxError(\"Equal sign = expected\");\n      }\n      getToken();\n      if (tokenType != TOKENTYPE.IDENTIFIER) {\n        throw newSyntaxError(\"Attribute value expected\");\n      }\n      var value = token;\n\n      // convert from dot style to vis\n      if (name === \"style\") {\n        value = edgeStyles[value];\n      }\n      var arrowType;\n      if (name === \"arrowhead\") {\n        arrowType = arrowTypes[value];\n        name = \"arrows\";\n        value = {\n          to: {\n            enabled: true,\n            type: arrowType\n          }\n        };\n      }\n      if (name === \"arrowtail\") {\n        arrowType = arrowTypes[value];\n        name = \"arrows\";\n        value = {\n          from: {\n            enabled: true,\n            type: arrowType\n          }\n        };\n      }\n      attr_list.push({\n        attr: attr,\n        name: name,\n        value: value\n      });\n      attr_names.push(name);\n      getToken();\n      if (token == \",\") {\n        getToken();\n      }\n    }\n    if (token != \"]\") {\n      throw newSyntaxError(\"Bracket ] expected\");\n    }\n    getToken();\n  }\n\n  /**\n   * As explained in [1], graphviz has limitations for combination of\n   * arrow[head|tail] and dir. If attribute list includes 'dir',\n   * following cases just be supported.\n   *   1. both or none + arrowhead, arrowtail\n   *   2. forward + arrowhead (arrowtail is not affedted)\n   *   3. back + arrowtail (arrowhead is not affected)\n   * [1] https://www.graphviz.org/doc/info/attrs.html#h:undir_note\n   */\n  if (_includesInstanceProperty(attr_names).call(attr_names, \"dir\")) {\n    var idx = {}; // get index of 'arrows' and 'dir'\n    idx.arrows = {};\n    for (i = 0; i < attr_list.length; i++) {\n      if (attr_list[i].name === \"arrows\") {\n        if (attr_list[i].value.to != null) {\n          idx.arrows.to = i;\n        } else if (attr_list[i].value.from != null) {\n          idx.arrows.from = i;\n        } else {\n          throw newSyntaxError(\"Invalid value of arrows\");\n        }\n      } else if (attr_list[i].name === \"dir\") {\n        idx.dir = i;\n      }\n    }\n\n    // first, add default arrow shape if it is not assigned to avoid error\n    var dir_type = attr_list[idx.dir].value;\n    if (!_includesInstanceProperty(attr_names).call(attr_names, \"arrows\")) {\n      if (dir_type === \"both\") {\n        attr_list.push({\n          attr: attr_list[idx.dir].attr,\n          name: \"arrows\",\n          value: {\n            to: {\n              enabled: true\n            }\n          }\n        });\n        idx.arrows.to = attr_list.length - 1;\n        attr_list.push({\n          attr: attr_list[idx.dir].attr,\n          name: \"arrows\",\n          value: {\n            from: {\n              enabled: true\n            }\n          }\n        });\n        idx.arrows.from = attr_list.length - 1;\n      } else if (dir_type === \"forward\") {\n        attr_list.push({\n          attr: attr_list[idx.dir].attr,\n          name: \"arrows\",\n          value: {\n            to: {\n              enabled: true\n            }\n          }\n        });\n        idx.arrows.to = attr_list.length - 1;\n      } else if (dir_type === \"back\") {\n        attr_list.push({\n          attr: attr_list[idx.dir].attr,\n          name: \"arrows\",\n          value: {\n            from: {\n              enabled: true\n            }\n          }\n        });\n        idx.arrows.from = attr_list.length - 1;\n      } else if (dir_type === \"none\") {\n        attr_list.push({\n          attr: attr_list[idx.dir].attr,\n          name: \"arrows\",\n          value: \"\"\n        });\n        idx.arrows.to = attr_list.length - 1;\n      } else {\n        throw newSyntaxError('Invalid dir type \"' + dir_type + '\"');\n      }\n    }\n    var from_type;\n    var to_type;\n    // update 'arrows' attribute from 'dir'.\n    if (dir_type === \"both\") {\n      // both of shapes of 'from' and 'to' are given\n      if (idx.arrows.to && idx.arrows.from) {\n        to_type = attr_list[idx.arrows.to].value.to.type;\n        from_type = attr_list[idx.arrows.from].value.from.type;\n        attr_list[idx.arrows.to] = {\n          attr: attr_list[idx.arrows.to].attr,\n          name: attr_list[idx.arrows.to].name,\n          value: {\n            to: {\n              enabled: true,\n              type: to_type\n            },\n            from: {\n              enabled: true,\n              type: from_type\n            }\n          }\n        };\n        _spliceInstanceProperty(attr_list).call(attr_list, idx.arrows.from, 1);\n\n        // shape of 'to' is assigned and use default to 'from'\n      } else if (idx.arrows.to) {\n        to_type = attr_list[idx.arrows.to].value.to.type;\n        from_type = \"arrow\";\n        attr_list[idx.arrows.to] = {\n          attr: attr_list[idx.arrows.to].attr,\n          name: attr_list[idx.arrows.to].name,\n          value: {\n            to: {\n              enabled: true,\n              type: to_type\n            },\n            from: {\n              enabled: true,\n              type: from_type\n            }\n          }\n        };\n\n        // only shape of 'from' is assigned and use default for 'to'\n      } else if (idx.arrows.from) {\n        to_type = \"arrow\";\n        from_type = attr_list[idx.arrows.from].value.from.type;\n        attr_list[idx.arrows.from] = {\n          attr: attr_list[idx.arrows.from].attr,\n          name: attr_list[idx.arrows.from].name,\n          value: {\n            to: {\n              enabled: true,\n              type: to_type\n            },\n            from: {\n              enabled: true,\n              type: from_type\n            }\n          }\n        };\n      }\n    } else if (dir_type === \"back\") {\n      // given both of shapes, but use only 'from'\n      if (idx.arrows.to && idx.arrows.from) {\n        to_type = \"\";\n        from_type = attr_list[idx.arrows.from].value.from.type;\n        attr_list[idx.arrows.from] = {\n          attr: attr_list[idx.arrows.from].attr,\n          name: attr_list[idx.arrows.from].name,\n          value: {\n            to: {\n              enabled: true,\n              type: to_type\n            },\n            from: {\n              enabled: true,\n              type: from_type\n            }\n          }\n        };\n\n        // given shape of 'to', but does not use it\n      } else if (idx.arrows.to) {\n        to_type = \"\";\n        from_type = \"arrow\";\n        idx.arrows.from = idx.arrows.to;\n        attr_list[idx.arrows.from] = {\n          attr: attr_list[idx.arrows.from].attr,\n          name: attr_list[idx.arrows.from].name,\n          value: {\n            to: {\n              enabled: true,\n              type: to_type\n            },\n            from: {\n              enabled: true,\n              type: from_type\n            }\n          }\n        };\n\n        // assign given 'from' shape\n      } else if (idx.arrows.from) {\n        to_type = \"\";\n        from_type = attr_list[idx.arrows.from].value.from.type;\n        attr_list[idx.arrows.to] = {\n          attr: attr_list[idx.arrows.from].attr,\n          name: attr_list[idx.arrows.from].name,\n          value: {\n            to: {\n              enabled: true,\n              type: to_type\n            },\n            from: {\n              enabled: true,\n              type: from_type\n            }\n          }\n        };\n      }\n      attr_list[idx.arrows.from] = {\n        attr: attr_list[idx.arrows.from].attr,\n        name: attr_list[idx.arrows.from].name,\n        value: {\n          from: {\n            enabled: true,\n            type: attr_list[idx.arrows.from].value.from.type\n          }\n        }\n      };\n    } else if (dir_type === \"none\") {\n      var idx_arrow;\n      if (idx.arrows.to) {\n        idx_arrow = idx.arrows.to;\n      } else {\n        idx_arrow = idx.arrows.from;\n      }\n      attr_list[idx_arrow] = {\n        attr: attr_list[idx_arrow].attr,\n        name: attr_list[idx_arrow].name,\n        value: \"\"\n      };\n    } else if (dir_type === \"forward\") {\n      // given both of shapes, but use only 'to'\n      if (idx.arrows.to && idx.arrows.from) {\n        to_type = attr_list[idx.arrows.to].value.to.type;\n        from_type = \"\";\n        attr_list[idx.arrows.to] = {\n          attr: attr_list[idx.arrows.to].attr,\n          name: attr_list[idx.arrows.to].name,\n          value: {\n            to: {\n              enabled: true,\n              type: to_type\n            },\n            from: {\n              enabled: true,\n              type: from_type\n            }\n          }\n        };\n\n        // assign given 'to' shape\n      } else if (idx.arrows.to) {\n        to_type = attr_list[idx.arrows.to].value.to.type;\n        from_type = \"\";\n        attr_list[idx.arrows.to] = {\n          attr: attr_list[idx.arrows.to].attr,\n          name: attr_list[idx.arrows.to].name,\n          value: {\n            to: {\n              enabled: true,\n              type: to_type\n            },\n            from: {\n              enabled: true,\n              type: from_type\n            }\n          }\n        };\n\n        // given shape of 'from', but does not use it\n      } else if (idx.arrows.from) {\n        to_type = \"arrow\";\n        from_type = \"\";\n        idx.arrows.to = idx.arrows.from;\n        attr_list[idx.arrows.to] = {\n          attr: attr_list[idx.arrows.to].attr,\n          name: attr_list[idx.arrows.to].name,\n          value: {\n            to: {\n              enabled: true,\n              type: to_type\n            },\n            from: {\n              enabled: true,\n              type: from_type\n            }\n          }\n        };\n      }\n      attr_list[idx.arrows.to] = {\n        attr: attr_list[idx.arrows.to].attr,\n        name: attr_list[idx.arrows.to].name,\n        value: {\n          to: {\n            enabled: true,\n            type: attr_list[idx.arrows.to].value.to.type\n          }\n        }\n      };\n    } else {\n      throw newSyntaxError('Invalid dir type \"' + dir_type + '\"');\n    }\n\n    // remove 'dir' attribute no need anymore\n    _spliceInstanceProperty(attr_list).call(attr_list, idx.dir, 1);\n  }\n\n  // parse 'penwidth'\n  var nof_attr_list;\n  if (_includesInstanceProperty(attr_names).call(attr_names, \"penwidth\")) {\n    var tmp_attr_list = [];\n    nof_attr_list = attr_list.length;\n    for (i = 0; i < nof_attr_list; i++) {\n      // exclude 'width' from attr_list if 'penwidth' exists\n      if (attr_list[i].name !== \"width\") {\n        if (attr_list[i].name === \"penwidth\") {\n          attr_list[i].name = \"width\";\n        }\n        tmp_attr_list.push(attr_list[i]);\n      }\n    }\n    attr_list = tmp_attr_list;\n  }\n  nof_attr_list = attr_list.length;\n  for (i = 0; i < nof_attr_list; i++) {\n    setValue(attr_list[i].attr, attr_list[i].name, attr_list[i].value);\n  }\n  return attr;\n}\n\n/**\n * Create a syntax error with extra information on current token and index.\n *\n * @param {string} message\n * @returns {SyntaxError} err\n */\nfunction newSyntaxError(message) {\n  return new SyntaxError(message + ', got \"' + chop(token, 30) + '\" (char ' + index + \")\");\n}\n\n/**\n * Chop off text after a maximum length\n *\n * @param {string} text\n * @param {number} maxLength\n * @returns {string}\n */\nfunction chop(text, maxLength) {\n  return text.length <= maxLength ? text : text.substr(0, 27) + \"...\";\n}\n\n/**\n * Execute a function fn for each pair of elements in two arrays\n *\n * @param {Array | *} array1\n * @param {Array | *} array2\n * @param {Function} fn\n */\nfunction forEach2(array1, array2, fn) {\n  if (_Array$isArray(array1)) {\n    _forEachInstanceProperty(array1).call(array1, function (elem1) {\n      if (_Array$isArray(array2)) {\n        _forEachInstanceProperty(array2).call(array2, function (elem2) {\n          fn(elem1, elem2);\n        });\n      } else {\n        fn(elem1, array2);\n      }\n    });\n  } else {\n    if (_Array$isArray(array2)) {\n      _forEachInstanceProperty(array2).call(array2, function (elem2) {\n        fn(array1, elem2);\n      });\n    } else {\n      fn(array1, array2);\n    }\n  }\n}\n\n/**\n * Set a nested property on an object\n * When nested objects are missing, they will be created.\n * For example setProp({}, 'font.color', 'red') will return {font: {color: 'red'}}\n *\n * @param {object} object\n * @param {string} path   A dot separated string like 'font.color'\n * @param {*} value       Value for the property\n * @returns {object} Returns the original object, allows for chaining.\n */\nfunction setProp(object, path, value) {\n  var names = path.split(\".\");\n  var prop = names.pop();\n\n  // traverse over the nested objects\n  var obj = object;\n  for (var i = 0; i < names.length; i++) {\n    var name = names[i];\n    if (!(name in obj)) {\n      obj[name] = {};\n    }\n    obj = obj[name];\n  }\n\n  // set the property value\n  obj[prop] = value;\n  return object;\n}\n\n/**\n * Convert an object with DOT attributes to their vis.js equivalents.\n *\n * @param {object} attr     Object with DOT attributes\n * @param {object} mapping\n * @returns {object}         Returns an object with vis.js attributes\n */\nfunction convertAttr(attr, mapping) {\n  var converted = {};\n  for (var prop in attr) {\n    if (attr.hasOwnProperty(prop)) {\n      var visProp = mapping[prop];\n      if (_Array$isArray(visProp)) {\n        _forEachInstanceProperty(visProp).call(visProp, function (visPropI) {\n          setProp(converted, visPropI, attr[prop]);\n        });\n      } else if (typeof visProp === \"string\") {\n        setProp(converted, visProp, attr[prop]);\n      } else {\n        setProp(converted, prop, attr[prop]);\n      }\n    }\n  }\n  return converted;\n}\n\n/**\n * Convert a string containing a graph in DOT language into a map containing\n * with nodes and edges in the format of graph.\n *\n * @param {string} data         Text containing a graph in DOT-notation\n * @returns {object} graphData\n */\nfunction DOTToGraph(data) {\n  // parse the DOT file\n  var dotData = parseDOT(data);\n  var graphData = {\n    nodes: [],\n    edges: [],\n    options: {}\n  };\n\n  // copy the nodes\n  if (dotData.nodes) {\n    var _context2;\n    _forEachInstanceProperty(_context2 = dotData.nodes).call(_context2, function (dotNode) {\n      var graphNode = {\n        id: dotNode.id,\n        label: String(dotNode.label || dotNode.id)\n      };\n      merge$1(graphNode, convertAttr(dotNode.attr, NODE_ATTR_MAPPING));\n      if (graphNode.image) {\n        graphNode.shape = \"image\";\n      }\n      graphData.nodes.push(graphNode);\n    });\n  }\n\n  // copy the edges\n  if (dotData.edges) {\n    var _context3;\n    /**\n     * Convert an edge in DOT format to an edge with VisGraph format\n     *\n     * @param {object} dotEdge\n     * @returns {object} graphEdge\n     */\n    var convertEdge = function convertEdge(dotEdge) {\n      var graphEdge = {\n        from: dotEdge.from,\n        to: dotEdge.to\n      };\n      merge$1(graphEdge, convertAttr(dotEdge.attr, EDGE_ATTR_MAPPING));\n\n      // Add arrows attribute to default styled arrow.\n      // The reason why default style is not added in parseAttributeList() is\n      // because only default is cleared before here.\n      if (graphEdge.arrows == null && dotEdge.type === \"->\") {\n        graphEdge.arrows = \"to\";\n      }\n      return graphEdge;\n    };\n    _forEachInstanceProperty(_context3 = dotData.edges).call(_context3, function (dotEdge) {\n      var from, to;\n      if (dotEdge.from instanceof Object) {\n        from = dotEdge.from.nodes;\n      } else {\n        from = {\n          id: dotEdge.from\n        };\n      }\n      if (dotEdge.to instanceof Object) {\n        to = dotEdge.to.nodes;\n      } else {\n        to = {\n          id: dotEdge.to\n        };\n      }\n      if (dotEdge.from instanceof Object && dotEdge.from.edges) {\n        var _context4;\n        _forEachInstanceProperty(_context4 = dotEdge.from.edges).call(_context4, function (subEdge) {\n          var graphEdge = convertEdge(subEdge);\n          graphData.edges.push(graphEdge);\n        });\n      }\n      forEach2(from, to, function (from, to) {\n        var subEdge = createEdge(graphData, from.id, to.id, dotEdge.type, dotEdge.attr);\n        var graphEdge = convertEdge(subEdge);\n        graphData.edges.push(graphEdge);\n      });\n      if (dotEdge.to instanceof Object && dotEdge.to.edges) {\n        var _context5;\n        _forEachInstanceProperty(_context5 = dotEdge.to.edges).call(_context5, function (subEdge) {\n          var graphEdge = convertEdge(subEdge);\n          graphData.edges.push(graphEdge);\n        });\n      }\n    });\n  }\n\n  // copy the options\n  if (dotData.attr) {\n    graphData.options = dotData.attr;\n  }\n  return graphData;\n}\n\n/* eslint-enable no-var */\n/* eslint-enable no-unused-vars */\n/* eslint-enable no-prototype-builtins */\n\nvar dotparser = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tDOTToGraph: DOTToGraph,\n\tparseDOT: parseDOT\n});\n\n/**\r\n * Convert Gephi to Vis.\r\n *\r\n * @param gephiJSON - The parsed JSON data in Gephi format.\r\n * @param optionsObj - Additional options.\r\n * @returns The converted data ready to be used in Vis.\r\n */\nfunction parseGephi(gephiJSON, optionsObj) {\n  var _context;\n  var options = {\n    edges: {\n      inheritColor: false\n    },\n    nodes: {\n      fixed: false,\n      parseColor: false\n    }\n  };\n  if (optionsObj != null) {\n    if (optionsObj.fixed != null) {\n      options.nodes.fixed = optionsObj.fixed;\n    }\n    if (optionsObj.parseColor != null) {\n      options.nodes.parseColor = optionsObj.parseColor;\n    }\n    if (optionsObj.inheritColor != null) {\n      options.edges.inheritColor = optionsObj.inheritColor;\n    }\n  }\n  var gEdges = gephiJSON.edges;\n  var vEdges = _mapInstanceProperty(gEdges).call(gEdges, function (gEdge) {\n    var vEdge = {\n      from: gEdge.source,\n      id: gEdge.id,\n      to: gEdge.target\n    };\n    if (gEdge.attributes != null) {\n      vEdge.attributes = gEdge.attributes;\n    }\n    if (gEdge.label != null) {\n      vEdge.label = gEdge.label;\n    }\n    if (gEdge.attributes != null && gEdge.attributes.title != null) {\n      vEdge.title = gEdge.attributes.title;\n    }\n    if (gEdge.type === \"Directed\") {\n      vEdge.arrows = \"to\";\n    }\n    // edge['value'] = gEdge.attributes != null ? gEdge.attributes.Weight : undefined;\n    // edge['width'] = edge['value'] != null ? undefined : edgegEdge.size;\n    if (gEdge.color && options.edges.inheritColor === false) {\n      vEdge.color = gEdge.color;\n    }\n    return vEdge;\n  });\n  var vNodes = _mapInstanceProperty(_context = gephiJSON.nodes).call(_context, function (gNode) {\n    var vNode = {\n      id: gNode.id,\n      fixed: options.nodes.fixed && gNode.x != null && gNode.y != null\n    };\n    if (gNode.attributes != null) {\n      vNode.attributes = gNode.attributes;\n    }\n    if (gNode.label != null) {\n      vNode.label = gNode.label;\n    }\n    if (gNode.size != null) {\n      vNode.size = gNode.size;\n    }\n    if (gNode.attributes != null && gNode.attributes.title != null) {\n      vNode.title = gNode.attributes.title;\n    }\n    if (gNode.title != null) {\n      vNode.title = gNode.title;\n    }\n    if (gNode.x != null) {\n      vNode.x = gNode.x;\n    }\n    if (gNode.y != null) {\n      vNode.y = gNode.y;\n    }\n    if (gNode.color != null) {\n      if (options.nodes.parseColor === true) {\n        vNode.color = gNode.color;\n      } else {\n        vNode.color = {\n          background: gNode.color,\n          border: gNode.color,\n          highlight: {\n            background: gNode.color,\n            border: gNode.color\n          },\n          hover: {\n            background: gNode.color,\n            border: gNode.color\n          }\n        };\n      }\n    }\n    return vNode;\n  });\n  return {\n    nodes: vNodes,\n    edges: vEdges\n  };\n}\n\nvar gephiParser = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tparseGephi: parseGephi\n});\n\n// English\nvar en = {\n  addDescription: \"Click in an empty space to place a new node.\",\n  addEdge: \"Add Edge\",\n  addNode: \"Add Node\",\n  back: \"Back\",\n  close: \"Close\",\n  createEdgeError: \"Cannot link edges to a cluster.\",\n  del: \"Delete selected\",\n  deleteClusterError: \"Clusters cannot be deleted.\",\n  edgeDescription: \"Click on a node and drag the edge to another node to connect them.\",\n  edit: \"Edit\",\n  editClusterError: \"Clusters cannot be edited.\",\n  editEdge: \"Edit Edge\",\n  editEdgeDescription: \"Click on the control points and drag them to a node to connect to it.\",\n  editNode: \"Edit Node\"\n};\n// German\nvar de = {\n  addDescription: \"Klicke auf eine freie Stelle, um einen neuen Knoten zu plazieren.\",\n  addEdge: \"Kante hinzuf\\xFCgen\",\n  addNode: \"Knoten hinzuf\\xFCgen\",\n  back: \"Zur\\xFCck\",\n  close: \"Schließen\",\n  createEdgeError: \"Es ist nicht m\\xF6glich, Kanten mit Clustern zu verbinden.\",\n  del: \"L\\xF6sche Auswahl\",\n  deleteClusterError: \"Cluster k\\xF6nnen nicht gel\\xF6scht werden.\",\n  edgeDescription: \"Klicke auf einen Knoten und ziehe die Kante zu einem anderen Knoten, um diese zu verbinden.\",\n  edit: \"Editieren\",\n  editClusterError: \"Cluster k\\xF6nnen nicht editiert werden.\",\n  editEdge: \"Kante editieren\",\n  editEdgeDescription: \"Klicke auf die Verbindungspunkte und ziehe diese auf einen Knoten, um sie zu verbinden.\",\n  editNode: \"Knoten editieren\"\n};\n// Spanish\nvar es = {\n  addDescription: \"Haga clic en un lugar vac\\xEDo para colocar un nuevo nodo.\",\n  addEdge: \"A\\xF1adir arista\",\n  addNode: \"A\\xF1adir nodo\",\n  back: \"Atr\\xE1s\",\n  close: \"Cerrar\",\n  createEdgeError: \"No se puede conectar una arista a un grupo.\",\n  del: \"Eliminar selecci\\xF3n\",\n  deleteClusterError: \"No es posible eliminar grupos.\",\n  edgeDescription: \"Haga clic en un nodo y arrastre la arista hacia otro nodo para conectarlos.\",\n  edit: \"Editar\",\n  editClusterError: \"No es posible editar grupos.\",\n  editEdge: \"Editar arista\",\n  editEdgeDescription: \"Haga clic en un punto de control y arrastrelo a un nodo para conectarlo.\",\n  editNode: \"Editar nodo\"\n};\n//Italiano\nvar it = {\n  addDescription: \"Clicca per aggiungere un nuovo nodo\",\n  addEdge: \"Aggiungi un vertice\",\n  addNode: \"Aggiungi un nodo\",\n  back: \"Indietro\",\n  close: \"Chiudere\",\n  createEdgeError: \"Non si possono collegare vertici ad un cluster\",\n  del: \"Cancella la selezione\",\n  deleteClusterError: \"I cluster non possono essere cancellati\",\n  edgeDescription: \"Clicca su un nodo e trascinalo ad un altro nodo per connetterli.\",\n  edit: \"Modifica\",\n  editClusterError: \"I clusters non possono essere modificati.\",\n  editEdge: \"Modifica il vertice\",\n  editEdgeDescription: \"Clicca sui Punti di controllo e trascinali ad un nodo per connetterli.\",\n  editNode: \"Modifica il nodo\"\n};\n// Dutch\nvar nl = {\n  addDescription: \"Klik op een leeg gebied om een nieuwe node te maken.\",\n  addEdge: \"Link toevoegen\",\n  addNode: \"Node toevoegen\",\n  back: \"Terug\",\n  close: \"Sluiten\",\n  createEdgeError: \"Kan geen link maken naar een cluster.\",\n  del: \"Selectie verwijderen\",\n  deleteClusterError: \"Clusters kunnen niet worden verwijderd.\",\n  edgeDescription: \"Klik op een node en sleep de link naar een andere node om ze te verbinden.\",\n  edit: \"Wijzigen\",\n  editClusterError: \"Clusters kunnen niet worden aangepast.\",\n  editEdge: \"Link wijzigen\",\n  editEdgeDescription: \"Klik op de verbindingspunten en sleep ze naar een node om daarmee te verbinden.\",\n  editNode: \"Node wijzigen\"\n};\n// Portuguese Brazil\nvar pt = {\n  addDescription: \"Clique em um espaço em branco para adicionar um novo nó\",\n  addEdge: \"Adicionar aresta\",\n  addNode: \"Adicionar nó\",\n  back: \"Voltar\",\n  close: \"Fechar\",\n  createEdgeError: \"Não foi possível linkar arestas a um cluster.\",\n  del: \"Remover selecionado\",\n  deleteClusterError: \"Clusters não puderam ser removidos.\",\n  edgeDescription: \"Clique em um nó e arraste a aresta até outro nó para conectá-los\",\n  edit: \"Editar\",\n  editClusterError: \"Clusters não puderam ser editados.\",\n  editEdge: \"Editar aresta\",\n  editEdgeDescription: \"Clique nos pontos de controle e os arraste para um nó para conectá-los\",\n  editNode: \"Editar nó\"\n};\n// Russian\nvar ru = {\n  addDescription: \"Кликните в свободное место, чтобы добавить новый узел.\",\n  addEdge: \"Добавить ребро\",\n  addNode: \"Добавить узел\",\n  back: \"Назад\",\n  close: \"Закрывать\",\n  createEdgeError: \"Невозможно соединить ребра в кластер.\",\n  del: \"Удалить выбранное\",\n  deleteClusterError: \"Кластеры не могут быть удалены\",\n  edgeDescription: \"Кликните на узел и протяните ребро к другому узлу, чтобы соединить их.\",\n  edit: \"Редактировать\",\n  editClusterError: \"Кластеры недоступны для редактирования.\",\n  editEdge: \"Редактировать ребро\",\n  editEdgeDescription: \"Кликните на контрольные точки и перетащите их в узел, чтобы подключиться к нему.\",\n  editNode: \"Редактировать узел\"\n};\n// Chinese\nvar cn = {\n  addDescription: \"单击空白处放置新节点。\",\n  addEdge: \"添加连接线\",\n  addNode: \"添加节点\",\n  back: \"返回\",\n  close: \"關閉\",\n  createEdgeError: \"无法将连接线连接到群集。\",\n  del: \"删除选定\",\n  deleteClusterError: \"无法删除群集。\",\n  edgeDescription: \"单击某个节点并将该连接线拖动到另一个节点以连接它们。\",\n  edit: \"编辑\",\n  editClusterError: \"无法编辑群集。\",\n  editEdge: \"编辑连接线\",\n  editEdgeDescription: \"单击控制节点并将它们拖到节点上连接。\",\n  editNode: \"编辑节点\"\n};\n// Ukrainian\nvar uk = {\n  addDescription: \"Kлікніть на вільне місце, щоб додати новий вузол.\",\n  addEdge: \"Додати край\",\n  addNode: \"Додати вузол\",\n  back: \"Назад\",\n  close: \"Закрити\",\n  createEdgeError: \"Не можливо об'єднати краї в групу.\",\n  del: \"Видалити обране\",\n  deleteClusterError: \"Групи не можуть бути видалені.\",\n  edgeDescription: \"Клікніть на вузол і перетягніть край до іншого вузла, щоб їх з'єднати.\",\n  edit: \"Редагувати\",\n  editClusterError: \"Групи недоступні для редагування.\",\n  editEdge: \"Редагувати край\",\n  editEdgeDescription: \"Клікніть на контрольні точки і перетягніть їх у вузол, щоб підключитися до нього.\",\n  editNode: \"Редагувати вузол\"\n};\n// French\nvar fr = {\n  addDescription: \"Cliquez dans un endroit vide pour placer un nœud.\",\n  addEdge: \"Ajouter un lien\",\n  addNode: \"Ajouter un nœud\",\n  back: \"Retour\",\n  close: \"Fermer\",\n  createEdgeError: \"Impossible de créer un lien vers un cluster.\",\n  del: \"Effacer la sélection\",\n  deleteClusterError: \"Les clusters ne peuvent pas être effacés.\",\n  edgeDescription: \"Cliquez sur un nœud et glissez le lien vers un autre nœud pour les connecter.\",\n  edit: \"Éditer\",\n  editClusterError: \"Les clusters ne peuvent pas être édités.\",\n  editEdge: \"Éditer le lien\",\n  editEdgeDescription: \"Cliquez sur les points de contrôle et glissez-les pour connecter un nœud.\",\n  editNode: \"Éditer le nœud\"\n};\n// Czech\nvar cs = {\n  addDescription: \"Kluknutím do prázdného prostoru můžete přidat nový vrchol.\",\n  addEdge: \"Přidat hranu\",\n  addNode: \"Přidat vrchol\",\n  back: \"Zpět\",\n  close: \"Zavřít\",\n  createEdgeError: \"Nelze připojit hranu ke shluku.\",\n  del: \"Smazat výběr\",\n  deleteClusterError: \"Nelze mazat shluky.\",\n  edgeDescription: \"Přetažením z jednoho vrcholu do druhého můžete spojit tyto vrcholy novou hranou.\",\n  edit: \"Upravit\",\n  editClusterError: \"Nelze upravovat shluky.\",\n  editEdge: \"Upravit hranu\",\n  editEdgeDescription: \"Přetažením kontrolního vrcholu hrany ji můžete připojit k jinému vrcholu.\",\n  editNode: \"Upravit vrchol\"\n};\n\nvar locales = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tcn: cn,\n\tcs: cs,\n\tde: de,\n\ten: en,\n\tes: es,\n\tfr: fr,\n\tit: it,\n\tnl: nl,\n\tpt: pt,\n\tru: ru,\n\tuk: uk\n});\n\n/**\r\n * Normalizes language code into the format used internally.\r\n *\r\n * @param locales - All the available locales.\r\n * @param rawCode - The original code as supplied by the user.\r\n * @returns Language code in the format language-COUNTRY or language, eventually\r\n * fallbacks to en.\r\n */\nfunction normalizeLanguageCode(locales, rawCode) {\n  try {\n    var _rawCode$split = rawCode.split(/[-_ /]/, 2),\n      _rawCode$split2 = _slicedToArray(_rawCode$split, 2),\n      rawLanguage = _rawCode$split2[0],\n      rawCountry = _rawCode$split2[1];\n    var language = rawLanguage != null ? rawLanguage.toLowerCase() : null;\n    var country = rawCountry != null ? rawCountry.toUpperCase() : null;\n    if (language && country) {\n      var code = language + \"-\" + country;\n      if (Object.prototype.hasOwnProperty.call(locales, code)) {\n        return code;\n      } else {\n        var _context;\n        console.warn(_concatInstanceProperty(_context = \"Unknown variant \".concat(country, \" of language \")).call(_context, language, \".\"));\n      }\n    }\n    if (language) {\n      var _code = language;\n      if (Object.prototype.hasOwnProperty.call(locales, _code)) {\n        return _code;\n      } else {\n        console.warn(\"Unknown language \".concat(language));\n      }\n    }\n    console.warn(\"Unknown locale \".concat(rawCode, \", falling back to English.\"));\n    return \"en\";\n  } catch (error) {\n    console.error(error);\n    console.warn(\"Unexpected error while normalizing locale \".concat(rawCode, \", falling back to English.\"));\n    return \"en\";\n  }\n}\n\n/**\n * Associates a canvas to a given image, containing a number of renderings\n * of the image at various sizes.\n *\n * This technique is known as 'mipmapping'.\n *\n * NOTE: Images can also be of type 'data:svg+xml`. This code also works\n *       for svg, but the mipmapping may not be necessary.\n *\n * @param {Image} image\n */\nvar CachedImage = /*#__PURE__*/function () {\n  /**\n   * @ignore\n   */\n  function CachedImage() {\n    _classCallCheck(this, CachedImage);\n    this.NUM_ITERATIONS = 4; // Number of items in the coordinates array\n\n    this.image = new Image();\n    this.canvas = document.createElement(\"canvas\");\n  }\n\n  /**\n   * Called when the image has been successfully loaded.\n   */\n  _createClass(CachedImage, [{\n    key: \"init\",\n    value: function init() {\n      if (this.initialized()) return;\n      this.src = this.image.src; // For same interface with Image\n      var w = this.image.width;\n      var h = this.image.height;\n\n      // Ease external access\n      this.width = w;\n      this.height = h;\n      var h2 = Math.floor(h / 2);\n      var h4 = Math.floor(h / 4);\n      var h8 = Math.floor(h / 8);\n      var h16 = Math.floor(h / 16);\n      var w2 = Math.floor(w / 2);\n      var w4 = Math.floor(w / 4);\n      var w8 = Math.floor(w / 8);\n      var w16 = Math.floor(w / 16);\n\n      // Make canvas as small as possible\n      this.canvas.width = 3 * w4;\n      this.canvas.height = h2;\n\n      // Coordinates and sizes of images contained in the canvas\n      // Values per row:  [top x, left y, width, height]\n\n      this.coordinates = [[0, 0, w2, h2], [w2, 0, w4, h4], [w2, h4, w8, h8], [5 * w8, h4, w16, h16]];\n      this._fillMipMap();\n    }\n\n    /**\n     * @returns {boolean} true if init() has been called, false otherwise.\n     */\n  }, {\n    key: \"initialized\",\n    value: function initialized() {\n      return this.coordinates !== undefined;\n    }\n\n    /**\n     * Redraw main image in various sizes to the context.\n     *\n     * The rationale behind this is to reduce artefacts due to interpolation\n     * at differing zoom levels.\n     *\n     * Source: http://stackoverflow.com/q/18761404/1223531\n     *\n     * This methods takes the resizing out of the drawing loop, in order to\n     * reduce performance overhead.\n     *\n     * TODO: The code assumes that a 2D context can always be gotten. This is\n     *       not necessarily true! OTOH, if not true then usage of this class\n     *       is senseless.\n     *\n     * @private\n     */\n  }, {\n    key: \"_fillMipMap\",\n    value: function _fillMipMap() {\n      var ctx = this.canvas.getContext(\"2d\");\n\n      // First zoom-level comes from the image\n      var to = this.coordinates[0];\n      ctx.drawImage(this.image, to[0], to[1], to[2], to[3]);\n\n      // The rest are copy actions internal to the canvas/context\n      for (var iterations = 1; iterations < this.NUM_ITERATIONS; iterations++) {\n        var from = this.coordinates[iterations - 1];\n        var _to = this.coordinates[iterations];\n        ctx.drawImage(this.canvas, from[0], from[1], from[2], from[3], _to[0], _to[1], _to[2], _to[3]);\n      }\n    }\n\n    /**\n     * Draw the image, using the mipmap if necessary.\n     *\n     * MipMap is only used if param factor > 2; otherwise, original bitmap\n     * is resized. This is also used to skip mipmap usage, e.g. by setting factor = 1\n     *\n     * Credits to 'Alex de Mulder' for original implementation.\n     *\n     * @param {CanvasRenderingContext2D} ctx  context on which to draw zoomed image\n     * @param {Float} factor scale factor at which to draw\n     * @param {number} left\n     * @param {number} top\n     * @param {number} width\n     * @param {number} height\n     */\n  }, {\n    key: \"drawImageAtPosition\",\n    value: function drawImageAtPosition(ctx, factor, left, top, width, height) {\n      if (!this.initialized()) return; //can't draw image yet not intialized\n\n      if (factor > 2) {\n        // Determine which zoomed image to use\n        factor *= 0.5;\n        var iterations = 0;\n        while (factor > 2 && iterations < this.NUM_ITERATIONS) {\n          factor *= 0.5;\n          iterations += 1;\n        }\n        if (iterations >= this.NUM_ITERATIONS) {\n          iterations = this.NUM_ITERATIONS - 1;\n        }\n        //console.log(\"iterations: \" + iterations);\n\n        var from = this.coordinates[iterations];\n        ctx.drawImage(this.canvas, from[0], from[1], from[2], from[3], left, top, width, height);\n      } else {\n        // Draw image directly\n        ctx.drawImage(this.image, left, top, width, height);\n      }\n    }\n  }]);\n  return CachedImage;\n}();\n\n/**\n * This callback is a callback that accepts an Image.\n *\n * @callback ImageCallback\n * @param {Image} image\n */\n\n/**\n * This class loads images and keeps them stored.\n *\n * @param {ImageCallback} callback\n */\nvar Images = /*#__PURE__*/function () {\n  /**\n   * @param {ImageCallback} callback\n   */\n  function Images(callback) {\n    _classCallCheck(this, Images);\n    this.images = {};\n    this.imageBroken = {};\n    this.callback = callback;\n  }\n\n  /**\n   * @param {string} url                      The original Url that failed to load, if the broken image is successfully loaded it will be added to the cache using this Url as the key so that subsequent requests for this Url will return the broken image\n   * @param {string} brokenUrl                Url the broken image to try and load\n   * @param {Image} imageToLoadBrokenUrlOn   The image object\n   */\n  _createClass(Images, [{\n    key: \"_tryloadBrokenUrl\",\n    value: function _tryloadBrokenUrl(url, brokenUrl, imageToLoadBrokenUrlOn) {\n      //If these parameters aren't specified then exit the function because nothing constructive can be done\n      if (url === undefined || imageToLoadBrokenUrlOn === undefined) return;\n      if (brokenUrl === undefined) {\n        console.warn(\"No broken url image defined\");\n        return;\n      }\n\n      //Clear the old subscription to the error event and put a new in place that only handle errors in loading the brokenImageUrl\n      imageToLoadBrokenUrlOn.image.onerror = function () {\n        console.error(\"Could not load brokenImage:\", brokenUrl);\n        // cache item will contain empty image, this should be OK for default\n      };\n\n      //Set the source of the image to the brokenUrl, this is actually what kicks off the loading of the broken image\n      imageToLoadBrokenUrlOn.image.src = brokenUrl;\n    }\n\n    /**\n     *\n     * @param {vis.Image} imageToRedrawWith\n     * @private\n     */\n  }, {\n    key: \"_redrawWithImage\",\n    value: function _redrawWithImage(imageToRedrawWith) {\n      if (this.callback) {\n        this.callback(imageToRedrawWith);\n      }\n    }\n\n    /**\n     * @param {string} url          Url of the image\n     * @param {string} brokenUrl    Url of an image to use if the url image is not found\n     * @returns {Image} img          The image object\n     */\n  }, {\n    key: \"load\",\n    value: function load(url, brokenUrl) {\n      var _this = this;\n      //Try and get the image from the cache, if successful then return the cached image\n      var cachedImage = this.images[url];\n      if (cachedImage) return cachedImage;\n\n      //Create a new image\n      var img = new CachedImage();\n\n      // Need to add to cache here, otherwise final return will spawn different copies of the same image,\n      // Also, there will be multiple loads of the same image.\n      this.images[url] = img;\n\n      //Subscribe to the event that is raised if the image loads successfully\n      img.image.onload = function () {\n        // Properly init the cached item and then request a redraw\n        _this._fixImageCoordinates(img.image);\n        img.init();\n        _this._redrawWithImage(img);\n      };\n\n      //Subscribe to the event that is raised if the image fails to load\n      img.image.onerror = function () {\n        console.error(\"Could not load image:\", url);\n        //Try and load the image specified by the brokenUrl using\n        _this._tryloadBrokenUrl(url, brokenUrl, img);\n      };\n\n      //Set the source of the image to the url, this is what actually kicks off the loading of the image\n      img.image.src = url;\n\n      //Return the new image\n      return img;\n    }\n\n    /**\n     * IE11 fix -- thanks dponch!\n     *\n     * Local helper function\n     *\n     * @param {vis.Image} imageToCache\n     * @private\n     */\n  }, {\n    key: \"_fixImageCoordinates\",\n    value: function _fixImageCoordinates(imageToCache) {\n      if (imageToCache.width === 0) {\n        document.body.appendChild(imageToCache);\n        imageToCache.width = imageToCache.offsetWidth;\n        imageToCache.height = imageToCache.offsetHeight;\n        document.body.removeChild(imageToCache);\n      }\n    }\n  }]);\n  return Images;\n}();\n\nvar internalMetadata = {exports: {}};\n\n// FF26- bug: ArrayBuffers are non-extensible, but Object.isExtensible does not report it\nvar fails$9 = fails$w;\n\nvar arrayBufferNonExtensible = fails$9(function () {\n  if (typeof ArrayBuffer == 'function') {\n    var buffer = new ArrayBuffer(8);\n    // eslint-disable-next-line es/no-object-isextensible, es/no-object-defineproperty -- safe\n    if (Object.isExtensible(buffer)) Object.defineProperty(buffer, 'a', { value: 8 });\n  }\n});\n\nvar fails$8 = fails$w;\nvar isObject$6 = isObject$j;\nvar classof$2 = classofRaw$2;\nvar ARRAY_BUFFER_NON_EXTENSIBLE = arrayBufferNonExtensible;\n\n// eslint-disable-next-line es/no-object-isextensible -- safe\nvar $isExtensible = Object.isExtensible;\nvar FAILS_ON_PRIMITIVES$1 = fails$8(function () { $isExtensible(1); });\n\n// `Object.isExtensible` method\n// https://tc39.es/ecma262/#sec-object.isextensible\nvar objectIsExtensible = (FAILS_ON_PRIMITIVES$1 || ARRAY_BUFFER_NON_EXTENSIBLE) ? function isExtensible(it) {\n  if (!isObject$6(it)) return false;\n  if (ARRAY_BUFFER_NON_EXTENSIBLE && classof$2(it) === 'ArrayBuffer') return false;\n  return $isExtensible ? $isExtensible(it) : true;\n} : $isExtensible;\n\nvar fails$7 = fails$w;\n\nvar freezing = !fails$7(function () {\n  // eslint-disable-next-line es/no-object-isextensible, es/no-object-preventextensions -- required for testing\n  return Object.isExtensible(Object.preventExtensions({}));\n});\n\nvar $$g = _export;\nvar uncurryThis$4 = functionUncurryThis;\nvar hiddenKeys = hiddenKeys$6;\nvar isObject$5 = isObject$j;\nvar hasOwn$3 = hasOwnProperty_1;\nvar defineProperty$2 = objectDefineProperty.f;\nvar getOwnPropertyNamesModule = objectGetOwnPropertyNames;\nvar getOwnPropertyNamesExternalModule = objectGetOwnPropertyNamesExternal;\nvar isExtensible$1 = objectIsExtensible;\nvar uid = uid$4;\nvar FREEZING$1 = freezing;\n\nvar REQUIRED = false;\nvar METADATA = uid('meta');\nvar id$1 = 0;\n\nvar setMetadata = function (it) {\n  defineProperty$2(it, METADATA, { value: {\n    objectID: 'O' + id$1++, // object ID\n    weakData: {}          // weak collections IDs\n  } });\n};\n\nvar fastKey$1 = function (it, create) {\n  // return a primitive with prefix\n  if (!isObject$5(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!hasOwn$3(it, METADATA)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible$1(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMetadata(it);\n  // return object ID\n  } return it[METADATA].objectID;\n};\n\nvar getWeakData$1 = function (it, create) {\n  if (!hasOwn$3(it, METADATA)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible$1(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMetadata(it);\n  // return the store of weak collections IDs\n  } return it[METADATA].weakData;\n};\n\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZING$1 && REQUIRED && isExtensible$1(it) && !hasOwn$3(it, METADATA)) setMetadata(it);\n  return it;\n};\n\nvar enable = function () {\n  meta.enable = function () { /* empty */ };\n  REQUIRED = true;\n  var getOwnPropertyNames = getOwnPropertyNamesModule.f;\n  var splice = uncurryThis$4([].splice);\n  var test = {};\n  test[METADATA] = 1;\n\n  // prevent exposing of metadata key\n  if (getOwnPropertyNames(test).length) {\n    getOwnPropertyNamesModule.f = function (it) {\n      var result = getOwnPropertyNames(it);\n      for (var i = 0, length = result.length; i < length; i++) {\n        if (result[i] === METADATA) {\n          splice(result, i, 1);\n          break;\n        }\n      } return result;\n    };\n\n    $$g({ target: 'Object', stat: true, forced: true }, {\n      getOwnPropertyNames: getOwnPropertyNamesExternalModule.f\n    });\n  }\n};\n\nvar meta = internalMetadata.exports = {\n  enable: enable,\n  fastKey: fastKey$1,\n  getWeakData: getWeakData$1,\n  onFreeze: onFreeze\n};\n\nhiddenKeys[METADATA] = true;\n\nvar internalMetadataExports = internalMetadata.exports;\n\nvar bind$5 = functionBindContext;\nvar call$1 = functionCall;\nvar anObject$3 = anObject$d;\nvar tryToString$1 = tryToString$6;\nvar isArrayIteratorMethod = isArrayIteratorMethod$2;\nvar lengthOfArrayLike$2 = lengthOfArrayLike$c;\nvar isPrototypeOf$6 = objectIsPrototypeOf;\nvar getIterator = getIterator$2;\nvar getIteratorMethod = getIteratorMethod$9;\nvar iteratorClose = iteratorClose$2;\n\nvar $TypeError$3 = TypeError;\n\nvar Result = function (stopped, result) {\n  this.stopped = stopped;\n  this.result = result;\n};\n\nvar ResultPrototype = Result.prototype;\n\nvar iterate$3 = function (iterable, unboundFunction, options) {\n  var that = options && options.that;\n  var AS_ENTRIES = !!(options && options.AS_ENTRIES);\n  var IS_RECORD = !!(options && options.IS_RECORD);\n  var IS_ITERATOR = !!(options && options.IS_ITERATOR);\n  var INTERRUPTED = !!(options && options.INTERRUPTED);\n  var fn = bind$5(unboundFunction, that);\n  var iterator, iterFn, index, length, result, next, step;\n\n  var stop = function (condition) {\n    if (iterator) iteratorClose(iterator, 'normal', condition);\n    return new Result(true, condition);\n  };\n\n  var callFn = function (value) {\n    if (AS_ENTRIES) {\n      anObject$3(value);\n      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);\n    } return INTERRUPTED ? fn(value, stop) : fn(value);\n  };\n\n  if (IS_RECORD) {\n    iterator = iterable.iterator;\n  } else if (IS_ITERATOR) {\n    iterator = iterable;\n  } else {\n    iterFn = getIteratorMethod(iterable);\n    if (!iterFn) throw new $TypeError$3(tryToString$1(iterable) + ' is not iterable');\n    // optimisation for array iterators\n    if (isArrayIteratorMethod(iterFn)) {\n      for (index = 0, length = lengthOfArrayLike$2(iterable); length > index; index++) {\n        result = callFn(iterable[index]);\n        if (result && isPrototypeOf$6(ResultPrototype, result)) return result;\n      } return new Result(false);\n    }\n    iterator = getIterator(iterable, iterFn);\n  }\n\n  next = IS_RECORD ? iterable.next : iterator.next;\n  while (!(step = call$1(next, iterator)).done) {\n    try {\n      result = callFn(step.value);\n    } catch (error) {\n      iteratorClose(iterator, 'throw', error);\n    }\n    if (typeof result == 'object' && result && isPrototypeOf$6(ResultPrototype, result)) return result;\n  } return new Result(false);\n};\n\nvar isPrototypeOf$5 = objectIsPrototypeOf;\n\nvar $TypeError$2 = TypeError;\n\nvar anInstance$3 = function (it, Prototype) {\n  if (isPrototypeOf$5(Prototype, it)) return it;\n  throw new $TypeError$2('Incorrect invocation');\n};\n\nvar $$f = _export;\nvar global$5 = global$n;\nvar InternalMetadataModule$1 = internalMetadataExports;\nvar fails$6 = fails$w;\nvar createNonEnumerableProperty = createNonEnumerableProperty$6;\nvar iterate$2 = iterate$3;\nvar anInstance$2 = anInstance$3;\nvar isCallable = isCallable$i;\nvar isObject$4 = isObject$j;\nvar isNullOrUndefined$2 = isNullOrUndefined$6;\nvar setToStringTag = setToStringTag$6;\nvar defineProperty$1 = objectDefineProperty.f;\nvar forEach = arrayIteration.forEach;\nvar DESCRIPTORS$5 = descriptors;\nvar InternalStateModule$2 = internalState;\n\nvar setInternalState$2 = InternalStateModule$2.set;\nvar internalStateGetterFor$2 = InternalStateModule$2.getterFor;\n\nvar collection$3 = function (CONSTRUCTOR_NAME, wrapper, common) {\n  var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;\n  var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;\n  var ADDER = IS_MAP ? 'set' : 'add';\n  var NativeConstructor = global$5[CONSTRUCTOR_NAME];\n  var NativePrototype = NativeConstructor && NativeConstructor.prototype;\n  var exported = {};\n  var Constructor;\n\n  if (!DESCRIPTORS$5 || !isCallable(NativeConstructor)\n    || !(IS_WEAK || NativePrototype.forEach && !fails$6(function () { new NativeConstructor().entries().next(); }))\n  ) {\n    // create collection constructor\n    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);\n    InternalMetadataModule$1.enable();\n  } else {\n    Constructor = wrapper(function (target, iterable) {\n      setInternalState$2(anInstance$2(target, Prototype), {\n        type: CONSTRUCTOR_NAME,\n        collection: new NativeConstructor()\n      });\n      if (!isNullOrUndefined$2(iterable)) iterate$2(iterable, target[ADDER], { that: target, AS_ENTRIES: IS_MAP });\n    });\n\n    var Prototype = Constructor.prototype;\n\n    var getInternalState = internalStateGetterFor$2(CONSTRUCTOR_NAME);\n\n    forEach(['add', 'clear', 'delete', 'forEach', 'get', 'has', 'set', 'keys', 'values', 'entries'], function (KEY) {\n      var IS_ADDER = KEY === 'add' || KEY === 'set';\n      if (KEY in NativePrototype && !(IS_WEAK && KEY === 'clear')) {\n        createNonEnumerableProperty(Prototype, KEY, function (a, b) {\n          var collection = getInternalState(this).collection;\n          if (!IS_ADDER && IS_WEAK && !isObject$4(a)) return KEY === 'get' ? undefined : false;\n          var result = collection[KEY](a === 0 ? 0 : a, b);\n          return IS_ADDER ? this : result;\n        });\n      }\n    });\n\n    IS_WEAK || defineProperty$1(Prototype, 'size', {\n      configurable: true,\n      get: function () {\n        return getInternalState(this).collection.size;\n      }\n    });\n  }\n\n  setToStringTag(Constructor, CONSTRUCTOR_NAME, false, true);\n\n  exported[CONSTRUCTOR_NAME] = Constructor;\n  $$f({ global: true, forced: true }, exported);\n\n  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);\n\n  return Constructor;\n};\n\nvar defineBuiltIn = defineBuiltIn$5;\n\nvar defineBuiltIns$3 = function (target, src, options) {\n  for (var key in src) {\n    if (options && options.unsafe && target[key]) target[key] = src[key];\n    else defineBuiltIn(target, key, src[key], options);\n  } return target;\n};\n\nvar getBuiltIn$1 = getBuiltIn$c;\nvar defineBuiltInAccessor$1 = defineBuiltInAccessor$3;\nvar wellKnownSymbol = wellKnownSymbol$m;\nvar DESCRIPTORS$4 = descriptors;\n\nvar SPECIES = wellKnownSymbol('species');\n\nvar setSpecies$1 = function (CONSTRUCTOR_NAME) {\n  var Constructor = getBuiltIn$1(CONSTRUCTOR_NAME);\n\n  if (DESCRIPTORS$4 && Constructor && !Constructor[SPECIES]) {\n    defineBuiltInAccessor$1(Constructor, SPECIES, {\n      configurable: true,\n      get: function () { return this; }\n    });\n  }\n};\n\nvar create$4 = objectCreate;\nvar defineBuiltInAccessor = defineBuiltInAccessor$3;\nvar defineBuiltIns$2 = defineBuiltIns$3;\nvar bind$4 = functionBindContext;\nvar anInstance$1 = anInstance$3;\nvar isNullOrUndefined$1 = isNullOrUndefined$6;\nvar iterate$1 = iterate$3;\nvar defineIterator = iteratorDefine;\nvar createIterResultObject = createIterResultObject$3;\nvar setSpecies = setSpecies$1;\nvar DESCRIPTORS$3 = descriptors;\nvar fastKey = internalMetadataExports.fastKey;\nvar InternalStateModule$1 = internalState;\n\nvar setInternalState$1 = InternalStateModule$1.set;\nvar internalStateGetterFor$1 = InternalStateModule$1.getterFor;\n\nvar collectionStrong$2 = {\n  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {\n    var Constructor = wrapper(function (that, iterable) {\n      anInstance$1(that, Prototype);\n      setInternalState$1(that, {\n        type: CONSTRUCTOR_NAME,\n        index: create$4(null),\n        first: undefined,\n        last: undefined,\n        size: 0\n      });\n      if (!DESCRIPTORS$3) that.size = 0;\n      if (!isNullOrUndefined$1(iterable)) iterate$1(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });\n    });\n\n    var Prototype = Constructor.prototype;\n\n    var getInternalState = internalStateGetterFor$1(CONSTRUCTOR_NAME);\n\n    var define = function (that, key, value) {\n      var state = getInternalState(that);\n      var entry = getEntry(that, key);\n      var previous, index;\n      // change existing entry\n      if (entry) {\n        entry.value = value;\n      // create new entry\n      } else {\n        state.last = entry = {\n          index: index = fastKey(key, true),\n          key: key,\n          value: value,\n          previous: previous = state.last,\n          next: undefined,\n          removed: false\n        };\n        if (!state.first) state.first = entry;\n        if (previous) previous.next = entry;\n        if (DESCRIPTORS$3) state.size++;\n        else that.size++;\n        // add to index\n        if (index !== 'F') state.index[index] = entry;\n      } return that;\n    };\n\n    var getEntry = function (that, key) {\n      var state = getInternalState(that);\n      // fast case\n      var index = fastKey(key);\n      var entry;\n      if (index !== 'F') return state.index[index];\n      // frozen object case\n      for (entry = state.first; entry; entry = entry.next) {\n        if (entry.key === key) return entry;\n      }\n    };\n\n    defineBuiltIns$2(Prototype, {\n      // `{ Map, Set }.prototype.clear()` methods\n      // https://tc39.es/ecma262/#sec-map.prototype.clear\n      // https://tc39.es/ecma262/#sec-set.prototype.clear\n      clear: function clear() {\n        var that = this;\n        var state = getInternalState(that);\n        var data = state.index;\n        var entry = state.first;\n        while (entry) {\n          entry.removed = true;\n          if (entry.previous) entry.previous = entry.previous.next = undefined;\n          delete data[entry.index];\n          entry = entry.next;\n        }\n        state.first = state.last = undefined;\n        if (DESCRIPTORS$3) state.size = 0;\n        else that.size = 0;\n      },\n      // `{ Map, Set }.prototype.delete(key)` methods\n      // https://tc39.es/ecma262/#sec-map.prototype.delete\n      // https://tc39.es/ecma262/#sec-set.prototype.delete\n      'delete': function (key) {\n        var that = this;\n        var state = getInternalState(that);\n        var entry = getEntry(that, key);\n        if (entry) {\n          var next = entry.next;\n          var prev = entry.previous;\n          delete state.index[entry.index];\n          entry.removed = true;\n          if (prev) prev.next = next;\n          if (next) next.previous = prev;\n          if (state.first === entry) state.first = next;\n          if (state.last === entry) state.last = prev;\n          if (DESCRIPTORS$3) state.size--;\n          else that.size--;\n        } return !!entry;\n      },\n      // `{ Map, Set }.prototype.forEach(callbackfn, thisArg = undefined)` methods\n      // https://tc39.es/ecma262/#sec-map.prototype.foreach\n      // https://tc39.es/ecma262/#sec-set.prototype.foreach\n      forEach: function forEach(callbackfn /* , that = undefined */) {\n        var state = getInternalState(this);\n        var boundFunction = bind$4(callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n        var entry;\n        while (entry = entry ? entry.next : state.first) {\n          boundFunction(entry.value, entry.key, this);\n          // revert to the last existing entry\n          while (entry && entry.removed) entry = entry.previous;\n        }\n      },\n      // `{ Map, Set}.prototype.has(key)` methods\n      // https://tc39.es/ecma262/#sec-map.prototype.has\n      // https://tc39.es/ecma262/#sec-set.prototype.has\n      has: function has(key) {\n        return !!getEntry(this, key);\n      }\n    });\n\n    defineBuiltIns$2(Prototype, IS_MAP ? {\n      // `Map.prototype.get(key)` method\n      // https://tc39.es/ecma262/#sec-map.prototype.get\n      get: function get(key) {\n        var entry = getEntry(this, key);\n        return entry && entry.value;\n      },\n      // `Map.prototype.set(key, value)` method\n      // https://tc39.es/ecma262/#sec-map.prototype.set\n      set: function set(key, value) {\n        return define(this, key === 0 ? 0 : key, value);\n      }\n    } : {\n      // `Set.prototype.add(value)` method\n      // https://tc39.es/ecma262/#sec-set.prototype.add\n      add: function add(value) {\n        return define(this, value = value === 0 ? 0 : value, value);\n      }\n    });\n    if (DESCRIPTORS$3) defineBuiltInAccessor(Prototype, 'size', {\n      configurable: true,\n      get: function () {\n        return getInternalState(this).size;\n      }\n    });\n    return Constructor;\n  },\n  setStrong: function (Constructor, CONSTRUCTOR_NAME, IS_MAP) {\n    var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';\n    var getInternalCollectionState = internalStateGetterFor$1(CONSTRUCTOR_NAME);\n    var getInternalIteratorState = internalStateGetterFor$1(ITERATOR_NAME);\n    // `{ Map, Set }.prototype.{ keys, values, entries, @@iterator }()` methods\n    // https://tc39.es/ecma262/#sec-map.prototype.entries\n    // https://tc39.es/ecma262/#sec-map.prototype.keys\n    // https://tc39.es/ecma262/#sec-map.prototype.values\n    // https://tc39.es/ecma262/#sec-map.prototype-@@iterator\n    // https://tc39.es/ecma262/#sec-set.prototype.entries\n    // https://tc39.es/ecma262/#sec-set.prototype.keys\n    // https://tc39.es/ecma262/#sec-set.prototype.values\n    // https://tc39.es/ecma262/#sec-set.prototype-@@iterator\n    defineIterator(Constructor, CONSTRUCTOR_NAME, function (iterated, kind) {\n      setInternalState$1(this, {\n        type: ITERATOR_NAME,\n        target: iterated,\n        state: getInternalCollectionState(iterated),\n        kind: kind,\n        last: undefined\n      });\n    }, function () {\n      var state = getInternalIteratorState(this);\n      var kind = state.kind;\n      var entry = state.last;\n      // revert to the last existing entry\n      while (entry && entry.removed) entry = entry.previous;\n      // get next entry\n      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {\n        // or finish the iteration\n        state.target = undefined;\n        return createIterResultObject(undefined, true);\n      }\n      // return step by kind\n      if (kind === 'keys') return createIterResultObject(entry.key, false);\n      if (kind === 'values') return createIterResultObject(entry.value, false);\n      return createIterResultObject([entry.key, entry.value], false);\n    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);\n\n    // `{ Map, Set }.prototype[@@species]` accessors\n    // https://tc39.es/ecma262/#sec-get-map-@@species\n    // https://tc39.es/ecma262/#sec-get-set-@@species\n    setSpecies(CONSTRUCTOR_NAME);\n  }\n};\n\nvar collection$2 = collection$3;\nvar collectionStrong$1 = collectionStrong$2;\n\n// `Map` constructor\n// https://tc39.es/ecma262/#sec-map-objects\ncollection$2('Map', function (init) {\n  return function Map() { return init(this, arguments.length ? arguments[0] : undefined); };\n}, collectionStrong$1);\n\nvar path$f = path$w;\n\nvar map$2 = path$f.Map;\n\nvar parent$v = map$2;\n\n\nvar map$1 = parent$v;\n\nvar map = map$1;\n\nvar _Map = /*@__PURE__*/getDefaultExportFromCjs(map);\n\n/**\n * This class can store groups and options specific for groups.\n */\nvar Groups = /*#__PURE__*/function () {\n  /**\n   * @ignore\n   */\n  function Groups() {\n    _classCallCheck(this, Groups);\n    this.clear();\n    this._defaultIndex = 0;\n    this._groupIndex = 0;\n    this._defaultGroups = [{\n      border: \"#2B7CE9\",\n      background: \"#97C2FC\",\n      highlight: {\n        border: \"#2B7CE9\",\n        background: \"#D2E5FF\"\n      },\n      hover: {\n        border: \"#2B7CE9\",\n        background: \"#D2E5FF\"\n      }\n    },\n    // 0: blue\n    {\n      border: \"#FFA500\",\n      background: \"#FFFF00\",\n      highlight: {\n        border: \"#FFA500\",\n        background: \"#FFFFA3\"\n      },\n      hover: {\n        border: \"#FFA500\",\n        background: \"#FFFFA3\"\n      }\n    },\n    // 1: yellow\n    {\n      border: \"#FA0A10\",\n      background: \"#FB7E81\",\n      highlight: {\n        border: \"#FA0A10\",\n        background: \"#FFAFB1\"\n      },\n      hover: {\n        border: \"#FA0A10\",\n        background: \"#FFAFB1\"\n      }\n    },\n    // 2: red\n    {\n      border: \"#41A906\",\n      background: \"#7BE141\",\n      highlight: {\n        border: \"#41A906\",\n        background: \"#A1EC76\"\n      },\n      hover: {\n        border: \"#41A906\",\n        background: \"#A1EC76\"\n      }\n    },\n    // 3: green\n    {\n      border: \"#E129F0\",\n      background: \"#EB7DF4\",\n      highlight: {\n        border: \"#E129F0\",\n        background: \"#F0B3F5\"\n      },\n      hover: {\n        border: \"#E129F0\",\n        background: \"#F0B3F5\"\n      }\n    },\n    // 4: magenta\n    {\n      border: \"#7C29F0\",\n      background: \"#AD85E4\",\n      highlight: {\n        border: \"#7C29F0\",\n        background: \"#D3BDF0\"\n      },\n      hover: {\n        border: \"#7C29F0\",\n        background: \"#D3BDF0\"\n      }\n    },\n    // 5: purple\n    {\n      border: \"#C37F00\",\n      background: \"#FFA807\",\n      highlight: {\n        border: \"#C37F00\",\n        background: \"#FFCA66\"\n      },\n      hover: {\n        border: \"#C37F00\",\n        background: \"#FFCA66\"\n      }\n    },\n    // 6: orange\n    {\n      border: \"#4220FB\",\n      background: \"#6E6EFD\",\n      highlight: {\n        border: \"#4220FB\",\n        background: \"#9B9BFD\"\n      },\n      hover: {\n        border: \"#4220FB\",\n        background: \"#9B9BFD\"\n      }\n    },\n    // 7: darkblue\n    {\n      border: \"#FD5A77\",\n      background: \"#FFC0CB\",\n      highlight: {\n        border: \"#FD5A77\",\n        background: \"#FFD1D9\"\n      },\n      hover: {\n        border: \"#FD5A77\",\n        background: \"#FFD1D9\"\n      }\n    },\n    // 8: pink\n    {\n      border: \"#4AD63A\",\n      background: \"#C2FABC\",\n      highlight: {\n        border: \"#4AD63A\",\n        background: \"#E6FFE3\"\n      },\n      hover: {\n        border: \"#4AD63A\",\n        background: \"#E6FFE3\"\n      }\n    },\n    // 9: mint\n\n    {\n      border: \"#990000\",\n      background: \"#EE0000\",\n      highlight: {\n        border: \"#BB0000\",\n        background: \"#FF3333\"\n      },\n      hover: {\n        border: \"#BB0000\",\n        background: \"#FF3333\"\n      }\n    },\n    // 10:bright red\n\n    {\n      border: \"#FF6000\",\n      background: \"#FF6000\",\n      highlight: {\n        border: \"#FF6000\",\n        background: \"#FF6000\"\n      },\n      hover: {\n        border: \"#FF6000\",\n        background: \"#FF6000\"\n      }\n    },\n    // 12: real orange\n    {\n      border: \"#97C2FC\",\n      background: \"#2B7CE9\",\n      highlight: {\n        border: \"#D2E5FF\",\n        background: \"#2B7CE9\"\n      },\n      hover: {\n        border: \"#D2E5FF\",\n        background: \"#2B7CE9\"\n      }\n    },\n    // 13: blue\n    {\n      border: \"#399605\",\n      background: \"#255C03\",\n      highlight: {\n        border: \"#399605\",\n        background: \"#255C03\"\n      },\n      hover: {\n        border: \"#399605\",\n        background: \"#255C03\"\n      }\n    },\n    // 14: green\n    {\n      border: \"#B70054\",\n      background: \"#FF007E\",\n      highlight: {\n        border: \"#B70054\",\n        background: \"#FF007E\"\n      },\n      hover: {\n        border: \"#B70054\",\n        background: \"#FF007E\"\n      }\n    },\n    // 15: magenta\n    {\n      border: \"#AD85E4\",\n      background: \"#7C29F0\",\n      highlight: {\n        border: \"#D3BDF0\",\n        background: \"#7C29F0\"\n      },\n      hover: {\n        border: \"#D3BDF0\",\n        background: \"#7C29F0\"\n      }\n    },\n    // 16: purple\n    {\n      border: \"#4557FA\",\n      background: \"#000EA1\",\n      highlight: {\n        border: \"#6E6EFD\",\n        background: \"#000EA1\"\n      },\n      hover: {\n        border: \"#6E6EFD\",\n        background: \"#000EA1\"\n      }\n    },\n    // 17: darkblue\n    {\n      border: \"#FFC0CB\",\n      background: \"#FD5A77\",\n      highlight: {\n        border: \"#FFD1D9\",\n        background: \"#FD5A77\"\n      },\n      hover: {\n        border: \"#FFD1D9\",\n        background: \"#FD5A77\"\n      }\n    },\n    // 18: pink\n    {\n      border: \"#C2FABC\",\n      background: \"#74D66A\",\n      highlight: {\n        border: \"#E6FFE3\",\n        background: \"#74D66A\"\n      },\n      hover: {\n        border: \"#E6FFE3\",\n        background: \"#74D66A\"\n      }\n    },\n    // 19: mint\n\n    {\n      border: \"#EE0000\",\n      background: \"#990000\",\n      highlight: {\n        border: \"#FF3333\",\n        background: \"#BB0000\"\n      },\n      hover: {\n        border: \"#FF3333\",\n        background: \"#BB0000\"\n      }\n    } // 20:bright red\n    ];\n\n    this.options = {};\n    this.defaultOptions = {\n      useDefaultGroups: true\n    };\n    _Object$assign(this.options, this.defaultOptions);\n  }\n\n  /**\n   *\n   * @param {object} options\n   */\n  _createClass(Groups, [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      var optionFields = [\"useDefaultGroups\"];\n      if (options !== undefined) {\n        for (var groupName in options) {\n          if (Object.prototype.hasOwnProperty.call(options, groupName)) {\n            if (_indexOfInstanceProperty(optionFields).call(optionFields, groupName) === -1) {\n              var group = options[groupName];\n              this.add(groupName, group);\n            }\n          }\n        }\n      }\n    }\n\n    /**\n     * Clear all groups\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._groups = new _Map();\n      this._groupNames = [];\n    }\n\n    /**\n     * Get group options of a groupname.\n     * If groupname is not found, a new group may be created.\n     *\n     * @param {*}       groupname     Can be a number, string, Date, etc.\n     * @param {boolean} [shouldCreate=true] If true, create a new group\n     * @returns {object} The found or created group\n     */\n  }, {\n    key: \"get\",\n    value: function get(groupname) {\n      var shouldCreate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var group = this._groups.get(groupname);\n      if (group === undefined && shouldCreate) {\n        if (this.options.useDefaultGroups === false && this._groupNames.length > 0) {\n          // create new group\n          var index = this._groupIndex % this._groupNames.length;\n          ++this._groupIndex;\n          group = {};\n          group.color = this._groups.get(this._groupNames[index]);\n          this._groups.set(groupname, group);\n        } else {\n          // create new group\n          var _index = this._defaultIndex % this._defaultGroups.length;\n          this._defaultIndex++;\n          group = {};\n          group.color = this._defaultGroups[_index];\n          this._groups.set(groupname, group);\n        }\n      }\n      return group;\n    }\n\n    /**\n     * Add custom group style.\n     *\n     * @param {string} groupName - The name of the group, a new group will be\n     * created if a group with the same name doesn't exist, otherwise the old\n     * groups style will be overwritten.\n     * @param {object} style - An object containing borderColor, backgroundColor,\n     * etc.\n     * @returns {object} The created group object.\n     */\n  }, {\n    key: \"add\",\n    value: function add(groupName, style) {\n      // Only push group name once to prevent duplicates which would consume more\n      // RAM and also skew the distribution towards more often updated groups,\n      // neither of which is desirable.\n      if (!this._groups.has(groupName)) {\n        this._groupNames.push(groupName);\n      }\n      this._groups.set(groupName, style);\n      return style;\n    }\n  }]);\n  return Groups;\n}();\n\nvar $$e = _export;\n\n// `Number.isNaN` method\n// https://tc39.es/ecma262/#sec-number.isnan\n$$e({ target: 'Number', stat: true }, {\n  isNaN: function isNaN(number) {\n    // eslint-disable-next-line no-self-compare -- NaN check\n    return number !== number;\n  }\n});\n\nvar path$e = path$w;\n\nvar isNan$2 = path$e.Number.isNaN;\n\nvar parent$u = isNan$2;\n\nvar isNan$1 = parent$u;\n\nvar isNan = isNan$1;\n\nvar _Number$isNaN = /*@__PURE__*/getDefaultExportFromCjs(isNan);\n\nvar global$4 = global$n;\n\nvar globalIsFinite = global$4.isFinite;\n\n// `Number.isFinite` method\n// https://tc39.es/ecma262/#sec-number.isfinite\n// eslint-disable-next-line es/no-number-isfinite -- safe\nvar numberIsFinite$1 = Number.isFinite || function isFinite(it) {\n  return typeof it == 'number' && globalIsFinite(it);\n};\n\nvar $$d = _export;\nvar numberIsFinite = numberIsFinite$1;\n\n// `Number.isFinite` method\n// https://tc39.es/ecma262/#sec-number.isfinite\n$$d({ target: 'Number', stat: true }, { isFinite: numberIsFinite });\n\nvar path$d = path$w;\n\nvar _isFinite$2 = path$d.Number.isFinite;\n\nvar parent$t = _isFinite$2;\n\nvar _isFinite$1 = parent$t;\n\nvar _isFinite = _isFinite$1;\n\nvar _Number$isFinite = /*@__PURE__*/getDefaultExportFromCjs(_isFinite);\n\nvar $$c = _export;\nvar $some = arrayIteration.some;\nvar arrayMethodIsStrict$3 = arrayMethodIsStrict$6;\n\nvar STRICT_METHOD$2 = arrayMethodIsStrict$3('some');\n\n// `Array.prototype.some` method\n// https://tc39.es/ecma262/#sec-array.prototype.some\n$$c({ target: 'Array', proto: true, forced: !STRICT_METHOD$2 }, {\n  some: function some(callbackfn /* , thisArg */) {\n    return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\nvar entryVirtual$4 = entryVirtual$i;\n\nvar some$3 = entryVirtual$4('Array').some;\n\nvar isPrototypeOf$4 = objectIsPrototypeOf;\nvar method$4 = some$3;\n\nvar ArrayPrototype$4 = Array.prototype;\n\nvar some$2 = function (it) {\n  var own = it.some;\n  return it === ArrayPrototype$4 || (isPrototypeOf$4(ArrayPrototype$4, it) && own === ArrayPrototype$4.some) ? method$4 : own;\n};\n\nvar parent$s = some$2;\n\nvar some$1 = parent$s;\n\nvar some = some$1;\n\nvar _someInstanceProperty = /*@__PURE__*/getDefaultExportFromCjs(some);\n\nvar path$c = path$w;\n\nvar getOwnPropertySymbols$2 = path$c.Object.getOwnPropertySymbols;\n\nvar parent$r = getOwnPropertySymbols$2;\n\nvar getOwnPropertySymbols$1 = parent$r;\n\nvar getOwnPropertySymbols = getOwnPropertySymbols$1;\n\nvar _Object$getOwnPropertySymbols = /*@__PURE__*/getDefaultExportFromCjs(getOwnPropertySymbols);\n\nvar getOwnPropertyDescriptor$6 = {exports: {}};\n\nvar $$b = _export;\nvar fails$5 = fails$w;\nvar toIndexedObject$1 = toIndexedObject$a;\nvar nativeGetOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;\nvar DESCRIPTORS$2 = descriptors;\n\nvar FORCED$5 = !DESCRIPTORS$2 || fails$5(function () { nativeGetOwnPropertyDescriptor(1); });\n\n// `Object.getOwnPropertyDescriptor` method\n// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor\n$$b({ target: 'Object', stat: true, forced: FORCED$5, sham: !DESCRIPTORS$2 }, {\n  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {\n    return nativeGetOwnPropertyDescriptor(toIndexedObject$1(it), key);\n  }\n});\n\nvar path$b = path$w;\n\nvar Object$3 = path$b.Object;\n\nvar getOwnPropertyDescriptor$5 = getOwnPropertyDescriptor$6.exports = function getOwnPropertyDescriptor(it, key) {\n  return Object$3.getOwnPropertyDescriptor(it, key);\n};\n\nif (Object$3.getOwnPropertyDescriptor.sham) getOwnPropertyDescriptor$5.sham = true;\n\nvar getOwnPropertyDescriptorExports = getOwnPropertyDescriptor$6.exports;\n\nvar parent$q = getOwnPropertyDescriptorExports;\n\nvar getOwnPropertyDescriptor$4 = parent$q;\n\nvar getOwnPropertyDescriptor$3 = getOwnPropertyDescriptor$4;\n\nvar _Object$getOwnPropertyDescriptor$1 = /*@__PURE__*/getDefaultExportFromCjs(getOwnPropertyDescriptor$3);\n\nvar $$a = _export;\nvar DESCRIPTORS$1 = descriptors;\nvar ownKeys$4 = ownKeys$5;\nvar toIndexedObject = toIndexedObject$a;\nvar getOwnPropertyDescriptorModule$1 = objectGetOwnPropertyDescriptor;\nvar createProperty = createProperty$6;\n\n// `Object.getOwnPropertyDescriptors` method\n// https://tc39.es/ecma262/#sec-object.getownpropertydescriptors\n$$a({ target: 'Object', stat: true, sham: !DESCRIPTORS$1 }, {\n  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {\n    var O = toIndexedObject(object);\n    var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule$1.f;\n    var keys = ownKeys$4(O);\n    var result = {};\n    var index = 0;\n    var key, descriptor;\n    while (keys.length > index) {\n      descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);\n      if (descriptor !== undefined) createProperty(result, key, descriptor);\n    }\n    return result;\n  }\n});\n\nvar path$a = path$w;\n\nvar getOwnPropertyDescriptors$2 = path$a.Object.getOwnPropertyDescriptors;\n\nvar parent$p = getOwnPropertyDescriptors$2;\n\nvar getOwnPropertyDescriptors$1 = parent$p;\n\nvar getOwnPropertyDescriptors = getOwnPropertyDescriptors$1;\n\nvar _Object$getOwnPropertyDescriptors = /*@__PURE__*/getDefaultExportFromCjs(getOwnPropertyDescriptors);\n\nvar defineProperties$4 = {exports: {}};\n\nvar $$9 = _export;\nvar DESCRIPTORS = descriptors;\nvar defineProperties$3 = objectDefineProperties.f;\n\n// `Object.defineProperties` method\n// https://tc39.es/ecma262/#sec-object.defineproperties\n// eslint-disable-next-line es/no-object-defineproperties -- safe\n$$9({ target: 'Object', stat: true, forced: Object.defineProperties !== defineProperties$3, sham: !DESCRIPTORS }, {\n  defineProperties: defineProperties$3\n});\n\nvar path$9 = path$w;\n\nvar Object$2 = path$9.Object;\n\nvar defineProperties$2 = defineProperties$4.exports = function defineProperties(T, D) {\n  return Object$2.defineProperties(T, D);\n};\n\nif (Object$2.defineProperties.sham) defineProperties$2.sham = true;\n\nvar definePropertiesExports = defineProperties$4.exports;\n\nvar parent$o = definePropertiesExports;\n\nvar defineProperties$1 = parent$o;\n\nvar defineProperties = defineProperties$1;\n\nvar _Object$defineProperties = /*@__PURE__*/getDefaultExportFromCjs(defineProperties);\n\nvar defineProperty = defineProperty$9;\n\nvar _Object$defineProperty = /*@__PURE__*/getDefaultExportFromCjs(defineProperty);\n\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    _Object$defineProperty$1(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nvar global$3 = global$n;\nvar fails$4 = fails$w;\nvar uncurryThis$3 = functionUncurryThis;\nvar toString$1 = toString$a;\nvar trim = stringTrim.trim;\nvar whitespaces = whitespaces$3;\n\nvar charAt = uncurryThis$3(''.charAt);\nvar $parseFloat$1 = global$3.parseFloat;\nvar Symbol$1 = global$3.Symbol;\nvar ITERATOR = Symbol$1 && Symbol$1.iterator;\nvar FORCED$4 = 1 / $parseFloat$1(whitespaces + '-0') !== -Infinity\n  // MS Edge 18- broken with boxed symbols\n  || (ITERATOR && !fails$4(function () { $parseFloat$1(Object(ITERATOR)); }));\n\n// `parseFloat` method\n// https://tc39.es/ecma262/#sec-parsefloat-string\nvar numberParseFloat = FORCED$4 ? function parseFloat(string) {\n  var trimmedString = trim(toString$1(string));\n  var result = $parseFloat$1(trimmedString);\n  return result === 0 && charAt(trimmedString, 0) === '-' ? -0 : result;\n} : $parseFloat$1;\n\nvar $$8 = _export;\nvar $parseFloat = numberParseFloat;\n\n// `parseFloat` method\n// https://tc39.es/ecma262/#sec-parsefloat-string\n$$8({ global: true, forced: parseFloat !== $parseFloat }, {\n  parseFloat: $parseFloat\n});\n\nvar path$8 = path$w;\n\nvar _parseFloat$3 = path$8.parseFloat;\n\nvar parent$n = _parseFloat$3;\n\nvar _parseFloat$2 = parent$n;\n\nvar _parseFloat = _parseFloat$2;\n\nvar _parseFloat$1 = /*@__PURE__*/getDefaultExportFromCjs(_parseFloat);\n\nvar $$7 = _export;\nvar fails$3 = fails$w;\nvar getOwnPropertyNames$3 = objectGetOwnPropertyNamesExternal.f;\n\n// eslint-disable-next-line es/no-object-getownpropertynames -- required for testing\nvar FAILS_ON_PRIMITIVES = fails$3(function () { return !Object.getOwnPropertyNames(1); });\n\n// `Object.getOwnPropertyNames` method\n// https://tc39.es/ecma262/#sec-object.getownpropertynames\n$$7({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {\n  getOwnPropertyNames: getOwnPropertyNames$3\n});\n\nvar path$7 = path$w;\n\nvar Object$1 = path$7.Object;\n\nvar getOwnPropertyNames$2 = function getOwnPropertyNames(it) {\n  return Object$1.getOwnPropertyNames(it);\n};\n\nvar parent$m = getOwnPropertyNames$2;\n\nvar getOwnPropertyNames$1 = parent$m;\n\nvar getOwnPropertyNames = getOwnPropertyNames$1;\n\nvar _Object$getOwnPropertyNames = /*@__PURE__*/getDefaultExportFromCjs(getOwnPropertyNames);\n\n/**\n * Helper functions for components\n */\n\n/**\n * Determine values to use for (sub)options of 'chosen'.\n *\n * This option is either a boolean or an object whose values should be examined further.\n * The relevant structures are:\n *\n * - chosen: <boolean value>\n * - chosen: { subOption: <boolean or function> }\n *\n * Where subOption is 'node', 'edge' or 'label'.\n *\n * The intention of this method appears to be to set a specific priority to the options;\n * Since most properties are either bridged or merged into the local options objects, there\n * is not much point in handling them separately.\n * TODO: examine if 'most' in previous sentence can be replaced with 'all'. In that case, we\n *       should be able to get rid of this method.\n *\n * @param {string}  subOption  option within object 'chosen' to consider; either 'node', 'edge' or 'label'\n * @param {object}  pile       array of options objects to consider\n * @returns {boolean | Function}  value for passed subOption of 'chosen' to use\n */\nfunction choosify(subOption, pile) {\n  // allowed values for subOption\n  var allowed = [\"node\", \"edge\", \"label\"];\n  var value = true;\n  var chosen = topMost(pile, \"chosen\");\n  if (typeof chosen === \"boolean\") {\n    value = chosen;\n  } else if (_typeof(chosen) === \"object\") {\n    if (_indexOfInstanceProperty(allowed).call(allowed, subOption) === -1) {\n      throw new Error(\"choosify: subOption '\" + subOption + \"' should be one of \" + \"'\" + allowed.join(\"', '\") + \"'\");\n    }\n    var chosenEdge = topMost(pile, [\"chosen\", subOption]);\n    if (typeof chosenEdge === \"boolean\" || typeof chosenEdge === \"function\") {\n      value = chosenEdge;\n    }\n  }\n  return value;\n}\n\n/**\n * Check if the point falls within the given rectangle.\n *\n * @param {rect} rect\n * @param {point} point\n * @param {rotationPoint} [rotationPoint] if specified, the rotation that applies to the rectangle.\n * @returns {boolean}  true if point within rectangle, false otherwise\n */\nfunction pointInRect(rect, point, rotationPoint) {\n  if (rect.width <= 0 || rect.height <= 0) {\n    return false; // early out\n  }\n\n  if (rotationPoint !== undefined) {\n    // Rotate the point the same amount as the rectangle\n    var tmp = {\n      x: point.x - rotationPoint.x,\n      y: point.y - rotationPoint.y\n    };\n    if (rotationPoint.angle !== 0) {\n      // In order to get the coordinates the same, you need to\n      // rotate in the reverse direction\n      var angle = -rotationPoint.angle;\n      var tmp2 = {\n        x: Math.cos(angle) * tmp.x - Math.sin(angle) * tmp.y,\n        y: Math.sin(angle) * tmp.x + Math.cos(angle) * tmp.y\n      };\n      point = tmp2;\n    } else {\n      point = tmp;\n    }\n\n    // Note that if a rotation is specified, the rectangle coordinates\n    // are **not* the full canvas coordinates. They are relative to the\n    // rotationPoint. Hence, the point coordinates need not be translated\n    // back in this case.\n  }\n\n  var right = rect.x + rect.width;\n  var bottom = rect.y + rect.width;\n  return rect.left < point.x && right > point.x && rect.top < point.y && bottom > point.y;\n}\n\n/**\n * Check if given value is acceptable as a label text.\n *\n * @param {*} text value to check; can be anything at this point\n * @returns {boolean} true if valid label value, false otherwise\n */\nfunction isValidLabel(text) {\n  // Note that this is quite strict: types that *might* be converted to string are disallowed\n  return typeof text === \"string\" && text !== \"\";\n}\n\n/**\n * Returns x, y of self reference circle based on provided angle\n *\n * @param {object} ctx\n * @param {number} angle\n * @param {number} radius\n * @param {VisNode} node\n * @returns {object} x and y coordinates\n */\nfunction getSelfRefCoordinates(ctx, angle, radius, node) {\n  var x = node.x;\n  var y = node.y;\n  if (typeof node.distanceToBorder === \"function\") {\n    //calculating opposite and adjacent\n    //distaneToBorder becomes Hypotenuse.\n    //Formulas sin(a) = Opposite / Hypotenuse and cos(a) = Adjacent / Hypotenuse\n    var toBorderDist = node.distanceToBorder(ctx, angle);\n    var yFromNodeCenter = Math.sin(angle) * toBorderDist;\n    var xFromNodeCenter = Math.cos(angle) * toBorderDist;\n    //xFromNodeCenter is basically x and if xFromNodeCenter equals to the distance to border then it means\n    //that y does not need calculation because it is equal node.height / 2 or node.y\n    //same thing with yFromNodeCenter and if yFromNodeCenter equals to the distance to border then it means\n    //that x is equal node.width / 2 or node.x\n    if (xFromNodeCenter === toBorderDist) {\n      x += toBorderDist;\n      y = node.y;\n    } else if (yFromNodeCenter === toBorderDist) {\n      x = node.x;\n      y -= toBorderDist;\n    } else {\n      x += xFromNodeCenter;\n      y -= yFromNodeCenter;\n    }\n  } else if (node.shape.width > node.shape.height) {\n    x = node.x + node.shape.width * 0.5;\n    y = node.y - radius;\n  } else {\n    x = node.x + radius;\n    y = node.y - node.shape.height * 0.5;\n  }\n  return {\n    x: x,\n    y: y\n  };\n}\n\nvar entryVirtual$3 = entryVirtual$i;\n\nvar values$3 = entryVirtual$3('Array').values;\n\nvar parent$l = values$3;\n\nvar values$2 = parent$l;\n\nvar classof$1 = classof$d;\nvar hasOwn$2 = hasOwnProperty_1;\nvar isPrototypeOf$3 = objectIsPrototypeOf;\nvar method$3 = values$2;\n\nvar ArrayPrototype$3 = Array.prototype;\n\nvar DOMIterables = {\n  DOMTokenList: true,\n  NodeList: true\n};\n\nvar values$1 = function (it) {\n  var own = it.values;\n  return it === ArrayPrototype$3 || (isPrototypeOf$3(ArrayPrototype$3, it) && own === ArrayPrototype$3.values)\n    || hasOwn$2(DOMIterables, classof$1(it)) ? method$3 : own;\n};\n\nvar values = values$1;\n\nvar _valuesInstanceProperty = /*@__PURE__*/getDefaultExportFromCjs(values);\n\n/**\n * Callback to determine text dimensions, using the parent label settings.\n *\n * @callback MeasureText\n * @param {text} text\n * @param {text} mod\n * @returns {object} { width, values} width in pixels and font attributes\n */\n/**\n * Helper class for Label which collects results of splitting labels into lines and blocks.\n *\n * @private\n */\nvar LabelAccumulator = /*#__PURE__*/function () {\n  /**\n   * @param {MeasureText} measureText\n   */\n  function LabelAccumulator(measureText) {\n    _classCallCheck(this, LabelAccumulator);\n    this.measureText = measureText;\n    this.current = 0;\n    this.width = 0;\n    this.height = 0;\n    this.lines = [];\n  }\n\n  /**\n   * Append given text to the given line.\n   *\n   * @param {number}  l    index of line to add to\n   * @param {string}  text string to append to line\n   * @param {'bold'|'ital'|'boldital'|'mono'|'normal'} [mod='normal']\n   * @private\n   */\n  _createClass(LabelAccumulator, [{\n    key: \"_add\",\n    value: function _add(l, text) {\n      var mod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"normal\";\n      if (this.lines[l] === undefined) {\n        this.lines[l] = {\n          width: 0,\n          height: 0,\n          blocks: []\n        };\n      }\n\n      // We still need to set a block for undefined and empty texts, hence return at this point\n      // This is necessary because we don't know at this point if we're at the\n      // start of an empty line or not.\n      // To compensate, empty blocks are removed in `finalize()`.\n      //\n      // Empty strings should still have a height\n      var tmpText = text;\n      if (text === undefined || text === \"\") tmpText = \" \";\n\n      // Determine width and get the font properties\n      var result = this.measureText(tmpText, mod);\n      var block = _Object$assign({}, _valuesInstanceProperty(result));\n      block.text = text;\n      block.width = result.width;\n      block.mod = mod;\n      if (text === undefined || text === \"\") {\n        block.width = 0;\n      }\n      this.lines[l].blocks.push(block);\n\n      // Update the line width. We need this for determining if a string goes over max width\n      this.lines[l].width += block.width;\n    }\n\n    /**\n     * Returns the width in pixels of the current line.\n     *\n     * @returns {number}\n     */\n  }, {\n    key: \"curWidth\",\n    value: function curWidth() {\n      var line = this.lines[this.current];\n      if (line === undefined) return 0;\n      return line.width;\n    }\n\n    /**\n     * Add text in block to current line\n     *\n     * @param {string} text\n     * @param {'bold'|'ital'|'boldital'|'mono'|'normal'} [mod='normal']\n     */\n  }, {\n    key: \"append\",\n    value: function append(text) {\n      var mod = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"normal\";\n      this._add(this.current, text, mod);\n    }\n\n    /**\n     * Add text in block to current line and start a new line\n     *\n     * @param {string} text\n     * @param {'bold'|'ital'|'boldital'|'mono'|'normal'} [mod='normal']\n     */\n  }, {\n    key: \"newLine\",\n    value: function newLine(text) {\n      var mod = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"normal\";\n      this._add(this.current, text, mod);\n      this.current++;\n    }\n\n    /**\n     * Determine and set the heights of all the lines currently contained in this instance\n     *\n     * Note that width has already been set.\n     *\n     * @private\n     */\n  }, {\n    key: \"determineLineHeights\",\n    value: function determineLineHeights() {\n      for (var k = 0; k < this.lines.length; k++) {\n        var line = this.lines[k];\n\n        // Looking for max height of blocks in line\n        var height = 0;\n        if (line.blocks !== undefined) {\n          // Can happen if text contains e.g. '\\n '\n          for (var l = 0; l < line.blocks.length; l++) {\n            var block = line.blocks[l];\n            if (height < block.height) {\n              height = block.height;\n            }\n          }\n        }\n        line.height = height;\n      }\n    }\n\n    /**\n     * Determine the full size of the label text, as determined by current lines and blocks\n     *\n     * @private\n     */\n  }, {\n    key: \"determineLabelSize\",\n    value: function determineLabelSize() {\n      var width = 0;\n      var height = 0;\n      for (var k = 0; k < this.lines.length; k++) {\n        var line = this.lines[k];\n        if (line.width > width) {\n          width = line.width;\n        }\n        height += line.height;\n      }\n      this.width = width;\n      this.height = height;\n    }\n\n    /**\n     * Remove all empty blocks and empty lines we don't need\n     *\n     * This must be done after the width/height determination,\n     * so that these are set properly for processing here.\n     *\n     * @returns {Array<Line>} Lines with empty blocks (and some empty lines) removed\n     * @private\n     */\n  }, {\n    key: \"removeEmptyBlocks\",\n    value: function removeEmptyBlocks() {\n      var tmpLines = [];\n      for (var k = 0; k < this.lines.length; k++) {\n        var line = this.lines[k];\n\n        // Note: an empty line in between text has width zero but is still relevant to layout.\n        // So we can't use width for testing empty line here\n        if (line.blocks.length === 0) continue;\n\n        // Discard final empty line always\n        if (k === this.lines.length - 1) {\n          if (line.width === 0) continue;\n        }\n        var tmpLine = {};\n        _Object$assign(tmpLine, line);\n        tmpLine.blocks = [];\n        var firstEmptyBlock = void 0;\n        var tmpBlocks = [];\n        for (var l = 0; l < line.blocks.length; l++) {\n          var block = line.blocks[l];\n          if (block.width !== 0) {\n            tmpBlocks.push(block);\n          } else {\n            if (firstEmptyBlock === undefined) {\n              firstEmptyBlock = block;\n            }\n          }\n        }\n\n        // Ensure that there is *some* text present\n        if (tmpBlocks.length === 0 && firstEmptyBlock !== undefined) {\n          tmpBlocks.push(firstEmptyBlock);\n        }\n        tmpLine.blocks = tmpBlocks;\n        tmpLines.push(tmpLine);\n      }\n      return tmpLines;\n    }\n\n    /**\n     * Set the sizes for all lines and the whole thing.\n     *\n     * @returns {{width: (number|*), height: (number|*), lines: Array}}\n     */\n  }, {\n    key: \"finalize\",\n    value: function finalize() {\n      //console.log(JSON.stringify(this.lines, null, 2));\n\n      this.determineLineHeights();\n      this.determineLabelSize();\n      var tmpLines = this.removeEmptyBlocks();\n\n      // Return a simple hash object for further processing.\n      return {\n        width: this.width,\n        height: this.height,\n        lines: tmpLines\n      };\n    }\n  }]);\n  return LabelAccumulator;\n}();\n\n// Hash of prepared regexp's for tags\nvar tagPattern = {\n  // HTML\n  \"<b>\": /<b>/,\n  \"<i>\": /<i>/,\n  \"<code>\": /<code>/,\n  \"</b>\": /<\\/b>/,\n  \"</i>\": /<\\/i>/,\n  \"</code>\": /<\\/code>/,\n  // Markdown\n  \"*\": /\\*/,\n  // bold\n  _: /_/,\n  // ital\n  \"`\": /`/,\n  // mono\n  afterBold: /[^*]/,\n  afterItal: /[^_]/,\n  afterMono: /[^`]/\n};\n\n/**\n * Internal helper class for parsing the markup tags for HTML and Markdown.\n *\n * NOTE: Sequences of tabs and spaces are reduced to single space.\n *       Scan usage of `this.spacing` within method\n */\nvar MarkupAccumulator = /*#__PURE__*/function () {\n  /**\n   * Create an instance\n   *\n   * @param {string} text  text to parse for markup\n   */\n  function MarkupAccumulator(text) {\n    _classCallCheck(this, MarkupAccumulator);\n    this.text = text;\n    this.bold = false;\n    this.ital = false;\n    this.mono = false;\n    this.spacing = false;\n    this.position = 0;\n    this.buffer = \"\";\n    this.modStack = [];\n    this.blocks = [];\n  }\n\n  /**\n   * Return the mod label currently on the top of the stack\n   *\n   * @returns {string}  label of topmost mod\n   * @private\n   */\n  _createClass(MarkupAccumulator, [{\n    key: \"mod\",\n    value: function mod() {\n      return this.modStack.length === 0 ? \"normal\" : this.modStack[0];\n    }\n\n    /**\n     * Return the mod label currently active\n     *\n     * @returns {string}  label of active mod\n     * @private\n     */\n  }, {\n    key: \"modName\",\n    value: function modName() {\n      if (this.modStack.length === 0) return \"normal\";else if (this.modStack[0] === \"mono\") return \"mono\";else {\n        if (this.bold && this.ital) {\n          return \"boldital\";\n        } else if (this.bold) {\n          return \"bold\";\n        } else if (this.ital) {\n          return \"ital\";\n        }\n      }\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"emitBlock\",\n    value: function emitBlock() {\n      if (this.spacing) {\n        this.add(\" \");\n        this.spacing = false;\n      }\n      if (this.buffer.length > 0) {\n        this.blocks.push({\n          text: this.buffer,\n          mod: this.modName()\n        });\n        this.buffer = \"\";\n      }\n    }\n\n    /**\n     * Output text to buffer\n     *\n     * @param {string} text  text to add\n     * @private\n     */\n  }, {\n    key: \"add\",\n    value: function add(text) {\n      if (text === \" \") {\n        this.spacing = true;\n      }\n      if (this.spacing) {\n        this.buffer += \" \";\n        this.spacing = false;\n      }\n      if (text != \" \") {\n        this.buffer += text;\n      }\n    }\n\n    /**\n     * Handle parsing of whitespace\n     *\n     * @param {string} ch  the character to check\n     * @returns {boolean} true if the character was processed as whitespace, false otherwise\n     */\n  }, {\n    key: \"parseWS\",\n    value: function parseWS(ch) {\n      if (/[ \\t]/.test(ch)) {\n        if (!this.mono) {\n          this.spacing = true;\n        } else {\n          this.add(ch);\n        }\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * @param {string} tagName  label for block type to set\n     * @private\n     */\n  }, {\n    key: \"setTag\",\n    value: function setTag(tagName) {\n      this.emitBlock();\n      this[tagName] = true;\n      this.modStack.unshift(tagName);\n    }\n\n    /**\n     * @param {string} tagName  label for block type to unset\n     * @private\n     */\n  }, {\n    key: \"unsetTag\",\n    value: function unsetTag(tagName) {\n      this.emitBlock();\n      this[tagName] = false;\n      this.modStack.shift();\n    }\n\n    /**\n     * @param {string} tagName label for block type we are currently processing\n     * @param {string|RegExp} tag string to match in text\n     * @returns {boolean} true if the tag was processed, false otherwise\n     */\n  }, {\n    key: \"parseStartTag\",\n    value: function parseStartTag(tagName, tag) {\n      // Note: if 'mono' passed as tagName, there is a double check here. This is OK\n      if (!this.mono && !this[tagName] && this.match(tag)) {\n        this.setTag(tagName);\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * @param {string|RegExp} tag\n     * @param {number} [advance=true] if set, advance current position in text\n     * @returns {boolean} true if match at given position, false otherwise\n     * @private\n     */\n  }, {\n    key: \"match\",\n    value: function match(tag) {\n      var advance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var _this$prepareRegExp = this.prepareRegExp(tag),\n        _this$prepareRegExp2 = _slicedToArray(_this$prepareRegExp, 2),\n        regExp = _this$prepareRegExp2[0],\n        length = _this$prepareRegExp2[1];\n      var matched = regExp.test(this.text.substr(this.position, length));\n      if (matched && advance) {\n        this.position += length - 1;\n      }\n      return matched;\n    }\n\n    /**\n     * @param {string} tagName label for block type we are currently processing\n     * @param {string|RegExp} tag string to match in text\n     * @param {RegExp} [nextTag] regular expression to match for characters *following* the current tag\n     * @returns {boolean} true if the tag was processed, false otherwise\n     */\n  }, {\n    key: \"parseEndTag\",\n    value: function parseEndTag(tagName, tag, nextTag) {\n      var checkTag = this.mod() === tagName;\n      if (tagName === \"mono\") {\n        // special handling for 'mono'\n        checkTag = checkTag && this.mono;\n      } else {\n        checkTag = checkTag && !this.mono;\n      }\n      if (checkTag && this.match(tag)) {\n        if (nextTag !== undefined) {\n          // Purpose of the following match is to prevent a direct unset/set of a given tag\n          // E.g. '*bold **still bold*' => '*bold still bold*'\n          if (this.position === this.text.length - 1 || this.match(nextTag, false)) {\n            this.unsetTag(tagName);\n          }\n        } else {\n          this.unsetTag(tagName);\n        }\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * @param {string|RegExp} tag  string to match in text\n     * @param {value} value  string to replace tag with, if found at current position\n     * @returns {boolean} true if the tag was processed, false otherwise\n     */\n  }, {\n    key: \"replace\",\n    value: function replace(tag, value) {\n      if (this.match(tag)) {\n        this.add(value);\n        this.position += length - 1;\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Create a regular expression for the tag if it isn't already one.\n     *\n     * The return value is an array `[RegExp, number]`, with exactly two value, where:\n     *  - RegExp is the regular expression to use\n     *  - number is the lenth of the input string to match\n     *\n     * @param {string|RegExp} tag  string to match in text\n     * @returns {Array}  regular expression to use and length of input string to match\n     * @private\n     */\n  }, {\n    key: \"prepareRegExp\",\n    value: function prepareRegExp(tag) {\n      var length;\n      var regExp;\n      if (tag instanceof RegExp) {\n        regExp = tag;\n        length = 1; // ASSUMPTION: regexp only tests one character\n      } else {\n        // use prepared regexp if present\n        var prepared = tagPattern[tag];\n        if (prepared !== undefined) {\n          regExp = prepared;\n        } else {\n          regExp = new RegExp(tag);\n        }\n        length = tag.length;\n      }\n      return [regExp, length];\n    }\n  }]);\n  return MarkupAccumulator;\n}();\n/**\n * Helper class for Label which explodes the label text into lines and blocks within lines\n *\n * @private\n */\nvar LabelSplitter = /*#__PURE__*/function () {\n  /**\n   * @param {CanvasRenderingContext2D} ctx Canvas rendering context\n   * @param {Label} parent reference to the Label instance using current instance\n   * @param {boolean} selected\n   * @param {boolean} hover\n   */\n  function LabelSplitter(ctx, parent, selected, hover) {\n    var _this = this;\n    _classCallCheck(this, LabelSplitter);\n    this.ctx = ctx;\n    this.parent = parent;\n    this.selected = selected;\n    this.hover = hover;\n\n    /**\n     * Callback to determine text width; passed to LabelAccumulator instance\n     *\n     * @param  {string} text string to determine width of\n     * @param  {string} mod  font type to use for this text\n     * @returns {object} { width, values} width in pixels and font attributes\n     */\n    var textWidth = function textWidth(text, mod) {\n      if (text === undefined) return 0;\n\n      // TODO: This can be done more efficiently with caching\n      // This will set the ctx.font correctly, depending on selected/hover and mod - so that ctx.measureText() will be accurate.\n      var values = _this.parent.getFormattingValues(ctx, selected, hover, mod);\n      var width = 0;\n      if (text !== \"\") {\n        var measure = _this.ctx.measureText(text);\n        width = measure.width;\n      }\n      return {\n        width: width,\n        values: values\n      };\n    };\n    this.lines = new LabelAccumulator(textWidth);\n  }\n\n  /**\n   * Split passed text of a label into lines and blocks.\n   *\n   * # NOTE\n   *\n   * The handling of spacing is option dependent:\n   *\n   * - if `font.multi : false`, all spaces are retained\n   * - if `font.multi : true`, every sequence of spaces is compressed to a single space\n   *\n   * This might not be the best way to do it, but this is as it has been working till now.\n   * In order not to break existing functionality, for the time being this behaviour will\n   * be retained in any code changes.\n   *\n   * @param {string} text  text to split\n   * @returns {Array<line>}\n   */\n  _createClass(LabelSplitter, [{\n    key: \"process\",\n    value: function process(text) {\n      if (!isValidLabel(text)) {\n        return this.lines.finalize();\n      }\n      var font = this.parent.fontOptions;\n\n      // Normalize the end-of-line's to a single representation - order important\n      text = text.replace(/\\r\\n/g, \"\\n\"); // Dos EOL's\n      text = text.replace(/\\r/g, \"\\n\"); // Mac EOL's\n\n      // Note that at this point, there can be no \\r's in the text.\n      // This is used later on splitStringIntoLines() to split multifont texts.\n\n      var nlLines = String(text).split(\"\\n\");\n      var lineCount = nlLines.length;\n      if (font.multi) {\n        // Multi-font case: styling tags active\n        for (var i = 0; i < lineCount; i++) {\n          var blocks = this.splitBlocks(nlLines[i], font.multi);\n          // Post: Sequences of tabs and spaces are reduced to single space\n\n          if (blocks === undefined) continue;\n          if (blocks.length === 0) {\n            this.lines.newLine(\"\");\n            continue;\n          }\n          if (font.maxWdt > 0) {\n            // widthConstraint.maximum defined\n            //console.log('Running widthConstraint multi, max: ' + this.fontOptions.maxWdt);\n            for (var j = 0; j < blocks.length; j++) {\n              var mod = blocks[j].mod;\n              var _text = blocks[j].text;\n              this.splitStringIntoLines(_text, mod, true);\n            }\n          } else {\n            // widthConstraint.maximum NOT defined\n            for (var _j = 0; _j < blocks.length; _j++) {\n              var _mod = blocks[_j].mod;\n              var _text2 = blocks[_j].text;\n              this.lines.append(_text2, _mod);\n            }\n          }\n          this.lines.newLine();\n        }\n      } else {\n        // Single-font case\n        if (font.maxWdt > 0) {\n          // widthConstraint.maximum defined\n          // console.log('Running widthConstraint normal, max: ' + this.fontOptions.maxWdt);\n          for (var _i = 0; _i < lineCount; _i++) {\n            this.splitStringIntoLines(nlLines[_i]);\n          }\n        } else {\n          // widthConstraint.maximum NOT defined\n          for (var _i2 = 0; _i2 < lineCount; _i2++) {\n            this.lines.newLine(nlLines[_i2]);\n          }\n        }\n      }\n      return this.lines.finalize();\n    }\n\n    /**\n     * normalize the markup system\n     *\n     * @param {boolean|'md'|'markdown'|'html'} markupSystem\n     * @returns {string}\n     */\n  }, {\n    key: \"decodeMarkupSystem\",\n    value: function decodeMarkupSystem(markupSystem) {\n      var system = \"none\";\n      if (markupSystem === \"markdown\" || markupSystem === \"md\") {\n        system = \"markdown\";\n      } else if (markupSystem === true || markupSystem === \"html\") {\n        system = \"html\";\n      }\n      return system;\n    }\n\n    /**\n     *\n     * @param {string} text\n     * @returns {Array}\n     */\n  }, {\n    key: \"splitHtmlBlocks\",\n    value: function splitHtmlBlocks(text) {\n      var s = new MarkupAccumulator(text);\n      var parseEntities = function parseEntities(ch) {\n        if (/&/.test(ch)) {\n          var parsed = s.replace(s.text, \"&lt;\", \"<\") || s.replace(s.text, \"&amp;\", \"&\");\n          if (!parsed) {\n            s.add(\"&\");\n          }\n          return true;\n        }\n        return false;\n      };\n      while (s.position < s.text.length) {\n        var ch = s.text.charAt(s.position);\n        var parsed = s.parseWS(ch) || /</.test(ch) && (s.parseStartTag(\"bold\", \"<b>\") || s.parseStartTag(\"ital\", \"<i>\") || s.parseStartTag(\"mono\", \"<code>\") || s.parseEndTag(\"bold\", \"</b>\") || s.parseEndTag(\"ital\", \"</i>\") || s.parseEndTag(\"mono\", \"</code>\")) || parseEntities(ch);\n        if (!parsed) {\n          s.add(ch);\n        }\n        s.position++;\n      }\n      s.emitBlock();\n      return s.blocks;\n    }\n\n    /**\n     *\n     * @param {string} text\n     * @returns {Array}\n     */\n  }, {\n    key: \"splitMarkdownBlocks\",\n    value: function splitMarkdownBlocks(text) {\n      var _this2 = this;\n      var s = new MarkupAccumulator(text);\n      var beginable = true;\n      var parseOverride = function parseOverride(ch) {\n        if (/\\\\/.test(ch)) {\n          if (s.position < _this2.text.length + 1) {\n            s.position++;\n            ch = _this2.text.charAt(s.position);\n            if (/ \\t/.test(ch)) {\n              s.spacing = true;\n            } else {\n              s.add(ch);\n              beginable = false;\n            }\n          }\n          return true;\n        }\n        return false;\n      };\n      while (s.position < s.text.length) {\n        var ch = s.text.charAt(s.position);\n        var parsed = s.parseWS(ch) || parseOverride(ch) || (beginable || s.spacing) && (s.parseStartTag(\"bold\", \"*\") || s.parseStartTag(\"ital\", \"_\") || s.parseStartTag(\"mono\", \"`\")) || s.parseEndTag(\"bold\", \"*\", \"afterBold\") || s.parseEndTag(\"ital\", \"_\", \"afterItal\") || s.parseEndTag(\"mono\", \"`\", \"afterMono\");\n        if (!parsed) {\n          s.add(ch);\n          beginable = false;\n        }\n        s.position++;\n      }\n      s.emitBlock();\n      return s.blocks;\n    }\n\n    /**\n     * Explodes a piece of text into single-font blocks using a given markup\n     *\n     * @param {string} text\n     * @param {boolean|'md'|'markdown'|'html'} markupSystem\n     * @returns {Array.<{text: string, mod: string}>}\n     * @private\n     */\n  }, {\n    key: \"splitBlocks\",\n    value: function splitBlocks(text, markupSystem) {\n      var system = this.decodeMarkupSystem(markupSystem);\n      if (system === \"none\") {\n        return [{\n          text: text,\n          mod: \"normal\"\n        }];\n      } else if (system === \"markdown\") {\n        return this.splitMarkdownBlocks(text);\n      } else if (system === \"html\") {\n        return this.splitHtmlBlocks(text);\n      }\n    }\n\n    /**\n     * @param {string} text\n     * @returns {boolean} true if text length over the current max with\n     * @private\n     */\n  }, {\n    key: \"overMaxWidth\",\n    value: function overMaxWidth(text) {\n      var width = this.ctx.measureText(text).width;\n      return this.lines.curWidth() + width > this.parent.fontOptions.maxWdt;\n    }\n\n    /**\n     * Determine the longest part of the sentence which still fits in the\n     * current max width.\n     *\n     * @param {Array} words  Array of strings signifying a text lines\n     * @returns {number}      index of first item in string making string go over max\n     * @private\n     */\n  }, {\n    key: \"getLongestFit\",\n    value: function getLongestFit(words) {\n      var text = \"\";\n      var w = 0;\n      while (w < words.length) {\n        var pre = text === \"\" ? \"\" : \" \";\n        var newText = text + pre + words[w];\n        if (this.overMaxWidth(newText)) break;\n        text = newText;\n        w++;\n      }\n      return w;\n    }\n\n    /**\n     * Determine the longest part of the string which still fits in the\n     * current max width.\n     *\n     * @param {Array} words Array of strings signifying a text lines\n     * @returns {number} index of first item in string making string go over max\n     */\n  }, {\n    key: \"getLongestFitWord\",\n    value: function getLongestFitWord(words) {\n      var w = 0;\n      while (w < words.length) {\n        if (this.overMaxWidth(_sliceInstanceProperty(words).call(words, 0, w))) break;\n        w++;\n      }\n      return w;\n    }\n\n    /**\n     * Split the passed text into lines, according to width constraint (if any).\n     *\n     * The method assumes that the input string is a single line, i.e. without lines break.\n     *\n     * This method retains spaces, if still present (case `font.multi: false`).\n     * A space which falls on an internal line break, will be replaced by a newline.\n     * There is no special handling of tabs; these go along with the flow.\n     *\n     * @param {string} str\n     * @param {string} [mod='normal']\n     * @param {boolean} [appendLast=false]\n     * @private\n     */\n  }, {\n    key: \"splitStringIntoLines\",\n    value: function splitStringIntoLines(str) {\n      var mod = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"normal\";\n      var appendLast = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      // Set the canvas context font, based upon the current selected/hover state\n      // and the provided mod, so the text measurement performed by getLongestFit\n      // will be accurate - and not just use the font of whoever last used the canvas.\n      this.parent.getFormattingValues(this.ctx, this.selected, this.hover, mod);\n\n      // Still-present spaces are relevant, retain them\n      str = str.replace(/^( +)/g, \"$1\\r\");\n      str = str.replace(/([^\\r][^ ]*)( +)/g, \"$1\\r$2\\r\");\n      var words = str.split(\"\\r\");\n      while (words.length > 0) {\n        var w = this.getLongestFit(words);\n        if (w === 0) {\n          // Special case: the first word is already larger than the max width.\n          var word = words[0];\n\n          // Break the word to the largest part that fits the line\n          var x = this.getLongestFitWord(word);\n          this.lines.newLine(_sliceInstanceProperty(word).call(word, 0, x), mod);\n\n          // Adjust the word, so that the rest will be done next iteration\n          words[0] = _sliceInstanceProperty(word).call(word, x);\n        } else {\n          // skip any space that is replaced by a newline\n          var newW = w;\n          if (words[w - 1] === \" \") {\n            w--;\n          } else if (words[newW] === \" \") {\n            newW++;\n          }\n          var text = _sliceInstanceProperty(words).call(words, 0, w).join(\"\");\n          if (w == words.length && appendLast) {\n            this.lines.append(text, mod);\n          } else {\n            this.lines.newLine(text, mod);\n          }\n\n          // Adjust the word, so that the rest will be done next iteration\n          words = _sliceInstanceProperty(words).call(words, newW);\n        }\n      }\n    }\n  }]);\n  return LabelSplitter;\n}();\n\n/**\n * List of special styles for multi-fonts\n *\n * @private\n */\nvar multiFontStyle = [\"bold\", \"ital\", \"boldital\", \"mono\"];\n\n/**\n * A Label to be used for Nodes or Edges.\n */\nvar Label = /*#__PURE__*/function () {\n  /**\n   * @param {object} body\n   * @param {object} options\n   * @param {boolean} [edgelabel=false]\n   */\n  function Label(body, options) {\n    var edgelabel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    _classCallCheck(this, Label);\n    this.body = body;\n    this.pointToSelf = false;\n    this.baseSize = undefined;\n    this.fontOptions = {}; // instance variable containing the *instance-local* font options\n    this.setOptions(options);\n    this.size = {\n      top: 0,\n      left: 0,\n      width: 0,\n      height: 0,\n      yLine: 0\n    };\n    this.isEdgeLabel = edgelabel;\n  }\n\n  /**\n   * @param {object} options the options of the parent Node-instance\n   */\n  _createClass(Label, [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.elementOptions = options; // Reference to the options of the parent Node-instance\n\n      this.initFontOptions(options.font);\n      if (isValidLabel(options.label)) {\n        this.labelDirty = true;\n      } else {\n        // Bad label! Change the option value to prevent bad stuff happening\n        options.label = undefined;\n      }\n      if (options.font !== undefined && options.font !== null) {\n        // font options can be deleted at various levels\n        if (typeof options.font === \"string\") {\n          this.baseSize = this.fontOptions.size;\n        } else if (_typeof(options.font) === \"object\") {\n          var size = options.font.size;\n          if (size !== undefined) {\n            this.baseSize = size;\n          }\n        }\n      }\n    }\n\n    /**\n     * Init the font Options structure.\n     *\n     * Member fontOptions serves as an accumulator for the current font options.\n     * As such, it needs to be completely separated from the node options.\n     *\n     * @param {object} newFontOptions the new font options to process\n     * @private\n     */\n  }, {\n    key: \"initFontOptions\",\n    value: function initFontOptions(newFontOptions) {\n      var _this = this;\n      // Prepare the multi-font option objects.\n      // These will be filled in propagateFonts(), if required\n      forEach$1(multiFontStyle, function (style) {\n        _this.fontOptions[style] = {};\n      });\n\n      // Handle shorthand option, if present\n      if (Label.parseFontString(this.fontOptions, newFontOptions)) {\n        this.fontOptions.vadjust = 0;\n        return;\n      }\n\n      // Copy over the non-multifont options, if specified\n      forEach$1(newFontOptions, function (prop, n) {\n        if (prop !== undefined && prop !== null && _typeof(prop) !== \"object\") {\n          _this.fontOptions[n] = prop;\n        }\n      });\n    }\n\n    /**\n     * If in-variable is a string, parse it as a font specifier.\n     *\n     * Note that following is not done here and have to be done after the call:\n     * - Not all font options are set (vadjust, mod)\n     *\n     * @param {object} outOptions  out-parameter, object in which to store the parse results (if any)\n     * @param {object} inOptions  font options to parse\n     * @returns {boolean} true if font parsed as string, false otherwise\n     * @static\n     */\n  }, {\n    key: \"constrain\",\n    value:\n    /**\n     * Set the width and height constraints based on 'nearest' value\n     *\n     * @param {Array} pile array of option objects to consider\n     * @returns {object} the actual constraint values to use\n     * @private\n     */\n    function constrain(pile) {\n      // NOTE: constrainWidth and  constrainHeight never set!\n      // NOTE: for edge labels, only 'maxWdt' set\n      // Node labels can set all the fields\n      var fontOptions = {\n        constrainWidth: false,\n        maxWdt: -1,\n        minWdt: -1,\n        constrainHeight: false,\n        minHgt: -1,\n        valign: \"middle\"\n      };\n      var widthConstraint = topMost(pile, \"widthConstraint\");\n      if (typeof widthConstraint === \"number\") {\n        fontOptions.maxWdt = Number(widthConstraint);\n        fontOptions.minWdt = Number(widthConstraint);\n      } else if (_typeof(widthConstraint) === \"object\") {\n        var widthConstraintMaximum = topMost(pile, [\"widthConstraint\", \"maximum\"]);\n        if (typeof widthConstraintMaximum === \"number\") {\n          fontOptions.maxWdt = Number(widthConstraintMaximum);\n        }\n        var widthConstraintMinimum = topMost(pile, [\"widthConstraint\", \"minimum\"]);\n        if (typeof widthConstraintMinimum === \"number\") {\n          fontOptions.minWdt = Number(widthConstraintMinimum);\n        }\n      }\n      var heightConstraint = topMost(pile, \"heightConstraint\");\n      if (typeof heightConstraint === \"number\") {\n        fontOptions.minHgt = Number(heightConstraint);\n      } else if (_typeof(heightConstraint) === \"object\") {\n        var heightConstraintMinimum = topMost(pile, [\"heightConstraint\", \"minimum\"]);\n        if (typeof heightConstraintMinimum === \"number\") {\n          fontOptions.minHgt = Number(heightConstraintMinimum);\n        }\n        var heightConstraintValign = topMost(pile, [\"heightConstraint\", \"valign\"]);\n        if (typeof heightConstraintValign === \"string\") {\n          if (heightConstraintValign === \"top\" || heightConstraintValign === \"bottom\") {\n            fontOptions.valign = heightConstraintValign;\n          }\n        }\n      }\n      return fontOptions;\n    }\n\n    /**\n     * Set options and update internal state\n     *\n     * @param {object} options  options to set\n     * @param {Array}  pile     array of option objects to consider for option 'chosen'\n     */\n  }, {\n    key: \"update\",\n    value: function update(options, pile) {\n      this.setOptions(options, true);\n      this.propagateFonts(pile);\n      deepExtend(this.fontOptions, this.constrain(pile));\n      this.fontOptions.chooser = choosify(\"label\", pile);\n    }\n\n    /**\n     * When margins are set in an element, adjust sizes is called to remove them\n     * from the width/height constraints. This must be done prior to label sizing.\n     *\n     * @param {{top: number, right: number, bottom: number, left: number}} margins\n     */\n  }, {\n    key: \"adjustSizes\",\n    value: function adjustSizes(margins) {\n      var widthBias = margins ? margins.right + margins.left : 0;\n      if (this.fontOptions.constrainWidth) {\n        this.fontOptions.maxWdt -= widthBias;\n        this.fontOptions.minWdt -= widthBias;\n      }\n      var heightBias = margins ? margins.top + margins.bottom : 0;\n      if (this.fontOptions.constrainHeight) {\n        this.fontOptions.minHgt -= heightBias;\n      }\n    }\n\n    /////////////////////////////////////////////////////////\n    // Methods for handling options piles\n    // Eventually, these will be moved to a separate class\n    /////////////////////////////////////////////////////////\n\n    /**\n     * Add the font members of the passed list of option objects to the pile.\n     *\n     * @param {Pile} dstPile  pile of option objects add to\n     * @param {Pile} srcPile  pile of option objects to take font options from\n     * @private\n     */\n  }, {\n    key: \"addFontOptionsToPile\",\n    value: function addFontOptionsToPile(dstPile, srcPile) {\n      for (var i = 0; i < srcPile.length; ++i) {\n        this.addFontToPile(dstPile, srcPile[i]);\n      }\n    }\n\n    /**\n     * Add given font option object to the list of objects (the 'pile') to consider for determining\n     * multi-font option values.\n     *\n     * @param {Pile} pile  pile of option objects to use\n     * @param {object} options  instance to add to pile\n     * @private\n     */\n  }, {\n    key: \"addFontToPile\",\n    value: function addFontToPile(pile, options) {\n      if (options === undefined) return;\n      if (options.font === undefined || options.font === null) return;\n      var item = options.font;\n      pile.push(item);\n    }\n\n    /**\n     * Collect all own-property values from the font pile that aren't multi-font option objectss.\n     *\n     * @param {Pile} pile  pile of option objects to use\n     * @returns {object} object with all current own basic font properties\n     * @private\n     */\n  }, {\n    key: \"getBasicOptions\",\n    value: function getBasicOptions(pile) {\n      var ret = {};\n\n      // Scans the whole pile to get all options present\n      for (var n = 0; n < pile.length; ++n) {\n        var fontOptions = pile[n];\n\n        // Convert shorthand if necessary\n        var tmpShorthand = {};\n        if (Label.parseFontString(tmpShorthand, fontOptions)) {\n          fontOptions = tmpShorthand;\n        }\n        forEach$1(fontOptions, function (opt, name) {\n          if (opt === undefined) return; // multi-font option need not be present\n          if (Object.prototype.hasOwnProperty.call(ret, name)) return; // Keep first value we encounter\n\n          if (_indexOfInstanceProperty(multiFontStyle).call(multiFontStyle, name) !== -1) {\n            // Skip multi-font properties but we do need the structure\n            ret[name] = {};\n          } else {\n            ret[name] = opt;\n          }\n        });\n      }\n      return ret;\n    }\n\n    /**\n     * Return the value for given option for the given multi-font.\n     *\n     * All available option objects are trawled in the set order to construct the option values.\n     *\n     * ---------------------------------------------------------------------\n     * ## Traversal of pile for multi-fonts\n     *\n     * The determination of multi-font option values is a special case, because any values not\n     * present in the multi-font options should by definition be taken from the main font options,\n     * i.e. from the current 'parent' object of the multi-font option.\n     *\n     * ### Search order for multi-fonts\n     *\n     * 'bold' used as example:\n     *\n     *   - search in option group 'bold' in local properties\n     *   - search in main font option group in local properties\n     *\n     * ---------------------------------------------------------------------\n     *\n     * @param {Pile} pile  pile of option objects to use\n     * @param {MultiFontStyle} multiName sub path for the multi-font\n     * @param {string} option  the option to search for, for the given multi-font\n     * @returns {string|number} the value for the given option\n     * @private\n     */\n  }, {\n    key: \"getFontOption\",\n    value: function getFontOption(pile, multiName, option) {\n      var multiFont;\n\n      // Search multi font in local properties\n      for (var n = 0; n < pile.length; ++n) {\n        var fontOptions = pile[n];\n        if (Object.prototype.hasOwnProperty.call(fontOptions, multiName)) {\n          multiFont = fontOptions[multiName];\n          if (multiFont === undefined || multiFont === null) continue;\n\n          // Convert shorthand if necessary\n          // TODO: inefficient to do this conversion every time; find a better way.\n          var tmpShorthand = {};\n          if (Label.parseFontString(tmpShorthand, multiFont)) {\n            multiFont = tmpShorthand;\n          }\n          if (Object.prototype.hasOwnProperty.call(multiFont, option)) {\n            return multiFont[option];\n          }\n        }\n      }\n\n      // Option is not mentioned in the multi font options; take it from the parent font options.\n      // These have already been converted with getBasicOptions(), so use the converted values.\n      if (Object.prototype.hasOwnProperty.call(this.fontOptions, option)) {\n        return this.fontOptions[option];\n      }\n\n      // A value **must** be found; you should never get here.\n      throw new Error(\"Did not find value for multi-font for property: '\" + option + \"'\");\n    }\n\n    /**\n     * Return all options values for the given multi-font.\n     *\n     * All available option objects are trawled in the set order to construct the option values.\n     *\n     * @param {Pile} pile  pile of option objects to use\n     * @param {MultiFontStyle} multiName sub path for the mod-font\n     * @returns {MultiFontOptions}\n     * @private\n     */\n  }, {\n    key: \"getFontOptions\",\n    value: function getFontOptions(pile, multiName) {\n      var result = {};\n      var optionNames = [\"color\", \"size\", \"face\", \"mod\", \"vadjust\"]; // List of allowed options per multi-font\n\n      for (var i = 0; i < optionNames.length; ++i) {\n        var mod = optionNames[i];\n        result[mod] = this.getFontOption(pile, multiName, mod);\n      }\n      return result;\n    }\n\n    /////////////////////////////////////////////////////////\n    // End methods for handling options piles\n    /////////////////////////////////////////////////////////\n\n    /**\n     * Collapse the font options for the multi-font to single objects, from\n     * the chain of option objects passed (the 'pile').\n     *\n     * @param {Pile} pile  sequence of option objects to consider.\n     *                     First item in list assumed to be the newly set options.\n     */\n  }, {\n    key: \"propagateFonts\",\n    value: function propagateFonts(pile) {\n      var _this2 = this;\n      var fontPile = []; // sequence of font objects to consider, order important\n\n      // Note that this.elementOptions is not used here.\n      this.addFontOptionsToPile(fontPile, pile);\n      this.fontOptions = this.getBasicOptions(fontPile);\n\n      // We set multifont values even if multi === false, for consistency (things break otherwise)\n      var _loop = function _loop() {\n        var mod = multiFontStyle[i];\n        var modOptions = _this2.fontOptions[mod];\n        var tmpMultiFontOptions = _this2.getFontOptions(fontPile, mod);\n\n        // Copy over found values\n        forEach$1(tmpMultiFontOptions, function (option, n) {\n          modOptions[n] = option;\n        });\n        modOptions.size = Number(modOptions.size);\n        modOptions.vadjust = Number(modOptions.vadjust);\n      };\n      for (var i = 0; i < multiFontStyle.length; ++i) {\n        _loop();\n      }\n    }\n\n    /**\n     * Main function. This is called from anything that wants to draw a label.\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} x\n     * @param {number} y\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @param {string} [baseline='middle']\n     */\n  }, {\n    key: \"draw\",\n    value: function draw(ctx, x, y, selected, hover) {\n      var baseline = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : \"middle\";\n      // if no label, return\n      if (this.elementOptions.label === undefined) return;\n\n      // check if we have to render the label\n      var viewFontSize = this.fontOptions.size * this.body.view.scale;\n      if (this.elementOptions.label && viewFontSize < this.elementOptions.scaling.label.drawThreshold - 1) return;\n\n      // This ensures that there will not be HUGE letters on screen\n      // by setting an upper limit on the visible text size (regardless of zoomLevel)\n      if (viewFontSize >= this.elementOptions.scaling.label.maxVisible) {\n        viewFontSize = Number(this.elementOptions.scaling.label.maxVisible) / this.body.view.scale;\n      }\n\n      // update the size cache if required\n      this.calculateLabelSize(ctx, selected, hover, x, y, baseline);\n      this._drawBackground(ctx);\n      this._drawText(ctx, x, this.size.yLine, baseline, viewFontSize);\n    }\n\n    /**\n     * Draws the label background\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @private\n     */\n  }, {\n    key: \"_drawBackground\",\n    value: function _drawBackground(ctx) {\n      if (this.fontOptions.background !== undefined && this.fontOptions.background !== \"none\") {\n        ctx.fillStyle = this.fontOptions.background;\n        var size = this.getSize();\n        ctx.fillRect(size.left, size.top, size.width, size.height);\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} x\n     * @param {number} y\n     * @param {string} [baseline='middle']\n     * @param {number} viewFontSize\n     * @private\n     */\n  }, {\n    key: \"_drawText\",\n    value: function _drawText(ctx, x, y) {\n      var baseline = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"middle\";\n      var viewFontSize = arguments.length > 4 ? arguments[4] : undefined;\n      var _this$_setAlignment = this._setAlignment(ctx, x, y, baseline);\n      var _this$_setAlignment2 = _slicedToArray(_this$_setAlignment, 2);\n      x = _this$_setAlignment2[0];\n      y = _this$_setAlignment2[1];\n      ctx.textAlign = \"left\";\n      x = x - this.size.width / 2; // Shift label 1/2-distance to the left\n      if (this.fontOptions.valign && this.size.height > this.size.labelHeight) {\n        if (this.fontOptions.valign === \"top\") {\n          y -= (this.size.height - this.size.labelHeight) / 2;\n        }\n        if (this.fontOptions.valign === \"bottom\") {\n          y += (this.size.height - this.size.labelHeight) / 2;\n        }\n      }\n\n      // draw the text\n      for (var i = 0; i < this.lineCount; i++) {\n        var line = this.lines[i];\n        if (line && line.blocks) {\n          var width = 0;\n          if (this.isEdgeLabel || this.fontOptions.align === \"center\") {\n            width += (this.size.width - line.width) / 2;\n          } else if (this.fontOptions.align === \"right\") {\n            width += this.size.width - line.width;\n          }\n          for (var j = 0; j < line.blocks.length; j++) {\n            var block = line.blocks[j];\n            ctx.font = block.font;\n            var _this$_getColor = this._getColor(block.color, viewFontSize, block.strokeColor),\n              _this$_getColor2 = _slicedToArray(_this$_getColor, 2),\n              fontColor = _this$_getColor2[0],\n              strokeColor = _this$_getColor2[1];\n            if (block.strokeWidth > 0) {\n              ctx.lineWidth = block.strokeWidth;\n              ctx.strokeStyle = strokeColor;\n              ctx.lineJoin = \"round\";\n            }\n            ctx.fillStyle = fontColor;\n            if (block.strokeWidth > 0) {\n              ctx.strokeText(block.text, x + width, y + block.vadjust);\n            }\n            ctx.fillText(block.text, x + width, y + block.vadjust);\n            width += block.width;\n          }\n          y += line.height;\n        }\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} x\n     * @param {number} y\n     * @param {string} baseline\n     * @returns {Array.<number>}\n     * @private\n     */\n  }, {\n    key: \"_setAlignment\",\n    value: function _setAlignment(ctx, x, y, baseline) {\n      // check for label alignment (for edges)\n      // TODO: make alignment for nodes\n      if (this.isEdgeLabel && this.fontOptions.align !== \"horizontal\" && this.pointToSelf === false) {\n        x = 0;\n        y = 0;\n        var lineMargin = 2;\n        if (this.fontOptions.align === \"top\") {\n          ctx.textBaseline = \"alphabetic\";\n          y -= 2 * lineMargin; // distance from edge, required because we use alphabetic. Alphabetic has less difference between browsers\n        } else if (this.fontOptions.align === \"bottom\") {\n          ctx.textBaseline = \"hanging\";\n          y += 2 * lineMargin; // distance from edge, required because we use hanging. Hanging has less difference between browsers\n        } else {\n          ctx.textBaseline = \"middle\";\n        }\n      } else {\n        ctx.textBaseline = baseline;\n      }\n      return [x, y];\n    }\n\n    /**\n     * fade in when relative scale is between threshold and threshold - 1.\n     * If the relative scale would be smaller than threshold -1 the draw function would have returned before coming here.\n     *\n     * @param {string} color  The font color to use\n     * @param {number} viewFontSize\n     * @param {string} initialStrokeColor\n     * @returns {Array.<string>} An array containing the font color and stroke color\n     * @private\n     */\n  }, {\n    key: \"_getColor\",\n    value: function _getColor(color, viewFontSize, initialStrokeColor) {\n      var fontColor = color || \"#000000\";\n      var strokeColor = initialStrokeColor || \"#ffffff\";\n      if (viewFontSize <= this.elementOptions.scaling.label.drawThreshold) {\n        var opacity = Math.max(0, Math.min(1, 1 - (this.elementOptions.scaling.label.drawThreshold - viewFontSize)));\n        fontColor = overrideOpacity(fontColor, opacity);\n        strokeColor = overrideOpacity(strokeColor, opacity);\n      }\n      return [fontColor, strokeColor];\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @returns {{width: number, height: number}}\n     */\n  }, {\n    key: \"getTextSize\",\n    value: function getTextSize(ctx) {\n      var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      this._processLabel(ctx, selected, hover);\n      return {\n        width: this.size.width,\n        height: this.size.height,\n        lineCount: this.lineCount\n      };\n    }\n\n    /**\n     * Get the current dimensions of the label\n     *\n     * @returns {rect}\n     */\n  }, {\n    key: \"getSize\",\n    value: function getSize() {\n      var lineMargin = 2;\n      var x = this.size.left; // default values which might be overridden below\n      var y = this.size.top - 0.5 * lineMargin; // idem\n\n      if (this.isEdgeLabel) {\n        var x2 = -this.size.width * 0.5;\n        switch (this.fontOptions.align) {\n          case \"middle\":\n            x = x2;\n            y = -this.size.height * 0.5;\n            break;\n          case \"top\":\n            x = x2;\n            y = -(this.size.height + lineMargin);\n            break;\n          case \"bottom\":\n            x = x2;\n            y = lineMargin;\n            break;\n        }\n      }\n      var ret = {\n        left: x,\n        top: y,\n        width: this.size.width,\n        height: this.size.height\n      };\n      return ret;\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @param {number} [x=0]\n     * @param {number} [y=0]\n     * @param {'middle'|'hanging'} [baseline='middle']\n     */\n  }, {\n    key: \"calculateLabelSize\",\n    value: function calculateLabelSize(ctx, selected, hover) {\n      var x = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var y = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      var baseline = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : \"middle\";\n      this._processLabel(ctx, selected, hover);\n      this.size.left = x - this.size.width * 0.5;\n      this.size.top = y - this.size.height * 0.5;\n      this.size.yLine = y + (1 - this.lineCount) * 0.5 * this.fontOptions.size;\n      if (baseline === \"hanging\") {\n        this.size.top += 0.5 * this.fontOptions.size;\n        this.size.top += 4; // distance from node, required because we use hanging. Hanging has less difference between browsers\n        this.size.yLine += 4; // distance from node\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @param {string} mod\n     * @returns {{color, size, face, mod, vadjust, strokeWidth: *, strokeColor: (*|string|allOptions.edges.font.strokeColor|{string}|allOptions.nodes.font.strokeColor|Array)}}\n     */\n  }, {\n    key: \"getFormattingValues\",\n    value: function getFormattingValues(ctx, selected, hover, mod) {\n      var getValue = function getValue(fontOptions, mod, option) {\n        if (mod === \"normal\") {\n          if (option === \"mod\") return \"\";\n          return fontOptions[option];\n        }\n        if (fontOptions[mod][option] !== undefined) {\n          // Grumbl leaving out test on undefined equals false for \"\"\n          return fontOptions[mod][option];\n        } else {\n          // Take from parent font option\n          return fontOptions[option];\n        }\n      };\n      var values = {\n        color: getValue(this.fontOptions, mod, \"color\"),\n        size: getValue(this.fontOptions, mod, \"size\"),\n        face: getValue(this.fontOptions, mod, \"face\"),\n        mod: getValue(this.fontOptions, mod, \"mod\"),\n        vadjust: getValue(this.fontOptions, mod, \"vadjust\"),\n        strokeWidth: this.fontOptions.strokeWidth,\n        strokeColor: this.fontOptions.strokeColor\n      };\n      if (selected || hover) {\n        if (mod === \"normal\" && this.fontOptions.chooser === true && this.elementOptions.labelHighlightBold) {\n          values.mod = \"bold\";\n        } else {\n          if (typeof this.fontOptions.chooser === \"function\") {\n            this.fontOptions.chooser(values, this.elementOptions.id, selected, hover);\n          }\n        }\n      }\n      var fontString = \"\";\n      if (values.mod !== undefined && values.mod !== \"\") {\n        // safeguard for undefined - this happened\n        fontString += values.mod + \" \";\n      }\n      fontString += values.size + \"px \" + values.face;\n      ctx.font = fontString.replace(/\"/g, \"\");\n      values.font = ctx.font;\n      values.height = values.size;\n      return values;\n    }\n\n    /**\n     *\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @returns {boolean}\n     */\n  }, {\n    key: \"differentState\",\n    value: function differentState(selected, hover) {\n      return selected !== this.selectedState || hover !== this.hoverState;\n    }\n\n    /**\n     * This explodes the passed text into lines and determines the width, height and number of lines.\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @param {string} inText  the text to explode\n     * @returns {{width, height, lines}|*}\n     * @private\n     */\n  }, {\n    key: \"_processLabelText\",\n    value: function _processLabelText(ctx, selected, hover, inText) {\n      var splitter = new LabelSplitter(ctx, this, selected, hover);\n      return splitter.process(inText);\n    }\n\n    /**\n     * This explodes the label string into lines and sets the width, height and number of lines.\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @private\n     */\n  }, {\n    key: \"_processLabel\",\n    value: function _processLabel(ctx, selected, hover) {\n      if (this.labelDirty === false && !this.differentState(selected, hover)) return;\n      var state = this._processLabelText(ctx, selected, hover, this.elementOptions.label);\n      if (this.fontOptions.minWdt > 0 && state.width < this.fontOptions.minWdt) {\n        state.width = this.fontOptions.minWdt;\n      }\n      this.size.labelHeight = state.height;\n      if (this.fontOptions.minHgt > 0 && state.height < this.fontOptions.minHgt) {\n        state.height = this.fontOptions.minHgt;\n      }\n      this.lines = state.lines;\n      this.lineCount = state.lines.length;\n      this.size.width = state.width;\n      this.size.height = state.height;\n      this.selectedState = selected;\n      this.hoverState = hover;\n      this.labelDirty = false;\n    }\n\n    /**\n     * Check if this label is visible\n     *\n     * @returns {boolean} true if this label will be show, false otherwise\n     */\n  }, {\n    key: \"visible\",\n    value: function visible() {\n      if (this.size.width === 0 || this.size.height === 0 || this.elementOptions.label === undefined) {\n        return false; // nothing to display\n      }\n\n      var viewFontSize = this.fontOptions.size * this.body.view.scale;\n      if (viewFontSize < this.elementOptions.scaling.label.drawThreshold - 1) {\n        return false; // Too small or too far away to show\n      }\n\n      return true;\n    }\n  }], [{\n    key: \"parseFontString\",\n    value: function parseFontString(outOptions, inOptions) {\n      if (!inOptions || typeof inOptions !== \"string\") return false;\n      var newOptionsArray = inOptions.split(\" \");\n      outOptions.size = +newOptionsArray[0].replace(\"px\", \"\");\n      outOptions.face = newOptionsArray[1];\n      outOptions.color = newOptionsArray[2];\n      return true;\n    }\n  }]);\n  return Label;\n}();\n\nvar isConstructor = isConstructor$4;\nvar tryToString = tryToString$6;\n\nvar $TypeError$1 = TypeError;\n\n// `Assert: IsConstructor(argument) is true`\nvar aConstructor$1 = function (argument) {\n  if (isConstructor(argument)) return argument;\n  throw new $TypeError$1(tryToString(argument) + ' is not a constructor');\n};\n\nvar $$6 = _export;\nvar getBuiltIn = getBuiltIn$c;\nvar apply = functionApply;\nvar bind$3 = functionBind;\nvar aConstructor = aConstructor$1;\nvar anObject$2 = anObject$d;\nvar isObject$3 = isObject$j;\nvar create$3 = objectCreate;\nvar fails$2 = fails$w;\n\nvar nativeConstruct = getBuiltIn('Reflect', 'construct');\nvar ObjectPrototype = Object.prototype;\nvar push$1 = [].push;\n\n// `Reflect.construct` method\n// https://tc39.es/ecma262/#sec-reflect.construct\n// MS Edge supports only 2 arguments and argumentsList argument is optional\n// FF Nightly sets third argument as `new.target`, but does not create `this` from it\nvar NEW_TARGET_BUG = fails$2(function () {\n  function F() { /* empty */ }\n  return !(nativeConstruct(function () { /* empty */ }, [], F) instanceof F);\n});\n\nvar ARGS_BUG = !fails$2(function () {\n  nativeConstruct(function () { /* empty */ });\n});\n\nvar FORCED$3 = NEW_TARGET_BUG || ARGS_BUG;\n\n$$6({ target: 'Reflect', stat: true, forced: FORCED$3, sham: FORCED$3 }, {\n  construct: function construct(Target, args /* , newTarget */) {\n    aConstructor(Target);\n    anObject$2(args);\n    var newTarget = arguments.length < 3 ? Target : aConstructor(arguments[2]);\n    if (ARGS_BUG && !NEW_TARGET_BUG) return nativeConstruct(Target, args, newTarget);\n    if (Target === newTarget) {\n      // w/o altered newTarget, optimization for 0-4 arguments\n      switch (args.length) {\n        case 0: return new Target();\n        case 1: return new Target(args[0]);\n        case 2: return new Target(args[0], args[1]);\n        case 3: return new Target(args[0], args[1], args[2]);\n        case 4: return new Target(args[0], args[1], args[2], args[3]);\n      }\n      // w/o altered newTarget, lot of arguments case\n      var $args = [null];\n      apply(push$1, $args, args);\n      return new (apply(bind$3, Target, $args))();\n    }\n    // with altered newTarget, not support built-in constructors\n    var proto = newTarget.prototype;\n    var instance = create$3(isObject$3(proto) ? proto : ObjectPrototype);\n    var result = apply(Target, instance, args);\n    return isObject$3(result) ? result : instance;\n  }\n});\n\nvar path$6 = path$w;\n\nvar construct$2 = path$6.Reflect.construct;\n\nvar parent$k = construct$2;\n\nvar construct$1 = parent$k;\n\nvar construct = construct$1;\n\nvar _Reflect$construct = /*@__PURE__*/getDefaultExportFromCjs(construct);\n\nvar parent$j = create$6;\n\nvar create$2 = parent$j;\n\nvar parent$i = create$2;\n\nvar create$1 = parent$i;\n\nvar create = create$1;\n\nvar _Object$create = /*@__PURE__*/getDefaultExportFromCjs(create);\n\nvar $$5 = _export;\nvar setPrototypeOf$5 = objectSetPrototypeOf;\n\n// `Object.setPrototypeOf` method\n// https://tc39.es/ecma262/#sec-object.setprototypeof\n$$5({ target: 'Object', stat: true }, {\n  setPrototypeOf: setPrototypeOf$5\n});\n\nvar path$5 = path$w;\n\nvar setPrototypeOf$4 = path$5.Object.setPrototypeOf;\n\nvar parent$h = setPrototypeOf$4;\n\nvar setPrototypeOf$3 = parent$h;\n\nvar parent$g = setPrototypeOf$3;\n\nvar setPrototypeOf$2 = parent$g;\n\nvar parent$f = setPrototypeOf$2;\n\nvar setPrototypeOf$1 = parent$f;\n\nvar setPrototypeOf = setPrototypeOf$1;\n\nvar _Object$setPrototypeOf = /*@__PURE__*/getDefaultExportFromCjs(setPrototypeOf);\n\nvar parent$e = bind$9;\n\nvar bind$2 = parent$e;\n\nvar parent$d = bind$2;\n\nvar bind$1 = parent$d;\n\nvar bind = bind$1;\n\nvar _bindInstanceProperty = /*@__PURE__*/getDefaultExportFromCjs(bind);\n\nfunction _setPrototypeOf(o, p) {\n  var _context;\n  _setPrototypeOf = _Object$setPrototypeOf ? _bindInstanceProperty(_context = _Object$setPrototypeOf).call(_context) : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = _Object$create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  _Object$defineProperty$1(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\n\nvar parent$c = getPrototypeOf$5;\n\nvar getPrototypeOf$3 = parent$c;\n\nvar parent$b = getPrototypeOf$3;\n\nvar getPrototypeOf$2 = parent$b;\n\nvar getPrototypeOf$1 = getPrototypeOf$2;\n\nvar _Object$getPrototypeOf = /*@__PURE__*/getDefaultExportFromCjs(getPrototypeOf$1);\n\nfunction _getPrototypeOf(o) {\n  var _context;\n  _getPrototypeOf = _Object$setPrototypeOf ? _bindInstanceProperty(_context = _Object$getPrototypeOf).call(_context) : function _getPrototypeOf(o) {\n    return o.__proto__ || _Object$getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\n/**\n * The Base class for all Nodes.\n */\nvar NodeBase = /*#__PURE__*/function () {\n  /**\n   * @param {object} options\n   * @param {object} body\n   * @param {Label} labelModule\n   */\n  function NodeBase(options, body, labelModule) {\n    _classCallCheck(this, NodeBase);\n    this.body = body;\n    this.labelModule = labelModule;\n    this.setOptions(options);\n    this.top = undefined;\n    this.left = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.radius = undefined;\n    this.margin = undefined;\n    this.refreshNeeded = true;\n    this.boundingBox = {\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0\n    };\n  }\n\n  /**\n   *\n   * @param {object} options\n   */\n  _createClass(NodeBase, [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.options = options;\n    }\n\n    /**\n     *\n     * @param {Label} labelModule\n     * @private\n     */\n  }, {\n    key: \"_setMargins\",\n    value: function _setMargins(labelModule) {\n      this.margin = {};\n      if (this.options.margin) {\n        if (_typeof(this.options.margin) == \"object\") {\n          this.margin.top = this.options.margin.top;\n          this.margin.right = this.options.margin.right;\n          this.margin.bottom = this.options.margin.bottom;\n          this.margin.left = this.options.margin.left;\n        } else {\n          this.margin.top = this.options.margin;\n          this.margin.right = this.options.margin;\n          this.margin.bottom = this.options.margin;\n          this.margin.left = this.options.margin;\n        }\n      }\n      labelModule.adjustSizes(this.margin);\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} angle\n     * @returns {number}\n     * @private\n     */\n  }, {\n    key: \"_distanceToBorder\",\n    value: function _distanceToBorder(ctx, angle) {\n      var borderWidth = this.options.borderWidth;\n      if (ctx) {\n        this.resize(ctx);\n      }\n      return Math.min(Math.abs(this.width / 2 / Math.cos(angle)), Math.abs(this.height / 2 / Math.sin(angle))) + borderWidth;\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowOptions} values\n     */\n  }, {\n    key: \"enableShadow\",\n    value: function enableShadow(ctx, values) {\n      if (values.shadow) {\n        ctx.shadowColor = values.shadowColor;\n        ctx.shadowBlur = values.shadowSize;\n        ctx.shadowOffsetX = values.shadowX;\n        ctx.shadowOffsetY = values.shadowY;\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowOptions} values\n     */\n  }, {\n    key: \"disableShadow\",\n    value: function disableShadow(ctx, values) {\n      if (values.shadow) {\n        ctx.shadowColor = \"rgba(0,0,0,0)\";\n        ctx.shadowBlur = 0;\n        ctx.shadowOffsetX = 0;\n        ctx.shadowOffsetY = 0;\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowOptions} values\n     */\n  }, {\n    key: \"enableBorderDashes\",\n    value: function enableBorderDashes(ctx, values) {\n      if (values.borderDashes !== false) {\n        if (ctx.setLineDash !== undefined) {\n          var dashes = values.borderDashes;\n          if (dashes === true) {\n            dashes = [5, 15];\n          }\n          ctx.setLineDash(dashes);\n        } else {\n          console.warn(\"setLineDash is not supported in this browser. The dashed borders cannot be used.\");\n          this.options.shapeProperties.borderDashes = false;\n          values.borderDashes = false;\n        }\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowOptions} values\n     */\n  }, {\n    key: \"disableBorderDashes\",\n    value: function disableBorderDashes(ctx, values) {\n      if (values.borderDashes !== false) {\n        if (ctx.setLineDash !== undefined) {\n          ctx.setLineDash([0]);\n        } else {\n          console.warn(\"setLineDash is not supported in this browser. The dashed borders cannot be used.\");\n          this.options.shapeProperties.borderDashes = false;\n          values.borderDashes = false;\n        }\n      }\n    }\n\n    /**\n     * Determine if the shape of a node needs to be recalculated.\n     *\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @returns {boolean}\n     * @protected\n     */\n  }, {\n    key: \"needsRefresh\",\n    value: function needsRefresh(selected, hover) {\n      if (this.refreshNeeded === true) {\n        // This is probably not the best location to reset this member.\n        // However, in the current logic, it is the most convenient one.\n        this.refreshNeeded = false;\n        return true;\n      }\n      return this.width === undefined || this.labelModule.differentState(selected, hover);\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowOptions} values\n     */\n  }, {\n    key: \"initContextForDraw\",\n    value: function initContextForDraw(ctx, values) {\n      var borderWidth = values.borderWidth / this.body.view.scale;\n      ctx.lineWidth = Math.min(this.width, borderWidth);\n      ctx.strokeStyle = values.borderColor;\n      ctx.fillStyle = values.color;\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowOptions} values\n     */\n  }, {\n    key: \"performStroke\",\n    value: function performStroke(ctx, values) {\n      var borderWidth = values.borderWidth / this.body.view.scale;\n\n      //draw dashed border if enabled, save and restore is required for firefox not to crash on unix.\n      ctx.save();\n      // if borders are zero width, they will be drawn with width 1 by default. This prevents that\n      if (borderWidth > 0) {\n        this.enableBorderDashes(ctx, values);\n        //draw the border\n        ctx.stroke();\n        //disable dashed border for other elements\n        this.disableBorderDashes(ctx, values);\n      }\n      ctx.restore();\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowOptions} values\n     */\n  }, {\n    key: \"performFill\",\n    value: function performFill(ctx, values) {\n      ctx.save();\n      ctx.fillStyle = values.color;\n      // draw shadow if enabled\n      this.enableShadow(ctx, values);\n      // draw the background\n      _fillInstanceProperty(ctx).call(ctx);\n      // disable shadows for other elements.\n      this.disableShadow(ctx, values);\n      ctx.restore();\n      this.performStroke(ctx, values);\n    }\n\n    /**\n     *\n     * @param {number} margin\n     * @private\n     */\n  }, {\n    key: \"_addBoundingBoxMargin\",\n    value: function _addBoundingBoxMargin(margin) {\n      this.boundingBox.left -= margin;\n      this.boundingBox.top -= margin;\n      this.boundingBox.bottom += margin;\n      this.boundingBox.right += margin;\n    }\n\n    /**\n     * Actual implementation of this method call.\n     *\n     * Doing it like this makes it easier to override\n     * in the child classes.\n     *\n     * @param {number} x width\n     * @param {number} y height\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @private\n     */\n  }, {\n    key: \"_updateBoundingBox\",\n    value: function _updateBoundingBox(x, y, ctx, selected, hover) {\n      if (ctx !== undefined) {\n        this.resize(ctx, selected, hover);\n      }\n      this.left = x - this.width / 2;\n      this.top = y - this.height / 2;\n      this.boundingBox.left = this.left;\n      this.boundingBox.top = this.top;\n      this.boundingBox.bottom = this.top + this.height;\n      this.boundingBox.right = this.left + this.width;\n    }\n\n    /**\n     * Default implementation of this method call.\n     * This acts as a stub which can be overridden.\n     *\n     * @param {number} x width\n     * @param {number} y height\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {boolean} selected\n     * @param {boolean} hover\n     */\n  }, {\n    key: \"updateBoundingBox\",\n    value: function updateBoundingBox(x, y, ctx, selected, hover) {\n      this._updateBoundingBox(x, y, ctx, selected, hover);\n    }\n\n    /**\n     * Determine the dimensions to use for nodes with an internal label\n     *\n     * Currently, these are: Circle, Ellipse, Database, Box\n     * The other nodes have external labels, and will not call this method\n     *\n     * If there is no label, decent default values are supplied.\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {boolean} [selected]\n     * @param {boolean} [hover]\n     * @returns {{width:number, height:number}}\n     */\n  }, {\n    key: \"getDimensionsFromLabel\",\n    value: function getDimensionsFromLabel(ctx, selected, hover) {\n      // NOTE: previously 'textSize' was not put in 'this' for Ellipse\n      // TODO: examine the consequences.\n      this.textSize = this.labelModule.getTextSize(ctx, selected, hover);\n      var width = this.textSize.width;\n      var height = this.textSize.height;\n      var DEFAULT_SIZE = 14;\n      if (width === 0) {\n        // This happens when there is no label text set\n        width = DEFAULT_SIZE; // use a decent default\n        height = DEFAULT_SIZE; // if width zero, then height also always zero\n      }\n\n      return {\n        width: width,\n        height: height\n      };\n    }\n  }]);\n  return NodeBase;\n}();\n\nfunction _createSuper$s(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$s(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct$s() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * A Box Node/Cluster shape.\n *\n * @augments NodeBase\n */\nvar Box$1 = /*#__PURE__*/function (_NodeBase) {\n  _inherits(Box, _NodeBase);\n  var _super = _createSuper$s(Box);\n  /**\n   * @param {object} options\n   * @param {object} body\n   * @param {Label} labelModule\n   */\n  function Box(options, body, labelModule) {\n    var _this;\n    _classCallCheck(this, Box);\n    _this = _super.call(this, options, body, labelModule);\n    _this._setMargins(labelModule);\n    return _this;\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {boolean} [selected]\n   * @param {boolean} [hover]\n   */\n  _createClass(Box, [{\n    key: \"resize\",\n    value: function resize(ctx) {\n      var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selected;\n      var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hover;\n      if (this.needsRefresh(selected, hover)) {\n        var dimensions = this.getDimensionsFromLabel(ctx, selected, hover);\n        this.width = dimensions.width + this.margin.right + this.margin.left;\n        this.height = dimensions.height + this.margin.top + this.margin.bottom;\n        this.radius = this.width / 2;\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} x width\n     * @param {number} y height\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @param {ArrowOptions} values\n     */\n  }, {\n    key: \"draw\",\n    value: function draw(ctx, x, y, selected, hover, values) {\n      this.resize(ctx, selected, hover);\n      this.left = x - this.width / 2;\n      this.top = y - this.height / 2;\n      this.initContextForDraw(ctx, values);\n      drawRoundRect(ctx, this.left, this.top, this.width, this.height, values.borderRadius);\n      this.performFill(ctx, values);\n      this.updateBoundingBox(x, y, ctx, selected, hover);\n      this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, selected, hover);\n    }\n\n    /**\n     *\n     * @param {number} x width\n     * @param {number} y height\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {boolean} selected\n     * @param {boolean} hover\n     */\n  }, {\n    key: \"updateBoundingBox\",\n    value: function updateBoundingBox(x, y, ctx, selected, hover) {\n      this._updateBoundingBox(x, y, ctx, selected, hover);\n      var borderRadius = this.options.shapeProperties.borderRadius; // only effective for box\n      this._addBoundingBoxMargin(borderRadius);\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} angle\n     * @returns {number}\n     */\n  }, {\n    key: \"distanceToBorder\",\n    value: function distanceToBorder(ctx, angle) {\n      if (ctx) {\n        this.resize(ctx);\n      }\n      var borderWidth = this.options.borderWidth;\n      return Math.min(Math.abs(this.width / 2 / Math.cos(angle)), Math.abs(this.height / 2 / Math.sin(angle))) + borderWidth;\n    }\n  }]);\n  return Box;\n}(NodeBase);\n\nfunction _createSuper$r(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$r(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct$r() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * NOTE: This is a bad base class\n *\n * Child classes are:\n *\n *   Image       - uses *only* image methods\n *   Circle      - uses *only* _drawRawCircle\n *   CircleImage - uses all\n *\n * TODO: Refactor, move _drawRawCircle to different module, derive Circle from NodeBase\n *       Rename this to ImageBase\n *       Consolidate common code in Image and CircleImage to base class\n *\n * @augments NodeBase\n */\nvar CircleImageBase = /*#__PURE__*/function (_NodeBase) {\n  _inherits(CircleImageBase, _NodeBase);\n  var _super = _createSuper$r(CircleImageBase);\n  /**\n   * @param {object} options\n   * @param {object} body\n   * @param {Label} labelModule\n   */\n  function CircleImageBase(options, body, labelModule) {\n    var _this;\n    _classCallCheck(this, CircleImageBase);\n    _this = _super.call(this, options, body, labelModule);\n    _this.labelOffset = 0;\n    _this.selected = false;\n    return _this;\n  }\n\n  /**\n   *\n   * @param {object} options\n   * @param {object} [imageObj]\n   * @param {object} [imageObjAlt]\n   */\n  _createClass(CircleImageBase, [{\n    key: \"setOptions\",\n    value: function setOptions(options, imageObj, imageObjAlt) {\n      this.options = options;\n      if (!(imageObj === undefined && imageObjAlt === undefined)) {\n        this.setImages(imageObj, imageObjAlt);\n      }\n    }\n\n    /**\n     * Set the images for this node.\n     *\n     * The images can be updated after the initial setting of options;\n     * therefore, this method needs to be reentrant.\n     *\n     * For correct working in error cases, it is necessary to properly set\n     * field 'nodes.brokenImage' in the options.\n     *\n     * @param {Image} imageObj  required; main image to show for this node\n     * @param {Image|undefined} imageObjAlt optional; image to show when node is selected\n     */\n  }, {\n    key: \"setImages\",\n    value: function setImages(imageObj, imageObjAlt) {\n      if (imageObjAlt && this.selected) {\n        this.imageObj = imageObjAlt;\n        this.imageObjAlt = imageObj;\n      } else {\n        this.imageObj = imageObj;\n        this.imageObjAlt = imageObjAlt;\n      }\n    }\n\n    /**\n     * Set selection and switch between the base and the selected image.\n     *\n     * Do the switch only if imageObjAlt exists.\n     *\n     * @param {boolean} selected value of new selected state for current node\n     */\n  }, {\n    key: \"switchImages\",\n    value: function switchImages(selected) {\n      var selection_changed = selected && !this.selected || !selected && this.selected;\n      this.selected = selected; // Remember new selection\n\n      if (this.imageObjAlt !== undefined && selection_changed) {\n        var imageTmp = this.imageObj;\n        this.imageObj = this.imageObjAlt;\n        this.imageObjAlt = imageTmp;\n      }\n    }\n\n    /**\n     * Returns Image Padding from node options\n     *\n     * @returns {{top: number,left: number,bottom: number,right: number}} image padding inside this shape\n     * @private\n     */\n  }, {\n    key: \"_getImagePadding\",\n    value: function _getImagePadding() {\n      var imgPadding = {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      };\n      if (this.options.imagePadding) {\n        var optImgPadding = this.options.imagePadding;\n        if (_typeof(optImgPadding) == \"object\") {\n          imgPadding.top = optImgPadding.top;\n          imgPadding.right = optImgPadding.right;\n          imgPadding.bottom = optImgPadding.bottom;\n          imgPadding.left = optImgPadding.left;\n        } else {\n          imgPadding.top = optImgPadding;\n          imgPadding.right = optImgPadding;\n          imgPadding.bottom = optImgPadding;\n          imgPadding.left = optImgPadding;\n        }\n      }\n      return imgPadding;\n    }\n\n    /**\n     * Adjust the node dimensions for a loaded image.\n     *\n     * Pre: this.imageObj is valid\n     */\n  }, {\n    key: \"_resizeImage\",\n    value: function _resizeImage() {\n      var width, height;\n      if (this.options.shapeProperties.useImageSize === false) {\n        // Use the size property\n        var ratio_width = 1;\n        var ratio_height = 1;\n\n        // Only calculate the proper ratio if both width and height not zero\n        if (this.imageObj.width && this.imageObj.height) {\n          if (this.imageObj.width > this.imageObj.height) {\n            ratio_width = this.imageObj.width / this.imageObj.height;\n          } else {\n            ratio_height = this.imageObj.height / this.imageObj.width;\n          }\n        }\n        width = this.options.size * 2 * ratio_width;\n        height = this.options.size * 2 * ratio_height;\n      } else {\n        // Use the image size with image padding\n        var imgPadding = this._getImagePadding();\n        width = this.imageObj.width + imgPadding.left + imgPadding.right;\n        height = this.imageObj.height + imgPadding.top + imgPadding.bottom;\n      }\n      this.width = width;\n      this.height = height;\n      this.radius = 0.5 * this.width;\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} x width\n     * @param {number} y height\n     * @param {ArrowOptions} values\n     * @private\n     */\n  }, {\n    key: \"_drawRawCircle\",\n    value: function _drawRawCircle(ctx, x, y, values) {\n      this.initContextForDraw(ctx, values);\n      drawCircle(ctx, x, y, values.size);\n      this.performFill(ctx, values);\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowOptions} values\n     * @private\n     */\n  }, {\n    key: \"_drawImageAtPosition\",\n    value: function _drawImageAtPosition(ctx, values) {\n      if (this.imageObj.width != 0) {\n        // draw the image\n        ctx.globalAlpha = values.opacity !== undefined ? values.opacity : 1;\n\n        // draw shadow if enabled\n        this.enableShadow(ctx, values);\n        var factor = 1;\n        if (this.options.shapeProperties.interpolation === true) {\n          factor = this.imageObj.width / this.width / this.body.view.scale;\n        }\n        var imgPadding = this._getImagePadding();\n        var imgPosLeft = this.left + imgPadding.left;\n        var imgPosTop = this.top + imgPadding.top;\n        var imgWidth = this.width - imgPadding.left - imgPadding.right;\n        var imgHeight = this.height - imgPadding.top - imgPadding.bottom;\n        this.imageObj.drawImageAtPosition(ctx, factor, imgPosLeft, imgPosTop, imgWidth, imgHeight);\n\n        // disable shadows for other elements.\n        this.disableShadow(ctx, values);\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} x width\n     * @param {number} y height\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @private\n     */\n  }, {\n    key: \"_drawImageLabel\",\n    value: function _drawImageLabel(ctx, x, y, selected, hover) {\n      var offset = 0;\n      if (this.height !== undefined) {\n        offset = this.height * 0.5;\n        var labelDimensions = this.labelModule.getTextSize(ctx, selected, hover);\n        if (labelDimensions.lineCount >= 1) {\n          offset += labelDimensions.height / 2;\n        }\n      }\n      var yLabel = y + offset;\n      if (this.options.label) {\n        this.labelOffset = offset;\n      }\n      this.labelModule.draw(ctx, x, yLabel, selected, hover, \"hanging\");\n    }\n  }]);\n  return CircleImageBase;\n}(NodeBase);\n\nfunction _createSuper$q(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$q(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct$q() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * A Circle Node/Cluster shape.\n *\n * @augments CircleImageBase\n */\nvar Circle$1 = /*#__PURE__*/function (_CircleImageBase) {\n  _inherits(Circle, _CircleImageBase);\n  var _super = _createSuper$q(Circle);\n  /**\n   * @param {object} options\n   * @param {object} body\n   * @param {Label} labelModule\n   */\n  function Circle(options, body, labelModule) {\n    var _this;\n    _classCallCheck(this, Circle);\n    _this = _super.call(this, options, body, labelModule);\n    _this._setMargins(labelModule);\n    return _this;\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {boolean} [selected]\n   * @param {boolean} [hover]\n   */\n  _createClass(Circle, [{\n    key: \"resize\",\n    value: function resize(ctx) {\n      var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selected;\n      var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hover;\n      if (this.needsRefresh(selected, hover)) {\n        var dimensions = this.getDimensionsFromLabel(ctx, selected, hover);\n        var diameter = Math.max(dimensions.width + this.margin.right + this.margin.left, dimensions.height + this.margin.top + this.margin.bottom);\n        this.options.size = diameter / 2; // NOTE: this size field only set here, not in Ellipse, Database, Box\n        this.width = diameter;\n        this.height = diameter;\n        this.radius = this.width / 2;\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} x width\n     * @param {number} y height\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @param {ArrowOptions} values\n     */\n  }, {\n    key: \"draw\",\n    value: function draw(ctx, x, y, selected, hover, values) {\n      this.resize(ctx, selected, hover);\n      this.left = x - this.width / 2;\n      this.top = y - this.height / 2;\n      this._drawRawCircle(ctx, x, y, values);\n      this.updateBoundingBox(x, y);\n      this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, y, selected, hover);\n    }\n\n    /**\n     *\n     * @param {number} x width\n     * @param {number} y height\n     */\n  }, {\n    key: \"updateBoundingBox\",\n    value: function updateBoundingBox(x, y) {\n      this.boundingBox.top = y - this.options.size;\n      this.boundingBox.left = x - this.options.size;\n      this.boundingBox.right = x + this.options.size;\n      this.boundingBox.bottom = y + this.options.size;\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @returns {number}\n     */\n  }, {\n    key: \"distanceToBorder\",\n    value: function distanceToBorder(ctx) {\n      if (ctx) {\n        this.resize(ctx);\n      }\n      return this.width * 0.5;\n    }\n  }]);\n  return Circle;\n}(CircleImageBase);\n\nfunction _createSuper$p(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$p(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct$p() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * A CircularImage Node/Cluster shape.\n *\n * @augments CircleImageBase\n */\nvar CircularImage = /*#__PURE__*/function (_CircleImageBase) {\n  _inherits(CircularImage, _CircleImageBase);\n  var _super = _createSuper$p(CircularImage);\n  /**\n   * @param {object} options\n   * @param {object} body\n   * @param {Label} labelModule\n   * @param {Image} imageObj\n   * @param {Image} imageObjAlt\n   */\n  function CircularImage(options, body, labelModule, imageObj, imageObjAlt) {\n    var _this;\n    _classCallCheck(this, CircularImage);\n    _this = _super.call(this, options, body, labelModule);\n    _this.setImages(imageObj, imageObjAlt);\n    return _this;\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {boolean} [selected]\n   * @param {boolean} [hover]\n   */\n  _createClass(CircularImage, [{\n    key: \"resize\",\n    value: function resize(ctx) {\n      var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selected;\n      var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hover;\n      var imageAbsent = this.imageObj.src === undefined || this.imageObj.width === undefined || this.imageObj.height === undefined;\n      if (imageAbsent) {\n        var diameter = this.options.size * 2;\n        this.width = diameter;\n        this.height = diameter;\n        this.radius = 0.5 * this.width;\n        return;\n      }\n\n      // At this point, an image is present, i.e. this.imageObj is valid.\n      if (this.needsRefresh(selected, hover)) {\n        this._resizeImage();\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} x width\n     * @param {number} y height\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @param {ArrowOptions} values\n     */\n  }, {\n    key: \"draw\",\n    value: function draw(ctx, x, y, selected, hover, values) {\n      this.switchImages(selected);\n      this.resize();\n      var labelX = x,\n        labelY = y;\n      if (this.options.shapeProperties.coordinateOrigin === \"top-left\") {\n        this.left = x;\n        this.top = y;\n        labelX += this.width / 2;\n        labelY += this.height / 2;\n      } else {\n        this.left = x - this.width / 2;\n        this.top = y - this.height / 2;\n      }\n\n      // draw the background circle. IMPORTANT: the stroke in this method is used by the clip method below.\n      this._drawRawCircle(ctx, labelX, labelY, values);\n\n      // now we draw in the circle, we save so we can revert the clip operation after drawing.\n      ctx.save();\n      // clip is used to use the stroke in drawRawCircle as an area that we can draw in.\n      ctx.clip();\n      // draw the image\n      this._drawImageAtPosition(ctx, values);\n      // restore so we can again draw on the full canvas\n      ctx.restore();\n      this._drawImageLabel(ctx, labelX, labelY, selected, hover);\n      this.updateBoundingBox(x, y);\n    }\n\n    // TODO: compare with Circle.updateBoundingBox(), consolidate? More stuff is happening here\n    /**\n     *\n     * @param {number} x width\n     * @param {number} y height\n     */\n  }, {\n    key: \"updateBoundingBox\",\n    value: function updateBoundingBox(x, y) {\n      if (this.options.shapeProperties.coordinateOrigin === \"top-left\") {\n        this.boundingBox.top = y;\n        this.boundingBox.left = x;\n        this.boundingBox.right = x + this.options.size * 2;\n        this.boundingBox.bottom = y + this.options.size * 2;\n      } else {\n        this.boundingBox.top = y - this.options.size;\n        this.boundingBox.left = x - this.options.size;\n        this.boundingBox.right = x + this.options.size;\n        this.boundingBox.bottom = y + this.options.size;\n      }\n\n      // TODO: compare with Image.updateBoundingBox(), consolidate?\n      this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);\n      this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);\n      this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelOffset);\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @returns {number}\n     */\n  }, {\n    key: \"distanceToBorder\",\n    value: function distanceToBorder(ctx) {\n      if (ctx) {\n        this.resize(ctx);\n      }\n      return this.width * 0.5;\n    }\n  }]);\n  return CircularImage;\n}(CircleImageBase);\n\nfunction _createSuper$o(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$o(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct$o() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * Base class for constructing Node/Cluster Shapes.\n *\n * @augments NodeBase\n */\nvar ShapeBase = /*#__PURE__*/function (_NodeBase) {\n  _inherits(ShapeBase, _NodeBase);\n  var _super = _createSuper$o(ShapeBase);\n  /**\n   * @param {object} options\n   * @param {object} body\n   * @param {Label} labelModule\n   */\n  function ShapeBase(options, body, labelModule) {\n    _classCallCheck(this, ShapeBase);\n    return _super.call(this, options, body, labelModule);\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {boolean} [selected]\n   * @param {boolean} [hover]\n   * @param {object} [values={size: this.options.size}]\n   */\n  _createClass(ShapeBase, [{\n    key: \"resize\",\n    value: function resize(ctx) {\n      var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selected;\n      var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hover;\n      var values = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n        size: this.options.size\n      };\n      if (this.needsRefresh(selected, hover)) {\n        var _this$customSizeWidth, _this$customSizeHeigh;\n        this.labelModule.getTextSize(ctx, selected, hover);\n        var size = 2 * values.size;\n        this.width = (_this$customSizeWidth = this.customSizeWidth) !== null && _this$customSizeWidth !== void 0 ? _this$customSizeWidth : size;\n        this.height = (_this$customSizeHeigh = this.customSizeHeight) !== null && _this$customSizeHeigh !== void 0 ? _this$customSizeHeigh : size;\n        this.radius = 0.5 * this.width;\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {string} shape\n     * @param {number} sizeMultiplier - Unused! TODO: Remove next major release\n     * @param {number} x\n     * @param {number} y\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @param {ArrowOptions} values\n     * @private\n     * @returns {object} Callbacks to draw later on higher layers.\n     */\n  }, {\n    key: \"_drawShape\",\n    value: function _drawShape(ctx, shape, sizeMultiplier, x, y, selected, hover, values) {\n      var _this = this;\n      this.resize(ctx, selected, hover, values);\n      this.left = x - this.width / 2;\n      this.top = y - this.height / 2;\n      this.initContextForDraw(ctx, values);\n      getShape(shape)(ctx, x, y, values.size);\n      this.performFill(ctx, values);\n      if (this.options.icon !== undefined) {\n        if (this.options.icon.code !== undefined) {\n          ctx.font = (selected ? \"bold \" : \"\") + this.height / 2 + \"px \" + (this.options.icon.face || \"FontAwesome\");\n          ctx.fillStyle = this.options.icon.color || \"black\";\n          ctx.textAlign = \"center\";\n          ctx.textBaseline = \"middle\";\n          ctx.fillText(this.options.icon.code, x, y);\n        }\n      }\n      return {\n        drawExternalLabel: function drawExternalLabel() {\n          if (_this.options.label !== undefined) {\n            // Need to call following here in order to ensure value for\n            // `this.labelModule.size.height`.\n            _this.labelModule.calculateLabelSize(ctx, selected, hover, x, y, \"hanging\");\n            var yLabel = y + 0.5 * _this.height + 0.5 * _this.labelModule.size.height;\n            _this.labelModule.draw(ctx, x, yLabel, selected, hover, \"hanging\");\n          }\n          _this.updateBoundingBox(x, y);\n        }\n      };\n    }\n\n    /**\n     *\n     * @param {number} x\n     * @param {number} y\n     */\n  }, {\n    key: \"updateBoundingBox\",\n    value: function updateBoundingBox(x, y) {\n      this.boundingBox.top = y - this.options.size;\n      this.boundingBox.left = x - this.options.size;\n      this.boundingBox.right = x + this.options.size;\n      this.boundingBox.bottom = y + this.options.size;\n      if (this.options.label !== undefined && this.labelModule.size.width > 0) {\n        this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);\n        this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);\n        this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelModule.size.height);\n      }\n    }\n  }]);\n  return ShapeBase;\n}(NodeBase);\n\nfunction ownKeys$3(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor$1(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$3(e) { for (var r = 1; r < arguments.length; r++) { var _context, _context2; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context = ownKeys$3(Object(t), !0)).call(_context, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context2 = ownKeys$3(Object(t))).call(_context2, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor$1(t, r)); }); } return e; }\nfunction _createSuper$n(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$n(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct$n() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * A CustomShape Node/Cluster shape.\n *\n * @augments ShapeBase\n */\nvar CustomShape = /*#__PURE__*/function (_ShapeBase) {\n  _inherits(CustomShape, _ShapeBase);\n  var _super = _createSuper$n(CustomShape);\n  /**\n   * @param {object} options\n   * @param {object} body\n   * @param {Label} labelModule\n   * @param {Function} ctxRenderer\n   */\n  function CustomShape(options, body, labelModule, ctxRenderer) {\n    var _this;\n    _classCallCheck(this, CustomShape);\n    _this = _super.call(this, options, body, labelModule, ctxRenderer);\n    _this.ctxRenderer = ctxRenderer;\n    return _this;\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {number} x width\n   * @param {number} y height\n   * @param {boolean} selected\n   * @param {boolean} hover\n   * @param {ArrowOptions} values\n   * @returns {object} Callbacks to draw later on different layers.\n   */\n  _createClass(CustomShape, [{\n    key: \"draw\",\n    value: function draw(ctx, x, y, selected, hover, values) {\n      this.resize(ctx, selected, hover, values);\n      this.left = x - this.width / 2;\n      this.top = y - this.height / 2;\n\n      // Guard right away because someone may just draw in the function itself.\n      ctx.save();\n      var drawLater = this.ctxRenderer({\n        ctx: ctx,\n        id: this.options.id,\n        x: x,\n        y: y,\n        state: {\n          selected: selected,\n          hover: hover\n        },\n        style: _objectSpread$3({}, values),\n        label: this.options.label\n      });\n      // Render the node shape bellow arrows.\n      if (drawLater.drawNode != null) {\n        drawLater.drawNode();\n      }\n      ctx.restore();\n      if (drawLater.drawExternalLabel) {\n        // Guard the external label (above arrows) drawing function.\n        var drawExternalLabel = drawLater.drawExternalLabel;\n        drawLater.drawExternalLabel = function () {\n          ctx.save();\n          drawExternalLabel();\n          ctx.restore();\n        };\n      }\n      if (drawLater.nodeDimensions) {\n        this.customSizeWidth = drawLater.nodeDimensions.width;\n        this.customSizeHeight = drawLater.nodeDimensions.height;\n      }\n      return drawLater;\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} angle\n     * @returns {number}\n     */\n  }, {\n    key: \"distanceToBorder\",\n    value: function distanceToBorder(ctx, angle) {\n      return this._distanceToBorder(ctx, angle);\n    }\n  }]);\n  return CustomShape;\n}(ShapeBase);\n\nfunction _createSuper$m(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$m(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct$m() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * A Database Node/Cluster shape.\n *\n * @augments NodeBase\n */\nvar Database = /*#__PURE__*/function (_NodeBase) {\n  _inherits(Database, _NodeBase);\n  var _super = _createSuper$m(Database);\n  /**\n   * @param {object} options\n   * @param {object} body\n   * @param {Label} labelModule\n   */\n  function Database(options, body, labelModule) {\n    var _this;\n    _classCallCheck(this, Database);\n    _this = _super.call(this, options, body, labelModule);\n    _this._setMargins(labelModule);\n    return _this;\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {boolean} selected\n   * @param {boolean} hover\n   */\n  _createClass(Database, [{\n    key: \"resize\",\n    value: function resize(ctx, selected, hover) {\n      if (this.needsRefresh(selected, hover)) {\n        var dimensions = this.getDimensionsFromLabel(ctx, selected, hover);\n        var size = dimensions.width + this.margin.right + this.margin.left;\n        this.width = size;\n        this.height = size;\n        this.radius = this.width / 2;\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} x width\n     * @param {number} y height\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @param {ArrowOptions} values\n     */\n  }, {\n    key: \"draw\",\n    value: function draw(ctx, x, y, selected, hover, values) {\n      this.resize(ctx, selected, hover);\n      this.left = x - this.width / 2;\n      this.top = y - this.height / 2;\n      this.initContextForDraw(ctx, values);\n      drawDatabase(ctx, x - this.width / 2, y - this.height / 2, this.width, this.height);\n      this.performFill(ctx, values);\n      this.updateBoundingBox(x, y, ctx, selected, hover);\n      this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, selected, hover);\n    }\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} angle\n     * @returns {number}\n     */\n  }, {\n    key: \"distanceToBorder\",\n    value: function distanceToBorder(ctx, angle) {\n      return this._distanceToBorder(ctx, angle);\n    }\n  }]);\n  return Database;\n}(NodeBase);\n\nfunction _createSuper$l(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$l(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct$l() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * A Diamond Node/Cluster shape.\n *\n * @augments ShapeBase\n */\nvar Diamond$1 = /*#__PURE__*/function (_ShapeBase) {\n  _inherits(Diamond, _ShapeBase);\n  var _super = _createSuper$l(Diamond);\n  /**\n   * @param {object} options\n   * @param {object} body\n   * @param {Label} labelModule\n   */\n  function Diamond(options, body, labelModule) {\n    _classCallCheck(this, Diamond);\n    return _super.call(this, options, body, labelModule);\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {number} x width\n   * @param {number} y height\n   * @param {boolean} selected\n   * @param {boolean} hover\n   * @param {ArrowOptions} values\n   * @returns {object} Callbacks to draw later on higher layers.\n   */\n  _createClass(Diamond, [{\n    key: \"draw\",\n    value: function draw(ctx, x, y, selected, hover, values) {\n      return this._drawShape(ctx, \"diamond\", 4, x, y, selected, hover, values);\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} angle\n     * @returns {number}\n     */\n  }, {\n    key: \"distanceToBorder\",\n    value: function distanceToBorder(ctx, angle) {\n      return this._distanceToBorder(ctx, angle);\n    }\n  }]);\n  return Diamond;\n}(ShapeBase);\n\nfunction _createSuper$k(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$k(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct$k() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * A Dot Node/Cluster shape.\n *\n * @augments ShapeBase\n */\nvar Dot = /*#__PURE__*/function (_ShapeBase) {\n  _inherits(Dot, _ShapeBase);\n  var _super = _createSuper$k(Dot);\n  /**\n   * @param {object} options\n   * @param {object} body\n   * @param {Label} labelModule\n   */\n  function Dot(options, body, labelModule) {\n    _classCallCheck(this, Dot);\n    return _super.call(this, options, body, labelModule);\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {number} x width\n   * @param {number} y height\n   * @param {boolean} selected\n   * @param {boolean} hover\n   * @param {ArrowOptions} values\n   * @returns {object} Callbacks to draw later on higher layers.\n   */\n  _createClass(Dot, [{\n    key: \"draw\",\n    value: function draw(ctx, x, y, selected, hover, values) {\n      return this._drawShape(ctx, \"circle\", 2, x, y, selected, hover, values);\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @returns {number}\n     */\n  }, {\n    key: \"distanceToBorder\",\n    value: function distanceToBorder(ctx) {\n      if (ctx) {\n        this.resize(ctx);\n      }\n      return this.options.size;\n    }\n  }]);\n  return Dot;\n}(ShapeBase);\n\nfunction _createSuper$j(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$j(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct$j() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * Am Ellipse Node/Cluster shape.\n *\n * @augments NodeBase\n */\nvar Ellipse = /*#__PURE__*/function (_NodeBase) {\n  _inherits(Ellipse, _NodeBase);\n  var _super = _createSuper$j(Ellipse);\n  /**\n   * @param {object} options\n   * @param {object} body\n   * @param {Label} labelModule\n   */\n  function Ellipse(options, body, labelModule) {\n    _classCallCheck(this, Ellipse);\n    return _super.call(this, options, body, labelModule);\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {boolean} [selected]\n   * @param {boolean} [hover]\n   */\n  _createClass(Ellipse, [{\n    key: \"resize\",\n    value: function resize(ctx) {\n      var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selected;\n      var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hover;\n      if (this.needsRefresh(selected, hover)) {\n        var dimensions = this.getDimensionsFromLabel(ctx, selected, hover);\n        this.height = dimensions.height * 2;\n        this.width = dimensions.width + dimensions.height;\n        this.radius = 0.5 * this.width;\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} x width\n     * @param {number} y height\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @param {ArrowOptions} values\n     */\n  }, {\n    key: \"draw\",\n    value: function draw(ctx, x, y, selected, hover, values) {\n      this.resize(ctx, selected, hover);\n      this.left = x - this.width * 0.5;\n      this.top = y - this.height * 0.5;\n      this.initContextForDraw(ctx, values);\n      drawEllipse(ctx, this.left, this.top, this.width, this.height);\n      this.performFill(ctx, values);\n      this.updateBoundingBox(x, y, ctx, selected, hover);\n      this.labelModule.draw(ctx, x, y, selected, hover);\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} angle\n     * @returns {number}\n     */\n  }, {\n    key: \"distanceToBorder\",\n    value: function distanceToBorder(ctx, angle) {\n      if (ctx) {\n        this.resize(ctx);\n      }\n      var a = this.width * 0.5;\n      var b = this.height * 0.5;\n      var w = Math.sin(angle) * a;\n      var h = Math.cos(angle) * b;\n      return a * b / Math.sqrt(w * w + h * h);\n    }\n  }]);\n  return Ellipse;\n}(NodeBase);\n\nfunction _createSuper$i(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$i(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct$i() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * An icon replacement for the default Node shape.\n *\n * @augments NodeBase\n */\nvar Icon = /*#__PURE__*/function (_NodeBase) {\n  _inherits(Icon, _NodeBase);\n  var _super = _createSuper$i(Icon);\n  /**\n   * @param {object} options\n   * @param {object} body\n   * @param {Label} labelModule\n   */\n  function Icon(options, body, labelModule) {\n    var _this;\n    _classCallCheck(this, Icon);\n    _this = _super.call(this, options, body, labelModule);\n    _this._setMargins(labelModule);\n    return _this;\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx - Unused.\n   * @param {boolean} [selected]\n   * @param {boolean} [hover]\n   */\n  _createClass(Icon, [{\n    key: \"resize\",\n    value: function resize(ctx, selected, hover) {\n      if (this.needsRefresh(selected, hover)) {\n        this.iconSize = {\n          width: Number(this.options.icon.size),\n          height: Number(this.options.icon.size)\n        };\n        this.width = this.iconSize.width + this.margin.right + this.margin.left;\n        this.height = this.iconSize.height + this.margin.top + this.margin.bottom;\n        this.radius = 0.5 * this.width;\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} x width\n     * @param {number} y height\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @param {ArrowOptions} values\n     * @returns {object} Callbacks to draw later on higher layers.\n     */\n  }, {\n    key: \"draw\",\n    value: function draw(ctx, x, y, selected, hover, values) {\n      var _this2 = this;\n      this.resize(ctx, selected, hover);\n      this.options.icon.size = this.options.icon.size || 50;\n      this.left = x - this.width / 2;\n      this.top = y - this.height / 2;\n      this._icon(ctx, x, y, selected, hover, values);\n      return {\n        drawExternalLabel: function drawExternalLabel() {\n          if (_this2.options.label !== undefined) {\n            var iconTextSpacing = 5;\n            _this2.labelModule.draw(ctx, _this2.left + _this2.iconSize.width / 2 + _this2.margin.left, y + _this2.height / 2 + iconTextSpacing, selected);\n          }\n          _this2.updateBoundingBox(x, y);\n        }\n      };\n    }\n\n    /**\n     *\n     * @param {number} x\n     * @param {number} y\n     */\n  }, {\n    key: \"updateBoundingBox\",\n    value: function updateBoundingBox(x, y) {\n      this.boundingBox.top = y - this.options.icon.size * 0.5;\n      this.boundingBox.left = x - this.options.icon.size * 0.5;\n      this.boundingBox.right = x + this.options.icon.size * 0.5;\n      this.boundingBox.bottom = y + this.options.icon.size * 0.5;\n      if (this.options.label !== undefined && this.labelModule.size.width > 0) {\n        var iconTextSpacing = 5;\n        this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);\n        this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);\n        this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelModule.size.height + iconTextSpacing);\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} x width\n     * @param {number} y height\n     * @param {boolean} selected\n     * @param {boolean} hover - Unused\n     * @param {ArrowOptions} values\n     */\n  }, {\n    key: \"_icon\",\n    value: function _icon(ctx, x, y, selected, hover, values) {\n      var iconSize = Number(this.options.icon.size);\n      if (this.options.icon.code !== undefined) {\n        ctx.font = [this.options.icon.weight != null ? this.options.icon.weight : selected ? \"bold\" : \"\",\n        // If the weight is forced (for example to make Font Awesome 5 work\n        // properly) substitute slightly bigger size for bold font face.\n        (this.options.icon.weight != null && selected ? 5 : 0) + iconSize + \"px\", this.options.icon.face].join(\" \");\n\n        // draw icon\n        ctx.fillStyle = this.options.icon.color || \"black\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n\n        // draw shadow if enabled\n        this.enableShadow(ctx, values);\n        ctx.fillText(this.options.icon.code, x, y);\n\n        // disable shadows for other elements.\n        this.disableShadow(ctx, values);\n      } else {\n        console.error(\"When using the icon shape, you need to define the code in the icon options object. This can be done per node or globally.\");\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} angle\n     * @returns {number}\n     */\n  }, {\n    key: \"distanceToBorder\",\n    value: function distanceToBorder(ctx, angle) {\n      return this._distanceToBorder(ctx, angle);\n    }\n  }]);\n  return Icon;\n}(NodeBase);\n\nfunction _createSuper$h(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$h(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct$h() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * An image-based replacement for the default Node shape.\n *\n * @augments CircleImageBase\n */\nvar Image$2 = /*#__PURE__*/function (_CircleImageBase) {\n  _inherits(Image, _CircleImageBase);\n  var _super = _createSuper$h(Image);\n  /**\n   * @param {object} options\n   * @param {object} body\n   * @param {Label} labelModule\n   * @param {Image} imageObj\n   * @param {Image} imageObjAlt\n   */\n  function Image(options, body, labelModule, imageObj, imageObjAlt) {\n    var _this;\n    _classCallCheck(this, Image);\n    _this = _super.call(this, options, body, labelModule);\n    _this.setImages(imageObj, imageObjAlt);\n    return _this;\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx - Unused.\n   * @param {boolean} [selected]\n   * @param {boolean} [hover]\n   */\n  _createClass(Image, [{\n    key: \"resize\",\n    value: function resize(ctx) {\n      var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selected;\n      var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hover;\n      var imageAbsent = this.imageObj.src === undefined || this.imageObj.width === undefined || this.imageObj.height === undefined;\n      if (imageAbsent) {\n        var side = this.options.size * 2;\n        this.width = side;\n        this.height = side;\n        return;\n      }\n      if (this.needsRefresh(selected, hover)) {\n        this._resizeImage();\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} x width\n     * @param {number} y height\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @param {ArrowOptions} values\n     */\n  }, {\n    key: \"draw\",\n    value: function draw(ctx, x, y, selected, hover, values) {\n      ctx.save();\n      this.switchImages(selected);\n      this.resize();\n      var labelX = x,\n        labelY = y;\n      if (this.options.shapeProperties.coordinateOrigin === \"top-left\") {\n        this.left = x;\n        this.top = y;\n        labelX += this.width / 2;\n        labelY += this.height / 2;\n      } else {\n        this.left = x - this.width / 2;\n        this.top = y - this.height / 2;\n      }\n      if (this.options.shapeProperties.useBorderWithImage === true) {\n        var neutralborderWidth = this.options.borderWidth;\n        var selectionLineWidth = this.options.borderWidthSelected || 2 * this.options.borderWidth;\n        var borderWidth = (selected ? selectionLineWidth : neutralborderWidth) / this.body.view.scale;\n        ctx.lineWidth = Math.min(this.width, borderWidth);\n        ctx.beginPath();\n        var strokeStyle = selected ? this.options.color.highlight.border : hover ? this.options.color.hover.border : this.options.color.border;\n        var fillStyle = selected ? this.options.color.highlight.background : hover ? this.options.color.hover.background : this.options.color.background;\n        if (values.opacity !== undefined) {\n          strokeStyle = overrideOpacity(strokeStyle, values.opacity);\n          fillStyle = overrideOpacity(fillStyle, values.opacity);\n        }\n        // setup the line properties.\n        ctx.strokeStyle = strokeStyle;\n\n        // set a fillstyle\n        ctx.fillStyle = fillStyle;\n\n        // draw a rectangle to form the border around. This rectangle is filled so the opacity of a picture (in future vis releases?) can be used to tint the image\n        ctx.rect(this.left - 0.5 * ctx.lineWidth, this.top - 0.5 * ctx.lineWidth, this.width + ctx.lineWidth, this.height + ctx.lineWidth);\n        _fillInstanceProperty(ctx).call(ctx);\n        this.performStroke(ctx, values);\n        ctx.closePath();\n      }\n      this._drawImageAtPosition(ctx, values);\n      this._drawImageLabel(ctx, labelX, labelY, selected, hover);\n      this.updateBoundingBox(x, y);\n      ctx.restore();\n    }\n\n    /**\n     *\n     * @param {number} x\n     * @param {number} y\n     */\n  }, {\n    key: \"updateBoundingBox\",\n    value: function updateBoundingBox(x, y) {\n      this.resize();\n      if (this.options.shapeProperties.coordinateOrigin === \"top-left\") {\n        this.left = x;\n        this.top = y;\n      } else {\n        this.left = x - this.width / 2;\n        this.top = y - this.height / 2;\n      }\n      this.boundingBox.left = this.left;\n      this.boundingBox.top = this.top;\n      this.boundingBox.bottom = this.top + this.height;\n      this.boundingBox.right = this.left + this.width;\n      if (this.options.label !== undefined && this.labelModule.size.width > 0) {\n        this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);\n        this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);\n        this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelOffset);\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} angle\n     * @returns {number}\n     */\n  }, {\n    key: \"distanceToBorder\",\n    value: function distanceToBorder(ctx, angle) {\n      return this._distanceToBorder(ctx, angle);\n    }\n  }]);\n  return Image;\n}(CircleImageBase);\n\nfunction _createSuper$g(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$g(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct$g() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * A Square Node/Cluster shape.\n *\n * @augments ShapeBase\n */\nvar Square = /*#__PURE__*/function (_ShapeBase) {\n  _inherits(Square, _ShapeBase);\n  var _super = _createSuper$g(Square);\n  /**\n   * @param {object} options\n   * @param {object} body\n   * @param {Label} labelModule\n   */\n  function Square(options, body, labelModule) {\n    _classCallCheck(this, Square);\n    return _super.call(this, options, body, labelModule);\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {number} x width\n   * @param {number} y height\n   * @param {boolean} selected\n   * @param {boolean} hover\n   * @param {ArrowOptions} values\n   * @returns {object} Callbacks to draw later on higher layers.\n   */\n  _createClass(Square, [{\n    key: \"draw\",\n    value: function draw(ctx, x, y, selected, hover, values) {\n      return this._drawShape(ctx, \"square\", 2, x, y, selected, hover, values);\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} angle\n     * @returns {number}\n     */\n  }, {\n    key: \"distanceToBorder\",\n    value: function distanceToBorder(ctx, angle) {\n      return this._distanceToBorder(ctx, angle);\n    }\n  }]);\n  return Square;\n}(ShapeBase);\n\nfunction _createSuper$f(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$f(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct$f() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * A Hexagon Node/Cluster shape.\n *\n * @augments ShapeBase\n */\nvar Hexagon = /*#__PURE__*/function (_ShapeBase) {\n  _inherits(Hexagon, _ShapeBase);\n  var _super = _createSuper$f(Hexagon);\n  /**\n   * @param {object} options\n   * @param {object} body\n   * @param {Label} labelModule\n   */\n  function Hexagon(options, body, labelModule) {\n    _classCallCheck(this, Hexagon);\n    return _super.call(this, options, body, labelModule);\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {number} x width\n   * @param {number} y height\n   * @param {boolean} selected\n   * @param {boolean} hover\n   * @param {ArrowOptions} values\n   * @returns {object} Callbacks to draw later on higher layers.\n   */\n  _createClass(Hexagon, [{\n    key: \"draw\",\n    value: function draw(ctx, x, y, selected, hover, values) {\n      return this._drawShape(ctx, \"hexagon\", 4, x, y, selected, hover, values);\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} angle\n     * @returns {number}\n     */\n  }, {\n    key: \"distanceToBorder\",\n    value: function distanceToBorder(ctx, angle) {\n      return this._distanceToBorder(ctx, angle);\n    }\n  }]);\n  return Hexagon;\n}(ShapeBase);\n\nfunction _createSuper$e(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$e(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct$e() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * A Star Node/Cluster shape.\n *\n * @augments ShapeBase\n */\nvar Star = /*#__PURE__*/function (_ShapeBase) {\n  _inherits(Star, _ShapeBase);\n  var _super = _createSuper$e(Star);\n  /**\n   * @param {object} options\n   * @param {object} body\n   * @param {Label} labelModule\n   */\n  function Star(options, body, labelModule) {\n    _classCallCheck(this, Star);\n    return _super.call(this, options, body, labelModule);\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {number} x width\n   * @param {number} y height\n   * @param {boolean} selected\n   * @param {boolean} hover\n   * @param {ArrowOptions} values\n   * @returns {object} Callbacks to draw later on higher layers.\n   */\n  _createClass(Star, [{\n    key: \"draw\",\n    value: function draw(ctx, x, y, selected, hover, values) {\n      return this._drawShape(ctx, \"star\", 4, x, y, selected, hover, values);\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} angle\n     * @returns {number}\n     */\n  }, {\n    key: \"distanceToBorder\",\n    value: function distanceToBorder(ctx, angle) {\n      return this._distanceToBorder(ctx, angle);\n    }\n  }]);\n  return Star;\n}(ShapeBase);\n\nfunction _createSuper$d(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$d(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct$d() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * A text-based replacement for the default Node shape.\n *\n * @augments NodeBase\n */\nvar Text = /*#__PURE__*/function (_NodeBase) {\n  _inherits(Text, _NodeBase);\n  var _super = _createSuper$d(Text);\n  /**\n   * @param {object} options\n   * @param {object} body\n   * @param {Label} labelModule\n   */\n  function Text(options, body, labelModule) {\n    var _this;\n    _classCallCheck(this, Text);\n    _this = _super.call(this, options, body, labelModule);\n    _this._setMargins(labelModule);\n    return _this;\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {boolean} selected\n   * @param {boolean} hover\n   */\n  _createClass(Text, [{\n    key: \"resize\",\n    value: function resize(ctx, selected, hover) {\n      if (this.needsRefresh(selected, hover)) {\n        this.textSize = this.labelModule.getTextSize(ctx, selected, hover);\n        this.width = this.textSize.width + this.margin.right + this.margin.left;\n        this.height = this.textSize.height + this.margin.top + this.margin.bottom;\n        this.radius = 0.5 * this.width;\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} x width\n     * @param {number} y height\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @param {ArrowOptions} values\n     */\n  }, {\n    key: \"draw\",\n    value: function draw(ctx, x, y, selected, hover, values) {\n      this.resize(ctx, selected, hover);\n      this.left = x - this.width / 2;\n      this.top = y - this.height / 2;\n\n      // draw shadow if enabled\n      this.enableShadow(ctx, values);\n      this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, selected, hover);\n\n      // disable shadows for other elements.\n      this.disableShadow(ctx, values);\n      this.updateBoundingBox(x, y, ctx, selected, hover);\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} angle\n     * @returns {number}\n     */\n  }, {\n    key: \"distanceToBorder\",\n    value: function distanceToBorder(ctx, angle) {\n      return this._distanceToBorder(ctx, angle);\n    }\n  }]);\n  return Text;\n}(NodeBase);\n\nfunction _createSuper$c(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$c(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct$c() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * A Triangle Node/Cluster shape.\n *\n * @augments ShapeBase\n */\nvar Triangle$1 = /*#__PURE__*/function (_ShapeBase) {\n  _inherits(Triangle, _ShapeBase);\n  var _super = _createSuper$c(Triangle);\n  /**\n   * @param {object} options\n   * @param {object} body\n   * @param {Label} labelModule\n   */\n  function Triangle(options, body, labelModule) {\n    _classCallCheck(this, Triangle);\n    return _super.call(this, options, body, labelModule);\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {number} x\n   * @param {number} y\n   * @param {boolean} selected\n   * @param {boolean} hover\n   * @param {ArrowOptions} values\n   * @returns {object} Callbacks to draw later on higher layers.\n   */\n  _createClass(Triangle, [{\n    key: \"draw\",\n    value: function draw(ctx, x, y, selected, hover, values) {\n      return this._drawShape(ctx, \"triangle\", 3, x, y, selected, hover, values);\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} angle\n     * @returns {number}\n     */\n  }, {\n    key: \"distanceToBorder\",\n    value: function distanceToBorder(ctx, angle) {\n      return this._distanceToBorder(ctx, angle);\n    }\n  }]);\n  return Triangle;\n}(ShapeBase);\n\nfunction _createSuper$b(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$b(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct$b() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * A downward facing Triangle Node/Cluster shape.\n *\n * @augments ShapeBase\n */\nvar TriangleDown = /*#__PURE__*/function (_ShapeBase) {\n  _inherits(TriangleDown, _ShapeBase);\n  var _super = _createSuper$b(TriangleDown);\n  /**\n   * @param {object} options\n   * @param {object} body\n   * @param {Label} labelModule\n   */\n  function TriangleDown(options, body, labelModule) {\n    _classCallCheck(this, TriangleDown);\n    return _super.call(this, options, body, labelModule);\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {number} x\n   * @param {number} y\n   * @param {boolean} selected\n   * @param {boolean} hover\n   * @param {ArrowOptions} values\n   * @returns {object} Callbacks to draw later on higher layers.\n   */\n  _createClass(TriangleDown, [{\n    key: \"draw\",\n    value: function draw(ctx, x, y, selected, hover, values) {\n      return this._drawShape(ctx, \"triangleDown\", 3, x, y, selected, hover, values);\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} angle\n     * @returns {number}\n     */\n  }, {\n    key: \"distanceToBorder\",\n    value: function distanceToBorder(ctx, angle) {\n      return this._distanceToBorder(ctx, angle);\n    }\n  }]);\n  return TriangleDown;\n}(ShapeBase);\n\nfunction ownKeys$2(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor$1(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$2(e) { for (var r = 1; r < arguments.length; r++) { var _context5, _context6; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context5 = ownKeys$2(Object(t), !0)).call(_context5, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context6 = ownKeys$2(Object(t))).call(_context6, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor$1(t, r)); }); } return e; }\n\n/**\n * A node. A node can be connected to other nodes via one or multiple edges.\n */\nvar Node = /*#__PURE__*/function () {\n  /**\n   *\n   * @param {object} options An object containing options for the node. All\n   *                            options are optional, except for the id.\n   *                              {number} id     Id of the node. Required\n   *                              {string} label  Text label for the node\n   *                              {number} x      Horizontal position of the node\n   *                              {number} y      Vertical position of the node\n   *                              {string} shape  Node shape\n   *                              {string} image  An image url\n   *                              {string} title  A title text, can be HTML\n   *                              {anytype} group A group name or number\n   * @param {object} body               Shared state of current network instance\n   * @param {Network.Images} imagelist  A list with images. Only needed when the node has an image\n   * @param {Groups} grouplist          A list with groups. Needed for retrieving group options\n   * @param {object} globalOptions      Current global node options; these serve as defaults for the node instance\n   * @param {object} defaultOptions     Global default options for nodes; note that this is also the prototype\n   *                                    for parameter `globalOptions`.\n   */\n  function Node(options, body, imagelist, grouplist, globalOptions, defaultOptions) {\n    _classCallCheck(this, Node);\n    this.options = bridgeObject(globalOptions);\n    this.globalOptions = globalOptions;\n    this.defaultOptions = defaultOptions;\n    this.body = body;\n    this.edges = []; // all edges connected to this node\n\n    // set defaults for the options\n    this.id = undefined;\n    this.imagelist = imagelist;\n    this.grouplist = grouplist;\n\n    // state options\n    this.x = undefined;\n    this.y = undefined;\n    this.baseSize = this.options.size;\n    this.baseFontSize = this.options.font.size;\n    this.predefinedPosition = false; // used to check if initial fit should just take the range or approximate\n    this.selected = false;\n    this.hover = false;\n    this.labelModule = new Label(this.body, this.options, false /* Not edge label */);\n\n    this.setOptions(options);\n  }\n\n  /**\n   * Attach a edge to the node\n   *\n   * @param {Edge} edge\n   */\n  _createClass(Node, [{\n    key: \"attachEdge\",\n    value: function attachEdge(edge) {\n      var _context;\n      if (_indexOfInstanceProperty(_context = this.edges).call(_context, edge) === -1) {\n        this.edges.push(edge);\n      }\n    }\n\n    /**\n     * Detach a edge from the node\n     *\n     * @param {Edge} edge\n     */\n  }, {\n    key: \"detachEdge\",\n    value: function detachEdge(edge) {\n      var _context2;\n      var index = _indexOfInstanceProperty(_context2 = this.edges).call(_context2, edge);\n      if (index != -1) {\n        var _context3;\n        _spliceInstanceProperty(_context3 = this.edges).call(_context3, index, 1);\n      }\n    }\n\n    /**\n     * Set or overwrite options for the node\n     *\n     * @param {object} options an object with options\n     * @returns {null|boolean}\n     */\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      var currentShape = this.options.shape;\n      if (!options) {\n        return; // Note that the return value will be 'undefined'! This is OK.\n      }\n\n      // Save the color for later.\n      // This is necessary in order to prevent local color from being overwritten by group color.\n      // TODO: To prevent such workarounds the way options are handled should be rewritten from scratch.\n      // This is not the only problem with current options handling.\n      if (typeof options.color !== \"undefined\") {\n        this._localColor = options.color;\n      }\n\n      // basic options\n      if (options.id !== undefined) {\n        this.id = options.id;\n      }\n      if (this.id === undefined) {\n        throw new Error(\"Node must have an id\");\n      }\n      Node.checkMass(options, this.id);\n\n      // set these options locally\n      // clear x and y positions\n      if (options.x !== undefined) {\n        if (options.x === null) {\n          this.x = undefined;\n          this.predefinedPosition = false;\n        } else {\n          this.x = _parseInt$1(options.x);\n          this.predefinedPosition = true;\n        }\n      }\n      if (options.y !== undefined) {\n        if (options.y === null) {\n          this.y = undefined;\n          this.predefinedPosition = false;\n        } else {\n          this.y = _parseInt$1(options.y);\n          this.predefinedPosition = true;\n        }\n      }\n      if (options.size !== undefined) {\n        this.baseSize = options.size;\n      }\n      if (options.value !== undefined) {\n        options.value = _parseFloat$1(options.value);\n      }\n\n      // this transforms all shorthands into fully defined options\n      Node.parseOptions(this.options, options, true, this.globalOptions, this.grouplist);\n      var pile = [options, this.options, this.defaultOptions];\n      this.chooser = choosify(\"node\", pile);\n      this._load_images();\n      this.updateLabelModule(options);\n\n      // Need to set local opacity after `this.updateLabelModule(options);` because `this.updateLabelModule(options);` overrites local opacity with group opacity\n      if (options.opacity !== undefined && Node.checkOpacity(options.opacity)) {\n        this.options.opacity = options.opacity;\n      }\n      this.updateShape(currentShape);\n      return options.hidden !== undefined || options.physics !== undefined;\n    }\n\n    /**\n     * Load the images from the options, for the nodes that need them.\n     *\n     * Images are always loaded, even if they are not used in the current shape.\n     * The user may switch to an image shape later on.\n     *\n     * @private\n     */\n  }, {\n    key: \"_load_images\",\n    value: function _load_images() {\n      if (this.options.shape === \"circularImage\" || this.options.shape === \"image\") {\n        if (this.options.image === undefined) {\n          throw new Error(\"Option image must be defined for node type '\" + this.options.shape + \"'\");\n        }\n      }\n      if (this.options.image === undefined) {\n        return;\n      }\n      if (this.imagelist === undefined) {\n        throw new Error(\"Internal Error: No images provided\");\n      }\n      if (typeof this.options.image === \"string\") {\n        this.imageObj = this.imagelist.load(this.options.image, this.options.brokenImage, this.id);\n      } else {\n        if (this.options.image.unselected === undefined) {\n          throw new Error(\"No unselected image provided\");\n        }\n        this.imageObj = this.imagelist.load(this.options.image.unselected, this.options.brokenImage, this.id);\n        if (this.options.image.selected !== undefined) {\n          this.imageObjAlt = this.imagelist.load(this.options.image.selected, this.options.brokenImage, this.id);\n        } else {\n          this.imageObjAlt = undefined;\n        }\n      }\n    }\n\n    /**\n     * Check that opacity is only between 0 and 1\n     *\n     * @param {number} opacity\n     * @returns {boolean}\n     */\n  }, {\n    key: \"getFormattingValues\",\n    value:\n    /**\n     *\n     * @returns {{color: *, borderWidth: *, borderColor: *, size: *, borderDashes: (boolean|Array|allOptions.nodes.shapeProperties.borderDashes|{boolean, array}), borderRadius: (number|allOptions.nodes.shapeProperties.borderRadius|{number}|Array), shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *}}\n     */\n    function getFormattingValues() {\n      var values = {\n        color: this.options.color.background,\n        opacity: this.options.opacity,\n        borderWidth: this.options.borderWidth,\n        borderColor: this.options.color.border,\n        size: this.options.size,\n        borderDashes: this.options.shapeProperties.borderDashes,\n        borderRadius: this.options.shapeProperties.borderRadius,\n        shadow: this.options.shadow.enabled,\n        shadowColor: this.options.shadow.color,\n        shadowSize: this.options.shadow.size,\n        shadowX: this.options.shadow.x,\n        shadowY: this.options.shadow.y\n      };\n      if (this.selected || this.hover) {\n        if (this.chooser === true) {\n          if (this.selected) {\n            if (this.options.borderWidthSelected != null) {\n              values.borderWidth = this.options.borderWidthSelected;\n            } else {\n              values.borderWidth *= 2;\n            }\n            values.color = this.options.color.highlight.background;\n            values.borderColor = this.options.color.highlight.border;\n            values.shadow = this.options.shadow.enabled;\n          } else if (this.hover) {\n            values.color = this.options.color.hover.background;\n            values.borderColor = this.options.color.hover.border;\n            values.shadow = this.options.shadow.enabled;\n          }\n        } else if (typeof this.chooser === \"function\") {\n          this.chooser(values, this.options.id, this.selected, this.hover);\n          if (values.shadow === false) {\n            if (values.shadowColor !== this.options.shadow.color || values.shadowSize !== this.options.shadow.size || values.shadowX !== this.options.shadow.x || values.shadowY !== this.options.shadow.y) {\n              values.shadow = true;\n            }\n          }\n        }\n      } else {\n        values.shadow = this.options.shadow.enabled;\n      }\n      if (this.options.opacity !== undefined) {\n        var opacity = this.options.opacity;\n        values.borderColor = overrideOpacity(values.borderColor, opacity);\n        values.color = overrideOpacity(values.color, opacity);\n        values.shadowColor = overrideOpacity(values.shadowColor, opacity);\n      }\n      return values;\n    }\n\n    /**\n     *\n     * @param {object} options\n     */\n  }, {\n    key: \"updateLabelModule\",\n    value: function updateLabelModule(options) {\n      if (this.options.label === undefined || this.options.label === null) {\n        this.options.label = \"\";\n      }\n      Node.updateGroupOptions(this.options, _objectSpread$2(_objectSpread$2({}, options), {}, {\n        color: options && options.color || this._localColor || undefined\n      }), this.grouplist);\n\n      //\n      // Note:The prototype chain for this.options is:\n      //\n      // this.options ->    NodesHandler.options    -> NodesHandler.defaultOptions\n      //                 (also: this.globalOptions)\n      //\n      // Note that the prototypes are mentioned explicitly in the pile list below;\n      // WE DON'T WANT THE ORDER OF THE PROTOTYPES!!!! At least, not for font handling of labels.\n      // This is a good indication that the prototype usage of options is deficient.\n      //\n      var currentGroup = this.grouplist.get(this.options.group, false);\n      var pile = [options,\n      // new options\n      this.options,\n      // current node options, see comment above for prototype\n      currentGroup,\n      // group options, if any\n      this.globalOptions,\n      // Currently set global node options\n      this.defaultOptions // Default global node options\n      ];\n\n      this.labelModule.update(this.options, pile);\n      if (this.labelModule.baseSize !== undefined) {\n        this.baseFontSize = this.labelModule.baseSize;\n      }\n    }\n\n    /**\n     *\n     * @param {string} currentShape\n     */\n  }, {\n    key: \"updateShape\",\n    value: function updateShape(currentShape) {\n      if (currentShape === this.options.shape && this.shape) {\n        this.shape.setOptions(this.options, this.imageObj, this.imageObjAlt);\n      } else {\n        // choose draw method depending on the shape\n        switch (this.options.shape) {\n          case \"box\":\n            this.shape = new Box$1(this.options, this.body, this.labelModule);\n            break;\n          case \"circle\":\n            this.shape = new Circle$1(this.options, this.body, this.labelModule);\n            break;\n          case \"circularImage\":\n            this.shape = new CircularImage(this.options, this.body, this.labelModule, this.imageObj, this.imageObjAlt);\n            break;\n          case \"custom\":\n            this.shape = new CustomShape(this.options, this.body, this.labelModule, this.options.ctxRenderer);\n            break;\n          case \"database\":\n            this.shape = new Database(this.options, this.body, this.labelModule);\n            break;\n          case \"diamond\":\n            this.shape = new Diamond$1(this.options, this.body, this.labelModule);\n            break;\n          case \"dot\":\n            this.shape = new Dot(this.options, this.body, this.labelModule);\n            break;\n          case \"ellipse\":\n            this.shape = new Ellipse(this.options, this.body, this.labelModule);\n            break;\n          case \"icon\":\n            this.shape = new Icon(this.options, this.body, this.labelModule);\n            break;\n          case \"image\":\n            this.shape = new Image$2(this.options, this.body, this.labelModule, this.imageObj, this.imageObjAlt);\n            break;\n          case \"square\":\n            this.shape = new Square(this.options, this.body, this.labelModule);\n            break;\n          case \"hexagon\":\n            this.shape = new Hexagon(this.options, this.body, this.labelModule);\n            break;\n          case \"star\":\n            this.shape = new Star(this.options, this.body, this.labelModule);\n            break;\n          case \"text\":\n            this.shape = new Text(this.options, this.body, this.labelModule);\n            break;\n          case \"triangle\":\n            this.shape = new Triangle$1(this.options, this.body, this.labelModule);\n            break;\n          case \"triangleDown\":\n            this.shape = new TriangleDown(this.options, this.body, this.labelModule);\n            break;\n          default:\n            this.shape = new Ellipse(this.options, this.body, this.labelModule);\n            break;\n        }\n      }\n      this.needsRefresh();\n    }\n\n    /**\n     * select this node\n     */\n  }, {\n    key: \"select\",\n    value: function select() {\n      this.selected = true;\n      this.needsRefresh();\n    }\n\n    /**\n     * unselect this node\n     */\n  }, {\n    key: \"unselect\",\n    value: function unselect() {\n      this.selected = false;\n      this.needsRefresh();\n    }\n\n    /**\n     * Reset the calculated size of the node, forces it to recalculate its size\n     */\n  }, {\n    key: \"needsRefresh\",\n    value: function needsRefresh() {\n      this.shape.refreshNeeded = true;\n    }\n\n    /**\n     * get the title of this node.\n     *\n     * @returns {string} title    The title of the node, or undefined when no title\n     *                           has been set.\n     */\n  }, {\n    key: \"getTitle\",\n    value: function getTitle() {\n      return this.options.title;\n    }\n\n    /**\n     * Calculate the distance to the border of the Node\n     *\n     * @param {CanvasRenderingContext2D}   ctx\n     * @param {number} angle        Angle in radians\n     * @returns {number} distance   Distance to the border in pixels\n     */\n  }, {\n    key: \"distanceToBorder\",\n    value: function distanceToBorder(ctx, angle) {\n      return this.shape.distanceToBorder(ctx, angle);\n    }\n\n    /**\n     * Check if this node has a fixed x and y position\n     *\n     * @returns {boolean}      true if fixed, false if not\n     */\n  }, {\n    key: \"isFixed\",\n    value: function isFixed() {\n      return this.options.fixed.x && this.options.fixed.y;\n    }\n\n    /**\n     * check if this node is selecte\n     *\n     * @returns {boolean} selected   True if node is selected, else false\n     */\n  }, {\n    key: \"isSelected\",\n    value: function isSelected() {\n      return this.selected;\n    }\n\n    /**\n     * Retrieve the value of the node. Can be undefined\n     *\n     * @returns {number} value\n     */\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      return this.options.value;\n    }\n\n    /**\n     * Get the current dimensions of the label\n     *\n     * @returns {rect}\n     */\n  }, {\n    key: \"getLabelSize\",\n    value: function getLabelSize() {\n      return this.labelModule.size();\n    }\n\n    /**\n     * Adjust the value range of the node. The node will adjust it's size\n     * based on its value.\n     *\n     * @param {number} min\n     * @param {number} max\n     * @param {number} total\n     */\n  }, {\n    key: \"setValueRange\",\n    value: function setValueRange(min, max, total) {\n      if (this.options.value !== undefined) {\n        var scale = this.options.scaling.customScalingFunction(min, max, total, this.options.value);\n        var sizeDiff = this.options.scaling.max - this.options.scaling.min;\n        if (this.options.scaling.label.enabled === true) {\n          var fontDiff = this.options.scaling.label.max - this.options.scaling.label.min;\n          this.options.font.size = this.options.scaling.label.min + scale * fontDiff;\n        }\n        this.options.size = this.options.scaling.min + scale * sizeDiff;\n      } else {\n        this.options.size = this.baseSize;\n        this.options.font.size = this.baseFontSize;\n      }\n      this.updateLabelModule();\n    }\n\n    /**\n     * Draw this node in the given canvas\n     * The 2d context of a HTML canvas can be retrieved by canvas.getContext(\"2d\");\n     *\n     * @param {CanvasRenderingContext2D}   ctx\n     * @returns {object} Callbacks to draw later on higher layers.\n     */\n  }, {\n    key: \"draw\",\n    value: function draw(ctx) {\n      var values = this.getFormattingValues();\n      return this.shape.draw(ctx, this.x, this.y, this.selected, this.hover, values) || {};\n    }\n\n    /**\n     * Update the bounding box of the shape\n     *\n     * @param {CanvasRenderingContext2D}   ctx\n     */\n  }, {\n    key: \"updateBoundingBox\",\n    value: function updateBoundingBox(ctx) {\n      this.shape.updateBoundingBox(this.x, this.y, ctx);\n    }\n\n    /**\n     * Recalculate the size of this node in the given canvas\n     * The 2d context of a HTML canvas can be retrieved by canvas.getContext(\"2d\");\n     *\n     * @param {CanvasRenderingContext2D}   ctx\n     */\n  }, {\n    key: \"resize\",\n    value: function resize(ctx) {\n      var values = this.getFormattingValues();\n      this.shape.resize(ctx, this.selected, this.hover, values);\n    }\n\n    /**\n     * Determine all visual elements of this node instance, in which the given\n     * point falls within the bounding shape.\n     *\n     * @param {point} point\n     * @returns {Array.<nodeClickItem|nodeLabelClickItem>} list with the items which are on the point\n     */\n  }, {\n    key: \"getItemsOnPoint\",\n    value: function getItemsOnPoint(point) {\n      var ret = [];\n      if (this.labelModule.visible()) {\n        if (pointInRect(this.labelModule.getSize(), point)) {\n          ret.push({\n            nodeId: this.id,\n            labelId: 0\n          });\n        }\n      }\n      if (pointInRect(this.shape.boundingBox, point)) {\n        ret.push({\n          nodeId: this.id\n        });\n      }\n      return ret;\n    }\n\n    /**\n     * Check if this object is overlapping with the provided object\n     *\n     * @param {object} obj   an object with parameters left, top, right, bottom\n     * @returns {boolean}     True if location is located on node\n     */\n  }, {\n    key: \"isOverlappingWith\",\n    value: function isOverlappingWith(obj) {\n      return this.shape.left < obj.right && this.shape.left + this.shape.width > obj.left && this.shape.top < obj.bottom && this.shape.top + this.shape.height > obj.top;\n    }\n\n    /**\n     * Check if this object is overlapping with the provided object\n     *\n     * @param {object} obj   an object with parameters left, top, right, bottom\n     * @returns {boolean}     True if location is located on node\n     */\n  }, {\n    key: \"isBoundingBoxOverlappingWith\",\n    value: function isBoundingBoxOverlappingWith(obj) {\n      return this.shape.boundingBox.left < obj.right && this.shape.boundingBox.right > obj.left && this.shape.boundingBox.top < obj.bottom && this.shape.boundingBox.bottom > obj.top;\n    }\n\n    /**\n     * Check valid values for mass\n     *\n     * The mass may not be negative or zero. If it is, reset to 1\n     *\n     * @param {object} options\n     * @param {Node.id} id\n     * @static\n     */\n  }], [{\n    key: \"checkOpacity\",\n    value: function checkOpacity(opacity) {\n      return 0 <= opacity && opacity <= 1;\n    }\n\n    /**\n     * Check that origin is 'center' or 'top-left'\n     *\n     * @param {string} origin\n     * @returns {boolean}\n     */\n  }, {\n    key: \"checkCoordinateOrigin\",\n    value: function checkCoordinateOrigin(origin) {\n      return origin === undefined || origin === \"center\" || origin === \"top-left\";\n    }\n\n    /**\n     * Copy group option values into the node options.\n     *\n     * The group options override the global node options, so the copy of group options\n     *  must happen *after* the global node options have been set.\n     *\n     * This method must also be called also if the global node options have changed and the group options did not.\n     *\n     * @param {object} parentOptions\n     * @param {object} newOptions  new values for the options, currently only passed in for check\n     * @param {object} groupList\n     */\n  }, {\n    key: \"updateGroupOptions\",\n    value: function updateGroupOptions(parentOptions, newOptions, groupList) {\n      var _context4;\n      if (groupList === undefined) return; // No groups, nothing to do\n\n      var group = parentOptions.group;\n\n      // paranoia: the selected group is already merged into node options, check.\n      if (newOptions !== undefined && newOptions.group !== undefined && group !== newOptions.group) {\n        throw new Error(\"updateGroupOptions: group values in options don't match.\");\n      }\n      var hasGroup = typeof group === \"number\" || typeof group === \"string\" && group != \"\";\n      if (!hasGroup) return; // current node has no group, no need to merge\n\n      var groupObj = groupList.get(group);\n      if (groupObj.opacity !== undefined && newOptions.opacity === undefined) {\n        if (!Node.checkOpacity(groupObj.opacity)) {\n          console.error(\"Invalid option for node opacity. Value must be between 0 and 1, found: \" + groupObj.opacity);\n          groupObj.opacity = undefined;\n        }\n      }\n\n      // Skip any new option to avoid them being overridden by the group options.\n      var skipProperties = _filterInstanceProperty(_context4 = _Object$getOwnPropertyNames(newOptions)).call(_context4, function (p) {\n        return newOptions[p] != null;\n      });\n      // Always skip merging group font options into parent; these are required to be distinct for labels\n      skipProperties.push(\"font\");\n      selectiveNotDeepExtend(skipProperties, parentOptions, groupObj);\n\n      // the color object needs to be completely defined.\n      // Since groups can partially overwrite the colors, we parse it again, just in case.\n      parentOptions.color = parseColor(parentOptions.color);\n    }\n\n    /**\n     * This process all possible shorthands in the new options and makes sure that the parentOptions are fully defined.\n     * Static so it can also be used by the handler.\n     *\n     * @param {object} parentOptions\n     * @param {object} newOptions\n     * @param {boolean} [allowDeletion=false]\n     * @param {object} [globalOptions={}]\n     * @param {object} [groupList]\n     * @static\n     */\n  }, {\n    key: \"parseOptions\",\n    value: function parseOptions(parentOptions, newOptions) {\n      var allowDeletion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var globalOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var groupList = arguments.length > 4 ? arguments[4] : undefined;\n      var fields = [\"color\", \"fixed\", \"shadow\"];\n      selectiveNotDeepExtend(fields, parentOptions, newOptions, allowDeletion);\n      Node.checkMass(newOptions);\n      if (parentOptions.opacity !== undefined) {\n        if (!Node.checkOpacity(parentOptions.opacity)) {\n          console.error(\"Invalid option for node opacity. Value must be between 0 and 1, found: \" + parentOptions.opacity);\n          parentOptions.opacity = undefined;\n        }\n      }\n      if (newOptions.opacity !== undefined) {\n        if (!Node.checkOpacity(newOptions.opacity)) {\n          console.error(\"Invalid option for node opacity. Value must be between 0 and 1, found: \" + newOptions.opacity);\n          newOptions.opacity = undefined;\n        }\n      }\n      if (newOptions.shapeProperties && !Node.checkCoordinateOrigin(newOptions.shapeProperties.coordinateOrigin)) {\n        console.error(\"Invalid option for node coordinateOrigin, found: \" + newOptions.shapeProperties.coordinateOrigin);\n      }\n\n      // merge the shadow options into the parent.\n      mergeOptions(parentOptions, newOptions, \"shadow\", globalOptions);\n\n      // individual shape newOptions\n      if (newOptions.color !== undefined && newOptions.color !== null) {\n        var parsedColor = parseColor(newOptions.color);\n        fillIfDefined(parentOptions.color, parsedColor);\n      } else if (allowDeletion === true && newOptions.color === null) {\n        parentOptions.color = bridgeObject(globalOptions.color); // set the object back to the global options\n      }\n\n      // handle the fixed options\n      if (newOptions.fixed !== undefined && newOptions.fixed !== null) {\n        if (typeof newOptions.fixed === \"boolean\") {\n          parentOptions.fixed.x = newOptions.fixed;\n          parentOptions.fixed.y = newOptions.fixed;\n        } else {\n          if (newOptions.fixed.x !== undefined && typeof newOptions.fixed.x === \"boolean\") {\n            parentOptions.fixed.x = newOptions.fixed.x;\n          }\n          if (newOptions.fixed.y !== undefined && typeof newOptions.fixed.y === \"boolean\") {\n            parentOptions.fixed.y = newOptions.fixed.y;\n          }\n        }\n      }\n      if (allowDeletion === true && newOptions.font === null) {\n        parentOptions.font = bridgeObject(globalOptions.font); // set the object back to the global options\n      }\n\n      Node.updateGroupOptions(parentOptions, newOptions, groupList);\n\n      // handle the scaling options, specifically the label part\n      if (newOptions.scaling !== undefined) {\n        mergeOptions(parentOptions.scaling, newOptions.scaling, \"label\", globalOptions.scaling);\n      }\n    }\n  }, {\n    key: \"checkMass\",\n    value: function checkMass(options, id) {\n      if (options.mass !== undefined && options.mass <= 0) {\n        var strId = \"\";\n        if (id !== undefined) {\n          strId = \" in node id: \" + id;\n        }\n        console.error(\"%cNegative or zero mass disallowed\" + strId + \", setting mass to 1.\", VALIDATOR_PRINT_STYLE);\n        options.mass = 1;\n      }\n    }\n  }]);\n  return Node;\n}();\n\nfunction _createForOfIteratorHelper$5(o, allowArrayLike) { var it = typeof _Symbol !== \"undefined\" && _getIteratorMethod(o) || o[\"@@iterator\"]; if (!it) { if (_Array$isArray(o) || (it = _unsupportedIterableToArray$5(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray$5(o, minLen) { var _context4; if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray$5(o, minLen); var n = _sliceInstanceProperty(_context4 = Object.prototype.toString.call(o)).call(_context4, 8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return _Array$from$1(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$5(o, minLen); }\nfunction _arrayLikeToArray$5(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n/**\n * Handler for Nodes\n */\nvar NodesHandler = /*#__PURE__*/function () {\n  /**\n   * @param {object} body\n   * @param {Images} images\n   * @param {Array.<Group>} groups\n   * @param {LayoutEngine} layoutEngine\n   */\n  function NodesHandler(body, images, groups, layoutEngine) {\n    var _context,\n      _this = this;\n    _classCallCheck(this, NodesHandler);\n    this.body = body;\n    this.images = images;\n    this.groups = groups;\n    this.layoutEngine = layoutEngine;\n\n    // create the node API in the body container\n    this.body.functions.createNode = _bindInstanceProperty$1(_context = this.create).call(_context, this);\n    this.nodesListeners = {\n      add: function add(event, params) {\n        _this.add(params.items);\n      },\n      update: function update(event, params) {\n        _this.update(params.items, params.data, params.oldData);\n      },\n      remove: function remove(event, params) {\n        _this.remove(params.items);\n      }\n    };\n    this.defaultOptions = {\n      borderWidth: 1,\n      borderWidthSelected: undefined,\n      brokenImage: undefined,\n      color: {\n        border: \"#2B7CE9\",\n        background: \"#97C2FC\",\n        highlight: {\n          border: \"#2B7CE9\",\n          background: \"#D2E5FF\"\n        },\n        hover: {\n          border: \"#2B7CE9\",\n          background: \"#D2E5FF\"\n        }\n      },\n      opacity: undefined,\n      // number between 0 and 1\n      fixed: {\n        x: false,\n        y: false\n      },\n      font: {\n        color: \"#343434\",\n        size: 14,\n        // px\n        face: \"arial\",\n        background: \"none\",\n        strokeWidth: 0,\n        // px\n        strokeColor: \"#ffffff\",\n        align: \"center\",\n        vadjust: 0,\n        multi: false,\n        bold: {\n          mod: \"bold\"\n        },\n        boldital: {\n          mod: \"bold italic\"\n        },\n        ital: {\n          mod: \"italic\"\n        },\n        mono: {\n          mod: \"\",\n          size: 15,\n          // px\n          face: \"monospace\",\n          vadjust: 2\n        }\n      },\n      group: undefined,\n      hidden: false,\n      icon: {\n        face: \"FontAwesome\",\n        //'FontAwesome',\n        code: undefined,\n        //'\\uf007',\n        size: 50,\n        //50,\n        color: \"#2B7CE9\" //'#aa00ff'\n      },\n\n      image: undefined,\n      // --> URL\n      imagePadding: {\n        // only for image shape\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      },\n      label: undefined,\n      labelHighlightBold: true,\n      level: undefined,\n      margin: {\n        top: 5,\n        right: 5,\n        bottom: 5,\n        left: 5\n      },\n      mass: 1,\n      physics: true,\n      scaling: {\n        min: 10,\n        max: 30,\n        label: {\n          enabled: false,\n          min: 14,\n          max: 30,\n          maxVisible: 30,\n          drawThreshold: 5\n        },\n        customScalingFunction: function customScalingFunction(min, max, total, value) {\n          if (max === min) {\n            return 0.5;\n          } else {\n            var scale = 1 / (max - min);\n            return Math.max(0, (value - min) * scale);\n          }\n        }\n      },\n      shadow: {\n        enabled: false,\n        color: \"rgba(0,0,0,0.5)\",\n        size: 10,\n        x: 5,\n        y: 5\n      },\n      shape: \"ellipse\",\n      shapeProperties: {\n        borderDashes: false,\n        // only for borders\n        borderRadius: 6,\n        // only for box shape\n        interpolation: true,\n        // only for image and circularImage shapes\n        useImageSize: false,\n        // only for image and circularImage shapes\n        useBorderWithImage: false,\n        // only for image shape\n        coordinateOrigin: \"center\" // only for image and circularImage shapes\n      },\n\n      size: 25,\n      title: undefined,\n      value: undefined,\n      x: undefined,\n      y: undefined\n    };\n\n    // Protect from idiocy\n    if (this.defaultOptions.mass <= 0) {\n      throw \"Internal error: mass in defaultOptions of NodesHandler may not be zero or negative\";\n    }\n    this.options = bridgeObject(this.defaultOptions);\n    this.bindEventListeners();\n  }\n\n  /**\n   * Binds event listeners\n   */\n  _createClass(NodesHandler, [{\n    key: \"bindEventListeners\",\n    value: function bindEventListeners() {\n      var _context2,\n        _context3,\n        _this2 = this;\n      // refresh the nodes. Used when reverting from hierarchical layout\n      this.body.emitter.on(\"refreshNodes\", _bindInstanceProperty$1(_context2 = this.refresh).call(_context2, this));\n      this.body.emitter.on(\"refresh\", _bindInstanceProperty$1(_context3 = this.refresh).call(_context3, this));\n      this.body.emitter.on(\"destroy\", function () {\n        forEach$1(_this2.nodesListeners, function (callback, event) {\n          if (_this2.body.data.nodes) _this2.body.data.nodes.off(event, callback);\n        });\n        delete _this2.body.functions.createNode;\n        delete _this2.nodesListeners.add;\n        delete _this2.nodesListeners.update;\n        delete _this2.nodesListeners.remove;\n        delete _this2.nodesListeners;\n      });\n    }\n\n    /**\n     *\n     * @param {object} options\n     */\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      if (options !== undefined) {\n        Node.parseOptions(this.options, options);\n\n        // Need to set opacity here because Node.parseOptions is also used for groups,\n        // if you set opacity in Node.parseOptions it overwrites group opacity.\n        if (options.opacity !== undefined) {\n          if (_Number$isNaN(options.opacity) || !_Number$isFinite(options.opacity) || options.opacity < 0 || options.opacity > 1) {\n            console.error(\"Invalid option for node opacity. Value must be between 0 and 1, found: \" + options.opacity);\n          } else {\n            this.options.opacity = options.opacity;\n          }\n        }\n\n        // update the shape in all nodes\n        if (options.shape !== undefined) {\n          for (var nodeId in this.body.nodes) {\n            if (Object.prototype.hasOwnProperty.call(this.body.nodes, nodeId)) {\n              this.body.nodes[nodeId].updateShape();\n            }\n          }\n        }\n\n        // Update the labels of nodes if any relevant options changed.\n        if (typeof options.font !== \"undefined\" || typeof options.widthConstraint !== \"undefined\" || typeof options.heightConstraint !== \"undefined\") {\n          for (var _i = 0, _Object$keys$1 = _Object$keys(this.body.nodes); _i < _Object$keys$1.length; _i++) {\n            var _nodeId = _Object$keys$1[_i];\n            this.body.nodes[_nodeId].updateLabelModule();\n            this.body.nodes[_nodeId].needsRefresh();\n          }\n        }\n\n        // update the shape size in all nodes\n        if (options.size !== undefined) {\n          for (var _nodeId2 in this.body.nodes) {\n            if (Object.prototype.hasOwnProperty.call(this.body.nodes, _nodeId2)) {\n              this.body.nodes[_nodeId2].needsRefresh();\n            }\n          }\n        }\n\n        // update the state of the variables if needed\n        if (options.hidden !== undefined || options.physics !== undefined) {\n          this.body.emitter.emit(\"_dataChanged\");\n        }\n      }\n    }\n\n    /**\n     * Set a data set with nodes for the network\n     *\n     * @param {Array | DataSet | DataView} nodes         The data containing the nodes.\n     * @param {boolean} [doNotEmit=false] - Suppress data changed event.\n     * @private\n     */\n  }, {\n    key: \"setData\",\n    value: function setData(nodes) {\n      var doNotEmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var oldNodesData = this.body.data.nodes;\n      if ((0,vis_data_peer_esm_vis_data_js__WEBPACK_IMPORTED_MODULE_0__.isDataViewLike)(\"id\", nodes)) {\n        this.body.data.nodes = nodes;\n      } else if (_Array$isArray(nodes)) {\n        this.body.data.nodes = new vis_data_peer_esm_vis_data_js__WEBPACK_IMPORTED_MODULE_0__.DataSet();\n        this.body.data.nodes.add(nodes);\n      } else if (!nodes) {\n        this.body.data.nodes = new vis_data_peer_esm_vis_data_js__WEBPACK_IMPORTED_MODULE_0__.DataSet();\n      } else {\n        throw new TypeError(\"Array or DataSet expected\");\n      }\n      if (oldNodesData) {\n        // unsubscribe from old dataset\n        forEach$1(this.nodesListeners, function (callback, event) {\n          oldNodesData.off(event, callback);\n        });\n      }\n\n      // remove drawn nodes\n      this.body.nodes = {};\n      if (this.body.data.nodes) {\n        // subscribe to new dataset\n        var me = this;\n        forEach$1(this.nodesListeners, function (callback, event) {\n          me.body.data.nodes.on(event, callback);\n        });\n\n        // draw all new nodes\n        var ids = this.body.data.nodes.getIds();\n        this.add(ids, true);\n      }\n      if (doNotEmit === false) {\n        this.body.emitter.emit(\"_dataChanged\");\n      }\n    }\n\n    /**\n     * Add nodes\n     *\n     * @param {number[] | string[]} ids\n     * @param {boolean} [doNotEmit=false]\n     * @private\n     */\n  }, {\n    key: \"add\",\n    value: function add(ids) {\n      var doNotEmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var id;\n      var newNodes = [];\n      for (var i = 0; i < ids.length; i++) {\n        id = ids[i];\n        var properties = this.body.data.nodes.get(id);\n        var node = this.create(properties);\n        newNodes.push(node);\n        this.body.nodes[id] = node; // note: this may replace an existing node\n      }\n\n      this.layoutEngine.positionInitially(newNodes);\n      if (doNotEmit === false) {\n        this.body.emitter.emit(\"_dataChanged\");\n      }\n    }\n\n    /**\n     * Update existing nodes, or create them when not yet existing\n     *\n     * @param {number[] | string[]} ids id's of changed nodes\n     * @param {Array} changedData array with changed data\n     * @param {Array|undefined} oldData optional; array with previous data\n     * @private\n     */\n  }, {\n    key: \"update\",\n    value: function update(ids, changedData, oldData) {\n      var nodes = this.body.nodes;\n      var dataChanged = false;\n      for (var i = 0; i < ids.length; i++) {\n        var id = ids[i];\n        var node = nodes[id];\n        var data = changedData[i];\n        if (node !== undefined) {\n          // update node\n          if (node.setOptions(data)) {\n            dataChanged = true;\n          }\n        } else {\n          dataChanged = true;\n          // create node\n          node = this.create(data);\n          nodes[id] = node;\n        }\n      }\n      if (!dataChanged && oldData !== undefined) {\n        // Check for any changes which should trigger a layout recalculation\n        // For now, this is just 'level' for hierarchical layout\n        // Assumption: old and new data arranged in same order; at time of writing, this holds.\n        dataChanged = _someInstanceProperty(changedData).call(changedData, function (newValue, index) {\n          var oldValue = oldData[index];\n          return oldValue && oldValue.level !== newValue.level;\n        });\n      }\n      if (dataChanged === true) {\n        this.body.emitter.emit(\"_dataChanged\");\n      } else {\n        this.body.emitter.emit(\"_dataUpdated\");\n      }\n    }\n\n    /**\n     * Remove existing nodes. If nodes do not exist, the method will just ignore it.\n     *\n     * @param {number[] | string[]} ids\n     * @private\n     */\n  }, {\n    key: \"remove\",\n    value: function remove(ids) {\n      var nodes = this.body.nodes;\n      for (var i = 0; i < ids.length; i++) {\n        var id = ids[i];\n        delete nodes[id];\n      }\n      this.body.emitter.emit(\"_dataChanged\");\n    }\n\n    /**\n     * create a node\n     *\n     * @param {object} properties\n     * @param {class} [constructorClass=Node.default]\n     * @returns {*}\n     */\n  }, {\n    key: \"create\",\n    value: function create(properties) {\n      var constructorClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Node;\n      return new constructorClass(properties, this.body, this.images, this.groups, this.options, this.defaultOptions);\n    }\n\n    /**\n     *\n     * @param {boolean} [clearPositions=false]\n     */\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      var _this3 = this;\n      var clearPositions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      forEach$1(this.body.nodes, function (node, nodeId) {\n        var data = _this3.body.data.nodes.get(nodeId);\n        if (data !== undefined) {\n          if (clearPositions === true) {\n            node.setOptions({\n              x: null,\n              y: null\n            });\n          }\n          node.setOptions({\n            fixed: false\n          });\n          node.setOptions(data);\n        }\n      });\n    }\n\n    /**\n     * Returns the positions of the nodes.\n     *\n     * @param {Array.<Node.id> | string} [ids]  --> optional, can be array of nodeIds, can be string\n     * @returns {{}}\n     */\n  }, {\n    key: \"getPositions\",\n    value: function getPositions(ids) {\n      var dataArray = {};\n      if (ids !== undefined) {\n        if (_Array$isArray(ids) === true) {\n          for (var i = 0; i < ids.length; i++) {\n            if (this.body.nodes[ids[i]] !== undefined) {\n              var node = this.body.nodes[ids[i]];\n              dataArray[ids[i]] = {\n                x: Math.round(node.x),\n                y: Math.round(node.y)\n              };\n            }\n          }\n        } else {\n          if (this.body.nodes[ids] !== undefined) {\n            var _node = this.body.nodes[ids];\n            dataArray[ids] = {\n              x: Math.round(_node.x),\n              y: Math.round(_node.y)\n            };\n          }\n        }\n      } else {\n        for (var _i2 = 0; _i2 < this.body.nodeIndices.length; _i2++) {\n          var _node2 = this.body.nodes[this.body.nodeIndices[_i2]];\n          dataArray[this.body.nodeIndices[_i2]] = {\n            x: Math.round(_node2.x),\n            y: Math.round(_node2.y)\n          };\n        }\n      }\n      return dataArray;\n    }\n\n    /**\n     * Retrieves the x y position of a specific id.\n     *\n     * @param {string} id The id to retrieve.\n     * @throws {TypeError} If no id is included.\n     * @throws {ReferenceError} If an invalid id is provided.\n     * @returns {{ x: number, y: number }} Returns X, Y canvas position of the node with given id.\n     */\n  }, {\n    key: \"getPosition\",\n    value: function getPosition(id) {\n      if (id == undefined) {\n        throw new TypeError(\"No id was specified for getPosition method.\");\n      } else if (this.body.nodes[id] == undefined) {\n        throw new ReferenceError(\"NodeId provided for getPosition does not exist. Provided: \".concat(id));\n      } else {\n        return {\n          x: Math.round(this.body.nodes[id].x),\n          y: Math.round(this.body.nodes[id].y)\n        };\n      }\n    }\n\n    /**\n     * Load the XY positions of the nodes into the dataset.\n     */\n  }, {\n    key: \"storePositions\",\n    value: function storePositions() {\n      // todo: add support for clusters and hierarchical.\n      var dataArray = [];\n      var dataset = this.body.data.nodes.getDataSet();\n      var _iterator = _createForOfIteratorHelper$5(dataset.get()),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var dsNode = _step.value;\n          var id = dsNode.id;\n          var bodyNode = this.body.nodes[id];\n          var x = Math.round(bodyNode.x);\n          var y = Math.round(bodyNode.y);\n          if (dsNode.x !== x || dsNode.y !== y) {\n            dataArray.push({\n              id: id,\n              x: x,\n              y: y\n            });\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      dataset.update(dataArray);\n    }\n\n    /**\n     * get the bounding box of a node.\n     *\n     * @param {Node.id} nodeId\n     * @returns {j|*}\n     */\n  }, {\n    key: \"getBoundingBox\",\n    value: function getBoundingBox(nodeId) {\n      if (this.body.nodes[nodeId] !== undefined) {\n        return this.body.nodes[nodeId].shape.boundingBox;\n      }\n    }\n\n    /**\n     * Get the Ids of nodes connected to this node.\n     *\n     * @param {Node.id} nodeId\n     * @param {'to'|'from'|undefined} direction values 'from' and 'to' select respectively parent and child nodes only.\n     *                                          Any other value returns both parent and child nodes.\n     * @returns {Array}\n     */\n  }, {\n    key: \"getConnectedNodes\",\n    value: function getConnectedNodes(nodeId, direction) {\n      var nodeList = [];\n      if (this.body.nodes[nodeId] !== undefined) {\n        var node = this.body.nodes[nodeId];\n        var nodeObj = {}; // used to quickly check if node already exists\n        for (var i = 0; i < node.edges.length; i++) {\n          var edge = node.edges[i];\n          if (direction !== \"to\" && edge.toId == node.id) {\n            // these are double equals since ids can be numeric or string\n            if (nodeObj[edge.fromId] === undefined) {\n              nodeList.push(edge.fromId);\n              nodeObj[edge.fromId] = true;\n            }\n          } else if (direction !== \"from\" && edge.fromId == node.id) {\n            // these are double equals since ids can be numeric or string\n            if (nodeObj[edge.toId] === undefined) {\n              nodeList.push(edge.toId);\n              nodeObj[edge.toId] = true;\n            }\n          }\n        }\n      }\n      return nodeList;\n    }\n\n    /**\n     * Get the ids of the edges connected to this node.\n     *\n     * @param {Node.id} nodeId\n     * @returns {*}\n     */\n  }, {\n    key: \"getConnectedEdges\",\n    value: function getConnectedEdges(nodeId) {\n      var edgeList = [];\n      if (this.body.nodes[nodeId] !== undefined) {\n        var node = this.body.nodes[nodeId];\n        for (var i = 0; i < node.edges.length; i++) {\n          edgeList.push(node.edges[i].id);\n        }\n      } else {\n        console.error(\"NodeId provided for getConnectedEdges does not exist. Provided: \", nodeId);\n      }\n      return edgeList;\n    }\n\n    /**\n     * Move a node.\n     *\n     * @param {Node.id} nodeId\n     * @param {number} x\n     * @param {number} y\n     */\n  }, {\n    key: \"moveNode\",\n    value: function moveNode(nodeId, x, y) {\n      var _this4 = this;\n      if (this.body.nodes[nodeId] !== undefined) {\n        this.body.nodes[nodeId].x = Number(x);\n        this.body.nodes[nodeId].y = Number(y);\n        _setTimeout(function () {\n          _this4.body.emitter.emit(\"startSimulation\");\n        }, 0);\n      } else {\n        console.error(\"Node id supplied to moveNode does not exist. Provided: \", nodeId);\n      }\n    }\n  }]);\n  return NodesHandler;\n}();\n\nvar hasOwn$1 = hasOwnProperty_1;\n\nvar isDataDescriptor$1 = function (descriptor) {\n  return descriptor !== undefined && (hasOwn$1(descriptor, 'value') || hasOwn$1(descriptor, 'writable'));\n};\n\nvar $$4 = _export;\nvar call = functionCall;\nvar isObject$2 = isObject$j;\nvar anObject$1 = anObject$d;\nvar isDataDescriptor = isDataDescriptor$1;\nvar getOwnPropertyDescriptorModule = objectGetOwnPropertyDescriptor;\nvar getPrototypeOf = objectGetPrototypeOf;\n\n// `Reflect.get` method\n// https://tc39.es/ecma262/#sec-reflect.get\nfunction get$5(target, propertyKey /* , receiver */) {\n  var receiver = arguments.length < 3 ? target : arguments[2];\n  var descriptor, prototype;\n  if (anObject$1(target) === receiver) return target[propertyKey];\n  descriptor = getOwnPropertyDescriptorModule.f(target, propertyKey);\n  if (descriptor) return isDataDescriptor(descriptor)\n    ? descriptor.value\n    : descriptor.get === undefined ? undefined : call(descriptor.get, receiver);\n  if (isObject$2(prototype = getPrototypeOf(target))) return get$5(prototype, propertyKey, receiver);\n}\n\n$$4({ target: 'Reflect', stat: true }, {\n  get: get$5\n});\n\nvar path$4 = path$w;\n\nvar get$4 = path$4.Reflect.get;\n\nvar parent$a = get$4;\n\nvar get$3 = parent$a;\n\nvar parent$9 = get$3;\n\nvar get$2 = parent$9;\n\nvar parent$8 = get$2;\n\nvar get$1 = parent$8;\n\nvar get = get$1;\n\nvar _Reflect$get = /*@__PURE__*/getDefaultExportFromCjs(get);\n\nvar parent$7 = getOwnPropertyDescriptor$4;\n\nvar getOwnPropertyDescriptor$2 = parent$7;\n\nvar parent$6 = getOwnPropertyDescriptor$2;\n\nvar getOwnPropertyDescriptor$1 = parent$6;\n\nvar getOwnPropertyDescriptor = getOwnPropertyDescriptor$1;\n\nvar _Object$getOwnPropertyDescriptor = /*@__PURE__*/getDefaultExportFromCjs(getOwnPropertyDescriptor);\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}\n\nfunction _get() {\n  if (typeof Reflect !== \"undefined\" && _Reflect$get) {\n    var _context;\n    _get = _bindInstanceProperty(_context = _Reflect$get).call(_context);\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n      if (!base) return;\n      var desc = _Object$getOwnPropertyDescriptor(base, property);\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n      return desc.value;\n    };\n  }\n  return _get.apply(this, arguments);\n}\n\nvar $$3 = _export;\n\n// eslint-disable-next-line es/no-math-hypot -- required for testing\nvar $hypot = Math.hypot;\nvar abs = Math.abs;\nvar sqrt = Math.sqrt;\n\n// Chrome 77 bug\n// https://bugs.chromium.org/p/v8/issues/detail?id=9546\nvar FORCED$2 = !!$hypot && $hypot(Infinity, NaN) !== Infinity;\n\n// `Math.hypot` method\n// https://tc39.es/ecma262/#sec-math.hypot\n$$3({ target: 'Math', stat: true, arity: 2, forced: FORCED$2 }, {\n  // eslint-disable-next-line no-unused-vars -- required for `.length`\n  hypot: function hypot(value1, value2) {\n    var sum = 0;\n    var i = 0;\n    var aLen = arguments.length;\n    var larg = 0;\n    var arg, div;\n    while (i < aLen) {\n      arg = abs(arguments[i++]);\n      if (larg < arg) {\n        div = larg / arg;\n        sum = sum * div * div + 1;\n        larg = arg;\n      } else if (arg > 0) {\n        div = arg / larg;\n        sum += div * div;\n      } else sum += arg;\n    }\n    return larg === Infinity ? Infinity : larg * sqrt(sum);\n  }\n});\n\nvar path$3 = path$w;\n\nvar hypot$2 = path$3.Math.hypot;\n\nvar parent$5 = hypot$2;\n\nvar hypot$1 = parent$5;\n\nvar hypot = hypot$1;\n\nvar _Math$hypot = /*@__PURE__*/getDefaultExportFromCjs(hypot);\n\nfunction _createSuper$a(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$a(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct$a() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n/**\r\n * Common methods for endpoints\r\n *\r\n * @class\r\n */\nvar EndPoint = /*#__PURE__*/function () {\n  function EndPoint() {\n    _classCallCheck(this, EndPoint);\n  }\n  _createClass(EndPoint, null, [{\n    key: \"transform\",\n    value:\n    /**\r\n     * Apply transformation on points for display.\r\n     *\r\n     * The following is done:\r\n     * - rotate by the specified angle\r\n     * - multiply the (normalized) coordinates by the passed length\r\n     * - offset by the target coordinates\r\n     *\r\n     * @param points - The point(s) to be transformed.\r\n     * @param arrowData - The data determining the result of the transformation.\r\n     */\n    function transform(points, arrowData) {\n      if (!_Array$isArray(points)) {\n        points = [points];\n      }\n      var x = arrowData.point.x;\n      var y = arrowData.point.y;\n      var angle = arrowData.angle;\n      var length = arrowData.length;\n      for (var i = 0; i < points.length; ++i) {\n        var p = points[i];\n        var xt = p.x * Math.cos(angle) - p.y * Math.sin(angle);\n        var yt = p.x * Math.sin(angle) + p.y * Math.cos(angle);\n        p.x = x + length * xt;\n        p.y = y + length * yt;\n      }\n    }\n    /**\r\n     * Draw a closed path using the given real coordinates.\r\n     *\r\n     * @param ctx - The path will be rendered into this context.\r\n     * @param points - The points of the path.\r\n     */\n  }, {\n    key: \"drawPath\",\n    value: function drawPath(ctx, points) {\n      ctx.beginPath();\n      ctx.moveTo(points[0].x, points[0].y);\n      for (var i = 1; i < points.length; ++i) {\n        ctx.lineTo(points[i].x, points[i].y);\n      }\n      ctx.closePath();\n    }\n  }]);\n  return EndPoint;\n}();\n/**\r\n * Drawing methods for the arrow endpoint.\r\n */\nvar Image$1 = /*#__PURE__*/function (_EndPoint) {\n  _inherits(Image, _EndPoint);\n  var _super = _createSuper$a(Image);\n  function Image() {\n    _classCallCheck(this, Image);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Image, null, [{\n    key: \"draw\",\n    value:\n    /**\r\n     * Draw this shape at the end of a line.\r\n     *\r\n     * @param ctx - The shape will be rendered into this context.\r\n     * @param arrowData - The data determining the shape.\r\n     * @returns False as there is no way to fill an image.\r\n     */\n    function draw(ctx, arrowData) {\n      if (arrowData.image) {\n        ctx.save();\n        ctx.translate(arrowData.point.x, arrowData.point.y);\n        ctx.rotate(Math.PI / 2 + arrowData.angle);\n        var width = arrowData.imageWidth != null ? arrowData.imageWidth : arrowData.image.width;\n        var height = arrowData.imageHeight != null ? arrowData.imageHeight : arrowData.image.height;\n        arrowData.image.drawImageAtPosition(ctx, 1,\n        // scale\n        -width / 2,\n        // x\n        0,\n        // y\n        width, height);\n        ctx.restore();\n      }\n      return false;\n    }\n  }]);\n  return Image;\n}(EndPoint);\n/**\r\n * Drawing methods for the arrow endpoint.\r\n */\nvar Arrow = /*#__PURE__*/function (_EndPoint2) {\n  _inherits(Arrow, _EndPoint2);\n  var _super2 = _createSuper$a(Arrow);\n  function Arrow() {\n    _classCallCheck(this, Arrow);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(Arrow, null, [{\n    key: \"draw\",\n    value:\n    /**\r\n     * Draw this shape at the end of a line.\r\n     *\r\n     * @param ctx - The shape will be rendered into this context.\r\n     * @param arrowData - The data determining the shape.\r\n     * @returns True because ctx.fill() can be used to fill the arrow.\r\n     */\n    function draw(ctx, arrowData) {\n      // Normalized points of closed path, in the order that they should be drawn.\n      // (0, 0) is the attachment point, and the point around which should be rotated\n      var points = [{\n        x: 0,\n        y: 0\n      }, {\n        x: -1,\n        y: 0.3\n      }, {\n        x: -0.9,\n        y: 0\n      }, {\n        x: -1,\n        y: -0.3\n      }];\n      EndPoint.transform(points, arrowData);\n      EndPoint.drawPath(ctx, points);\n      return true;\n    }\n  }]);\n  return Arrow;\n}(EndPoint);\n/**\r\n * Drawing methods for the crow endpoint.\r\n */\nvar Crow = /*#__PURE__*/function () {\n  function Crow() {\n    _classCallCheck(this, Crow);\n  }\n  _createClass(Crow, null, [{\n    key: \"draw\",\n    value:\n    /**\r\n     * Draw this shape at the end of a line.\r\n     *\r\n     * @param ctx - The shape will be rendered into this context.\r\n     * @param arrowData - The data determining the shape.\r\n     * @returns True because ctx.fill() can be used to fill the arrow.\r\n     */\n    function draw(ctx, arrowData) {\n      // Normalized points of closed path, in the order that they should be drawn.\n      // (0, 0) is the attachment point, and the point around which should be rotated\n      var points = [{\n        x: -1,\n        y: 0\n      }, {\n        x: 0,\n        y: 0.3\n      }, {\n        x: -0.4,\n        y: 0\n      }, {\n        x: 0,\n        y: -0.3\n      }];\n      EndPoint.transform(points, arrowData);\n      EndPoint.drawPath(ctx, points);\n      return true;\n    }\n  }]);\n  return Crow;\n}();\n/**\r\n * Drawing methods for the curve endpoint.\r\n */\nvar Curve = /*#__PURE__*/function () {\n  function Curve() {\n    _classCallCheck(this, Curve);\n  }\n  _createClass(Curve, null, [{\n    key: \"draw\",\n    value:\n    /**\r\n     * Draw this shape at the end of a line.\r\n     *\r\n     * @param ctx - The shape will be rendered into this context.\r\n     * @param arrowData - The data determining the shape.\r\n     * @returns True because ctx.fill() can be used to fill the arrow.\r\n     */\n    function draw(ctx, arrowData) {\n      // Normalized points of closed path, in the order that they should be drawn.\n      // (0, 0) is the attachment point, and the point around which should be rotated\n      var point = {\n        x: -0.4,\n        y: 0\n      };\n      EndPoint.transform(point, arrowData);\n      // Update endpoint style for drawing transparent arc.\n      ctx.strokeStyle = ctx.fillStyle;\n      ctx.fillStyle = \"rgba(0, 0, 0, 0)\";\n      // Define curve endpoint as semicircle.\n      var pi = Math.PI;\n      var startAngle = arrowData.angle - pi / 2;\n      var endAngle = arrowData.angle + pi / 2;\n      ctx.beginPath();\n      ctx.arc(point.x, point.y, arrowData.length * 0.4, startAngle, endAngle, false);\n      ctx.stroke();\n      return true;\n    }\n  }]);\n  return Curve;\n}();\n/**\r\n * Drawing methods for the inverted curve endpoint.\r\n */\nvar InvertedCurve = /*#__PURE__*/function () {\n  function InvertedCurve() {\n    _classCallCheck(this, InvertedCurve);\n  }\n  _createClass(InvertedCurve, null, [{\n    key: \"draw\",\n    value:\n    /**\r\n     * Draw this shape at the end of a line.\r\n     *\r\n     * @param ctx - The shape will be rendered into this context.\r\n     * @param arrowData - The data determining the shape.\r\n     * @returns True because ctx.fill() can be used to fill the arrow.\r\n     */\n    function draw(ctx, arrowData) {\n      // Normalized points of closed path, in the order that they should be drawn.\n      // (0, 0) is the attachment point, and the point around which should be rotated\n      var point = {\n        x: -0.3,\n        y: 0\n      };\n      EndPoint.transform(point, arrowData);\n      // Update endpoint style for drawing transparent arc.\n      ctx.strokeStyle = ctx.fillStyle;\n      ctx.fillStyle = \"rgba(0, 0, 0, 0)\";\n      // Define inverted curve endpoint as semicircle.\n      var pi = Math.PI;\n      var startAngle = arrowData.angle + pi / 2;\n      var endAngle = arrowData.angle + 3 * pi / 2;\n      ctx.beginPath();\n      ctx.arc(point.x, point.y, arrowData.length * 0.4, startAngle, endAngle, false);\n      ctx.stroke();\n      return true;\n    }\n  }]);\n  return InvertedCurve;\n}();\n/**\r\n * Drawing methods for the trinagle endpoint.\r\n */\nvar Triangle = /*#__PURE__*/function () {\n  function Triangle() {\n    _classCallCheck(this, Triangle);\n  }\n  _createClass(Triangle, null, [{\n    key: \"draw\",\n    value:\n    /**\r\n     * Draw this shape at the end of a line.\r\n     *\r\n     * @param ctx - The shape will be rendered into this context.\r\n     * @param arrowData - The data determining the shape.\r\n     * @returns True because ctx.fill() can be used to fill the arrow.\r\n     */\n    function draw(ctx, arrowData) {\n      // Normalized points of closed path, in the order that they should be drawn.\n      // (0, 0) is the attachment point, and the point around which should be rotated\n      var points = [{\n        x: 0.02,\n        y: 0\n      }, {\n        x: -1,\n        y: 0.3\n      }, {\n        x: -1,\n        y: -0.3\n      }];\n      EndPoint.transform(points, arrowData);\n      EndPoint.drawPath(ctx, points);\n      return true;\n    }\n  }]);\n  return Triangle;\n}();\n/**\r\n * Drawing methods for the inverted trinagle endpoint.\r\n */\nvar InvertedTriangle = /*#__PURE__*/function () {\n  function InvertedTriangle() {\n    _classCallCheck(this, InvertedTriangle);\n  }\n  _createClass(InvertedTriangle, null, [{\n    key: \"draw\",\n    value:\n    /**\r\n     * Draw this shape at the end of a line.\r\n     *\r\n     * @param ctx - The shape will be rendered into this context.\r\n     * @param arrowData - The data determining the shape.\r\n     * @returns True because ctx.fill() can be used to fill the arrow.\r\n     */\n    function draw(ctx, arrowData) {\n      // Normalized points of closed path, in the order that they should be drawn.\n      // (0, 0) is the attachment point, and the point around which should be rotated\n      var points = [{\n        x: 0,\n        y: 0.3\n      }, {\n        x: 0,\n        y: -0.3\n      }, {\n        x: -1,\n        y: 0\n      }];\n      EndPoint.transform(points, arrowData);\n      EndPoint.drawPath(ctx, points);\n      return true;\n    }\n  }]);\n  return InvertedTriangle;\n}();\n/**\r\n * Drawing methods for the circle endpoint.\r\n */\nvar Circle = /*#__PURE__*/function () {\n  function Circle() {\n    _classCallCheck(this, Circle);\n  }\n  _createClass(Circle, null, [{\n    key: \"draw\",\n    value:\n    /**\r\n     * Draw this shape at the end of a line.\r\n     *\r\n     * @param ctx - The shape will be rendered into this context.\r\n     * @param arrowData - The data determining the shape.\r\n     * @returns True because ctx.fill() can be used to fill the arrow.\r\n     */\n    function draw(ctx, arrowData) {\n      var point = {\n        x: -0.4,\n        y: 0\n      };\n      EndPoint.transform(point, arrowData);\n      drawCircle(ctx, point.x, point.y, arrowData.length * 0.4);\n      return true;\n    }\n  }]);\n  return Circle;\n}();\n/**\r\n * Drawing methods for the bar endpoint.\r\n */\nvar Bar = /*#__PURE__*/function () {\n  function Bar() {\n    _classCallCheck(this, Bar);\n  }\n  _createClass(Bar, null, [{\n    key: \"draw\",\n    value:\n    /**\r\n     * Draw this shape at the end of a line.\r\n     *\r\n     * @param ctx - The shape will be rendered into this context.\r\n     * @param arrowData - The data determining the shape.\r\n     * @returns True because ctx.fill() can be used to fill the arrow.\r\n     */\n    function draw(ctx, arrowData) {\n      /*\r\n      var points = [\r\n        {x:0, y:0.5},\r\n        {x:0, y:-0.5}\r\n      ];\r\n           EndPoint.transform(points, arrowData);\r\n      ctx.beginPath();\r\n      ctx.moveTo(points[0].x, points[0].y);\r\n      ctx.lineTo(points[1].x, points[1].y);\r\n      ctx.stroke();\r\n      */\n      var points = [{\n        x: 0,\n        y: 0.5\n      }, {\n        x: 0,\n        y: -0.5\n      }, {\n        x: -0.15,\n        y: -0.5\n      }, {\n        x: -0.15,\n        y: 0.5\n      }];\n      EndPoint.transform(points, arrowData);\n      EndPoint.drawPath(ctx, points);\n      return true;\n    }\n  }]);\n  return Bar;\n}();\n/**\r\n * Drawing methods for the box endpoint.\r\n */\nvar Box = /*#__PURE__*/function () {\n  function Box() {\n    _classCallCheck(this, Box);\n  }\n  _createClass(Box, null, [{\n    key: \"draw\",\n    value:\n    /**\r\n     * Draw this shape at the end of a line.\r\n     *\r\n     * @param ctx - The shape will be rendered into this context.\r\n     * @param arrowData - The data determining the shape.\r\n     * @returns True because ctx.fill() can be used to fill the arrow.\r\n     */\n    function draw(ctx, arrowData) {\n      var points = [{\n        x: 0,\n        y: 0.3\n      }, {\n        x: 0,\n        y: -0.3\n      }, {\n        x: -0.6,\n        y: -0.3\n      }, {\n        x: -0.6,\n        y: 0.3\n      }];\n      EndPoint.transform(points, arrowData);\n      EndPoint.drawPath(ctx, points);\n      return true;\n    }\n  }]);\n  return Box;\n}();\n/**\r\n * Drawing methods for the diamond endpoint.\r\n */\nvar Diamond = /*#__PURE__*/function () {\n  function Diamond() {\n    _classCallCheck(this, Diamond);\n  }\n  _createClass(Diamond, null, [{\n    key: \"draw\",\n    value:\n    /**\r\n     * Draw this shape at the end of a line.\r\n     *\r\n     * @param ctx - The shape will be rendered into this context.\r\n     * @param arrowData - The data determining the shape.\r\n     * @returns True because ctx.fill() can be used to fill the arrow.\r\n     */\n    function draw(ctx, arrowData) {\n      var points = [{\n        x: 0,\n        y: 0\n      }, {\n        x: -0.5,\n        y: -0.3\n      }, {\n        x: -1,\n        y: 0\n      }, {\n        x: -0.5,\n        y: 0.3\n      }];\n      EndPoint.transform(points, arrowData);\n      EndPoint.drawPath(ctx, points);\n      return true;\n    }\n  }]);\n  return Diamond;\n}();\n/**\r\n * Drawing methods for the vee endpoint.\r\n */\nvar Vee = /*#__PURE__*/function () {\n  function Vee() {\n    _classCallCheck(this, Vee);\n  }\n  _createClass(Vee, null, [{\n    key: \"draw\",\n    value:\n    /**\r\n     * Draw this shape at the end of a line.\r\n     *\r\n     * @param ctx - The shape will be rendered into this context.\r\n     * @param arrowData - The data determining the shape.\r\n     * @returns True because ctx.fill() can be used to fill the arrow.\r\n     */\n    function draw(ctx, arrowData) {\n      // Normalized points of closed path, in the order that they should be drawn.\n      // (0, 0) is the attachment point, and the point around which should be rotated\n      var points = [{\n        x: -1,\n        y: 0.3\n      }, {\n        x: -0.5,\n        y: 0\n      }, {\n        x: -1,\n        y: -0.3\n      }, {\n        x: 0,\n        y: 0\n      }];\n      EndPoint.transform(points, arrowData);\n      EndPoint.drawPath(ctx, points);\n      return true;\n    }\n  }]);\n  return Vee;\n}();\n/**\r\n * Drawing methods for the endpoints.\r\n */\nvar EndPoints = /*#__PURE__*/function () {\n  function EndPoints() {\n    _classCallCheck(this, EndPoints);\n  }\n  _createClass(EndPoints, null, [{\n    key: \"draw\",\n    value:\n    /**\r\n     * Draw an endpoint.\r\n     *\r\n     * @param ctx - The shape will be rendered into this context.\r\n     * @param arrowData - The data determining the shape.\r\n     * @returns True if ctx.fill() can be used to fill the arrow, false otherwise.\r\n     */\n    function draw(ctx, arrowData) {\n      var type;\n      if (arrowData.type) {\n        type = arrowData.type.toLowerCase();\n      }\n      switch (type) {\n        case \"image\":\n          return Image$1.draw(ctx, arrowData);\n        case \"circle\":\n          return Circle.draw(ctx, arrowData);\n        case \"box\":\n          return Box.draw(ctx, arrowData);\n        case \"crow\":\n          return Crow.draw(ctx, arrowData);\n        case \"curve\":\n          return Curve.draw(ctx, arrowData);\n        case \"diamond\":\n          return Diamond.draw(ctx, arrowData);\n        case \"inv_curve\":\n          return InvertedCurve.draw(ctx, arrowData);\n        case \"triangle\":\n          return Triangle.draw(ctx, arrowData);\n        case \"inv_triangle\":\n          return InvertedTriangle.draw(ctx, arrowData);\n        case \"bar\":\n          return Bar.draw(ctx, arrowData);\n        case \"vee\":\n          return Vee.draw(ctx, arrowData);\n        case \"arrow\": // fall-through\n        default:\n          return Arrow.draw(ctx, arrowData);\n      }\n    }\n  }]);\n  return EndPoints;\n}();\n\nfunction ownKeys$1(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor$1(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var _context2, _context3; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context2 = ownKeys$1(Object(t), !0)).call(_context2, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context3 = ownKeys$1(Object(t))).call(_context3, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor$1(t, r)); }); } return e; }\n/**\r\n * The Base Class for all edges.\r\n */\nvar EdgeBase = /*#__PURE__*/function () {\n  /**\r\n   * Create a new instance.\r\n   *\r\n   * @param options - The options object of given edge.\r\n   * @param _body - The body of the network.\r\n   * @param _labelModule - Label module.\r\n   */\n  function EdgeBase(options, _body, _labelModule) {\n    _classCallCheck(this, EdgeBase);\n    this._body = _body;\n    this._labelModule = _labelModule;\n    this.color = {};\n    this.colorDirty = true;\n    this.hoverWidth = 1.5;\n    this.selectionWidth = 2;\n    this.setOptions(options);\n    this.fromPoint = this.from;\n    this.toPoint = this.to;\n  }\n  /** @inheritDoc */\n  _createClass(EdgeBase, [{\n    key: \"connect\",\n    value: function connect() {\n      this.from = this._body.nodes[this.options.from];\n      this.to = this._body.nodes[this.options.to];\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      return false;\n    }\n    /**\r\n     * Set new edge options.\r\n     *\r\n     * @param options - The new edge options object.\r\n     */\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.options = options;\n      this.from = this._body.nodes[this.options.from];\n      this.to = this._body.nodes[this.options.to];\n      this.id = this.options.id;\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"drawLine\",\n    value: function drawLine(ctx, values, _selected, _hover) {\n      var viaNode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.getViaNode();\n      // set style\n      ctx.strokeStyle = this.getColor(ctx, values);\n      ctx.lineWidth = values.width;\n      if (values.dashes !== false) {\n        this._drawDashedLine(ctx, values, viaNode);\n      } else {\n        this._drawLine(ctx, values, viaNode);\n      }\n    }\n    /**\r\n     * Draw a line with given style between two nodes through supplied node(s).\r\n     *\r\n     * @param ctx - The context that will be used for rendering.\r\n     * @param values - Formatting values like color, opacity or shadow.\r\n     * @param viaNode - Additional control point(s) for the edge.\r\n     * @param fromPoint - TODO: Seems ignored, remove?\r\n     * @param toPoint - TODO: Seems ignored, remove?\r\n     */\n  }, {\n    key: \"_drawLine\",\n    value: function _drawLine(ctx, values, viaNode, fromPoint, toPoint) {\n      if (this.from != this.to) {\n        // draw line\n        this._line(ctx, values, viaNode, fromPoint, toPoint);\n      } else {\n        var _this$_getCircleData = this._getCircleData(ctx),\n          _this$_getCircleData2 = _slicedToArray(_this$_getCircleData, 3),\n          x = _this$_getCircleData2[0],\n          y = _this$_getCircleData2[1],\n          radius = _this$_getCircleData2[2];\n        this._circle(ctx, values, x, y, radius);\n      }\n    }\n    /**\r\n     * Draw a dashed line with given style between two nodes through supplied node(s).\r\n     *\r\n     * @param ctx - The context that will be used for rendering.\r\n     * @param values - Formatting values like color, opacity or shadow.\r\n     * @param viaNode - Additional control point(s) for the edge.\r\n     * @param _fromPoint - Ignored (TODO: remove in the future).\r\n     * @param _toPoint - Ignored (TODO: remove in the future).\r\n     */\n  }, {\n    key: \"_drawDashedLine\",\n    value: function _drawDashedLine(ctx, values, viaNode, _fromPoint, _toPoint) {\n      ctx.lineCap = \"round\";\n      var pattern = _Array$isArray(values.dashes) ? values.dashes : [5, 5];\n      // only firefox and chrome support this method, else we use the legacy one.\n      if (ctx.setLineDash !== undefined) {\n        ctx.save();\n        // set dash settings for chrome or firefox\n        ctx.setLineDash(pattern);\n        ctx.lineDashOffset = 0;\n        // draw the line\n        if (this.from != this.to) {\n          // draw line\n          this._line(ctx, values, viaNode);\n        } else {\n          var _this$_getCircleData3 = this._getCircleData(ctx),\n            _this$_getCircleData4 = _slicedToArray(_this$_getCircleData3, 3),\n            x = _this$_getCircleData4[0],\n            y = _this$_getCircleData4[1],\n            radius = _this$_getCircleData4[2];\n          this._circle(ctx, values, x, y, radius);\n        }\n        // restore the dash settings.\n        ctx.setLineDash([0]);\n        ctx.lineDashOffset = 0;\n        ctx.restore();\n      } else {\n        // unsupporting smooth lines\n        if (this.from != this.to) {\n          // draw line\n          drawDashedLine(ctx, this.from.x, this.from.y, this.to.x, this.to.y, pattern);\n        } else {\n          var _this$_getCircleData5 = this._getCircleData(ctx),\n            _this$_getCircleData6 = _slicedToArray(_this$_getCircleData5, 3),\n            _x = _this$_getCircleData6[0],\n            _y = _this$_getCircleData6[1],\n            _radius = _this$_getCircleData6[2];\n          this._circle(ctx, values, _x, _y, _radius);\n        }\n        // draw shadow if enabled\n        this.enableShadow(ctx, values);\n        ctx.stroke();\n        // disable shadows for other elements.\n        this.disableShadow(ctx, values);\n      }\n    }\n    /**\r\n     * Find the intersection between the border of the node and the edge.\r\n     *\r\n     * @param node - The node (either from or to node of the edge).\r\n     * @param ctx - The context that will be used for rendering.\r\n     * @param options - Additional options.\r\n     * @returns Cartesian coordinates of the intersection between the border of the node and the edge.\r\n     */\n  }, {\n    key: \"findBorderPosition\",\n    value: function findBorderPosition(node, ctx, options) {\n      if (this.from != this.to) {\n        return this._findBorderPosition(node, ctx, options);\n      } else {\n        return this._findBorderPositionCircle(node, ctx, options);\n      }\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"findBorderPositions\",\n    value: function findBorderPositions(ctx) {\n      if (this.from != this.to) {\n        return {\n          from: this._findBorderPosition(this.from, ctx),\n          to: this._findBorderPosition(this.to, ctx)\n        };\n      } else {\n        var _context;\n        var _this$_getCircleData$ = _sliceInstanceProperty(_context = this._getCircleData(ctx)).call(_context, 0, 2),\n          _this$_getCircleData$2 = _slicedToArray(_this$_getCircleData$, 2),\n          x = _this$_getCircleData$2[0],\n          y = _this$_getCircleData$2[1];\n        return {\n          from: this._findBorderPositionCircle(this.from, ctx, {\n            x: x,\n            y: y,\n            low: 0.25,\n            high: 0.6,\n            direction: -1\n          }),\n          to: this._findBorderPositionCircle(this.from, ctx, {\n            x: x,\n            y: y,\n            low: 0.6,\n            high: 0.8,\n            direction: 1\n          })\n        };\n      }\n    }\n    /**\r\n     * Compute the center point and radius of an edge connected to the same node at both ends.\r\n     *\r\n     * @param ctx - The context that will be used for rendering.\r\n     * @returns `[x, y, radius]`\r\n     */\n  }, {\n    key: \"_getCircleData\",\n    value: function _getCircleData(ctx) {\n      var radius = this.options.selfReference.size;\n      if (ctx !== undefined) {\n        if (this.from.shape.width === undefined) {\n          this.from.shape.resize(ctx);\n        }\n      }\n      // get circle coordinates\n      var coordinates = getSelfRefCoordinates(ctx, this.options.selfReference.angle, radius, this.from);\n      return [coordinates.x, coordinates.y, radius];\n    }\n    /**\r\n     * Get a point on a circle.\r\n     *\r\n     * @param x - Center of the circle on the x axis.\r\n     * @param y - Center of the circle on the y axis.\r\n     * @param radius - Radius of the circle.\r\n     * @param position - Value between 0 (line start) and 1 (line end).\r\n     * @returns Cartesian coordinates of requested point on the circle.\r\n     */\n  }, {\n    key: \"_pointOnCircle\",\n    value: function _pointOnCircle(x, y, radius, position) {\n      var angle = position * 2 * Math.PI;\n      return {\n        x: x + radius * Math.cos(angle),\n        y: y - radius * Math.sin(angle)\n      };\n    }\n    /**\r\n     * Find the intersection between the border of the node and the edge.\r\n     *\r\n     * @remarks\r\n     * This function uses binary search to look for the point where the circle crosses the border of the node.\r\n     * @param nearNode - The node (either from or to node of the edge).\r\n     * @param ctx - The context that will be used for rendering.\r\n     * @param options - Additional options.\r\n     * @returns Cartesian coordinates of the intersection between the border of the node and the edge.\r\n     */\n  }, {\n    key: \"_findBorderPositionCircle\",\n    value: function _findBorderPositionCircle(nearNode, ctx, options) {\n      var x = options.x;\n      var y = options.y;\n      var low = options.low;\n      var high = options.high;\n      var direction = options.direction;\n      var maxIterations = 10;\n      var radius = this.options.selfReference.size;\n      var threshold = 0.05;\n      var pos;\n      var middle = (low + high) * 0.5;\n      var endPointOffset = 0;\n      if (this.options.arrowStrikethrough === true) {\n        if (direction === -1) {\n          endPointOffset = this.options.endPointOffset.from;\n        } else if (direction === 1) {\n          endPointOffset = this.options.endPointOffset.to;\n        }\n      }\n      var iteration = 0;\n      do {\n        middle = (low + high) * 0.5;\n        pos = this._pointOnCircle(x, y, radius, middle);\n        var angle = Math.atan2(nearNode.y - pos.y, nearNode.x - pos.x);\n        var distanceToBorder = nearNode.distanceToBorder(ctx, angle) + endPointOffset;\n        var distanceToPoint = Math.sqrt(Math.pow(pos.x - nearNode.x, 2) + Math.pow(pos.y - nearNode.y, 2));\n        var difference = distanceToBorder - distanceToPoint;\n        if (Math.abs(difference) < threshold) {\n          break; // found\n        } else if (difference > 0) {\n          // distance to nodes is larger than distance to border --> t needs to be bigger if we're looking at the to node.\n          if (direction > 0) {\n            low = middle;\n          } else {\n            high = middle;\n          }\n        } else {\n          if (direction > 0) {\n            high = middle;\n          } else {\n            low = middle;\n          }\n        }\n        ++iteration;\n      } while (low <= high && iteration < maxIterations);\n      return _objectSpread$1(_objectSpread$1({}, pos), {}, {\n        t: middle\n      });\n    }\n    /**\r\n     * Get the line width of the edge. Depends on width and whether one of the connected nodes is selected.\r\n     *\r\n     * @param selected - Determines wheter the line is selected.\r\n     * @param hover - Determines wheter the line is being hovered, only applies if selected is false.\r\n     * @returns The width of the line.\r\n     */\n  }, {\n    key: \"getLineWidth\",\n    value: function getLineWidth(selected, hover) {\n      if (selected === true) {\n        return Math.max(this.selectionWidth, 0.3 / this._body.view.scale);\n      } else if (hover === true) {\n        return Math.max(this.hoverWidth, 0.3 / this._body.view.scale);\n      } else {\n        return Math.max(this.options.width, 0.3 / this._body.view.scale);\n      }\n    }\n    /**\r\n     * Compute the color or gradient for given edge.\r\n     *\r\n     * @param ctx - The context that will be used for rendering.\r\n     * @param values - Formatting values like color, opacity or shadow.\r\n     * @param _selected - Ignored (TODO: remove in the future).\r\n     * @param _hover - Ignored (TODO: remove in the future).\r\n     * @returns Color string if single color is inherited or gradient if two.\r\n     */\n  }, {\n    key: \"getColor\",\n    value: function getColor(ctx, values) {\n      if (values.inheritsColor !== false) {\n        // when this is a loop edge, just use the 'from' method\n        if (values.inheritsColor === \"both\" && this.from.id !== this.to.id) {\n          var grd = ctx.createLinearGradient(this.from.x, this.from.y, this.to.x, this.to.y);\n          var fromColor = this.from.options.color.highlight.border;\n          var toColor = this.to.options.color.highlight.border;\n          if (this.from.selected === false && this.to.selected === false) {\n            fromColor = overrideOpacity(this.from.options.color.border, values.opacity);\n            toColor = overrideOpacity(this.to.options.color.border, values.opacity);\n          } else if (this.from.selected === true && this.to.selected === false) {\n            toColor = this.to.options.color.border;\n          } else if (this.from.selected === false && this.to.selected === true) {\n            fromColor = this.from.options.color.border;\n          }\n          grd.addColorStop(0, fromColor);\n          grd.addColorStop(1, toColor);\n          // -------------------- this returns -------------------- //\n          return grd;\n        }\n        if (values.inheritsColor === \"to\") {\n          return overrideOpacity(this.to.options.color.border, values.opacity);\n        } else {\n          // \"from\"\n          return overrideOpacity(this.from.options.color.border, values.opacity);\n        }\n      } else {\n        return overrideOpacity(values.color, values.opacity);\n      }\n    }\n    /**\r\n     * Draw a line from a node to itself, a circle.\r\n     *\r\n     * @param ctx - The context that will be used for rendering.\r\n     * @param values - Formatting values like color, opacity or shadow.\r\n     * @param x - Center of the circle on the x axis.\r\n     * @param y - Center of the circle on the y axis.\r\n     * @param radius - Radius of the circle.\r\n     */\n  }, {\n    key: \"_circle\",\n    value: function _circle(ctx, values, x, y, radius) {\n      // draw shadow if enabled\n      this.enableShadow(ctx, values);\n      //full circle\n      var angleFrom = 0;\n      var angleTo = Math.PI * 2;\n      if (!this.options.selfReference.renderBehindTheNode) {\n        //render only parts which are not overlaping with parent node\n        //need to find x,y of from point and x,y to point\n        //calculating radians\n        var low = this.options.selfReference.angle;\n        var high = this.options.selfReference.angle + Math.PI;\n        var pointTFrom = this._findBorderPositionCircle(this.from, ctx, {\n          x: x,\n          y: y,\n          low: low,\n          high: high,\n          direction: -1\n        });\n        var pointTTo = this._findBorderPositionCircle(this.from, ctx, {\n          x: x,\n          y: y,\n          low: low,\n          high: high,\n          direction: 1\n        });\n        angleFrom = Math.atan2(pointTFrom.y - y, pointTFrom.x - x);\n        angleTo = Math.atan2(pointTTo.y - y, pointTTo.x - x);\n      }\n      // draw a circle\n      ctx.beginPath();\n      ctx.arc(x, y, radius, angleFrom, angleTo, false);\n      ctx.stroke();\n      // disable shadows for other elements.\n      this.disableShadow(ctx, values);\n    }\n    /**\r\n     * @inheritDoc\r\n     * @remarks\r\n     * http://stackoverflow.com/questions/849211/shortest-distancae-between-a-point-and-a-line-segment\r\n     */\n  }, {\n    key: \"getDistanceToEdge\",\n    value: function getDistanceToEdge(x1, y1, x2, y2, x3, y3) {\n      if (this.from != this.to) {\n        return this._getDistanceToEdge(x1, y1, x2, y2, x3, y3);\n      } else {\n        var _this$_getCircleData7 = this._getCircleData(undefined),\n          _this$_getCircleData8 = _slicedToArray(_this$_getCircleData7, 3),\n          x = _this$_getCircleData8[0],\n          y = _this$_getCircleData8[1],\n          radius = _this$_getCircleData8[2];\n        var dx = x - x3;\n        var dy = y - y3;\n        return Math.abs(Math.sqrt(dx * dx + dy * dy) - radius);\n      }\n    }\n    /**\r\n     * Calculate the distance between a point (x3, y3) and a line segment from (x1, y1) to (x2, y2).\r\n     *\r\n     * @param x1 - First end of the line segment on the x axis.\r\n     * @param y1 - First end of the line segment on the y axis.\r\n     * @param x2 - Second end of the line segment on the x axis.\r\n     * @param y2 - Second end of the line segment on the y axis.\r\n     * @param x3 - Position of the point on the x axis.\r\n     * @param y3 - Position of the point on the y axis.\r\n     * @returns The distance between the line segment and the point.\r\n     */\n  }, {\n    key: \"_getDistanceToLine\",\n    value: function _getDistanceToLine(x1, y1, x2, y2, x3, y3) {\n      var px = x2 - x1;\n      var py = y2 - y1;\n      var something = px * px + py * py;\n      var u = ((x3 - x1) * px + (y3 - y1) * py) / something;\n      if (u > 1) {\n        u = 1;\n      } else if (u < 0) {\n        u = 0;\n      }\n      var x = x1 + u * px;\n      var y = y1 + u * py;\n      var dx = x - x3;\n      var dy = y - y3;\n      //# Note: If the actual distance does not matter,\n      //# if you only want to compare what this function\n      //# returns to other results of this function, you\n      //# can just return the squared distance instead\n      //# (i.e. remove the sqrt) to gain a little performance\n      return Math.sqrt(dx * dx + dy * dy);\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"getArrowData\",\n    value: function getArrowData(ctx, position, viaNode, _selected, _hover, values) {\n      // set lets\n      var angle;\n      var arrowPoint;\n      var node1;\n      var node2;\n      var reversed;\n      var scaleFactor;\n      var type;\n      var lineWidth = values.width;\n      if (position === \"from\") {\n        node1 = this.from;\n        node2 = this.to;\n        reversed = values.fromArrowScale < 0;\n        scaleFactor = Math.abs(values.fromArrowScale);\n        type = values.fromArrowType;\n      } else if (position === \"to\") {\n        node1 = this.to;\n        node2 = this.from;\n        reversed = values.toArrowScale < 0;\n        scaleFactor = Math.abs(values.toArrowScale);\n        type = values.toArrowType;\n      } else {\n        node1 = this.to;\n        node2 = this.from;\n        reversed = values.middleArrowScale < 0;\n        scaleFactor = Math.abs(values.middleArrowScale);\n        type = values.middleArrowType;\n      }\n      var length = 15 * scaleFactor + 3 * lineWidth; // 3* lineWidth is the width of the edge.\n      // if not connected to itself\n      if (node1 != node2) {\n        var approximateEdgeLength = _Math$hypot(node1.x - node2.x, node1.y - node2.y);\n        var relativeLength = length / approximateEdgeLength;\n        if (position !== \"middle\") {\n          // draw arrow head\n          if (this.options.smooth.enabled === true) {\n            var pointT = this._findBorderPosition(node1, ctx, {\n              via: viaNode\n            });\n            var guidePos = this.getPoint(pointT.t + relativeLength * (position === \"from\" ? 1 : -1), viaNode);\n            angle = Math.atan2(pointT.y - guidePos.y, pointT.x - guidePos.x);\n            arrowPoint = pointT;\n          } else {\n            angle = Math.atan2(node1.y - node2.y, node1.x - node2.x);\n            arrowPoint = this._findBorderPosition(node1, ctx);\n          }\n        } else {\n          // Negative half length reverses arrow direction.\n          var halfLength = (reversed ? -relativeLength : relativeLength) / 2;\n          var guidePos1 = this.getPoint(0.5 + halfLength, viaNode);\n          var guidePos2 = this.getPoint(0.5 - halfLength, viaNode);\n          angle = Math.atan2(guidePos1.y - guidePos2.y, guidePos1.x - guidePos2.x);\n          arrowPoint = this.getPoint(0.5, viaNode);\n        }\n      } else {\n        // draw circle\n        var _this$_getCircleData9 = this._getCircleData(ctx),\n          _this$_getCircleData10 = _slicedToArray(_this$_getCircleData9, 3),\n          x = _this$_getCircleData10[0],\n          y = _this$_getCircleData10[1],\n          radius = _this$_getCircleData10[2];\n        if (position === \"from\") {\n          var low = this.options.selfReference.angle;\n          var high = this.options.selfReference.angle + Math.PI;\n          var _pointT = this._findBorderPositionCircle(this.from, ctx, {\n            x: x,\n            y: y,\n            low: low,\n            high: high,\n            direction: -1\n          });\n          angle = _pointT.t * -2 * Math.PI + 1.5 * Math.PI + 0.1 * Math.PI;\n          arrowPoint = _pointT;\n        } else if (position === \"to\") {\n          var _low = this.options.selfReference.angle;\n          var _high = this.options.selfReference.angle + Math.PI;\n          var _pointT2 = this._findBorderPositionCircle(this.from, ctx, {\n            x: x,\n            y: y,\n            low: _low,\n            high: _high,\n            direction: 1\n          });\n          angle = _pointT2.t * -2 * Math.PI + 1.5 * Math.PI - 1.1 * Math.PI;\n          arrowPoint = _pointT2;\n        } else {\n          var pos = this.options.selfReference.angle / (2 * Math.PI);\n          arrowPoint = this._pointOnCircle(x, y, radius, pos);\n          angle = pos * -2 * Math.PI + 1.5 * Math.PI + 0.1 * Math.PI;\n        }\n      }\n      var xi = arrowPoint.x - length * 0.9 * Math.cos(angle);\n      var yi = arrowPoint.y - length * 0.9 * Math.sin(angle);\n      var arrowCore = {\n        x: xi,\n        y: yi\n      };\n      return {\n        point: arrowPoint,\n        core: arrowCore,\n        angle: angle,\n        length: length,\n        type: type\n      };\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"drawArrowHead\",\n    value: function drawArrowHead(ctx, values, _selected, _hover, arrowData) {\n      // set style\n      ctx.strokeStyle = this.getColor(ctx, values);\n      ctx.fillStyle = ctx.strokeStyle;\n      ctx.lineWidth = values.width;\n      var canFill = EndPoints.draw(ctx, arrowData);\n      if (canFill) {\n        // draw shadow if enabled\n        this.enableShadow(ctx, values);\n        _fillInstanceProperty(ctx).call(ctx);\n        // disable shadows for other elements.\n        this.disableShadow(ctx, values);\n      }\n    }\n    /**\r\n     * Set the shadow formatting values in the context if enabled, do nothing otherwise.\r\n     *\r\n     * @param ctx - The context that will be used for rendering.\r\n     * @param values - Formatting values for the shadow.\r\n     */\n  }, {\n    key: \"enableShadow\",\n    value: function enableShadow(ctx, values) {\n      if (values.shadow === true) {\n        ctx.shadowColor = values.shadowColor;\n        ctx.shadowBlur = values.shadowSize;\n        ctx.shadowOffsetX = values.shadowX;\n        ctx.shadowOffsetY = values.shadowY;\n      }\n    }\n    /**\r\n     * Reset the shadow formatting values in the context if enabled, do nothing otherwise.\r\n     *\r\n     * @param ctx - The context that will be used for rendering.\r\n     * @param values - Formatting values for the shadow.\r\n     */\n  }, {\n    key: \"disableShadow\",\n    value: function disableShadow(ctx, values) {\n      if (values.shadow === true) {\n        ctx.shadowColor = \"rgba(0,0,0,0)\";\n        ctx.shadowBlur = 0;\n        ctx.shadowOffsetX = 0;\n        ctx.shadowOffsetY = 0;\n      }\n    }\n    /**\r\n     * Render the background according to the formatting values.\r\n     *\r\n     * @param ctx - The context that will be used for rendering.\r\n     * @param values - Formatting values for the background.\r\n     */\n  }, {\n    key: \"drawBackground\",\n    value: function drawBackground(ctx, values) {\n      if (values.background !== false) {\n        // save original line attrs\n        var origCtxAttr = {\n          strokeStyle: ctx.strokeStyle,\n          lineWidth: ctx.lineWidth,\n          dashes: ctx.dashes\n        };\n        ctx.strokeStyle = values.backgroundColor;\n        ctx.lineWidth = values.backgroundSize;\n        this.setStrokeDashed(ctx, values.backgroundDashes);\n        ctx.stroke();\n        // restore original line attrs\n        ctx.strokeStyle = origCtxAttr.strokeStyle;\n        ctx.lineWidth = origCtxAttr.lineWidth;\n        ctx.dashes = origCtxAttr.dashes;\n        this.setStrokeDashed(ctx, values.dashes);\n      }\n    }\n    /**\r\n     * Set the line dash pattern if supported. Logs a warning to the console if it isn't supported.\r\n     *\r\n     * @param ctx - The context that will be used for rendering.\r\n     * @param dashes - The pattern [line, space, line…], true for default dashed line or false for normal line.\r\n     */\n  }, {\n    key: \"setStrokeDashed\",\n    value: function setStrokeDashed(ctx, dashes) {\n      if (dashes !== false) {\n        if (ctx.setLineDash !== undefined) {\n          var pattern = _Array$isArray(dashes) ? dashes : [5, 5];\n          ctx.setLineDash(pattern);\n        } else {\n          console.warn(\"setLineDash is not supported in this browser. The dashed stroke cannot be used.\");\n        }\n      } else {\n        if (ctx.setLineDash !== undefined) {\n          ctx.setLineDash([]);\n        } else {\n          console.warn(\"setLineDash is not supported in this browser. The dashed stroke cannot be used.\");\n        }\n      }\n    }\n  }]);\n  return EdgeBase;\n}();\n\nfunction ownKeys(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor$1(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var _context, _context2; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context = ownKeys(Object(t), !0)).call(_context, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context2 = ownKeys(Object(t))).call(_context2, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor$1(t, r)); }); } return e; }\nfunction _createSuper$9(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$9(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct$9() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n/**\r\n * The Base Class for all Bezier edges.\r\n * Bezier curves are used to model smooth gradual curves in paths between nodes.\r\n */\nvar BezierEdgeBase = /*#__PURE__*/function (_EdgeBase) {\n  _inherits(BezierEdgeBase, _EdgeBase);\n  var _super = _createSuper$9(BezierEdgeBase);\n  /**\r\n   * Create a new instance.\r\n   *\r\n   * @param options - The options object of given edge.\r\n   * @param body - The body of the network.\r\n   * @param labelModule - Label module.\r\n   */\n  function BezierEdgeBase(options, body, labelModule) {\n    _classCallCheck(this, BezierEdgeBase);\n    return _super.call(this, options, body, labelModule);\n  }\n  /**\r\n   * Find the intersection between the border of the node and the edge.\r\n   *\r\n   * @remarks\r\n   * This function uses binary search to look for the point where the bezier curve crosses the border of the node.\r\n   * @param nearNode - The node (either from or to node of the edge).\r\n   * @param ctx - The context that will be used for rendering.\r\n   * @param viaNode - Additional node(s) the edge passes through.\r\n   * @returns Cartesian coordinates of the intersection between the border of the node and the edge.\r\n   */\n  _createClass(BezierEdgeBase, [{\n    key: \"_findBorderPositionBezier\",\n    value: function _findBorderPositionBezier(nearNode, ctx) {\n      var viaNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._getViaCoordinates();\n      var maxIterations = 10;\n      var threshold = 0.2;\n      var from = false;\n      var high = 1;\n      var low = 0;\n      var node = this.to;\n      var pos;\n      var middle;\n      var endPointOffset = this.options.endPointOffset ? this.options.endPointOffset.to : 0;\n      if (nearNode.id === this.from.id) {\n        node = this.from;\n        from = true;\n        endPointOffset = this.options.endPointOffset ? this.options.endPointOffset.from : 0;\n      }\n      if (this.options.arrowStrikethrough === false) {\n        endPointOffset = 0;\n      }\n      var iteration = 0;\n      do {\n        middle = (low + high) * 0.5;\n        pos = this.getPoint(middle, viaNode);\n        var angle = Math.atan2(node.y - pos.y, node.x - pos.x);\n        var distanceToBorder = node.distanceToBorder(ctx, angle) + endPointOffset;\n        var distanceToPoint = Math.sqrt(Math.pow(pos.x - node.x, 2) + Math.pow(pos.y - node.y, 2));\n        var difference = distanceToBorder - distanceToPoint;\n        if (Math.abs(difference) < threshold) {\n          break; // found\n        } else if (difference < 0) {\n          // distance to nodes is larger than distance to border --> t needs to be bigger if we're looking at the to node.\n          if (from === false) {\n            low = middle;\n          } else {\n            high = middle;\n          }\n        } else {\n          if (from === false) {\n            high = middle;\n          } else {\n            low = middle;\n          }\n        }\n        ++iteration;\n      } while (low <= high && iteration < maxIterations);\n      return _objectSpread(_objectSpread({}, pos), {}, {\n        t: middle\n      });\n    }\n    /**\r\n     * Calculate the distance between a point (x3,y3) and a line segment from (x1,y1) to (x2,y2).\r\n     *\r\n     * @remarks\r\n     * http://stackoverflow.com/questions/849211/shortest-distancae-between-a-point-and-a-line-segment\r\n     * @param x1 - First end of the line segment on the x axis.\r\n     * @param y1 - First end of the line segment on the y axis.\r\n     * @param x2 - Second end of the line segment on the x axis.\r\n     * @param y2 - Second end of the line segment on the y axis.\r\n     * @param x3 - Position of the point on the x axis.\r\n     * @param y3 - Position of the point on the y axis.\r\n     * @param via - The control point for the edge.\r\n     * @returns The distance between the line segment and the point.\r\n     */\n  }, {\n    key: \"_getDistanceToBezierEdge\",\n    value: function _getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, via) {\n      // x3,y3 is the point\n      var minDistance = 1e9;\n      var distance;\n      var i, t, x, y;\n      var lastX = x1;\n      var lastY = y1;\n      for (i = 1; i < 10; i++) {\n        t = 0.1 * i;\n        x = Math.pow(1 - t, 2) * x1 + 2 * t * (1 - t) * via.x + Math.pow(t, 2) * x2;\n        y = Math.pow(1 - t, 2) * y1 + 2 * t * (1 - t) * via.y + Math.pow(t, 2) * y2;\n        if (i > 0) {\n          distance = this._getDistanceToLine(lastX, lastY, x, y, x3, y3);\n          minDistance = distance < minDistance ? distance : minDistance;\n        }\n        lastX = x;\n        lastY = y;\n      }\n      return minDistance;\n    }\n    /**\r\n     * Render a bezier curve between two nodes.\r\n     *\r\n     * @remarks\r\n     * The method accepts zero, one or two control points.\r\n     * Passing zero control points just draws a straight line.\r\n     * @param ctx - The context that will be used for rendering.\r\n     * @param values - Style options for edge drawing.\r\n     * @param viaNode1 - First control point for curve drawing.\r\n     * @param viaNode2 - Second control point for curve drawing.\r\n     */\n  }, {\n    key: \"_bezierCurve\",\n    value: function _bezierCurve(ctx, values, viaNode1, viaNode2) {\n      ctx.beginPath();\n      ctx.moveTo(this.fromPoint.x, this.fromPoint.y);\n      if (viaNode1 != null && viaNode1.x != null) {\n        if (viaNode2 != null && viaNode2.x != null) {\n          ctx.bezierCurveTo(viaNode1.x, viaNode1.y, viaNode2.x, viaNode2.y, this.toPoint.x, this.toPoint.y);\n        } else {\n          ctx.quadraticCurveTo(viaNode1.x, viaNode1.y, this.toPoint.x, this.toPoint.y);\n        }\n      } else {\n        // fallback to normal straight edge\n        ctx.lineTo(this.toPoint.x, this.toPoint.y);\n      }\n      // draw a background\n      this.drawBackground(ctx, values);\n      // draw shadow if enabled\n      this.enableShadow(ctx, values);\n      ctx.stroke();\n      this.disableShadow(ctx, values);\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"getViaNode\",\n    value: function getViaNode() {\n      return this._getViaCoordinates();\n    }\n  }]);\n  return BezierEdgeBase;\n}(EdgeBase);\n\nfunction _createSuper$8(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$8(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct$8() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n/**\r\n * A Dynamic Bezier Edge. Bezier curves are used to model smooth gradual\r\n * curves in paths between nodes. The Dynamic piece refers to how the curve\r\n * reacts to physics changes.\r\n *\r\n * @augments BezierEdgeBase\r\n */\nvar BezierEdgeDynamic = /*#__PURE__*/function (_BezierEdgeBase) {\n  _inherits(BezierEdgeDynamic, _BezierEdgeBase);\n  var _super = _createSuper$8(BezierEdgeDynamic);\n  /**\r\n   * Create a new instance.\r\n   *\r\n   * @param options - The options object of given edge.\r\n   * @param body - The body of the network.\r\n   * @param labelModule - Label module.\r\n   */\n  function BezierEdgeDynamic(options, body, labelModule) {\n    var _this;\n    _classCallCheck(this, BezierEdgeDynamic);\n    //this.via = undefined; // Here for completeness but not allowed to defined before super() is invoked.\n    _this = _super.call(this, options, body, labelModule); // --> this calls the setOptions below\n    _this.via = _this.via; // constructor → super → super → setOptions → setupSupportNode\n    _this._boundFunction = function () {\n      _this.positionBezierNode();\n    };\n    _this._body.emitter.on(\"_repositionBezierNodes\", _this._boundFunction);\n    return _this;\n  }\n  /** @inheritDoc */\n  _createClass(BezierEdgeDynamic, [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      _get(_getPrototypeOf(BezierEdgeDynamic.prototype), \"setOptions\", this).call(this, options);\n      // check if the physics has changed.\n      var physicsChange = false;\n      if (this.options.physics !== options.physics) {\n        physicsChange = true;\n      }\n      // set the options and the to and from nodes\n      this.options = options;\n      this.id = this.options.id;\n      this.from = this._body.nodes[this.options.from];\n      this.to = this._body.nodes[this.options.to];\n      // setup the support node and connect\n      this.setupSupportNode();\n      this.connect();\n      // when we change the physics state of the edge, we reposition the support node.\n      if (physicsChange === true) {\n        this.via.setOptions({\n          physics: this.options.physics\n        });\n        this.positionBezierNode();\n      }\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      this.from = this._body.nodes[this.options.from];\n      this.to = this._body.nodes[this.options.to];\n      if (this.from === undefined || this.to === undefined || this.options.physics === false) {\n        this.via.setOptions({\n          physics: false\n        });\n      } else {\n        // fix weird behaviour where a self referencing node has physics enabled\n        if (this.from.id === this.to.id) {\n          this.via.setOptions({\n            physics: false\n          });\n        } else {\n          this.via.setOptions({\n            physics: true\n          });\n        }\n      }\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      this._body.emitter.off(\"_repositionBezierNodes\", this._boundFunction);\n      if (this.via !== undefined) {\n        delete this._body.nodes[this.via.id];\n        this.via = undefined;\n        return true;\n      }\n      return false;\n    }\n    /**\r\n     * Create and add a support node if not already present.\r\n     *\r\n     * @remarks\r\n     * Bezier curves require an anchor point to calculate the smooth flow.\r\n     * These points are nodes.\r\n     * These nodes are invisible but are used for the force calculation.\r\n     *\r\n     * The changed data is not called, if needed, it is returned by the main edge constructor.\r\n     */\n  }, {\n    key: \"setupSupportNode\",\n    value: function setupSupportNode() {\n      if (this.via === undefined) {\n        var nodeId = \"edgeId:\" + this.id;\n        var node = this._body.functions.createNode({\n          id: nodeId,\n          shape: \"circle\",\n          physics: true,\n          hidden: true\n        });\n        this._body.nodes[nodeId] = node;\n        this.via = node;\n        this.via.parentEdgeId = this.id;\n        this.positionBezierNode();\n      }\n    }\n    /**\r\n     * Position bezier node.\r\n     */\n  }, {\n    key: \"positionBezierNode\",\n    value: function positionBezierNode() {\n      if (this.via !== undefined && this.from !== undefined && this.to !== undefined) {\n        this.via.x = 0.5 * (this.from.x + this.to.x);\n        this.via.y = 0.5 * (this.from.y + this.to.y);\n      } else if (this.via !== undefined) {\n        this.via.x = 0;\n        this.via.y = 0;\n      }\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"_line\",\n    value: function _line(ctx, values, viaNode) {\n      this._bezierCurve(ctx, values, viaNode);\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"_getViaCoordinates\",\n    value: function _getViaCoordinates() {\n      return this.via;\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"getViaNode\",\n    value: function getViaNode() {\n      return this.via;\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"getPoint\",\n    value: function getPoint(position) {\n      var viaNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.via;\n      if (this.from === this.to) {\n        var _this$_getCircleData = this._getCircleData(),\n          _this$_getCircleData2 = _slicedToArray(_this$_getCircleData, 3),\n          cx = _this$_getCircleData2[0],\n          cy = _this$_getCircleData2[1],\n          cr = _this$_getCircleData2[2];\n        var a = 2 * Math.PI * (1 - position);\n        return {\n          x: cx + cr * Math.sin(a),\n          y: cy + cr - cr * (1 - Math.cos(a))\n        };\n      } else {\n        return {\n          x: Math.pow(1 - position, 2) * this.fromPoint.x + 2 * position * (1 - position) * viaNode.x + Math.pow(position, 2) * this.toPoint.x,\n          y: Math.pow(1 - position, 2) * this.fromPoint.y + 2 * position * (1 - position) * viaNode.y + Math.pow(position, 2) * this.toPoint.y\n        };\n      }\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"_findBorderPosition\",\n    value: function _findBorderPosition(nearNode, ctx) {\n      return this._findBorderPositionBezier(nearNode, ctx, this.via);\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"_getDistanceToEdge\",\n    value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {\n      // x3,y3 is the point\n      return this._getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, this.via);\n    }\n  }]);\n  return BezierEdgeDynamic;\n}(BezierEdgeBase);\n\nfunction _createSuper$7(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$7(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct$7() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n/**\r\n * A Static Bezier Edge. Bezier curves are used to model smooth gradual curves in paths between nodes.\r\n */\nvar BezierEdgeStatic = /*#__PURE__*/function (_BezierEdgeBase) {\n  _inherits(BezierEdgeStatic, _BezierEdgeBase);\n  var _super = _createSuper$7(BezierEdgeStatic);\n  /**\r\n   * Create a new instance.\r\n   *\r\n   * @param options - The options object of given edge.\r\n   * @param body - The body of the network.\r\n   * @param labelModule - Label module.\r\n   */\n  function BezierEdgeStatic(options, body, labelModule) {\n    _classCallCheck(this, BezierEdgeStatic);\n    return _super.call(this, options, body, labelModule);\n  }\n  /** @inheritDoc */\n  _createClass(BezierEdgeStatic, [{\n    key: \"_line\",\n    value: function _line(ctx, values, viaNode) {\n      this._bezierCurve(ctx, values, viaNode);\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"getViaNode\",\n    value: function getViaNode() {\n      return this._getViaCoordinates();\n    }\n    /**\r\n     * Compute the coordinates of the via node.\r\n     *\r\n     * @remarks\r\n     * We do not use the to and fromPoints here to make the via nodes the same as edges without arrows.\r\n     * @returns Cartesian coordinates of the via node.\r\n     */\n  }, {\n    key: \"_getViaCoordinates\",\n    value: function _getViaCoordinates() {\n      // Assumption: x/y coordinates in from/to always defined\n      var factor = this.options.smooth.roundness;\n      var type = this.options.smooth.type;\n      var dx = Math.abs(this.from.x - this.to.x);\n      var dy = Math.abs(this.from.y - this.to.y);\n      if (type === \"discrete\" || type === \"diagonalCross\") {\n        var stepX;\n        var stepY;\n        if (dx <= dy) {\n          stepX = stepY = factor * dy;\n        } else {\n          stepX = stepY = factor * dx;\n        }\n        if (this.from.x > this.to.x) {\n          stepX = -stepX;\n        }\n        if (this.from.y >= this.to.y) {\n          stepY = -stepY;\n        }\n        var xVia = this.from.x + stepX;\n        var yVia = this.from.y + stepY;\n        if (type === \"discrete\") {\n          if (dx <= dy) {\n            xVia = dx < factor * dy ? this.from.x : xVia;\n          } else {\n            yVia = dy < factor * dx ? this.from.y : yVia;\n          }\n        }\n        return {\n          x: xVia,\n          y: yVia\n        };\n      } else if (type === \"straightCross\") {\n        var _stepX = (1 - factor) * dx;\n        var _stepY = (1 - factor) * dy;\n        if (dx <= dy) {\n          // up - down\n          _stepX = 0;\n          if (this.from.y < this.to.y) {\n            _stepY = -_stepY;\n          }\n        } else {\n          // left - right\n          if (this.from.x < this.to.x) {\n            _stepX = -_stepX;\n          }\n          _stepY = 0;\n        }\n        return {\n          x: this.to.x + _stepX,\n          y: this.to.y + _stepY\n        };\n      } else if (type === \"horizontal\") {\n        var _stepX2 = (1 - factor) * dx;\n        if (this.from.x < this.to.x) {\n          _stepX2 = -_stepX2;\n        }\n        return {\n          x: this.to.x + _stepX2,\n          y: this.from.y\n        };\n      } else if (type === \"vertical\") {\n        var _stepY2 = (1 - factor) * dy;\n        if (this.from.y < this.to.y) {\n          _stepY2 = -_stepY2;\n        }\n        return {\n          x: this.from.x,\n          y: this.to.y + _stepY2\n        };\n      } else if (type === \"curvedCW\") {\n        dx = this.to.x - this.from.x;\n        dy = this.from.y - this.to.y;\n        var radius = Math.sqrt(dx * dx + dy * dy);\n        var pi = Math.PI;\n        var originalAngle = Math.atan2(dy, dx);\n        var myAngle = (originalAngle + (factor * 0.5 + 0.5) * pi) % (2 * pi);\n        return {\n          x: this.from.x + (factor * 0.5 + 0.5) * radius * Math.sin(myAngle),\n          y: this.from.y + (factor * 0.5 + 0.5) * radius * Math.cos(myAngle)\n        };\n      } else if (type === \"curvedCCW\") {\n        dx = this.to.x - this.from.x;\n        dy = this.from.y - this.to.y;\n        var _radius = Math.sqrt(dx * dx + dy * dy);\n        var _pi = Math.PI;\n        var _originalAngle = Math.atan2(dy, dx);\n        var _myAngle = (_originalAngle + (-factor * 0.5 + 0.5) * _pi) % (2 * _pi);\n        return {\n          x: this.from.x + (factor * 0.5 + 0.5) * _radius * Math.sin(_myAngle),\n          y: this.from.y + (factor * 0.5 + 0.5) * _radius * Math.cos(_myAngle)\n        };\n      } else {\n        // continuous\n        var _stepX3;\n        var _stepY3;\n        if (dx <= dy) {\n          _stepX3 = _stepY3 = factor * dy;\n        } else {\n          _stepX3 = _stepY3 = factor * dx;\n        }\n        if (this.from.x > this.to.x) {\n          _stepX3 = -_stepX3;\n        }\n        if (this.from.y >= this.to.y) {\n          _stepY3 = -_stepY3;\n        }\n        var _xVia = this.from.x + _stepX3;\n        var _yVia = this.from.y + _stepY3;\n        if (dx <= dy) {\n          if (this.from.x <= this.to.x) {\n            _xVia = this.to.x < _xVia ? this.to.x : _xVia;\n          } else {\n            _xVia = this.to.x > _xVia ? this.to.x : _xVia;\n          }\n        } else {\n          if (this.from.y >= this.to.y) {\n            _yVia = this.to.y > _yVia ? this.to.y : _yVia;\n          } else {\n            _yVia = this.to.y < _yVia ? this.to.y : _yVia;\n          }\n        }\n        return {\n          x: _xVia,\n          y: _yVia\n        };\n      }\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"_findBorderPosition\",\n    value: function _findBorderPosition(nearNode, ctx) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this._findBorderPositionBezier(nearNode, ctx, options.via);\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"_getDistanceToEdge\",\n    value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {\n      var viaNode = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : this._getViaCoordinates();\n      // x3,y3 is the point\n      return this._getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, viaNode);\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"getPoint\",\n    value: function getPoint(position) {\n      var viaNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._getViaCoordinates();\n      var t = position;\n      var x = Math.pow(1 - t, 2) * this.fromPoint.x + 2 * t * (1 - t) * viaNode.x + Math.pow(t, 2) * this.toPoint.x;\n      var y = Math.pow(1 - t, 2) * this.fromPoint.y + 2 * t * (1 - t) * viaNode.y + Math.pow(t, 2) * this.toPoint.y;\n      return {\n        x: x,\n        y: y\n      };\n    }\n  }]);\n  return BezierEdgeStatic;\n}(BezierEdgeBase);\n\nfunction _createSuper$6(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$6(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct$6() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n/**\r\n * A Base Class for all Cubic Bezier Edges. Bezier curves are used to model\r\n * smooth gradual curves in paths between nodes.\r\n *\r\n * @augments BezierEdgeBase\r\n */\nvar CubicBezierEdgeBase = /*#__PURE__*/function (_BezierEdgeBase) {\n  _inherits(CubicBezierEdgeBase, _BezierEdgeBase);\n  var _super = _createSuper$6(CubicBezierEdgeBase);\n  /**\r\n   * Create a new instance.\r\n   *\r\n   * @param options - The options object of given edge.\r\n   * @param body - The body of the network.\r\n   * @param labelModule - Label module.\r\n   */\n  function CubicBezierEdgeBase(options, body, labelModule) {\n    _classCallCheck(this, CubicBezierEdgeBase);\n    return _super.call(this, options, body, labelModule);\n  }\n  /**\r\n   * Calculate the distance between a point (x3,y3) and a line segment from (x1,y1) to (x2,y2).\r\n   *\r\n   * @remarks\r\n   * http://stackoverflow.com/questions/849211/shortest-distancae-between-a-point-and-a-line-segment\r\n   * https://en.wikipedia.org/wiki/B%C3%A9zier_curve\r\n   * @param x1 - First end of the line segment on the x axis.\r\n   * @param y1 - First end of the line segment on the y axis.\r\n   * @param x2 - Second end of the line segment on the x axis.\r\n   * @param y2 - Second end of the line segment on the y axis.\r\n   * @param x3 - Position of the point on the x axis.\r\n   * @param y3 - Position of the point on the y axis.\r\n   * @param via1 - The first point this edge passes through.\r\n   * @param via2 - The second point this edge passes through.\r\n   * @returns The distance between the line segment and the point.\r\n   */\n  _createClass(CubicBezierEdgeBase, [{\n    key: \"_getDistanceToBezierEdge2\",\n    value: function _getDistanceToBezierEdge2(x1, y1, x2, y2, x3, y3, via1, via2) {\n      // x3,y3 is the point\n      var minDistance = 1e9;\n      var lastX = x1;\n      var lastY = y1;\n      var vec = [0, 0, 0, 0];\n      for (var i = 1; i < 10; i++) {\n        var t = 0.1 * i;\n        vec[0] = Math.pow(1 - t, 3);\n        vec[1] = 3 * t * Math.pow(1 - t, 2);\n        vec[2] = 3 * Math.pow(t, 2) * (1 - t);\n        vec[3] = Math.pow(t, 3);\n        var x = vec[0] * x1 + vec[1] * via1.x + vec[2] * via2.x + vec[3] * x2;\n        var y = vec[0] * y1 + vec[1] * via1.y + vec[2] * via2.y + vec[3] * y2;\n        if (i > 0) {\n          var distance = this._getDistanceToLine(lastX, lastY, x, y, x3, y3);\n          minDistance = distance < minDistance ? distance : minDistance;\n        }\n        lastX = x;\n        lastY = y;\n      }\n      return minDistance;\n    }\n  }]);\n  return CubicBezierEdgeBase;\n}(BezierEdgeBase);\n\nfunction _createSuper$5(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$5(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct$5() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n/**\r\n * A Cubic Bezier Edge. Bezier curves are used to model smooth gradual curves in paths between nodes.\r\n */\nvar CubicBezierEdge = /*#__PURE__*/function (_CubicBezierEdgeBase) {\n  _inherits(CubicBezierEdge, _CubicBezierEdgeBase);\n  var _super = _createSuper$5(CubicBezierEdge);\n  /**\r\n   * Create a new instance.\r\n   *\r\n   * @param options - The options object of given edge.\r\n   * @param body - The body of the network.\r\n   * @param labelModule - Label module.\r\n   */\n  function CubicBezierEdge(options, body, labelModule) {\n    _classCallCheck(this, CubicBezierEdge);\n    return _super.call(this, options, body, labelModule);\n  }\n  /** @inheritDoc */\n  _createClass(CubicBezierEdge, [{\n    key: \"_line\",\n    value: function _line(ctx, values, viaNodes) {\n      // get the coordinates of the support points.\n      var via1 = viaNodes[0];\n      var via2 = viaNodes[1];\n      this._bezierCurve(ctx, values, via1, via2);\n    }\n    /**\r\n     * Compute the additional points the edge passes through.\r\n     *\r\n     * @returns Cartesian coordinates of the points the edge passes through.\r\n     */\n  }, {\n    key: \"_getViaCoordinates\",\n    value: function _getViaCoordinates() {\n      var dx = this.from.x - this.to.x;\n      var dy = this.from.y - this.to.y;\n      var x1;\n      var y1;\n      var x2;\n      var y2;\n      var roundness = this.options.smooth.roundness;\n      // horizontal if x > y or if direction is forced or if direction is horizontal\n      if ((Math.abs(dx) > Math.abs(dy) || this.options.smooth.forceDirection === true || this.options.smooth.forceDirection === \"horizontal\") && this.options.smooth.forceDirection !== \"vertical\") {\n        y1 = this.from.y;\n        y2 = this.to.y;\n        x1 = this.from.x - roundness * dx;\n        x2 = this.to.x + roundness * dx;\n      } else {\n        y1 = this.from.y - roundness * dy;\n        y2 = this.to.y + roundness * dy;\n        x1 = this.from.x;\n        x2 = this.to.x;\n      }\n      return [{\n        x: x1,\n        y: y1\n      }, {\n        x: x2,\n        y: y2\n      }];\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"getViaNode\",\n    value: function getViaNode() {\n      return this._getViaCoordinates();\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"_findBorderPosition\",\n    value: function _findBorderPosition(nearNode, ctx) {\n      return this._findBorderPositionBezier(nearNode, ctx);\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"_getDistanceToEdge\",\n    value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {\n      var _ref = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : this._getViaCoordinates(),\n        _ref2 = _slicedToArray(_ref, 2),\n        via1 = _ref2[0],\n        via2 = _ref2[1];\n      // x3,y3 is the point\n      return this._getDistanceToBezierEdge2(x1, y1, x2, y2, x3, y3, via1, via2);\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"getPoint\",\n    value: function getPoint(position) {\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._getViaCoordinates(),\n        _ref4 = _slicedToArray(_ref3, 2),\n        via1 = _ref4[0],\n        via2 = _ref4[1];\n      var t = position;\n      var vec = [Math.pow(1 - t, 3), 3 * t * Math.pow(1 - t, 2), 3 * Math.pow(t, 2) * (1 - t), Math.pow(t, 3)];\n      var x = vec[0] * this.fromPoint.x + vec[1] * via1.x + vec[2] * via2.x + vec[3] * this.toPoint.x;\n      var y = vec[0] * this.fromPoint.y + vec[1] * via1.y + vec[2] * via2.y + vec[3] * this.toPoint.y;\n      return {\n        x: x,\n        y: y\n      };\n    }\n  }]);\n  return CubicBezierEdge;\n}(CubicBezierEdgeBase);\n\nfunction _createSuper$4(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$4(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct$4() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n/**\r\n * A Straight Edge.\r\n */\nvar StraightEdge = /*#__PURE__*/function (_EdgeBase) {\n  _inherits(StraightEdge, _EdgeBase);\n  var _super = _createSuper$4(StraightEdge);\n  /**\r\n   * Create a new instance.\r\n   *\r\n   * @param options - The options object of given edge.\r\n   * @param body - The body of the network.\r\n   * @param labelModule - Label module.\r\n   */\n  function StraightEdge(options, body, labelModule) {\n    _classCallCheck(this, StraightEdge);\n    return _super.call(this, options, body, labelModule);\n  }\n  /** @inheritDoc */\n  _createClass(StraightEdge, [{\n    key: \"_line\",\n    value: function _line(ctx, values) {\n      // draw a straight line\n      ctx.beginPath();\n      ctx.moveTo(this.fromPoint.x, this.fromPoint.y);\n      ctx.lineTo(this.toPoint.x, this.toPoint.y);\n      // draw shadow if enabled\n      this.enableShadow(ctx, values);\n      ctx.stroke();\n      this.disableShadow(ctx, values);\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"getViaNode\",\n    value: function getViaNode() {\n      return undefined;\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"getPoint\",\n    value: function getPoint(position) {\n      return {\n        x: (1 - position) * this.fromPoint.x + position * this.toPoint.x,\n        y: (1 - position) * this.fromPoint.y + position * this.toPoint.y\n      };\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"_findBorderPosition\",\n    value: function _findBorderPosition(nearNode, ctx) {\n      var node1 = this.to;\n      var node2 = this.from;\n      if (nearNode.id === this.from.id) {\n        node1 = this.from;\n        node2 = this.to;\n      }\n      var angle = Math.atan2(node1.y - node2.y, node1.x - node2.x);\n      var dx = node1.x - node2.x;\n      var dy = node1.y - node2.y;\n      var edgeSegmentLength = Math.sqrt(dx * dx + dy * dy);\n      var toBorderDist = nearNode.distanceToBorder(ctx, angle);\n      var toBorderPoint = (edgeSegmentLength - toBorderDist) / edgeSegmentLength;\n      return {\n        x: (1 - toBorderPoint) * node2.x + toBorderPoint * node1.x,\n        y: (1 - toBorderPoint) * node2.y + toBorderPoint * node1.y,\n        t: 0\n      };\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"_getDistanceToEdge\",\n    value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {\n      // x3,y3 is the point\n      return this._getDistanceToLine(x1, y1, x2, y2, x3, y3);\n    }\n  }]);\n  return StraightEdge;\n}(EdgeBase);\n\n/**\n * An edge connects two nodes and has a specific direction.\n */\nvar Edge = /*#__PURE__*/function () {\n  /**\n   * @param {object} options        values specific to this edge, must contain at least 'from' and 'to'\n   * @param {object} body           shared state from Network instance\n   * @param {Network.Images} imagelist  A list with images. Only needed when the edge has image arrows.\n   * @param {object} globalOptions  options from the EdgesHandler instance\n   * @param {object} defaultOptions default options from the EdgeHandler instance. Value and reference are constant\n   */\n  function Edge(options, body, imagelist, globalOptions, defaultOptions) {\n    _classCallCheck(this, Edge);\n    if (body === undefined) {\n      throw new Error(\"No body provided\");\n    }\n\n    // Since globalOptions is constant in values as well as reference,\n    // Following needs to be done only once.\n\n    this.options = bridgeObject(globalOptions);\n    this.globalOptions = globalOptions;\n    this.defaultOptions = defaultOptions;\n    this.body = body;\n    this.imagelist = imagelist;\n\n    // initialize variables\n    this.id = undefined;\n    this.fromId = undefined;\n    this.toId = undefined;\n    this.selected = false;\n    this.hover = false;\n    this.labelDirty = true;\n    this.baseWidth = this.options.width;\n    this.baseFontSize = this.options.font.size;\n    this.from = undefined; // a node\n    this.to = undefined; // a node\n\n    this.edgeType = undefined;\n    this.connected = false;\n    this.labelModule = new Label(this.body, this.options, true /* It's an edge label */);\n\n    this.setOptions(options);\n  }\n\n  /**\n   * Set or overwrite options for the edge\n   *\n   * @param {object} options  an object with options\n   * @returns {undefined|boolean} undefined if no options, true if layout affecting data changed, false otherwise.\n   */\n  _createClass(Edge, [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      if (!options) {\n        return;\n      }\n\n      // Following options if changed affect the layout.\n      var affectsLayout = typeof options.physics !== \"undefined\" && this.options.physics !== options.physics || typeof options.hidden !== \"undefined\" && (this.options.hidden || false) !== (options.hidden || false) || typeof options.from !== \"undefined\" && this.options.from !== options.from || typeof options.to !== \"undefined\" && this.options.to !== options.to;\n      Edge.parseOptions(this.options, options, true, this.globalOptions);\n      if (options.id !== undefined) {\n        this.id = options.id;\n      }\n      if (options.from !== undefined) {\n        this.fromId = options.from;\n      }\n      if (options.to !== undefined) {\n        this.toId = options.to;\n      }\n      if (options.title !== undefined) {\n        this.title = options.title;\n      }\n      if (options.value !== undefined) {\n        options.value = _parseFloat$1(options.value);\n      }\n      var pile = [options, this.options, this.defaultOptions];\n      this.chooser = choosify(\"edge\", pile);\n\n      // update label Module\n      this.updateLabelModule(options);\n\n      // Update edge type, this if changed affects the layout.\n      affectsLayout = this.updateEdgeType() || affectsLayout;\n\n      // if anything has been updates, reset the selection width and the hover width\n      this._setInteractionWidths();\n\n      // A node is connected when it has a from and to node that both exist in the network.body.nodes.\n      this.connect();\n      return affectsLayout;\n    }\n\n    /**\n     *\n     * @param {object} parentOptions\n     * @param {object} newOptions\n     * @param {boolean} [allowDeletion=false]\n     * @param {object} [globalOptions={}]\n     * @param {boolean} [copyFromGlobals=false]\n     */\n  }, {\n    key: \"getFormattingValues\",\n    value:\n    /**\n     *\n     * @returns {ArrowOptions}\n     */\n    function getFormattingValues() {\n      var toArrow = this.options.arrows.to === true || this.options.arrows.to.enabled === true;\n      var fromArrow = this.options.arrows.from === true || this.options.arrows.from.enabled === true;\n      var middleArrow = this.options.arrows.middle === true || this.options.arrows.middle.enabled === true;\n      var inheritsColor = this.options.color.inherit;\n      var values = {\n        toArrow: toArrow,\n        toArrowScale: this.options.arrows.to.scaleFactor,\n        toArrowType: this.options.arrows.to.type,\n        toArrowSrc: this.options.arrows.to.src,\n        toArrowImageWidth: this.options.arrows.to.imageWidth,\n        toArrowImageHeight: this.options.arrows.to.imageHeight,\n        middleArrow: middleArrow,\n        middleArrowScale: this.options.arrows.middle.scaleFactor,\n        middleArrowType: this.options.arrows.middle.type,\n        middleArrowSrc: this.options.arrows.middle.src,\n        middleArrowImageWidth: this.options.arrows.middle.imageWidth,\n        middleArrowImageHeight: this.options.arrows.middle.imageHeight,\n        fromArrow: fromArrow,\n        fromArrowScale: this.options.arrows.from.scaleFactor,\n        fromArrowType: this.options.arrows.from.type,\n        fromArrowSrc: this.options.arrows.from.src,\n        fromArrowImageWidth: this.options.arrows.from.imageWidth,\n        fromArrowImageHeight: this.options.arrows.from.imageHeight,\n        arrowStrikethrough: this.options.arrowStrikethrough,\n        color: inheritsColor ? undefined : this.options.color.color,\n        inheritsColor: inheritsColor,\n        opacity: this.options.color.opacity,\n        hidden: this.options.hidden,\n        length: this.options.length,\n        shadow: this.options.shadow.enabled,\n        shadowColor: this.options.shadow.color,\n        shadowSize: this.options.shadow.size,\n        shadowX: this.options.shadow.x,\n        shadowY: this.options.shadow.y,\n        dashes: this.options.dashes,\n        width: this.options.width,\n        background: this.options.background.enabled,\n        backgroundColor: this.options.background.color,\n        backgroundSize: this.options.background.size,\n        backgroundDashes: this.options.background.dashes\n      };\n      if (this.selected || this.hover) {\n        if (this.chooser === true) {\n          if (this.selected) {\n            var selectedWidth = this.options.selectionWidth;\n            if (typeof selectedWidth === \"function\") {\n              values.width = selectedWidth(values.width);\n            } else if (typeof selectedWidth === \"number\") {\n              values.width += selectedWidth;\n            }\n            values.width = Math.max(values.width, 0.3 / this.body.view.scale);\n            values.color = this.options.color.highlight;\n            values.shadow = this.options.shadow.enabled;\n          } else if (this.hover) {\n            var hoverWidth = this.options.hoverWidth;\n            if (typeof hoverWidth === \"function\") {\n              values.width = hoverWidth(values.width);\n            } else if (typeof hoverWidth === \"number\") {\n              values.width += hoverWidth;\n            }\n            values.width = Math.max(values.width, 0.3 / this.body.view.scale);\n            values.color = this.options.color.hover;\n            values.shadow = this.options.shadow.enabled;\n          }\n        } else if (typeof this.chooser === \"function\") {\n          this.chooser(values, this.options.id, this.selected, this.hover);\n          if (values.color !== undefined) {\n            values.inheritsColor = false;\n          }\n          if (values.shadow === false) {\n            if (values.shadowColor !== this.options.shadow.color || values.shadowSize !== this.options.shadow.size || values.shadowX !== this.options.shadow.x || values.shadowY !== this.options.shadow.y) {\n              values.shadow = true;\n            }\n          }\n        }\n      } else {\n        values.shadow = this.options.shadow.enabled;\n        values.width = Math.max(values.width, 0.3 / this.body.view.scale);\n      }\n      return values;\n    }\n\n    /**\n     * update the options in the label module\n     *\n     * @param {object} options\n     */\n  }, {\n    key: \"updateLabelModule\",\n    value: function updateLabelModule(options) {\n      var pile = [options, this.options, this.globalOptions,\n      // Currently set global edge options\n      this.defaultOptions];\n      this.labelModule.update(this.options, pile);\n      if (this.labelModule.baseSize !== undefined) {\n        this.baseFontSize = this.labelModule.baseSize;\n      }\n    }\n\n    /**\n     * update the edge type, set the options\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"updateEdgeType\",\n    value: function updateEdgeType() {\n      var smooth = this.options.smooth;\n      var dataChanged = false;\n      var changeInType = true;\n      if (this.edgeType !== undefined) {\n        if (this.edgeType instanceof BezierEdgeDynamic && smooth.enabled === true && smooth.type === \"dynamic\" || this.edgeType instanceof CubicBezierEdge && smooth.enabled === true && smooth.type === \"cubicBezier\" || this.edgeType instanceof BezierEdgeStatic && smooth.enabled === true && smooth.type !== \"dynamic\" && smooth.type !== \"cubicBezier\" || this.edgeType instanceof StraightEdge && smooth.type.enabled === false) {\n          changeInType = false;\n        }\n        if (changeInType === true) {\n          dataChanged = this.cleanup();\n        }\n      }\n      if (changeInType === true) {\n        if (smooth.enabled === true) {\n          if (smooth.type === \"dynamic\") {\n            dataChanged = true;\n            this.edgeType = new BezierEdgeDynamic(this.options, this.body, this.labelModule);\n          } else if (smooth.type === \"cubicBezier\") {\n            this.edgeType = new CubicBezierEdge(this.options, this.body, this.labelModule);\n          } else {\n            this.edgeType = new BezierEdgeStatic(this.options, this.body, this.labelModule);\n          }\n        } else {\n          this.edgeType = new StraightEdge(this.options, this.body, this.labelModule);\n        }\n      } else {\n        // if nothing changes, we just set the options.\n        this.edgeType.setOptions(this.options);\n      }\n      return dataChanged;\n    }\n\n    /**\n     * Connect an edge to its nodes\n     */\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      this.disconnect();\n      this.from = this.body.nodes[this.fromId] || undefined;\n      this.to = this.body.nodes[this.toId] || undefined;\n      this.connected = this.from !== undefined && this.to !== undefined;\n      if (this.connected === true) {\n        this.from.attachEdge(this);\n        this.to.attachEdge(this);\n      } else {\n        if (this.from) {\n          this.from.detachEdge(this);\n        }\n        if (this.to) {\n          this.to.detachEdge(this);\n        }\n      }\n      this.edgeType.connect();\n    }\n\n    /**\n     * Disconnect an edge from its nodes\n     */\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      if (this.from) {\n        this.from.detachEdge(this);\n        this.from = undefined;\n      }\n      if (this.to) {\n        this.to.detachEdge(this);\n        this.to = undefined;\n      }\n      this.connected = false;\n    }\n\n    /**\n     * get the title of this edge.\n     *\n     * @returns {string} title    The title of the edge, or undefined when no title\n     *                           has been set.\n     */\n  }, {\n    key: \"getTitle\",\n    value: function getTitle() {\n      return this.title;\n    }\n\n    /**\n     * check if this node is selecte\n     *\n     * @returns {boolean} selected   True if node is selected, else false\n     */\n  }, {\n    key: \"isSelected\",\n    value: function isSelected() {\n      return this.selected;\n    }\n\n    /**\n     * Retrieve the value of the edge. Can be undefined\n     *\n     * @returns {number} value\n     */\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      return this.options.value;\n    }\n\n    /**\n     * Adjust the value range of the edge. The edge will adjust it's width\n     * based on its value.\n     *\n     * @param {number} min\n     * @param {number} max\n     * @param {number} total\n     */\n  }, {\n    key: \"setValueRange\",\n    value: function setValueRange(min, max, total) {\n      if (this.options.value !== undefined) {\n        var scale = this.options.scaling.customScalingFunction(min, max, total, this.options.value);\n        var widthDiff = this.options.scaling.max - this.options.scaling.min;\n        if (this.options.scaling.label.enabled === true) {\n          var fontDiff = this.options.scaling.label.max - this.options.scaling.label.min;\n          this.options.font.size = this.options.scaling.label.min + scale * fontDiff;\n        }\n        this.options.width = this.options.scaling.min + scale * widthDiff;\n      } else {\n        this.options.width = this.baseWidth;\n        this.options.font.size = this.baseFontSize;\n      }\n      this._setInteractionWidths();\n      this.updateLabelModule();\n    }\n\n    /**\n     *\n     * @private\n     */\n  }, {\n    key: \"_setInteractionWidths\",\n    value: function _setInteractionWidths() {\n      if (typeof this.options.hoverWidth === \"function\") {\n        this.edgeType.hoverWidth = this.options.hoverWidth(this.options.width);\n      } else {\n        this.edgeType.hoverWidth = this.options.hoverWidth + this.options.width;\n      }\n      if (typeof this.options.selectionWidth === \"function\") {\n        this.edgeType.selectionWidth = this.options.selectionWidth(this.options.width);\n      } else {\n        this.edgeType.selectionWidth = this.options.selectionWidth + this.options.width;\n      }\n    }\n\n    /**\n     * Redraw a edge\n     * Draw this edge in the given canvas\n     * The 2d context of a HTML canvas can be retrieved by canvas.getContext(\"2d\");\n     *\n     * @param {CanvasRenderingContext2D}   ctx\n     */\n  }, {\n    key: \"draw\",\n    value: function draw(ctx) {\n      var values = this.getFormattingValues();\n      if (values.hidden) {\n        return;\n      }\n\n      // get the via node from the edge type\n      var viaNode = this.edgeType.getViaNode();\n\n      // draw line and label\n      this.edgeType.drawLine(ctx, values, this.selected, this.hover, viaNode);\n      this.drawLabel(ctx, viaNode);\n    }\n\n    /**\n     * Redraw arrows\n     * Draw this arrows in the given canvas\n     * The 2d context of a HTML canvas can be retrieved by canvas.getContext(\"2d\");\n     *\n     * @param {CanvasRenderingContext2D}   ctx\n     */\n  }, {\n    key: \"drawArrows\",\n    value: function drawArrows(ctx) {\n      var values = this.getFormattingValues();\n      if (values.hidden) {\n        return;\n      }\n\n      // get the via node from the edge type\n      var viaNode = this.edgeType.getViaNode();\n      var arrowData = {};\n\n      // restore edge targets to defaults\n      this.edgeType.fromPoint = this.edgeType.from;\n      this.edgeType.toPoint = this.edgeType.to;\n\n      // from and to arrows give a different end point for edges. we set them here\n      if (values.fromArrow) {\n        arrowData.from = this.edgeType.getArrowData(ctx, \"from\", viaNode, this.selected, this.hover, values);\n        if (values.arrowStrikethrough === false) this.edgeType.fromPoint = arrowData.from.core;\n        if (values.fromArrowSrc) {\n          arrowData.from.image = this.imagelist.load(values.fromArrowSrc);\n        }\n        if (values.fromArrowImageWidth) {\n          arrowData.from.imageWidth = values.fromArrowImageWidth;\n        }\n        if (values.fromArrowImageHeight) {\n          arrowData.from.imageHeight = values.fromArrowImageHeight;\n        }\n      }\n      if (values.toArrow) {\n        arrowData.to = this.edgeType.getArrowData(ctx, \"to\", viaNode, this.selected, this.hover, values);\n        if (values.arrowStrikethrough === false) this.edgeType.toPoint = arrowData.to.core;\n        if (values.toArrowSrc) {\n          arrowData.to.image = this.imagelist.load(values.toArrowSrc);\n        }\n        if (values.toArrowImageWidth) {\n          arrowData.to.imageWidth = values.toArrowImageWidth;\n        }\n        if (values.toArrowImageHeight) {\n          arrowData.to.imageHeight = values.toArrowImageHeight;\n        }\n      }\n\n      // the middle arrow depends on the line, which can depend on the to and from arrows so we do this one lastly.\n      if (values.middleArrow) {\n        arrowData.middle = this.edgeType.getArrowData(ctx, \"middle\", viaNode, this.selected, this.hover, values);\n        if (values.middleArrowSrc) {\n          arrowData.middle.image = this.imagelist.load(values.middleArrowSrc);\n        }\n        if (values.middleArrowImageWidth) {\n          arrowData.middle.imageWidth = values.middleArrowImageWidth;\n        }\n        if (values.middleArrowImageHeight) {\n          arrowData.middle.imageHeight = values.middleArrowImageHeight;\n        }\n      }\n      if (values.fromArrow) {\n        this.edgeType.drawArrowHead(ctx, values, this.selected, this.hover, arrowData.from);\n      }\n      if (values.middleArrow) {\n        this.edgeType.drawArrowHead(ctx, values, this.selected, this.hover, arrowData.middle);\n      }\n      if (values.toArrow) {\n        this.edgeType.drawArrowHead(ctx, values, this.selected, this.hover, arrowData.to);\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {Node} viaNode\n     */\n  }, {\n    key: \"drawLabel\",\n    value: function drawLabel(ctx, viaNode) {\n      if (this.options.label !== undefined) {\n        // set style\n        var node1 = this.from;\n        var node2 = this.to;\n        if (this.labelModule.differentState(this.selected, this.hover)) {\n          this.labelModule.getTextSize(ctx, this.selected, this.hover);\n        }\n        var point;\n        if (node1.id != node2.id) {\n          this.labelModule.pointToSelf = false;\n          point = this.edgeType.getPoint(0.5, viaNode);\n          ctx.save();\n          var rotationPoint = this._getRotation(ctx);\n          if (rotationPoint.angle != 0) {\n            ctx.translate(rotationPoint.x, rotationPoint.y);\n            ctx.rotate(rotationPoint.angle);\n          }\n\n          // draw the label\n          this.labelModule.draw(ctx, point.x, point.y, this.selected, this.hover);\n\n          /*\n          // Useful debug code: draw a border around the label\n          // This should **not** be enabled in production!\n          var size = this.labelModule.getSize();; // ;; intentional so lint catches it\n          ctx.strokeStyle = \"#ff0000\";\n          ctx.strokeRect(size.left, size.top, size.width, size.height);\n          // End  debug code\n          */\n\n          ctx.restore();\n        } else {\n          // Ignore the orientations.\n          this.labelModule.pointToSelf = true;\n\n          // get circle coordinates\n          var coordinates = getSelfRefCoordinates(ctx, this.options.selfReference.angle, this.options.selfReference.size, node1);\n          point = this._pointOnCircle(coordinates.x, coordinates.y, this.options.selfReference.size, this.options.selfReference.angle);\n          this.labelModule.draw(ctx, point.x, point.y, this.selected, this.hover);\n        }\n      }\n    }\n\n    /**\n     * Determine all visual elements of this edge instance, in which the given\n     * point falls within the bounding shape.\n     *\n     * @param {point} point\n     * @returns {Array.<edgeClickItem|edgeLabelClickItem>} list with the items which are on the point\n     */\n  }, {\n    key: \"getItemsOnPoint\",\n    value: function getItemsOnPoint(point) {\n      var ret = [];\n      if (this.labelModule.visible()) {\n        var rotationPoint = this._getRotation();\n        if (pointInRect(this.labelModule.getSize(), point, rotationPoint)) {\n          ret.push({\n            edgeId: this.id,\n            labelId: 0\n          });\n        }\n      }\n      var obj = {\n        left: point.x,\n        top: point.y\n      };\n      if (this.isOverlappingWith(obj)) {\n        ret.push({\n          edgeId: this.id\n        });\n      }\n      return ret;\n    }\n\n    /**\n     * Check if this object is overlapping with the provided object\n     *\n     * @param {object} obj   an object with parameters left, top\n     * @returns {boolean}     True if location is located on the edge\n     */\n  }, {\n    key: \"isOverlappingWith\",\n    value: function isOverlappingWith(obj) {\n      if (this.connected) {\n        var distMax = 10;\n        var xFrom = this.from.x;\n        var yFrom = this.from.y;\n        var xTo = this.to.x;\n        var yTo = this.to.y;\n        var xObj = obj.left;\n        var yObj = obj.top;\n        var dist = this.edgeType.getDistanceToEdge(xFrom, yFrom, xTo, yTo, xObj, yObj);\n        return dist < distMax;\n      } else {\n        return false;\n      }\n    }\n\n    /**\n     * Determine the rotation point, if any.\n     *\n     * @param {CanvasRenderingContext2D} [ctx] if passed, do a recalculation of the label size\n     * @returns {rotationPoint} the point to rotate around and the angle in radians to rotate\n     * @private\n     */\n  }, {\n    key: \"_getRotation\",\n    value: function _getRotation(ctx) {\n      var viaNode = this.edgeType.getViaNode();\n      var point = this.edgeType.getPoint(0.5, viaNode);\n      if (ctx !== undefined) {\n        this.labelModule.calculateLabelSize(ctx, this.selected, this.hover, point.x, point.y);\n      }\n      var ret = {\n        x: point.x,\n        y: this.labelModule.size.yLine,\n        angle: 0\n      };\n      if (!this.labelModule.visible()) {\n        return ret; // Don't even bother doing the atan2, there's nothing to draw\n      }\n\n      if (this.options.font.align === \"horizontal\") {\n        return ret; // No need to calculate angle\n      }\n\n      var dy = this.from.y - this.to.y;\n      var dx = this.from.x - this.to.x;\n      var angle = Math.atan2(dy, dx); // radians\n\n      // rotate so that label is readable\n      if (angle < -1 && dx < 0 || angle > 0 && dx < 0) {\n        angle += Math.PI;\n      }\n      ret.angle = angle;\n      return ret;\n    }\n\n    /**\n     * Get a point on a circle\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {number} angle\n     * @returns {object} point\n     * @private\n     */\n  }, {\n    key: \"_pointOnCircle\",\n    value: function _pointOnCircle(x, y, radius, angle) {\n      return {\n        x: x + radius * Math.cos(angle),\n        y: y - radius * Math.sin(angle)\n      };\n    }\n\n    /**\n     * Sets selected state to true\n     */\n  }, {\n    key: \"select\",\n    value: function select() {\n      this.selected = true;\n    }\n\n    /**\n     * Sets selected state to false\n     */\n  }, {\n    key: \"unselect\",\n    value: function unselect() {\n      this.selected = false;\n    }\n\n    /**\n     * cleans all required things on delete\n     *\n     * @returns {*}\n     */\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      return this.edgeType.cleanup();\n    }\n\n    /**\n     * Remove edge from the list and perform necessary cleanup.\n     */\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      this.cleanup();\n      this.disconnect();\n      delete this.body.edges[this.id];\n    }\n\n    /**\n     * Check if both connecting nodes exist\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"endPointsValid\",\n    value: function endPointsValid() {\n      return this.body.nodes[this.fromId] !== undefined && this.body.nodes[this.toId] !== undefined;\n    }\n  }], [{\n    key: \"parseOptions\",\n    value: function parseOptions(parentOptions, newOptions) {\n      var allowDeletion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var globalOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var copyFromGlobals = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var fields = [\"endPointOffset\", \"arrowStrikethrough\", \"id\", \"from\", \"hidden\", \"hoverWidth\", \"labelHighlightBold\", \"length\", \"line\", \"opacity\", \"physics\", \"scaling\", \"selectionWidth\", \"selfReferenceSize\", \"selfReference\", \"to\", \"title\", \"value\", \"width\", \"font\", \"chosen\", \"widthConstraint\"];\n\n      // only deep extend the items in the field array. These do not have shorthand.\n      selectiveDeepExtend(fields, parentOptions, newOptions, allowDeletion);\n\n      // Only use endPointOffset values (from and to) if it's valid values\n      if (newOptions.endPointOffset !== undefined && newOptions.endPointOffset.from !== undefined) {\n        if (_Number$isFinite(newOptions.endPointOffset.from)) {\n          parentOptions.endPointOffset.from = newOptions.endPointOffset.from;\n        } else {\n          parentOptions.endPointOffset.from = globalOptions.endPointOffset.from !== undefined ? globalOptions.endPointOffset.from : 0;\n          console.error(\"endPointOffset.from is not a valid number\");\n        }\n      }\n      if (newOptions.endPointOffset !== undefined && newOptions.endPointOffset.to !== undefined) {\n        if (_Number$isFinite(newOptions.endPointOffset.to)) {\n          parentOptions.endPointOffset.to = newOptions.endPointOffset.to;\n        } else {\n          parentOptions.endPointOffset.to = globalOptions.endPointOffset.to !== undefined ? globalOptions.endPointOffset.to : 0;\n          console.error(\"endPointOffset.to is not a valid number\");\n        }\n      }\n\n      // Only copy label if it's a legal value.\n      if (isValidLabel(newOptions.label)) {\n        parentOptions.label = newOptions.label;\n      } else if (!isValidLabel(parentOptions.label)) {\n        parentOptions.label = undefined;\n      }\n      mergeOptions(parentOptions, newOptions, \"smooth\", globalOptions);\n      mergeOptions(parentOptions, newOptions, \"shadow\", globalOptions);\n      mergeOptions(parentOptions, newOptions, \"background\", globalOptions);\n      if (newOptions.dashes !== undefined && newOptions.dashes !== null) {\n        parentOptions.dashes = newOptions.dashes;\n      } else if (allowDeletion === true && newOptions.dashes === null) {\n        parentOptions.dashes = _Object$create$1(globalOptions.dashes); // this sets the pointer of the option back to the global option.\n      }\n\n      // set the scaling newOptions\n      if (newOptions.scaling !== undefined && newOptions.scaling !== null) {\n        if (newOptions.scaling.min !== undefined) {\n          parentOptions.scaling.min = newOptions.scaling.min;\n        }\n        if (newOptions.scaling.max !== undefined) {\n          parentOptions.scaling.max = newOptions.scaling.max;\n        }\n        mergeOptions(parentOptions.scaling, newOptions.scaling, \"label\", globalOptions.scaling);\n      } else if (allowDeletion === true && newOptions.scaling === null) {\n        parentOptions.scaling = _Object$create$1(globalOptions.scaling); // this sets the pointer of the option back to the global option.\n      }\n\n      // handle multiple input cases for arrows\n      if (newOptions.arrows !== undefined && newOptions.arrows !== null) {\n        if (typeof newOptions.arrows === \"string\") {\n          var arrows = newOptions.arrows.toLowerCase();\n          parentOptions.arrows.to.enabled = _indexOfInstanceProperty(arrows).call(arrows, \"to\") != -1;\n          parentOptions.arrows.middle.enabled = _indexOfInstanceProperty(arrows).call(arrows, \"middle\") != -1;\n          parentOptions.arrows.from.enabled = _indexOfInstanceProperty(arrows).call(arrows, \"from\") != -1;\n        } else if (_typeof(newOptions.arrows) === \"object\") {\n          mergeOptions(parentOptions.arrows, newOptions.arrows, \"to\", globalOptions.arrows);\n          mergeOptions(parentOptions.arrows, newOptions.arrows, \"middle\", globalOptions.arrows);\n          mergeOptions(parentOptions.arrows, newOptions.arrows, \"from\", globalOptions.arrows);\n        } else {\n          throw new Error(\"The arrow newOptions can only be an object or a string. Refer to the documentation. You used:\" + _JSON$stringify(newOptions.arrows));\n        }\n      } else if (allowDeletion === true && newOptions.arrows === null) {\n        parentOptions.arrows = _Object$create$1(globalOptions.arrows); // this sets the pointer of the option back to the global option.\n      }\n\n      // handle multiple input cases for color\n      if (newOptions.color !== undefined && newOptions.color !== null) {\n        var fromColor = isString(newOptions.color) ? {\n          color: newOptions.color,\n          highlight: newOptions.color,\n          hover: newOptions.color,\n          inherit: false,\n          opacity: 1\n        } : newOptions.color;\n        var toColor = parentOptions.color;\n\n        // If passed, fill in values from default options - required in the case of no prototype bridging\n        if (copyFromGlobals) {\n          deepExtend(toColor, globalOptions.color, false, allowDeletion);\n        } else {\n          // Clear local properties - need to do it like this in order to retain prototype bridges\n          for (var i in toColor) {\n            if (Object.prototype.hasOwnProperty.call(toColor, i)) {\n              delete toColor[i];\n            }\n          }\n        }\n        if (isString(toColor)) {\n          toColor.color = toColor;\n          toColor.highlight = toColor;\n          toColor.hover = toColor;\n          toColor.inherit = false;\n          if (fromColor.opacity === undefined) {\n            toColor.opacity = 1.0; // set default\n          }\n        } else {\n          var colorsDefined = false;\n          if (fromColor.color !== undefined) {\n            toColor.color = fromColor.color;\n            colorsDefined = true;\n          }\n          if (fromColor.highlight !== undefined) {\n            toColor.highlight = fromColor.highlight;\n            colorsDefined = true;\n          }\n          if (fromColor.hover !== undefined) {\n            toColor.hover = fromColor.hover;\n            colorsDefined = true;\n          }\n          if (fromColor.inherit !== undefined) {\n            toColor.inherit = fromColor.inherit;\n          }\n          if (fromColor.opacity !== undefined) {\n            toColor.opacity = Math.min(1, Math.max(0, fromColor.opacity));\n          }\n          if (colorsDefined === true) {\n            toColor.inherit = false;\n          } else {\n            if (toColor.inherit === undefined) {\n              toColor.inherit = \"from\"; // Set default\n            }\n          }\n        }\n      } else if (allowDeletion === true && newOptions.color === null) {\n        parentOptions.color = bridgeObject(globalOptions.color); // set the object back to the global options\n      }\n\n      if (allowDeletion === true && newOptions.font === null) {\n        parentOptions.font = bridgeObject(globalOptions.font); // set the object back to the global options\n      }\n\n      if (Object.prototype.hasOwnProperty.call(newOptions, \"selfReferenceSize\")) {\n        console.warn(\"The selfReferenceSize property has been deprecated. Please use selfReference property instead. The selfReference can be set like thise selfReference:{size:30, angle:Math.PI / 4}\");\n        parentOptions.selfReference.size = newOptions.selfReferenceSize;\n      }\n    }\n  }]);\n  return Edge;\n}();\n\n/**\n * Handler for Edges\n */\nvar EdgesHandler = /*#__PURE__*/function () {\n  /**\n   * @param {object} body\n   * @param {Array.<Image>} images\n   * @param {Array.<Group>} groups\n   */\n  function EdgesHandler(body, images, groups) {\n    var _context,\n      _this = this;\n    _classCallCheck(this, EdgesHandler);\n    this.body = body;\n    this.images = images;\n    this.groups = groups;\n\n    // create the edge API in the body container\n    this.body.functions.createEdge = _bindInstanceProperty$1(_context = this.create).call(_context, this);\n    this.edgesListeners = {\n      add: function add(event, params) {\n        _this.add(params.items);\n      },\n      update: function update(event, params) {\n        _this.update(params.items);\n      },\n      remove: function remove(event, params) {\n        _this.remove(params.items);\n      }\n    };\n    this.options = {};\n    this.defaultOptions = {\n      arrows: {\n        to: {\n          enabled: false,\n          scaleFactor: 1,\n          type: \"arrow\"\n        },\n        // boolean / {arrowScaleFactor:1} / {enabled: false, arrowScaleFactor:1}\n        middle: {\n          enabled: false,\n          scaleFactor: 1,\n          type: \"arrow\"\n        },\n        from: {\n          enabled: false,\n          scaleFactor: 1,\n          type: \"arrow\"\n        }\n      },\n      endPointOffset: {\n        from: 0,\n        to: 0\n      },\n      arrowStrikethrough: true,\n      color: {\n        color: \"#848484\",\n        highlight: \"#848484\",\n        hover: \"#848484\",\n        inherit: \"from\",\n        opacity: 1.0\n      },\n      dashes: false,\n      font: {\n        color: \"#343434\",\n        size: 14,\n        // px\n        face: \"arial\",\n        background: \"none\",\n        strokeWidth: 2,\n        // px\n        strokeColor: \"#ffffff\",\n        align: \"horizontal\",\n        multi: false,\n        vadjust: 0,\n        bold: {\n          mod: \"bold\"\n        },\n        boldital: {\n          mod: \"bold italic\"\n        },\n        ital: {\n          mod: \"italic\"\n        },\n        mono: {\n          mod: \"\",\n          size: 15,\n          // px\n          face: \"courier new\",\n          vadjust: 2\n        }\n      },\n      hidden: false,\n      hoverWidth: 1.5,\n      label: undefined,\n      labelHighlightBold: true,\n      length: undefined,\n      physics: true,\n      scaling: {\n        min: 1,\n        max: 15,\n        label: {\n          enabled: true,\n          min: 14,\n          max: 30,\n          maxVisible: 30,\n          drawThreshold: 5\n        },\n        customScalingFunction: function customScalingFunction(min, max, total, value) {\n          if (max === min) {\n            return 0.5;\n          } else {\n            var scale = 1 / (max - min);\n            return Math.max(0, (value - min) * scale);\n          }\n        }\n      },\n      selectionWidth: 1.5,\n      selfReference: {\n        size: 20,\n        angle: Math.PI / 4,\n        renderBehindTheNode: true\n      },\n      shadow: {\n        enabled: false,\n        color: \"rgba(0,0,0,0.5)\",\n        size: 10,\n        x: 5,\n        y: 5\n      },\n      background: {\n        enabled: false,\n        color: \"rgba(111,111,111,1)\",\n        size: 10,\n        dashes: false\n      },\n      smooth: {\n        enabled: true,\n        type: \"dynamic\",\n        forceDirection: \"none\",\n        roundness: 0.5\n      },\n      title: undefined,\n      width: 1,\n      value: undefined\n    };\n    deepExtend(this.options, this.defaultOptions);\n    this.bindEventListeners();\n  }\n\n  /**\n   * Binds event listeners\n   */\n  _createClass(EdgesHandler, [{\n    key: \"bindEventListeners\",\n    value: function bindEventListeners() {\n      var _this2 = this,\n        _context2,\n        _context3;\n      // this allows external modules to force all dynamic curves to turn static.\n      this.body.emitter.on(\"_forceDisableDynamicCurves\", function (type) {\n        var emit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        if (type === \"dynamic\") {\n          type = \"continuous\";\n        }\n        var dataChanged = false;\n        for (var edgeId in _this2.body.edges) {\n          if (Object.prototype.hasOwnProperty.call(_this2.body.edges, edgeId)) {\n            var edge = _this2.body.edges[edgeId];\n            var edgeData = _this2.body.data.edges.get(edgeId);\n\n            // only forcibly remove the smooth curve if the data has been set of the edge has the smooth curves defined.\n            // this is because a change in the global would not affect these curves.\n            if (edgeData != null) {\n              var smoothOptions = edgeData.smooth;\n              if (smoothOptions !== undefined) {\n                if (smoothOptions.enabled === true && smoothOptions.type === \"dynamic\") {\n                  if (type === undefined) {\n                    edge.setOptions({\n                      smooth: false\n                    });\n                  } else {\n                    edge.setOptions({\n                      smooth: {\n                        type: type\n                      }\n                    });\n                  }\n                  dataChanged = true;\n                }\n              }\n            }\n          }\n        }\n        if (emit === true && dataChanged === true) {\n          _this2.body.emitter.emit(\"_dataChanged\");\n        }\n      });\n\n      // this is called when options of EXISTING nodes or edges have changed.\n      //\n      // NOTE: Not true, called when options have NOT changed, for both existing as well as new nodes.\n      //       See update() for logic.\n      // TODO: Verify and examine the consequences of this. It might still trigger when\n      //       non-option fields have changed, but then reconnecting edges is still useless.\n      //       Alternatively, it might also be called when edges are removed.\n      //\n      this.body.emitter.on(\"_dataUpdated\", function () {\n        _this2.reconnectEdges();\n      });\n\n      // refresh the edges. Used when reverting from hierarchical layout\n      this.body.emitter.on(\"refreshEdges\", _bindInstanceProperty$1(_context2 = this.refresh).call(_context2, this));\n      this.body.emitter.on(\"refresh\", _bindInstanceProperty$1(_context3 = this.refresh).call(_context3, this));\n      this.body.emitter.on(\"destroy\", function () {\n        forEach$1(_this2.edgesListeners, function (callback, event) {\n          if (_this2.body.data.edges) _this2.body.data.edges.off(event, callback);\n        });\n        delete _this2.body.functions.createEdge;\n        delete _this2.edgesListeners.add;\n        delete _this2.edgesListeners.update;\n        delete _this2.edgesListeners.remove;\n        delete _this2.edgesListeners;\n      });\n    }\n\n    /**\n     *\n     * @param {object} options\n     */\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      if (options !== undefined) {\n        // use the parser from the Edge class to fill in all shorthand notations\n        Edge.parseOptions(this.options, options, true, this.defaultOptions, true);\n\n        // update smooth settings in all edges\n        var dataChanged = false;\n        if (options.smooth !== undefined) {\n          for (var edgeId in this.body.edges) {\n            if (Object.prototype.hasOwnProperty.call(this.body.edges, edgeId)) {\n              dataChanged = this.body.edges[edgeId].updateEdgeType() || dataChanged;\n            }\n          }\n        }\n\n        // update fonts in all edges\n        if (options.font !== undefined) {\n          for (var _edgeId in this.body.edges) {\n            if (Object.prototype.hasOwnProperty.call(this.body.edges, _edgeId)) {\n              this.body.edges[_edgeId].updateLabelModule();\n            }\n          }\n        }\n\n        // update the state of the variables if needed\n        if (options.hidden !== undefined || options.physics !== undefined || dataChanged === true) {\n          this.body.emitter.emit(\"_dataChanged\");\n        }\n      }\n    }\n\n    /**\n     * Load edges by reading the data table\n     *\n     * @param {Array | DataSet | DataView} edges    The data containing the edges.\n     * @param {boolean} [doNotEmit=false] - Suppress data changed event.\n     * @private\n     */\n  }, {\n    key: \"setData\",\n    value: function setData(edges) {\n      var _this3 = this;\n      var doNotEmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var oldEdgesData = this.body.data.edges;\n      if ((0,vis_data_peer_esm_vis_data_js__WEBPACK_IMPORTED_MODULE_0__.isDataViewLike)(\"id\", edges)) {\n        this.body.data.edges = edges;\n      } else if (_Array$isArray(edges)) {\n        this.body.data.edges = new vis_data_peer_esm_vis_data_js__WEBPACK_IMPORTED_MODULE_0__.DataSet();\n        this.body.data.edges.add(edges);\n      } else if (!edges) {\n        this.body.data.edges = new vis_data_peer_esm_vis_data_js__WEBPACK_IMPORTED_MODULE_0__.DataSet();\n      } else {\n        throw new TypeError(\"Array or DataSet expected\");\n      }\n\n      // TODO: is this null or undefined or false?\n      if (oldEdgesData) {\n        // unsubscribe from old dataset\n        forEach$1(this.edgesListeners, function (callback, event) {\n          oldEdgesData.off(event, callback);\n        });\n      }\n\n      // remove drawn edges\n      this.body.edges = {};\n\n      // TODO: is this null or undefined or false?\n      if (this.body.data.edges) {\n        // subscribe to new dataset\n        forEach$1(this.edgesListeners, function (callback, event) {\n          _this3.body.data.edges.on(event, callback);\n        });\n\n        // draw all new nodes\n        var ids = this.body.data.edges.getIds();\n        this.add(ids, true);\n      }\n      this.body.emitter.emit(\"_adjustEdgesForHierarchicalLayout\");\n      if (doNotEmit === false) {\n        this.body.emitter.emit(\"_dataChanged\");\n      }\n    }\n\n    /**\n     * Add edges\n     *\n     * @param {number[] | string[]} ids\n     * @param {boolean} [doNotEmit=false]\n     * @private\n     */\n  }, {\n    key: \"add\",\n    value: function add(ids) {\n      var doNotEmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var edges = this.body.edges;\n      var edgesData = this.body.data.edges;\n      for (var i = 0; i < ids.length; i++) {\n        var id = ids[i];\n        var oldEdge = edges[id];\n        if (oldEdge) {\n          oldEdge.disconnect();\n        }\n        var data = edgesData.get(id, {\n          showInternalIds: true\n        });\n        edges[id] = this.create(data);\n      }\n      this.body.emitter.emit(\"_adjustEdgesForHierarchicalLayout\");\n      if (doNotEmit === false) {\n        this.body.emitter.emit(\"_dataChanged\");\n      }\n    }\n\n    /**\n     * Update existing edges, or create them when not yet existing\n     *\n     * @param {number[] | string[]} ids\n     * @private\n     */\n  }, {\n    key: \"update\",\n    value: function update(ids) {\n      var edges = this.body.edges;\n      var edgesData = this.body.data.edges;\n      var dataChanged = false;\n      for (var i = 0; i < ids.length; i++) {\n        var id = ids[i];\n        var data = edgesData.get(id);\n        var edge = edges[id];\n        if (edge !== undefined) {\n          // update edge\n          edge.disconnect();\n          dataChanged = edge.setOptions(data) || dataChanged; // if a support node is added, data can be changed.\n          edge.connect();\n        } else {\n          // create edge\n          this.body.edges[id] = this.create(data);\n          dataChanged = true;\n        }\n      }\n      if (dataChanged === true) {\n        this.body.emitter.emit(\"_adjustEdgesForHierarchicalLayout\");\n        this.body.emitter.emit(\"_dataChanged\");\n      } else {\n        this.body.emitter.emit(\"_dataUpdated\");\n      }\n    }\n\n    /**\n     * Remove existing edges. Non existing ids will be ignored\n     *\n     * @param {number[] | string[]} ids\n     * @param {boolean} [emit=true]\n     * @private\n     */\n  }, {\n    key: \"remove\",\n    value: function remove(ids) {\n      var emit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (ids.length === 0) return; // early out\n\n      var edges = this.body.edges;\n      forEach$1(ids, function (id) {\n        var edge = edges[id];\n        if (edge !== undefined) {\n          edge.remove();\n        }\n      });\n      if (emit) {\n        this.body.emitter.emit(\"_dataChanged\");\n      }\n    }\n\n    /**\n     * Refreshes Edge Handler\n     */\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      var _this4 = this;\n      forEach$1(this.body.edges, function (edge, edgeId) {\n        var data = _this4.body.data.edges.get(edgeId);\n        if (data !== undefined) {\n          edge.setOptions(data);\n        }\n      });\n    }\n\n    /**\n     *\n     * @param {object} properties\n     * @returns {Edge}\n     */\n  }, {\n    key: \"create\",\n    value: function create(properties) {\n      return new Edge(properties, this.body, this.images, this.options, this.defaultOptions);\n    }\n\n    /**\n     * Reconnect all edges\n     *\n     * @private\n     */\n  }, {\n    key: \"reconnectEdges\",\n    value: function reconnectEdges() {\n      var id;\n      var nodes = this.body.nodes;\n      var edges = this.body.edges;\n      for (id in nodes) {\n        if (Object.prototype.hasOwnProperty.call(nodes, id)) {\n          nodes[id].edges = [];\n        }\n      }\n      for (id in edges) {\n        if (Object.prototype.hasOwnProperty.call(edges, id)) {\n          var edge = edges[id];\n          edge.from = null;\n          edge.to = null;\n          edge.connect();\n        }\n      }\n    }\n\n    /**\n     *\n     * @param {Edge.id} edgeId\n     * @returns {Array}\n     */\n  }, {\n    key: \"getConnectedNodes\",\n    value: function getConnectedNodes(edgeId) {\n      var nodeList = [];\n      if (this.body.edges[edgeId] !== undefined) {\n        var edge = this.body.edges[edgeId];\n        if (edge.fromId !== undefined) {\n          nodeList.push(edge.fromId);\n        }\n        if (edge.toId !== undefined) {\n          nodeList.push(edge.toId);\n        }\n      }\n      return nodeList;\n    }\n\n    /**\n     * There is no direct relation between the nodes and the edges DataSet,\n     * so the right place to do call this is in the handler for event `_dataUpdated`.\n     */\n  }, {\n    key: \"_updateState\",\n    value: function _updateState() {\n      this._addMissingEdges();\n      this._removeInvalidEdges();\n    }\n\n    /**\n     * Scan for missing nodes and remove corresponding edges, if any.\n     *\n     * @private\n     */\n  }, {\n    key: \"_removeInvalidEdges\",\n    value: function _removeInvalidEdges() {\n      var _this5 = this;\n      var edgesToDelete = [];\n      forEach$1(this.body.edges, function (edge, id) {\n        var toNode = _this5.body.nodes[edge.toId];\n        var fromNode = _this5.body.nodes[edge.fromId];\n\n        // Skip clustering edges here, let the Clustering module handle those\n        if (toNode !== undefined && toNode.isCluster === true || fromNode !== undefined && fromNode.isCluster === true) {\n          return;\n        }\n        if (toNode === undefined || fromNode === undefined) {\n          edgesToDelete.push(id);\n        }\n      });\n      this.remove(edgesToDelete, false);\n    }\n\n    /**\n     * add all edges from dataset that are not in the cached state\n     *\n     * @private\n     */\n  }, {\n    key: \"_addMissingEdges\",\n    value: function _addMissingEdges() {\n      var edgesData = this.body.data.edges;\n      if (edgesData === undefined || edgesData === null) {\n        return; // No edges DataSet yet; can happen on startup\n      }\n\n      var edges = this.body.edges;\n      var addIds = [];\n      _forEachInstanceProperty(edgesData).call(edgesData, function (edgeData, edgeId) {\n        var edge = edges[edgeId];\n        if (edge === undefined) {\n          addIds.push(edgeId);\n        }\n      });\n      this.add(addIds, true);\n    }\n  }]);\n  return EdgesHandler;\n}();\n\n/**\n * Barnes Hut Solver\n */\nvar BarnesHutSolver = /*#__PURE__*/function () {\n  /**\n   * @param {object} body\n   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody\n   * @param {object} options\n   */\n  function BarnesHutSolver(body, physicsBody, options) {\n    _classCallCheck(this, BarnesHutSolver);\n    this.body = body;\n    this.physicsBody = physicsBody;\n    this.barnesHutTree;\n    this.setOptions(options);\n    this._rng = Alea(\"BARNES HUT SOLVER\");\n\n    // debug: show grid\n    // this.body.emitter.on(\"afterDrawing\", (ctx) => {this._debug(ctx,'#ff0000')})\n  }\n\n  /**\n   *\n   * @param {object} options\n   */\n  _createClass(BarnesHutSolver, [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.options = options;\n      this.thetaInversed = 1 / this.options.theta;\n\n      // if 1 then min distance = 0.5, if 0.5 then min distance = 0.5 + 0.5*node.shape.radius\n      this.overlapAvoidanceFactor = 1 - Math.max(0, Math.min(1, this.options.avoidOverlap));\n    }\n\n    /**\n     * This function calculates the forces the nodes apply on each other based on a gravitational model.\n     * The Barnes Hut method is used to speed up this N-body simulation.\n     *\n     * @private\n     */\n  }, {\n    key: \"solve\",\n    value: function solve() {\n      if (this.options.gravitationalConstant !== 0 && this.physicsBody.physicsNodeIndices.length > 0) {\n        var node;\n        var nodes = this.body.nodes;\n        var nodeIndices = this.physicsBody.physicsNodeIndices;\n        var nodeCount = nodeIndices.length;\n\n        // create the tree\n        var barnesHutTree = this._formBarnesHutTree(nodes, nodeIndices);\n\n        // for debugging\n        this.barnesHutTree = barnesHutTree;\n\n        // place the nodes one by one recursively\n        for (var i = 0; i < nodeCount; i++) {\n          node = nodes[nodeIndices[i]];\n          if (node.options.mass > 0) {\n            // starting with root is irrelevant, it never passes the BarnesHutSolver condition\n            this._getForceContributions(barnesHutTree.root, node);\n          }\n        }\n      }\n    }\n\n    /**\n     * @param {object} parentBranch\n     * @param {Node} node\n     * @private\n     */\n  }, {\n    key: \"_getForceContributions\",\n    value: function _getForceContributions(parentBranch, node) {\n      this._getForceContribution(parentBranch.children.NW, node);\n      this._getForceContribution(parentBranch.children.NE, node);\n      this._getForceContribution(parentBranch.children.SW, node);\n      this._getForceContribution(parentBranch.children.SE, node);\n    }\n\n    /**\n     * This function traverses the barnesHutTree. It checks when it can approximate distant nodes with their center of mass.\n     * If a region contains a single node, we check if it is not itself, then we apply the force.\n     *\n     * @param {object} parentBranch\n     * @param {Node} node\n     * @private\n     */\n  }, {\n    key: \"_getForceContribution\",\n    value: function _getForceContribution(parentBranch, node) {\n      // we get no force contribution from an empty region\n      if (parentBranch.childrenCount > 0) {\n        // get the distance from the center of mass to the node.\n        var dx = parentBranch.centerOfMass.x - node.x;\n        var dy = parentBranch.centerOfMass.y - node.y;\n        var distance = Math.sqrt(dx * dx + dy * dy);\n\n        // BarnesHutSolver condition\n        // original condition : s/d < theta = passed  ===  d/s > 1/theta = passed\n        // calcSize = 1/s --> d * 1/s > 1/theta = passed\n        if (distance * parentBranch.calcSize > this.thetaInversed) {\n          this._calculateForces(distance, dx, dy, node, parentBranch);\n        } else {\n          // Did not pass the condition, go into children if available\n          if (parentBranch.childrenCount === 4) {\n            this._getForceContributions(parentBranch, node);\n          } else {\n            // parentBranch must have only one node, if it was empty we wouldnt be here\n            if (parentBranch.children.data.id != node.id) {\n              // if it is not self\n              this._calculateForces(distance, dx, dy, node, parentBranch);\n            }\n          }\n        }\n      }\n    }\n\n    /**\n     * Calculate the forces based on the distance.\n     *\n     * @param {number} distance\n     * @param {number} dx\n     * @param {number} dy\n     * @param {Node} node\n     * @param {object} parentBranch\n     * @private\n     */\n  }, {\n    key: \"_calculateForces\",\n    value: function _calculateForces(distance, dx, dy, node, parentBranch) {\n      if (distance === 0) {\n        distance = 0.1;\n        dx = distance;\n      }\n      if (this.overlapAvoidanceFactor < 1 && node.shape.radius) {\n        distance = Math.max(0.1 + this.overlapAvoidanceFactor * node.shape.radius, distance - node.shape.radius);\n      }\n\n      // the dividing by the distance cubed instead of squared allows us to get the fx and fy components without sines and cosines\n      // it is shorthand for gravityforce with distance squared and fx = dx/distance * gravityForce\n      var gravityForce = this.options.gravitationalConstant * parentBranch.mass * node.options.mass / Math.pow(distance, 3);\n      var fx = dx * gravityForce;\n      var fy = dy * gravityForce;\n      this.physicsBody.forces[node.id].x += fx;\n      this.physicsBody.forces[node.id].y += fy;\n    }\n\n    /**\n     * This function constructs the barnesHut tree recursively. It creates the root, splits it and starts placing the nodes.\n     *\n     * @param {Array.<Node>} nodes\n     * @param {Array.<number>} nodeIndices\n     * @returns {{root: {centerOfMass: {x: number, y: number}, mass: number, range: {minX: number, maxX: number, minY: number, maxY: number}, size: number, calcSize: number, children: {data: null}, maxWidth: number, level: number, childrenCount: number}}} BarnesHutTree\n     * @private\n     */\n  }, {\n    key: \"_formBarnesHutTree\",\n    value: function _formBarnesHutTree(nodes, nodeIndices) {\n      var node;\n      var nodeCount = nodeIndices.length;\n      var minX = nodes[nodeIndices[0]].x;\n      var minY = nodes[nodeIndices[0]].y;\n      var maxX = nodes[nodeIndices[0]].x;\n      var maxY = nodes[nodeIndices[0]].y;\n\n      // get the range of the nodes\n      for (var i = 1; i < nodeCount; i++) {\n        var _node = nodes[nodeIndices[i]];\n        var x = _node.x;\n        var y = _node.y;\n        if (_node.options.mass > 0) {\n          if (x < minX) {\n            minX = x;\n          }\n          if (x > maxX) {\n            maxX = x;\n          }\n          if (y < minY) {\n            minY = y;\n          }\n          if (y > maxY) {\n            maxY = y;\n          }\n        }\n      }\n      // make the range a square\n      var sizeDiff = Math.abs(maxX - minX) - Math.abs(maxY - minY); // difference between X and Y\n      if (sizeDiff > 0) {\n        minY -= 0.5 * sizeDiff;\n        maxY += 0.5 * sizeDiff;\n      } // xSize > ySize\n      else {\n        minX += 0.5 * sizeDiff;\n        maxX -= 0.5 * sizeDiff;\n      } // xSize < ySize\n\n      var minimumTreeSize = 1e-5;\n      var rootSize = Math.max(minimumTreeSize, Math.abs(maxX - minX));\n      var halfRootSize = 0.5 * rootSize;\n      var centerX = 0.5 * (minX + maxX),\n        centerY = 0.5 * (minY + maxY);\n\n      // construct the barnesHutTree\n      var barnesHutTree = {\n        root: {\n          centerOfMass: {\n            x: 0,\n            y: 0\n          },\n          mass: 0,\n          range: {\n            minX: centerX - halfRootSize,\n            maxX: centerX + halfRootSize,\n            minY: centerY - halfRootSize,\n            maxY: centerY + halfRootSize\n          },\n          size: rootSize,\n          calcSize: 1 / rootSize,\n          children: {\n            data: null\n          },\n          maxWidth: 0,\n          level: 0,\n          childrenCount: 4\n        }\n      };\n      this._splitBranch(barnesHutTree.root);\n\n      // place the nodes one by one recursively\n      for (var _i = 0; _i < nodeCount; _i++) {\n        node = nodes[nodeIndices[_i]];\n        if (node.options.mass > 0) {\n          this._placeInTree(barnesHutTree.root, node);\n        }\n      }\n\n      // make global\n      return barnesHutTree;\n    }\n\n    /**\n     * this updates the mass of a branch. this is increased by adding a node.\n     *\n     * @param {object} parentBranch\n     * @param {Node} node\n     * @private\n     */\n  }, {\n    key: \"_updateBranchMass\",\n    value: function _updateBranchMass(parentBranch, node) {\n      var centerOfMass = parentBranch.centerOfMass;\n      var totalMass = parentBranch.mass + node.options.mass;\n      var totalMassInv = 1 / totalMass;\n      centerOfMass.x = centerOfMass.x * parentBranch.mass + node.x * node.options.mass;\n      centerOfMass.x *= totalMassInv;\n      centerOfMass.y = centerOfMass.y * parentBranch.mass + node.y * node.options.mass;\n      centerOfMass.y *= totalMassInv;\n      parentBranch.mass = totalMass;\n      var biggestSize = Math.max(Math.max(node.height, node.radius), node.width);\n      parentBranch.maxWidth = parentBranch.maxWidth < biggestSize ? biggestSize : parentBranch.maxWidth;\n    }\n\n    /**\n     * determine in which branch the node will be placed.\n     *\n     * @param {object} parentBranch\n     * @param {Node} node\n     * @param {boolean} skipMassUpdate\n     * @private\n     */\n  }, {\n    key: \"_placeInTree\",\n    value: function _placeInTree(parentBranch, node, skipMassUpdate) {\n      if (skipMassUpdate != true || skipMassUpdate === undefined) {\n        // update the mass of the branch.\n        this._updateBranchMass(parentBranch, node);\n      }\n      var range = parentBranch.children.NW.range;\n      var region;\n      if (range.maxX > node.x) {\n        // in NW or SW\n        if (range.maxY > node.y) {\n          region = \"NW\";\n        } else {\n          region = \"SW\";\n        }\n      } else {\n        // in NE or SE\n        if (range.maxY > node.y) {\n          region = \"NE\";\n        } else {\n          region = \"SE\";\n        }\n      }\n      this._placeInRegion(parentBranch, node, region);\n    }\n\n    /**\n     * actually place the node in a region (or branch)\n     *\n     * @param {object} parentBranch\n     * @param {Node} node\n     * @param {'NW'| 'NE' | 'SW' | 'SE'} region\n     * @private\n     */\n  }, {\n    key: \"_placeInRegion\",\n    value: function _placeInRegion(parentBranch, node, region) {\n      var children = parentBranch.children[region];\n      switch (children.childrenCount) {\n        case 0:\n          // place node here\n          children.children.data = node;\n          children.childrenCount = 1;\n          this._updateBranchMass(children, node);\n          break;\n        case 1:\n          // convert into children\n          // if there are two nodes exactly overlapping (on init, on opening of cluster etc.)\n          // we move one node a little bit and we do not put it in the tree.\n          if (children.children.data.x === node.x && children.children.data.y === node.y) {\n            node.x += this._rng();\n            node.y += this._rng();\n          } else {\n            this._splitBranch(children);\n            this._placeInTree(children, node);\n          }\n          break;\n        case 4:\n          // place in branch\n          this._placeInTree(children, node);\n          break;\n      }\n    }\n\n    /**\n     * this function splits a branch into 4 sub branches. If the branch contained a node, we place it in the subbranch\n     * after the split is complete.\n     *\n     * @param {object} parentBranch\n     * @private\n     */\n  }, {\n    key: \"_splitBranch\",\n    value: function _splitBranch(parentBranch) {\n      // if the branch is shaded with a node, replace the node in the new subset.\n      var containedNode = null;\n      if (parentBranch.childrenCount === 1) {\n        containedNode = parentBranch.children.data;\n        parentBranch.mass = 0;\n        parentBranch.centerOfMass.x = 0;\n        parentBranch.centerOfMass.y = 0;\n      }\n      parentBranch.childrenCount = 4;\n      parentBranch.children.data = null;\n      this._insertRegion(parentBranch, \"NW\");\n      this._insertRegion(parentBranch, \"NE\");\n      this._insertRegion(parentBranch, \"SW\");\n      this._insertRegion(parentBranch, \"SE\");\n      if (containedNode != null) {\n        this._placeInTree(parentBranch, containedNode);\n      }\n    }\n\n    /**\n     * This function subdivides the region into four new segments.\n     * Specifically, this inserts a single new segment.\n     * It fills the children section of the parentBranch\n     *\n     * @param {object} parentBranch\n     * @param {'NW'| 'NE' | 'SW' | 'SE'} region\n     * @private\n     */\n  }, {\n    key: \"_insertRegion\",\n    value: function _insertRegion(parentBranch, region) {\n      var minX, maxX, minY, maxY;\n      var childSize = 0.5 * parentBranch.size;\n      switch (region) {\n        case \"NW\":\n          minX = parentBranch.range.minX;\n          maxX = parentBranch.range.minX + childSize;\n          minY = parentBranch.range.minY;\n          maxY = parentBranch.range.minY + childSize;\n          break;\n        case \"NE\":\n          minX = parentBranch.range.minX + childSize;\n          maxX = parentBranch.range.maxX;\n          minY = parentBranch.range.minY;\n          maxY = parentBranch.range.minY + childSize;\n          break;\n        case \"SW\":\n          minX = parentBranch.range.minX;\n          maxX = parentBranch.range.minX + childSize;\n          minY = parentBranch.range.minY + childSize;\n          maxY = parentBranch.range.maxY;\n          break;\n        case \"SE\":\n          minX = parentBranch.range.minX + childSize;\n          maxX = parentBranch.range.maxX;\n          minY = parentBranch.range.minY + childSize;\n          maxY = parentBranch.range.maxY;\n          break;\n      }\n      parentBranch.children[region] = {\n        centerOfMass: {\n          x: 0,\n          y: 0\n        },\n        mass: 0,\n        range: {\n          minX: minX,\n          maxX: maxX,\n          minY: minY,\n          maxY: maxY\n        },\n        size: 0.5 * parentBranch.size,\n        calcSize: 2 * parentBranch.calcSize,\n        children: {\n          data: null\n        },\n        maxWidth: 0,\n        level: parentBranch.level + 1,\n        childrenCount: 0\n      };\n    }\n\n    //---------------------------  DEBUGGING BELOW  ---------------------------//\n\n    /**\n     * This function is for debugging purposed, it draws the tree.\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {string} color\n     * @private\n     */\n  }, {\n    key: \"_debug\",\n    value: function _debug(ctx, color) {\n      if (this.barnesHutTree !== undefined) {\n        ctx.lineWidth = 1;\n        this._drawBranch(this.barnesHutTree.root, ctx, color);\n      }\n    }\n\n    /**\n     * This function is for debugging purposes. It draws the branches recursively.\n     *\n     * @param {object} branch\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {string} color\n     * @private\n     */\n  }, {\n    key: \"_drawBranch\",\n    value: function _drawBranch(branch, ctx, color) {\n      if (color === undefined) {\n        color = \"#FF0000\";\n      }\n      if (branch.childrenCount === 4) {\n        this._drawBranch(branch.children.NW, ctx);\n        this._drawBranch(branch.children.NE, ctx);\n        this._drawBranch(branch.children.SE, ctx);\n        this._drawBranch(branch.children.SW, ctx);\n      }\n      ctx.strokeStyle = color;\n      ctx.beginPath();\n      ctx.moveTo(branch.range.minX, branch.range.minY);\n      ctx.lineTo(branch.range.maxX, branch.range.minY);\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.moveTo(branch.range.maxX, branch.range.minY);\n      ctx.lineTo(branch.range.maxX, branch.range.maxY);\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.moveTo(branch.range.maxX, branch.range.maxY);\n      ctx.lineTo(branch.range.minX, branch.range.maxY);\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.moveTo(branch.range.minX, branch.range.maxY);\n      ctx.lineTo(branch.range.minX, branch.range.minY);\n      ctx.stroke();\n\n      /*\n       if (branch.mass > 0) {\n       ctx.circle(branch.centerOfMass.x, branch.centerOfMass.y, 3*branch.mass);\n       ctx.stroke();\n       }\n       */\n    }\n  }]);\n  return BarnesHutSolver;\n}();\n\n/**\n * Repulsion Solver\n */\nvar RepulsionSolver = /*#__PURE__*/function () {\n  /**\n   * @param {object} body\n   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody\n   * @param {object} options\n   */\n  function RepulsionSolver(body, physicsBody, options) {\n    _classCallCheck(this, RepulsionSolver);\n    this._rng = Alea(\"REPULSION SOLVER\");\n    this.body = body;\n    this.physicsBody = physicsBody;\n    this.setOptions(options);\n  }\n\n  /**\n   *\n   * @param {object} options\n   */\n  _createClass(RepulsionSolver, [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.options = options;\n    }\n\n    /**\n     * Calculate the forces the nodes apply on each other based on a repulsion field.\n     * This field is linearly approximated.\n     *\n     * @private\n     */\n  }, {\n    key: \"solve\",\n    value: function solve() {\n      var dx, dy, distance, fx, fy, repulsingForce, node1, node2;\n      var nodes = this.body.nodes;\n      var nodeIndices = this.physicsBody.physicsNodeIndices;\n      var forces = this.physicsBody.forces;\n\n      // repulsing forces between nodes\n      var nodeDistance = this.options.nodeDistance;\n\n      // approximation constants\n      var a = -2 / 3 / nodeDistance;\n      var b = 4 / 3;\n\n      // we loop from i over all but the last entree in the array\n      // j loops from i+1 to the last. This way we do not double count any of the indices, nor i === j\n      for (var i = 0; i < nodeIndices.length - 1; i++) {\n        node1 = nodes[nodeIndices[i]];\n        for (var j = i + 1; j < nodeIndices.length; j++) {\n          node2 = nodes[nodeIndices[j]];\n          dx = node2.x - node1.x;\n          dy = node2.y - node1.y;\n          distance = Math.sqrt(dx * dx + dy * dy);\n\n          // same condition as BarnesHutSolver, making sure nodes are never 100% overlapping.\n          if (distance === 0) {\n            distance = 0.1 * this._rng();\n            dx = distance;\n          }\n          if (distance < 2 * nodeDistance) {\n            if (distance < 0.5 * nodeDistance) {\n              repulsingForce = 1.0;\n            } else {\n              repulsingForce = a * distance + b; // linear approx of  1 / (1 + Math.exp((distance / nodeDistance - 1) * steepness))\n            }\n\n            repulsingForce = repulsingForce / distance;\n            fx = dx * repulsingForce;\n            fy = dy * repulsingForce;\n            forces[node1.id].x -= fx;\n            forces[node1.id].y -= fy;\n            forces[node2.id].x += fx;\n            forces[node2.id].y += fy;\n          }\n        }\n      }\n    }\n  }]);\n  return RepulsionSolver;\n}();\n\n/**\n * Hierarchical Repulsion Solver\n */\nvar HierarchicalRepulsionSolver = /*#__PURE__*/function () {\n  /**\n   * @param {object} body\n   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody\n   * @param {object} options\n   */\n  function HierarchicalRepulsionSolver(body, physicsBody, options) {\n    _classCallCheck(this, HierarchicalRepulsionSolver);\n    this.body = body;\n    this.physicsBody = physicsBody;\n    this.setOptions(options);\n  }\n\n  /**\n   *\n   * @param {object} options\n   */\n  _createClass(HierarchicalRepulsionSolver, [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.options = options;\n      this.overlapAvoidanceFactor = Math.max(0, Math.min(1, this.options.avoidOverlap || 0));\n    }\n\n    /**\n     * Calculate the forces the nodes apply on each other based on a repulsion field.\n     * This field is linearly approximated.\n     *\n     * @private\n     */\n  }, {\n    key: \"solve\",\n    value: function solve() {\n      var nodes = this.body.nodes;\n      var nodeIndices = this.physicsBody.physicsNodeIndices;\n      var forces = this.physicsBody.forces;\n\n      // repulsing forces between nodes\n      var nodeDistance = this.options.nodeDistance;\n\n      // we loop from i over all but the last entree in the array\n      // j loops from i+1 to the last. This way we do not double count any of the indices, nor i === j\n      for (var i = 0; i < nodeIndices.length - 1; i++) {\n        var node1 = nodes[nodeIndices[i]];\n        for (var j = i + 1; j < nodeIndices.length; j++) {\n          var node2 = nodes[nodeIndices[j]];\n\n          // nodes only affect nodes on their level\n          if (node1.level === node2.level) {\n            var theseNodesDistance = nodeDistance + this.overlapAvoidanceFactor * ((node1.shape.radius || 0) / 2 + (node2.shape.radius || 0) / 2);\n            var dx = node2.x - node1.x;\n            var dy = node2.y - node1.y;\n            var distance = Math.sqrt(dx * dx + dy * dy);\n            var steepness = 0.05;\n            var repulsingForce = void 0;\n            if (distance < theseNodesDistance) {\n              repulsingForce = -Math.pow(steepness * distance, 2) + Math.pow(steepness * theseNodesDistance, 2);\n            } else {\n              repulsingForce = 0;\n            }\n            // normalize force with\n            if (distance !== 0) {\n              repulsingForce = repulsingForce / distance;\n            }\n            var fx = dx * repulsingForce;\n            var fy = dy * repulsingForce;\n            forces[node1.id].x -= fx;\n            forces[node1.id].y -= fy;\n            forces[node2.id].x += fx;\n            forces[node2.id].y += fy;\n          }\n        }\n      }\n    }\n  }]);\n  return HierarchicalRepulsionSolver;\n}();\n\n/**\n * Spring Solver\n */\nvar SpringSolver = /*#__PURE__*/function () {\n  /**\n   * @param {object} body\n   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody\n   * @param {object} options\n   */\n  function SpringSolver(body, physicsBody, options) {\n    _classCallCheck(this, SpringSolver);\n    this.body = body;\n    this.physicsBody = physicsBody;\n    this.setOptions(options);\n  }\n\n  /**\n   *\n   * @param {object} options\n   */\n  _createClass(SpringSolver, [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.options = options;\n    }\n\n    /**\n     * This function calculates the springforces on the nodes, accounting for the support nodes.\n     *\n     * @private\n     */\n  }, {\n    key: \"solve\",\n    value: function solve() {\n      var edgeLength, edge;\n      var edgeIndices = this.physicsBody.physicsEdgeIndices;\n      var edges = this.body.edges;\n      var node1, node2, node3;\n\n      // forces caused by the edges, modelled as springs\n      for (var i = 0; i < edgeIndices.length; i++) {\n        edge = edges[edgeIndices[i]];\n        if (edge.connected === true && edge.toId !== edge.fromId) {\n          // only calculate forces if nodes are in the same sector\n          if (this.body.nodes[edge.toId] !== undefined && this.body.nodes[edge.fromId] !== undefined) {\n            if (edge.edgeType.via !== undefined) {\n              edgeLength = edge.options.length === undefined ? this.options.springLength : edge.options.length;\n              node1 = edge.to;\n              node2 = edge.edgeType.via;\n              node3 = edge.from;\n              this._calculateSpringForce(node1, node2, 0.5 * edgeLength);\n              this._calculateSpringForce(node2, node3, 0.5 * edgeLength);\n            } else {\n              // the * 1.5 is here so the edge looks as large as a smooth edge. It does not initially because the smooth edges use\n              // the support nodes which exert a repulsive force on the to and from nodes, making the edge appear larger.\n              edgeLength = edge.options.length === undefined ? this.options.springLength * 1.5 : edge.options.length;\n              this._calculateSpringForce(edge.from, edge.to, edgeLength);\n            }\n          }\n        }\n      }\n    }\n\n    /**\n     * This is the code actually performing the calculation for the function above.\n     *\n     * @param {Node} node1\n     * @param {Node} node2\n     * @param {number} edgeLength\n     * @private\n     */\n  }, {\n    key: \"_calculateSpringForce\",\n    value: function _calculateSpringForce(node1, node2, edgeLength) {\n      var dx = node1.x - node2.x;\n      var dy = node1.y - node2.y;\n      var distance = Math.max(Math.sqrt(dx * dx + dy * dy), 0.01);\n\n      // the 1/distance is so the fx and fy can be calculated without sine or cosine.\n      var springForce = this.options.springConstant * (edgeLength - distance) / distance;\n      var fx = dx * springForce;\n      var fy = dy * springForce;\n\n      // handle the case where one node is not part of the physcis\n      if (this.physicsBody.forces[node1.id] !== undefined) {\n        this.physicsBody.forces[node1.id].x += fx;\n        this.physicsBody.forces[node1.id].y += fy;\n      }\n      if (this.physicsBody.forces[node2.id] !== undefined) {\n        this.physicsBody.forces[node2.id].x -= fx;\n        this.physicsBody.forces[node2.id].y -= fy;\n      }\n    }\n  }]);\n  return SpringSolver;\n}();\n\n/**\n * Hierarchical Spring Solver\n */\nvar HierarchicalSpringSolver = /*#__PURE__*/function () {\n  /**\n   * @param {object} body\n   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody\n   * @param {object} options\n   */\n  function HierarchicalSpringSolver(body, physicsBody, options) {\n    _classCallCheck(this, HierarchicalSpringSolver);\n    this.body = body;\n    this.physicsBody = physicsBody;\n    this.setOptions(options);\n  }\n\n  /**\n   *\n   * @param {object} options\n   */\n  _createClass(HierarchicalSpringSolver, [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.options = options;\n    }\n\n    /**\n     * This function calculates the springforces on the nodes, accounting for the support nodes.\n     *\n     * @private\n     */\n  }, {\n    key: \"solve\",\n    value: function solve() {\n      var edgeLength, edge;\n      var dx, dy, fx, fy, springForce, distance;\n      var edges = this.body.edges;\n      var factor = 0.5;\n      var edgeIndices = this.physicsBody.physicsEdgeIndices;\n      var nodeIndices = this.physicsBody.physicsNodeIndices;\n      var forces = this.physicsBody.forces;\n\n      // initialize the spring force counters\n      for (var i = 0; i < nodeIndices.length; i++) {\n        var nodeId = nodeIndices[i];\n        forces[nodeId].springFx = 0;\n        forces[nodeId].springFy = 0;\n      }\n\n      // forces caused by the edges, modelled as springs\n      for (var _i = 0; _i < edgeIndices.length; _i++) {\n        edge = edges[edgeIndices[_i]];\n        if (edge.connected === true) {\n          edgeLength = edge.options.length === undefined ? this.options.springLength : edge.options.length;\n          dx = edge.from.x - edge.to.x;\n          dy = edge.from.y - edge.to.y;\n          distance = Math.sqrt(dx * dx + dy * dy);\n          distance = distance === 0 ? 0.01 : distance;\n\n          // the 1/distance is so the fx and fy can be calculated without sine or cosine.\n          springForce = this.options.springConstant * (edgeLength - distance) / distance;\n          fx = dx * springForce;\n          fy = dy * springForce;\n          if (edge.to.level != edge.from.level) {\n            if (forces[edge.toId] !== undefined) {\n              forces[edge.toId].springFx -= fx;\n              forces[edge.toId].springFy -= fy;\n            }\n            if (forces[edge.fromId] !== undefined) {\n              forces[edge.fromId].springFx += fx;\n              forces[edge.fromId].springFy += fy;\n            }\n          } else {\n            if (forces[edge.toId] !== undefined) {\n              forces[edge.toId].x -= factor * fx;\n              forces[edge.toId].y -= factor * fy;\n            }\n            if (forces[edge.fromId] !== undefined) {\n              forces[edge.fromId].x += factor * fx;\n              forces[edge.fromId].y += factor * fy;\n            }\n          }\n        }\n      }\n\n      // normalize spring forces\n      springForce = 1;\n      var springFx, springFy;\n      for (var _i2 = 0; _i2 < nodeIndices.length; _i2++) {\n        var _nodeId = nodeIndices[_i2];\n        springFx = Math.min(springForce, Math.max(-springForce, forces[_nodeId].springFx));\n        springFy = Math.min(springForce, Math.max(-springForce, forces[_nodeId].springFy));\n        forces[_nodeId].x += springFx;\n        forces[_nodeId].y += springFy;\n      }\n\n      // retain energy balance\n      var totalFx = 0;\n      var totalFy = 0;\n      for (var _i3 = 0; _i3 < nodeIndices.length; _i3++) {\n        var _nodeId2 = nodeIndices[_i3];\n        totalFx += forces[_nodeId2].x;\n        totalFy += forces[_nodeId2].y;\n      }\n      var correctionFx = totalFx / nodeIndices.length;\n      var correctionFy = totalFy / nodeIndices.length;\n      for (var _i4 = 0; _i4 < nodeIndices.length; _i4++) {\n        var _nodeId3 = nodeIndices[_i4];\n        forces[_nodeId3].x -= correctionFx;\n        forces[_nodeId3].y -= correctionFy;\n      }\n    }\n  }]);\n  return HierarchicalSpringSolver;\n}();\n\n/**\n * Central Gravity Solver\n */\nvar CentralGravitySolver = /*#__PURE__*/function () {\n  /**\n   * @param {object} body\n   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody\n   * @param {object} options\n   */\n  function CentralGravitySolver(body, physicsBody, options) {\n    _classCallCheck(this, CentralGravitySolver);\n    this.body = body;\n    this.physicsBody = physicsBody;\n    this.setOptions(options);\n  }\n\n  /**\n   *\n   * @param {object} options\n   */\n  _createClass(CentralGravitySolver, [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.options = options;\n    }\n\n    /**\n     * Calculates forces for each node\n     */\n  }, {\n    key: \"solve\",\n    value: function solve() {\n      var dx, dy, distance, node;\n      var nodes = this.body.nodes;\n      var nodeIndices = this.physicsBody.physicsNodeIndices;\n      var forces = this.physicsBody.forces;\n      for (var i = 0; i < nodeIndices.length; i++) {\n        var nodeId = nodeIndices[i];\n        node = nodes[nodeId];\n        dx = -node.x;\n        dy = -node.y;\n        distance = Math.sqrt(dx * dx + dy * dy);\n        this._calculateForces(distance, dx, dy, forces, node);\n      }\n    }\n\n    /**\n     * Calculate the forces based on the distance.\n     *\n     * @param {number} distance\n     * @param {number} dx\n     * @param {number} dy\n     * @param {Object<Node.id, vis.Node>} forces\n     * @param {Node} node\n     * @private\n     */\n  }, {\n    key: \"_calculateForces\",\n    value: function _calculateForces(distance, dx, dy, forces, node) {\n      var gravityForce = distance === 0 ? 0 : this.options.centralGravity / distance;\n      forces[node.id].x = dx * gravityForce;\n      forces[node.id].y = dy * gravityForce;\n    }\n  }]);\n  return CentralGravitySolver;\n}();\n\nfunction _createSuper$3(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$3(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct$3() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * @augments BarnesHutSolver\n */\nvar ForceAtlas2BasedRepulsionSolver = /*#__PURE__*/function (_BarnesHutSolver) {\n  _inherits(ForceAtlas2BasedRepulsionSolver, _BarnesHutSolver);\n  var _super = _createSuper$3(ForceAtlas2BasedRepulsionSolver);\n  /**\n   * @param {object} body\n   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody\n   * @param {object} options\n   */\n  function ForceAtlas2BasedRepulsionSolver(body, physicsBody, options) {\n    var _this;\n    _classCallCheck(this, ForceAtlas2BasedRepulsionSolver);\n    _this = _super.call(this, body, physicsBody, options);\n    _this._rng = Alea(\"FORCE ATLAS 2 BASED REPULSION SOLVER\");\n    return _this;\n  }\n\n  /**\n   * Calculate the forces based on the distance.\n   *\n   * @param {number} distance\n   * @param {number} dx\n   * @param {number} dy\n   * @param {Node} node\n   * @param {object} parentBranch\n   * @private\n   */\n  _createClass(ForceAtlas2BasedRepulsionSolver, [{\n    key: \"_calculateForces\",\n    value: function _calculateForces(distance, dx, dy, node, parentBranch) {\n      if (distance === 0) {\n        distance = 0.1 * this._rng();\n        dx = distance;\n      }\n      if (this.overlapAvoidanceFactor < 1 && node.shape.radius) {\n        distance = Math.max(0.1 + this.overlapAvoidanceFactor * node.shape.radius, distance - node.shape.radius);\n      }\n      var degree = node.edges.length + 1;\n      // the dividing by the distance cubed instead of squared allows us to get the fx and fy components without sines and cosines\n      // it is shorthand for gravityforce with distance squared and fx = dx/distance * gravityForce\n      var gravityForce = this.options.gravitationalConstant * parentBranch.mass * node.options.mass * degree / Math.pow(distance, 2);\n      var fx = dx * gravityForce;\n      var fy = dy * gravityForce;\n      this.physicsBody.forces[node.id].x += fx;\n      this.physicsBody.forces[node.id].y += fy;\n    }\n  }]);\n  return ForceAtlas2BasedRepulsionSolver;\n}(BarnesHutSolver);\n\nfunction _createSuper$2(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$2(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct$2() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * @augments CentralGravitySolver\n */\nvar ForceAtlas2BasedCentralGravitySolver = /*#__PURE__*/function (_CentralGravitySolver) {\n  _inherits(ForceAtlas2BasedCentralGravitySolver, _CentralGravitySolver);\n  var _super = _createSuper$2(ForceAtlas2BasedCentralGravitySolver);\n  /**\n   * @param {object} body\n   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody\n   * @param {object} options\n   */\n  function ForceAtlas2BasedCentralGravitySolver(body, physicsBody, options) {\n    _classCallCheck(this, ForceAtlas2BasedCentralGravitySolver);\n    return _super.call(this, body, physicsBody, options);\n  }\n\n  /**\n   * Calculate the forces based on the distance.\n   *\n   * @param {number} distance\n   * @param {number} dx\n   * @param {number} dy\n   * @param {Object<Node.id, Node>} forces\n   * @param {Node} node\n   * @private\n   */\n  _createClass(ForceAtlas2BasedCentralGravitySolver, [{\n    key: \"_calculateForces\",\n    value: function _calculateForces(distance, dx, dy, forces, node) {\n      if (distance > 0) {\n        var degree = node.edges.length + 1;\n        var gravityForce = this.options.centralGravity * degree * node.options.mass;\n        forces[node.id].x = dx * gravityForce;\n        forces[node.id].y = dy * gravityForce;\n      }\n    }\n  }]);\n  return ForceAtlas2BasedCentralGravitySolver;\n}(CentralGravitySolver);\n\n/**\n * The physics engine\n */\nvar PhysicsEngine = /*#__PURE__*/function () {\n  /**\n   * @param {object} body\n   */\n  function PhysicsEngine(body) {\n    _classCallCheck(this, PhysicsEngine);\n    this.body = body;\n    this.physicsBody = {\n      physicsNodeIndices: [],\n      physicsEdgeIndices: [],\n      forces: {},\n      velocities: {}\n    };\n    this.physicsEnabled = true;\n    this.simulationInterval = 1000 / 60;\n    this.requiresTimeout = true;\n    this.previousStates = {};\n    this.referenceState = {};\n    this.freezeCache = {};\n    this.renderTimer = undefined;\n\n    // parameters for the adaptive timestep\n    this.adaptiveTimestep = false;\n    this.adaptiveTimestepEnabled = false;\n    this.adaptiveCounter = 0;\n    this.adaptiveInterval = 3;\n    this.stabilized = false;\n    this.startedStabilization = false;\n    this.stabilizationIterations = 0;\n    this.ready = false; // will be set to true if the stabilize\n\n    // default options\n    this.options = {};\n    this.defaultOptions = {\n      enabled: true,\n      barnesHut: {\n        theta: 0.5,\n        gravitationalConstant: -2000,\n        centralGravity: 0.3,\n        springLength: 95,\n        springConstant: 0.04,\n        damping: 0.09,\n        avoidOverlap: 0\n      },\n      forceAtlas2Based: {\n        theta: 0.5,\n        gravitationalConstant: -50,\n        centralGravity: 0.01,\n        springConstant: 0.08,\n        springLength: 100,\n        damping: 0.4,\n        avoidOverlap: 0\n      },\n      repulsion: {\n        centralGravity: 0.2,\n        springLength: 200,\n        springConstant: 0.05,\n        nodeDistance: 100,\n        damping: 0.09,\n        avoidOverlap: 0\n      },\n      hierarchicalRepulsion: {\n        centralGravity: 0.0,\n        springLength: 100,\n        springConstant: 0.01,\n        nodeDistance: 120,\n        damping: 0.09\n      },\n      maxVelocity: 50,\n      minVelocity: 0.75,\n      // px/s\n      solver: \"barnesHut\",\n      stabilization: {\n        enabled: true,\n        iterations: 1000,\n        // maximum number of iteration to stabilize\n        updateInterval: 50,\n        onlyDynamicEdges: false,\n        fit: true\n      },\n      timestep: 0.5,\n      adaptiveTimestep: true,\n      wind: {\n        x: 0,\n        y: 0\n      }\n    };\n    _Object$assign(this.options, this.defaultOptions);\n    this.timestep = 0.5;\n    this.layoutFailed = false;\n    this.bindEventListeners();\n  }\n\n  /**\n   * Binds event listeners\n   */\n  _createClass(PhysicsEngine, [{\n    key: \"bindEventListeners\",\n    value: function bindEventListeners() {\n      var _this = this;\n      this.body.emitter.on(\"initPhysics\", function () {\n        _this.initPhysics();\n      });\n      this.body.emitter.on(\"_layoutFailed\", function () {\n        _this.layoutFailed = true;\n      });\n      this.body.emitter.on(\"resetPhysics\", function () {\n        _this.stopSimulation();\n        _this.ready = false;\n      });\n      this.body.emitter.on(\"disablePhysics\", function () {\n        _this.physicsEnabled = false;\n        _this.stopSimulation();\n      });\n      this.body.emitter.on(\"restorePhysics\", function () {\n        _this.setOptions(_this.options);\n        if (_this.ready === true) {\n          _this.startSimulation();\n        }\n      });\n      this.body.emitter.on(\"startSimulation\", function () {\n        if (_this.ready === true) {\n          _this.startSimulation();\n        }\n      });\n      this.body.emitter.on(\"stopSimulation\", function () {\n        _this.stopSimulation();\n      });\n      this.body.emitter.on(\"destroy\", function () {\n        _this.stopSimulation(false);\n        _this.body.emitter.off();\n      });\n      this.body.emitter.on(\"_dataChanged\", function () {\n        // Nodes and/or edges have been added or removed, update shortcut lists.\n        _this.updatePhysicsData();\n      });\n\n      // debug: show forces\n      // this.body.emitter.on(\"afterDrawing\", (ctx) => {this._drawForces(ctx);});\n    }\n\n    /**\n     * set the physics options\n     *\n     * @param {object} options\n     */\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      if (options !== undefined) {\n        if (options === false) {\n          this.options.enabled = false;\n          this.physicsEnabled = false;\n          this.stopSimulation();\n        } else if (options === true) {\n          this.options.enabled = true;\n          this.physicsEnabled = true;\n          this.startSimulation();\n        } else {\n          this.physicsEnabled = true;\n          selectiveNotDeepExtend([\"stabilization\"], this.options, options);\n          mergeOptions(this.options, options, \"stabilization\");\n          if (options.enabled === undefined) {\n            this.options.enabled = true;\n          }\n          if (this.options.enabled === false) {\n            this.physicsEnabled = false;\n            this.stopSimulation();\n          }\n          var wind = this.options.wind;\n          if (wind) {\n            if (typeof wind.x !== \"number\" || _Number$isNaN(wind.x)) {\n              wind.x = 0;\n            }\n            if (typeof wind.y !== \"number\" || _Number$isNaN(wind.y)) {\n              wind.y = 0;\n            }\n          }\n\n          // set the timestep\n          this.timestep = this.options.timestep;\n        }\n      }\n      this.init();\n    }\n\n    /**\n     * configure the engine.\n     */\n  }, {\n    key: \"init\",\n    value: function init() {\n      var options;\n      if (this.options.solver === \"forceAtlas2Based\") {\n        options = this.options.forceAtlas2Based;\n        this.nodesSolver = new ForceAtlas2BasedRepulsionSolver(this.body, this.physicsBody, options);\n        this.edgesSolver = new SpringSolver(this.body, this.physicsBody, options);\n        this.gravitySolver = new ForceAtlas2BasedCentralGravitySolver(this.body, this.physicsBody, options);\n      } else if (this.options.solver === \"repulsion\") {\n        options = this.options.repulsion;\n        this.nodesSolver = new RepulsionSolver(this.body, this.physicsBody, options);\n        this.edgesSolver = new SpringSolver(this.body, this.physicsBody, options);\n        this.gravitySolver = new CentralGravitySolver(this.body, this.physicsBody, options);\n      } else if (this.options.solver === \"hierarchicalRepulsion\") {\n        options = this.options.hierarchicalRepulsion;\n        this.nodesSolver = new HierarchicalRepulsionSolver(this.body, this.physicsBody, options);\n        this.edgesSolver = new HierarchicalSpringSolver(this.body, this.physicsBody, options);\n        this.gravitySolver = new CentralGravitySolver(this.body, this.physicsBody, options);\n      } else {\n        // barnesHut\n        options = this.options.barnesHut;\n        this.nodesSolver = new BarnesHutSolver(this.body, this.physicsBody, options);\n        this.edgesSolver = new SpringSolver(this.body, this.physicsBody, options);\n        this.gravitySolver = new CentralGravitySolver(this.body, this.physicsBody, options);\n      }\n      this.modelOptions = options;\n    }\n\n    /**\n     * initialize the engine\n     */\n  }, {\n    key: \"initPhysics\",\n    value: function initPhysics() {\n      if (this.physicsEnabled === true && this.options.enabled === true) {\n        if (this.options.stabilization.enabled === true) {\n          this.stabilize();\n        } else {\n          this.stabilized = false;\n          this.ready = true;\n          this.body.emitter.emit(\"fit\", {}, this.layoutFailed); // if the layout failed, we use the approximation for the zoom\n          this.startSimulation();\n        }\n      } else {\n        this.ready = true;\n        this.body.emitter.emit(\"fit\");\n      }\n    }\n\n    /**\n     * Start the simulation\n     */\n  }, {\n    key: \"startSimulation\",\n    value: function startSimulation() {\n      if (this.physicsEnabled === true && this.options.enabled === true) {\n        this.stabilized = false;\n\n        // when visible, adaptivity is disabled.\n        this.adaptiveTimestep = false;\n\n        // this sets the width of all nodes initially which could be required for the avoidOverlap\n        this.body.emitter.emit(\"_resizeNodes\");\n        if (this.viewFunction === undefined) {\n          var _context;\n          this.viewFunction = _bindInstanceProperty$1(_context = this.simulationStep).call(_context, this);\n          this.body.emitter.on(\"initRedraw\", this.viewFunction);\n          this.body.emitter.emit(\"_startRendering\");\n        }\n      } else {\n        this.body.emitter.emit(\"_redraw\");\n      }\n    }\n\n    /**\n     * Stop the simulation, force stabilization.\n     *\n     * @param {boolean} [emit=true]\n     */\n  }, {\n    key: \"stopSimulation\",\n    value: function stopSimulation() {\n      var emit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.stabilized = true;\n      if (emit === true) {\n        this._emitStabilized();\n      }\n      if (this.viewFunction !== undefined) {\n        this.body.emitter.off(\"initRedraw\", this.viewFunction);\n        this.viewFunction = undefined;\n        if (emit === true) {\n          this.body.emitter.emit(\"_stopRendering\");\n        }\n      }\n    }\n\n    /**\n     * The viewFunction inserts this step into each render loop. It calls the physics tick and handles the cleanup at stabilized.\n     *\n     */\n  }, {\n    key: \"simulationStep\",\n    value: function simulationStep() {\n      // check if the physics have settled\n      var startTime = _Date$now();\n      this.physicsTick();\n      var physicsTime = _Date$now() - startTime;\n\n      // run double speed if it is a little graph\n      if ((physicsTime < 0.4 * this.simulationInterval || this.runDoubleSpeed === true) && this.stabilized === false) {\n        this.physicsTick();\n\n        // this makes sure there is no jitter. The decision is taken once to run it at double speed.\n        this.runDoubleSpeed = true;\n      }\n      if (this.stabilized === true) {\n        this.stopSimulation();\n      }\n    }\n\n    /**\n     * trigger the stabilized event.\n     *\n     * @param {number} [amountOfIterations=this.stabilizationIterations]\n     * @private\n     */\n  }, {\n    key: \"_emitStabilized\",\n    value: function _emitStabilized() {\n      var _this2 = this;\n      var amountOfIterations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.stabilizationIterations;\n      if (this.stabilizationIterations > 1 || this.startedStabilization === true) {\n        _setTimeout(function () {\n          _this2.body.emitter.emit(\"stabilized\", {\n            iterations: amountOfIterations\n          });\n          _this2.startedStabilization = false;\n          _this2.stabilizationIterations = 0;\n        }, 0);\n      }\n    }\n\n    /**\n     * Calculate the forces for one physics iteration and move the nodes.\n     *\n     * @private\n     */\n  }, {\n    key: \"physicsStep\",\n    value: function physicsStep() {\n      this.gravitySolver.solve();\n      this.nodesSolver.solve();\n      this.edgesSolver.solve();\n      this.moveNodes();\n    }\n\n    /**\n     * Make dynamic adjustments to the timestep, based on current state.\n     *\n     * Helper function for physicsTick().\n     *\n     * @private\n     */\n  }, {\n    key: \"adjustTimeStep\",\n    value: function adjustTimeStep() {\n      var factor = 1.2; // Factor for increasing the timestep on success.\n\n      // we compare the two steps. if it is acceptable we double the step.\n      if (this._evaluateStepQuality() === true) {\n        this.timestep = factor * this.timestep;\n      } else {\n        // if not, we decrease the step to a minimum of the options timestep.\n        // if the decreased timestep is smaller than the options step, we do not reset the counter\n        // we assume that the options timestep is stable enough.\n        if (this.timestep / factor < this.options.timestep) {\n          this.timestep = this.options.timestep;\n        } else {\n          // if the timestep was larger than 2 times the option one we check the adaptivity again to ensure\n          // that large instabilities do not form.\n          this.adaptiveCounter = -1; // check again next iteration\n          this.timestep = Math.max(this.options.timestep, this.timestep / factor);\n        }\n      }\n    }\n\n    /**\n     * A single simulation step (or 'tick') in the physics simulation\n     *\n     * @private\n     */\n  }, {\n    key: \"physicsTick\",\n    value: function physicsTick() {\n      this._startStabilizing(); // this ensures that there is no start event when the network is already stable.\n      if (this.stabilized === true) return;\n\n      // adaptivity means the timestep adapts to the situation, only applicable for stabilization\n      if (this.adaptiveTimestep === true && this.adaptiveTimestepEnabled === true) {\n        // timestep remains stable for \"interval\" iterations.\n        var doAdaptive = this.adaptiveCounter % this.adaptiveInterval === 0;\n        if (doAdaptive) {\n          // first the big step and revert.\n          this.timestep = 2 * this.timestep;\n          this.physicsStep();\n          this.revert(); // saves the reference state\n\n          // now the normal step. Since this is the last step, it is the more stable one and we will take this.\n          this.timestep = 0.5 * this.timestep;\n\n          // since it's half the step, we do it twice.\n          this.physicsStep();\n          this.physicsStep();\n          this.adjustTimeStep();\n        } else {\n          this.physicsStep(); // normal step, keeping timestep constant\n        }\n\n        this.adaptiveCounter += 1;\n      } else {\n        // case for the static timestep, we reset it to the one in options and take a normal step.\n        this.timestep = this.options.timestep;\n        this.physicsStep();\n      }\n      if (this.stabilized === true) this.revert();\n      this.stabilizationIterations++;\n    }\n\n    /**\n     * Nodes and edges can have the physics toggles on or off. A collection of indices is created here so we can skip the check all the time.\n     *\n     * @private\n     */\n  }, {\n    key: \"updatePhysicsData\",\n    value: function updatePhysicsData() {\n      this.physicsBody.forces = {};\n      this.physicsBody.physicsNodeIndices = [];\n      this.physicsBody.physicsEdgeIndices = [];\n      var nodes = this.body.nodes;\n      var edges = this.body.edges;\n\n      // get node indices for physics\n      for (var nodeId in nodes) {\n        if (Object.prototype.hasOwnProperty.call(nodes, nodeId)) {\n          if (nodes[nodeId].options.physics === true) {\n            this.physicsBody.physicsNodeIndices.push(nodes[nodeId].id);\n          }\n        }\n      }\n\n      // get edge indices for physics\n      for (var edgeId in edges) {\n        if (Object.prototype.hasOwnProperty.call(edges, edgeId)) {\n          if (edges[edgeId].options.physics === true) {\n            this.physicsBody.physicsEdgeIndices.push(edges[edgeId].id);\n          }\n        }\n      }\n\n      // get the velocity and the forces vector\n      for (var i = 0; i < this.physicsBody.physicsNodeIndices.length; i++) {\n        var _nodeId = this.physicsBody.physicsNodeIndices[i];\n        this.physicsBody.forces[_nodeId] = {\n          x: 0,\n          y: 0\n        };\n\n        // forces can be reset because they are recalculated. Velocities have to persist.\n        if (this.physicsBody.velocities[_nodeId] === undefined) {\n          this.physicsBody.velocities[_nodeId] = {\n            x: 0,\n            y: 0\n          };\n        }\n      }\n\n      // clean deleted nodes from the velocity vector\n      for (var _nodeId2 in this.physicsBody.velocities) {\n        if (nodes[_nodeId2] === undefined) {\n          delete this.physicsBody.velocities[_nodeId2];\n        }\n      }\n    }\n\n    /**\n     * Revert the simulation one step. This is done so after stabilization, every new start of the simulation will also say stabilized.\n     */\n  }, {\n    key: \"revert\",\n    value: function revert() {\n      var nodeIds = _Object$keys(this.previousStates);\n      var nodes = this.body.nodes;\n      var velocities = this.physicsBody.velocities;\n      this.referenceState = {};\n      for (var i = 0; i < nodeIds.length; i++) {\n        var nodeId = nodeIds[i];\n        if (nodes[nodeId] !== undefined) {\n          if (nodes[nodeId].options.physics === true) {\n            this.referenceState[nodeId] = {\n              positions: {\n                x: nodes[nodeId].x,\n                y: nodes[nodeId].y\n              }\n            };\n            velocities[nodeId].x = this.previousStates[nodeId].vx;\n            velocities[nodeId].y = this.previousStates[nodeId].vy;\n            nodes[nodeId].x = this.previousStates[nodeId].x;\n            nodes[nodeId].y = this.previousStates[nodeId].y;\n          }\n        } else {\n          delete this.previousStates[nodeId];\n        }\n      }\n    }\n\n    /**\n     * This compares the reference state to the current state\n     *\n     * @returns {boolean}\n     * @private\n     */\n  }, {\n    key: \"_evaluateStepQuality\",\n    value: function _evaluateStepQuality() {\n      var dx, dy, dpos;\n      var nodes = this.body.nodes;\n      var reference = this.referenceState;\n      var posThreshold = 0.3;\n      for (var nodeId in this.referenceState) {\n        if (Object.prototype.hasOwnProperty.call(this.referenceState, nodeId) && nodes[nodeId] !== undefined) {\n          dx = nodes[nodeId].x - reference[nodeId].positions.x;\n          dy = nodes[nodeId].y - reference[nodeId].positions.y;\n          dpos = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n          if (dpos > posThreshold) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    /**\n     * move the nodes one timestep and check if they are stabilized\n     */\n  }, {\n    key: \"moveNodes\",\n    value: function moveNodes() {\n      var nodeIndices = this.physicsBody.physicsNodeIndices;\n      var maxNodeVelocity = 0;\n      var averageNodeVelocity = 0;\n\n      // the velocity threshold (energy in the system) for the adaptivity toggle\n      var velocityAdaptiveThreshold = 5;\n      for (var i = 0; i < nodeIndices.length; i++) {\n        var nodeId = nodeIndices[i];\n        var nodeVelocity = this._performStep(nodeId);\n        // stabilized is true if stabilized is true and velocity is smaller than vmin --> all nodes must be stabilized\n        maxNodeVelocity = Math.max(maxNodeVelocity, nodeVelocity);\n        averageNodeVelocity += nodeVelocity;\n      }\n\n      // evaluating the stabilized and adaptiveTimestepEnabled conditions\n      this.adaptiveTimestepEnabled = averageNodeVelocity / nodeIndices.length < velocityAdaptiveThreshold;\n      this.stabilized = maxNodeVelocity < this.options.minVelocity;\n    }\n\n    /**\n     * Calculate new velocity for a coordinate direction\n     *\n     * @param {number} v  velocity for current coordinate\n     * @param {number} f  regular force for current coordinate\n     * @param {number} m  mass of current node\n     * @returns {number} new velocity for current coordinate\n     * @private\n     */\n  }, {\n    key: \"calculateComponentVelocity\",\n    value: function calculateComponentVelocity(v, f, m) {\n      var df = this.modelOptions.damping * v; // damping force\n      var a = (f - df) / m; // acceleration\n\n      v += a * this.timestep;\n\n      // Put a limit on the velocities if it is really high\n      var maxV = this.options.maxVelocity || 1e9;\n      if (Math.abs(v) > maxV) {\n        v = v > 0 ? maxV : -maxV;\n      }\n      return v;\n    }\n\n    /**\n     * Perform the actual step\n     *\n     * @param {Node.id} nodeId\n     * @returns {number} the new velocity of given node\n     * @private\n     */\n  }, {\n    key: \"_performStep\",\n    value: function _performStep(nodeId) {\n      var node = this.body.nodes[nodeId];\n      var force = this.physicsBody.forces[nodeId];\n      if (this.options.wind) {\n        force.x += this.options.wind.x;\n        force.y += this.options.wind.y;\n      }\n      var velocity = this.physicsBody.velocities[nodeId];\n\n      // store the state so we can revert\n      this.previousStates[nodeId] = {\n        x: node.x,\n        y: node.y,\n        vx: velocity.x,\n        vy: velocity.y\n      };\n      if (node.options.fixed.x === false) {\n        velocity.x = this.calculateComponentVelocity(velocity.x, force.x, node.options.mass);\n        node.x += velocity.x * this.timestep;\n      } else {\n        force.x = 0;\n        velocity.x = 0;\n      }\n      if (node.options.fixed.y === false) {\n        velocity.y = this.calculateComponentVelocity(velocity.y, force.y, node.options.mass);\n        node.y += velocity.y * this.timestep;\n      } else {\n        force.y = 0;\n        velocity.y = 0;\n      }\n      var totalVelocity = Math.sqrt(Math.pow(velocity.x, 2) + Math.pow(velocity.y, 2));\n      return totalVelocity;\n    }\n\n    /**\n     * When initializing and stabilizing, we can freeze nodes with a predefined position.\n     * This greatly speeds up stabilization because only the supportnodes for the smoothCurves have to settle.\n     *\n     * @private\n     */\n  }, {\n    key: \"_freezeNodes\",\n    value: function _freezeNodes() {\n      var nodes = this.body.nodes;\n      for (var id in nodes) {\n        if (Object.prototype.hasOwnProperty.call(nodes, id)) {\n          if (nodes[id].x && nodes[id].y) {\n            var fixed = nodes[id].options.fixed;\n            this.freezeCache[id] = {\n              x: fixed.x,\n              y: fixed.y\n            };\n            fixed.x = true;\n            fixed.y = true;\n          }\n        }\n      }\n    }\n\n    /**\n     * Unfreezes the nodes that have been frozen by _freezeDefinedNodes.\n     *\n     * @private\n     */\n  }, {\n    key: \"_restoreFrozenNodes\",\n    value: function _restoreFrozenNodes() {\n      var nodes = this.body.nodes;\n      for (var id in nodes) {\n        if (Object.prototype.hasOwnProperty.call(nodes, id)) {\n          if (this.freezeCache[id] !== undefined) {\n            nodes[id].options.fixed.x = this.freezeCache[id].x;\n            nodes[id].options.fixed.y = this.freezeCache[id].y;\n          }\n        }\n      }\n      this.freezeCache = {};\n    }\n\n    /**\n     * Find a stable position for all nodes\n     *\n     * @param {number} [iterations=this.options.stabilization.iterations]\n     */\n  }, {\n    key: \"stabilize\",\n    value: function stabilize() {\n      var _this3 = this;\n      var iterations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.stabilization.iterations;\n      if (typeof iterations !== \"number\") {\n        iterations = this.options.stabilization.iterations;\n        console.error(\"The stabilize method needs a numeric amount of iterations. Switching to default: \", iterations);\n      }\n      if (this.physicsBody.physicsNodeIndices.length === 0) {\n        this.ready = true;\n        return;\n      }\n\n      // enable adaptive timesteps\n      this.adaptiveTimestep = this.options.adaptiveTimestep;\n\n      // this sets the width of all nodes initially which could be required for the avoidOverlap\n      this.body.emitter.emit(\"_resizeNodes\");\n      this.stopSimulation(); // stop the render loop\n      this.stabilized = false;\n\n      // block redraw requests\n      this.body.emitter.emit(\"_blockRedraw\");\n      this.targetIterations = iterations;\n\n      // start the stabilization\n      if (this.options.stabilization.onlyDynamicEdges === true) {\n        this._freezeNodes();\n      }\n      this.stabilizationIterations = 0;\n      _setTimeout(function () {\n        return _this3._stabilizationBatch();\n      }, 0);\n    }\n\n    /**\n     * If not already stabilizing, start it and emit a start event.\n     *\n     * @returns {boolean} true if stabilization started with this call\n     * @private\n     */\n  }, {\n    key: \"_startStabilizing\",\n    value: function _startStabilizing() {\n      if (this.startedStabilization === true) return false;\n      this.body.emitter.emit(\"startStabilizing\");\n      this.startedStabilization = true;\n      return true;\n    }\n\n    /**\n     * One batch of stabilization\n     *\n     * @private\n     */\n  }, {\n    key: \"_stabilizationBatch\",\n    value: function _stabilizationBatch() {\n      var _this4 = this;\n      var running = function running() {\n        return _this4.stabilized === false && _this4.stabilizationIterations < _this4.targetIterations;\n      };\n      var sendProgress = function sendProgress() {\n        _this4.body.emitter.emit(\"stabilizationProgress\", {\n          iterations: _this4.stabilizationIterations,\n          total: _this4.targetIterations\n        });\n      };\n      if (this._startStabilizing()) {\n        sendProgress(); // Ensure that there is at least one start event.\n      }\n\n      var count = 0;\n      while (running() && count < this.options.stabilization.updateInterval) {\n        this.physicsTick();\n        count++;\n      }\n      sendProgress();\n      if (running()) {\n        var _context2;\n        _setTimeout(_bindInstanceProperty$1(_context2 = this._stabilizationBatch).call(_context2, this), 0);\n      } else {\n        this._finalizeStabilization();\n      }\n    }\n\n    /**\n     * Wrap up the stabilization, fit and emit the events.\n     *\n     * @private\n     */\n  }, {\n    key: \"_finalizeStabilization\",\n    value: function _finalizeStabilization() {\n      this.body.emitter.emit(\"_allowRedraw\");\n      if (this.options.stabilization.fit === true) {\n        this.body.emitter.emit(\"fit\");\n      }\n      if (this.options.stabilization.onlyDynamicEdges === true) {\n        this._restoreFrozenNodes();\n      }\n      this.body.emitter.emit(\"stabilizationIterationsDone\");\n      this.body.emitter.emit(\"_requestRedraw\");\n      if (this.stabilized === true) {\n        this._emitStabilized();\n      } else {\n        this.startSimulation();\n      }\n      this.ready = true;\n    }\n\n    //---------------------------  DEBUGGING BELOW  ---------------------------//\n\n    /**\n     * Debug function that display arrows for the forces currently active in the network.\n     *\n     * Use this when debugging only.\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @private\n     */\n  }, {\n    key: \"_drawForces\",\n    value: function _drawForces(ctx) {\n      for (var i = 0; i < this.physicsBody.physicsNodeIndices.length; i++) {\n        var index = this.physicsBody.physicsNodeIndices[i];\n        var node = this.body.nodes[index];\n        var force = this.physicsBody.forces[index];\n        var factor = 20;\n        var colorFactor = 0.03;\n        var forceSize = Math.sqrt(Math.pow(force.x, 2) + Math.pow(force.x, 2));\n        var size = Math.min(Math.max(5, forceSize), 15);\n        var arrowSize = 3 * size;\n        var color = HSVToHex((180 - Math.min(1, Math.max(0, colorFactor * forceSize)) * 180) / 360, 1, 1);\n        var point = {\n          x: node.x + factor * force.x,\n          y: node.y + factor * force.y\n        };\n        ctx.lineWidth = size;\n        ctx.strokeStyle = color;\n        ctx.beginPath();\n        ctx.moveTo(node.x, node.y);\n        ctx.lineTo(point.x, point.y);\n        ctx.stroke();\n        var angle = Math.atan2(force.y, force.x);\n        ctx.fillStyle = color;\n        EndPoints.draw(ctx, {\n          type: \"arrow\",\n          point: point,\n          angle: angle,\n          length: arrowSize\n        });\n        _fillInstanceProperty(ctx).call(ctx);\n      }\n    }\n  }]);\n  return PhysicsEngine;\n}();\n\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nfunction rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nfunction unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nconst randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nvar native = {\n  randomUUID\n};\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\n/**\n * Utility Class\n */\nvar NetworkUtil = /*#__PURE__*/function () {\n  /**\n   * @ignore\n   */\n  function NetworkUtil() {\n    _classCallCheck(this, NetworkUtil);\n  }\n\n  /**\n   * Find the center position of the network considering the bounding boxes\n   *\n   * @param {Array.<Node>} allNodes\n   * @param {Array.<Node>} [specificNodes=[]]\n   * @returns {{minX: number, maxX: number, minY: number, maxY: number}}\n   * @static\n   */\n  _createClass(NetworkUtil, null, [{\n    key: \"getRange\",\n    value: function getRange(allNodes) {\n      var specificNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var minY = 1e9,\n        maxY = -1e9,\n        minX = 1e9,\n        maxX = -1e9,\n        node;\n      if (specificNodes.length > 0) {\n        for (var i = 0; i < specificNodes.length; i++) {\n          node = allNodes[specificNodes[i]];\n          if (minX > node.shape.boundingBox.left) {\n            minX = node.shape.boundingBox.left;\n          }\n          if (maxX < node.shape.boundingBox.right) {\n            maxX = node.shape.boundingBox.right;\n          }\n          if (minY > node.shape.boundingBox.top) {\n            minY = node.shape.boundingBox.top;\n          } // top is negative, bottom is positive\n          if (maxY < node.shape.boundingBox.bottom) {\n            maxY = node.shape.boundingBox.bottom;\n          } // top is negative, bottom is positive\n        }\n      }\n\n      if (minX === 1e9 && maxX === -1e9 && minY === 1e9 && maxY === -1e9) {\n        minY = 0, maxY = 0, minX = 0, maxX = 0;\n      }\n      return {\n        minX: minX,\n        maxX: maxX,\n        minY: minY,\n        maxY: maxY\n      };\n    }\n\n    /**\n     * Find the center position of the network\n     *\n     * @param {Array.<Node>} allNodes\n     * @param {Array.<Node>} [specificNodes=[]]\n     * @returns {{minX: number, maxX: number, minY: number, maxY: number}}\n     * @static\n     */\n  }, {\n    key: \"getRangeCore\",\n    value: function getRangeCore(allNodes) {\n      var specificNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var minY = 1e9,\n        maxY = -1e9,\n        minX = 1e9,\n        maxX = -1e9,\n        node;\n      if (specificNodes.length > 0) {\n        for (var i = 0; i < specificNodes.length; i++) {\n          node = allNodes[specificNodes[i]];\n          if (minX > node.x) {\n            minX = node.x;\n          }\n          if (maxX < node.x) {\n            maxX = node.x;\n          }\n          if (minY > node.y) {\n            minY = node.y;\n          } // top is negative, bottom is positive\n          if (maxY < node.y) {\n            maxY = node.y;\n          } // top is negative, bottom is positive\n        }\n      }\n\n      if (minX === 1e9 && maxX === -1e9 && minY === 1e9 && maxY === -1e9) {\n        minY = 0, maxY = 0, minX = 0, maxX = 0;\n      }\n      return {\n        minX: minX,\n        maxX: maxX,\n        minY: minY,\n        maxY: maxY\n      };\n    }\n\n    /**\n     * @param {object} range = {minX: minX, maxX: maxX, minY: minY, maxY: maxY};\n     * @returns {{x: number, y: number}}\n     * @static\n     */\n  }, {\n    key: \"findCenter\",\n    value: function findCenter(range) {\n      return {\n        x: 0.5 * (range.maxX + range.minX),\n        y: 0.5 * (range.maxY + range.minY)\n      };\n    }\n\n    /**\n     * This returns a clone of the options or options of the edge or node to be used for construction of new edges or check functions for new nodes.\n     *\n     * @param {vis.Item} item\n     * @param {'node'|undefined} type\n     * @returns {{}}\n     * @static\n     */\n  }, {\n    key: \"cloneOptions\",\n    value: function cloneOptions(item, type) {\n      var clonedOptions = {};\n      if (type === undefined || type === \"node\") {\n        deepExtend(clonedOptions, item.options, true);\n        clonedOptions.x = item.x;\n        clonedOptions.y = item.y;\n        clonedOptions.amountOfConnections = item.edges.length;\n      } else {\n        deepExtend(clonedOptions, item.options, true);\n      }\n      return clonedOptions;\n    }\n  }]);\n  return NetworkUtil;\n}();\n\nfunction _createSuper$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct$1() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * A Cluster is a special Node that allows a group of Nodes positioned closely together\n * to be represented by a single Cluster Node.\n *\n * @augments Node\n */\nvar Cluster = /*#__PURE__*/function (_Node) {\n  _inherits(Cluster, _Node);\n  var _super = _createSuper$1(Cluster);\n  /**\n   * @param {object} options\n   * @param {object} body\n   * @param {Array.<HTMLImageElement>}imagelist\n   * @param {Array} grouplist\n   * @param {object} globalOptions\n   * @param {object} defaultOptions     Global default options for nodes\n   */\n  function Cluster(options, body, imagelist, grouplist, globalOptions, defaultOptions) {\n    var _this;\n    _classCallCheck(this, Cluster);\n    _this = _super.call(this, options, body, imagelist, grouplist, globalOptions, defaultOptions);\n    _this.isCluster = true;\n    _this.containedNodes = {};\n    _this.containedEdges = {};\n    return _this;\n  }\n\n  /**\n   * Transfer child cluster data to current and disconnect the child cluster.\n   *\n   * Please consult the header comment in 'Clustering.js' for the fields set here.\n   *\n   * @param {string|number} childClusterId  id of child cluster to open\n   */\n  _createClass(Cluster, [{\n    key: \"_openChildCluster\",\n    value: function _openChildCluster(childClusterId) {\n      var _this2 = this;\n      var childCluster = this.body.nodes[childClusterId];\n      if (this.containedNodes[childClusterId] === undefined) {\n        throw new Error(\"node with id: \" + childClusterId + \" not in current cluster\");\n      }\n      if (!childCluster.isCluster) {\n        throw new Error(\"node with id: \" + childClusterId + \" is not a cluster\");\n      }\n\n      // Disconnect child cluster from current cluster\n      delete this.containedNodes[childClusterId];\n      forEach$1(childCluster.edges, function (edge) {\n        delete _this2.containedEdges[edge.id];\n      });\n\n      // Transfer nodes and edges\n      forEach$1(childCluster.containedNodes, function (node, nodeId) {\n        _this2.containedNodes[nodeId] = node;\n      });\n      childCluster.containedNodes = {};\n      forEach$1(childCluster.containedEdges, function (edge, edgeId) {\n        _this2.containedEdges[edgeId] = edge;\n      });\n      childCluster.containedEdges = {};\n\n      // Transfer edges within cluster edges which are clustered\n      forEach$1(childCluster.edges, function (clusterEdge) {\n        forEach$1(_this2.edges, function (parentClusterEdge) {\n          var _context, _context2;\n          // Assumption: a clustered edge can only be present in a single clustering edge\n          // Not tested here\n          var index = _indexOfInstanceProperty(_context = parentClusterEdge.clusteringEdgeReplacingIds).call(_context, clusterEdge.id);\n          if (index === -1) return;\n          forEach$1(clusterEdge.clusteringEdgeReplacingIds, function (srcId) {\n            parentClusterEdge.clusteringEdgeReplacingIds.push(srcId);\n\n            // Maintain correct bookkeeping for transferred edge\n            _this2.body.edges[srcId].edgeReplacedById = parentClusterEdge.id;\n          });\n\n          // Remove cluster edge from parent cluster edge\n          _spliceInstanceProperty(_context2 = parentClusterEdge.clusteringEdgeReplacingIds).call(_context2, index, 1);\n        });\n      });\n      childCluster.edges = [];\n    }\n  }]);\n  return Cluster;\n}(Node);\n\n/**\n * The clustering engine\n */\nvar ClusterEngine = /*#__PURE__*/function () {\n  /**\n   * @param {object} body\n   */\n  function ClusterEngine(body) {\n    var _this = this;\n    _classCallCheck(this, ClusterEngine);\n    this.body = body;\n    this.clusteredNodes = {}; // key: node id, value: { clusterId: <id of cluster>, node: <node instance>}\n    this.clusteredEdges = {}; // key: edge id, value: restore information for given edge\n\n    this.options = {};\n    this.defaultOptions = {};\n    _Object$assign(this.options, this.defaultOptions);\n    this.body.emitter.on(\"_resetData\", function () {\n      _this.clusteredNodes = {};\n      _this.clusteredEdges = {};\n    });\n  }\n\n  /**\n   *\n   * @param {number} hubsize\n   * @param {object} options\n   */\n  _createClass(ClusterEngine, [{\n    key: \"clusterByHubsize\",\n    value: function clusterByHubsize(hubsize, options) {\n      if (hubsize === undefined) {\n        hubsize = this._getHubSize();\n      } else if (_typeof(hubsize) === \"object\") {\n        options = this._checkOptions(hubsize);\n        hubsize = this._getHubSize();\n      }\n      var nodesToCluster = [];\n      for (var i = 0; i < this.body.nodeIndices.length; i++) {\n        var node = this.body.nodes[this.body.nodeIndices[i]];\n        if (node.edges.length >= hubsize) {\n          nodesToCluster.push(node.id);\n        }\n      }\n      for (var _i = 0; _i < nodesToCluster.length; _i++) {\n        this.clusterByConnection(nodesToCluster[_i], options, true);\n      }\n      this.body.emitter.emit(\"_dataChanged\");\n    }\n\n    /**\n     * loop over all nodes, check if they adhere to the condition and cluster if needed.\n     *\n     * @param {object} options\n     * @param {boolean} [refreshData=true]\n     */\n  }, {\n    key: \"cluster\",\n    value: function cluster() {\n      var _this2 = this;\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var refreshData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (options.joinCondition === undefined) {\n        throw new Error(\"Cannot call clusterByNodeData without a joinCondition function in the options.\");\n      }\n\n      // check if the options object is fine, append if needed\n      options = this._checkOptions(options);\n      var childNodesObj = {};\n      var childEdgesObj = {};\n\n      // collect the nodes that will be in the cluster\n      forEach$1(this.body.nodes, function (node, nodeId) {\n        if (node.options && options.joinCondition(node.options) === true) {\n          childNodesObj[nodeId] = node;\n\n          // collect the edges that will be in the cluster\n          forEach$1(node.edges, function (edge) {\n            if (_this2.clusteredEdges[edge.id] === undefined) {\n              childEdgesObj[edge.id] = edge;\n            }\n          });\n        }\n      });\n      this._cluster(childNodesObj, childEdgesObj, options, refreshData);\n    }\n\n    /**\n     * Cluster all nodes in the network that have only X edges\n     *\n     * @param {number} edgeCount\n     * @param {object} options\n     * @param {boolean} [refreshData=true]\n     */\n  }, {\n    key: \"clusterByEdgeCount\",\n    value: function clusterByEdgeCount(edgeCount, options) {\n      var _this3 = this;\n      var refreshData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      options = this._checkOptions(options);\n      var clusters = [];\n      var usedNodes = {};\n      var edge, edges, relevantEdgeCount;\n      // collect the nodes that will be in the cluster\n      var _loop = function _loop() {\n        var childNodesObj = {};\n        var childEdgesObj = {};\n        var nodeId = _this3.body.nodeIndices[i];\n        var node = _this3.body.nodes[nodeId];\n\n        // if this node is already used in another cluster this session, we do not have to re-evaluate it.\n        if (usedNodes[nodeId] === undefined) {\n          relevantEdgeCount = 0;\n          edges = [];\n          for (var j = 0; j < node.edges.length; j++) {\n            edge = node.edges[j];\n            if (_this3.clusteredEdges[edge.id] === undefined) {\n              if (edge.toId !== edge.fromId) {\n                relevantEdgeCount++;\n              }\n              edges.push(edge);\n            }\n          }\n\n          // this node qualifies, we collect its neighbours to start the clustering process.\n          if (relevantEdgeCount === edgeCount) {\n            var checkJoinCondition = function checkJoinCondition(node) {\n              if (options.joinCondition === undefined || options.joinCondition === null) {\n                return true;\n              }\n              var clonedOptions = NetworkUtil.cloneOptions(node);\n              return options.joinCondition(clonedOptions);\n            };\n            var gatheringSuccessful = true;\n            for (var _j = 0; _j < edges.length; _j++) {\n              edge = edges[_j];\n              var childNodeId = _this3._getConnectedId(edge, nodeId);\n              // add the nodes to the list by the join condition.\n              if (checkJoinCondition(node)) {\n                childEdgesObj[edge.id] = edge;\n                childNodesObj[nodeId] = node;\n                childNodesObj[childNodeId] = _this3.body.nodes[childNodeId];\n                usedNodes[nodeId] = true;\n              } else {\n                // this node does not qualify after all.\n                gatheringSuccessful = false;\n                break;\n              }\n            }\n\n            // add to the cluster queue\n            if (_Object$keys(childNodesObj).length > 0 && _Object$keys(childEdgesObj).length > 0 && gatheringSuccessful === true) {\n              /**\n               * Search for cluster data that contains any of the node id's\n               *\n               * @returns {boolean} true if no joinCondition, otherwise return value of joinCondition\n               */\n              var findClusterData = function findClusterData() {\n                for (var n = 0; n < clusters.length; ++n) {\n                  // Search for a cluster containing any of the node id's\n                  for (var m in childNodesObj) {\n                    if (clusters[n].nodes[m] !== undefined) {\n                      return clusters[n];\n                    }\n                  }\n                }\n                return undefined;\n              };\n\n              // If any of the found nodes is part of a cluster found in this method,\n              // add the current values to that cluster\n              var foundCluster = findClusterData();\n              if (foundCluster !== undefined) {\n                // Add nodes to found cluster if not present\n                for (var m in childNodesObj) {\n                  if (foundCluster.nodes[m] === undefined) {\n                    foundCluster.nodes[m] = childNodesObj[m];\n                  }\n                }\n\n                // Add edges to found cluster, if not present\n                for (var _m in childEdgesObj) {\n                  if (foundCluster.edges[_m] === undefined) {\n                    foundCluster.edges[_m] = childEdgesObj[_m];\n                  }\n                }\n              } else {\n                // Create a new cluster group\n                clusters.push({\n                  nodes: childNodesObj,\n                  edges: childEdgesObj\n                });\n              }\n            }\n          }\n        }\n      };\n      for (var i = 0; i < this.body.nodeIndices.length; i++) {\n        _loop();\n      }\n      for (var _i2 = 0; _i2 < clusters.length; _i2++) {\n        this._cluster(clusters[_i2].nodes, clusters[_i2].edges, options, false);\n      }\n      if (refreshData === true) {\n        this.body.emitter.emit(\"_dataChanged\");\n      }\n    }\n\n    /**\n     * Cluster all nodes in the network that have only 1 edge\n     *\n     * @param {object} options\n     * @param {boolean} [refreshData=true]\n     */\n  }, {\n    key: \"clusterOutliers\",\n    value: function clusterOutliers(options) {\n      var refreshData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      this.clusterByEdgeCount(1, options, refreshData);\n    }\n\n    /**\n     * Cluster all nodes in the network that have only 2 edge\n     *\n     * @param {object} options\n     * @param {boolean} [refreshData=true]\n     */\n  }, {\n    key: \"clusterBridges\",\n    value: function clusterBridges(options) {\n      var refreshData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      this.clusterByEdgeCount(2, options, refreshData);\n    }\n\n    /**\n     * suck all connected nodes of a node into the node.\n     *\n     * @param {Node.id} nodeId\n     * @param {object} options\n     * @param {boolean} [refreshData=true]\n     */\n  }, {\n    key: \"clusterByConnection\",\n    value: function clusterByConnection(nodeId, options) {\n      var _context;\n      var refreshData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      // kill conditions\n      if (nodeId === undefined) {\n        throw new Error(\"No nodeId supplied to clusterByConnection!\");\n      }\n      if (this.body.nodes[nodeId] === undefined) {\n        throw new Error(\"The nodeId given to clusterByConnection does not exist!\");\n      }\n      var node = this.body.nodes[nodeId];\n      options = this._checkOptions(options, node);\n      if (options.clusterNodeProperties.x === undefined) {\n        options.clusterNodeProperties.x = node.x;\n      }\n      if (options.clusterNodeProperties.y === undefined) {\n        options.clusterNodeProperties.y = node.y;\n      }\n      if (options.clusterNodeProperties.fixed === undefined) {\n        options.clusterNodeProperties.fixed = {};\n        options.clusterNodeProperties.fixed.x = node.options.fixed.x;\n        options.clusterNodeProperties.fixed.y = node.options.fixed.y;\n      }\n      var childNodesObj = {};\n      var childEdgesObj = {};\n      var parentNodeId = node.id;\n      var parentClonedOptions = NetworkUtil.cloneOptions(node);\n      childNodesObj[parentNodeId] = node;\n\n      // collect the nodes that will be in the cluster\n      for (var i = 0; i < node.edges.length; i++) {\n        var edge = node.edges[i];\n        if (this.clusteredEdges[edge.id] === undefined) {\n          var childNodeId = this._getConnectedId(edge, parentNodeId);\n\n          // if the child node is not in a cluster\n          if (this.clusteredNodes[childNodeId] === undefined) {\n            if (childNodeId !== parentNodeId) {\n              if (options.joinCondition === undefined) {\n                childEdgesObj[edge.id] = edge;\n                childNodesObj[childNodeId] = this.body.nodes[childNodeId];\n              } else {\n                // clone the options and insert some additional parameters that could be interesting.\n                var childClonedOptions = NetworkUtil.cloneOptions(this.body.nodes[childNodeId]);\n                if (options.joinCondition(parentClonedOptions, childClonedOptions) === true) {\n                  childEdgesObj[edge.id] = edge;\n                  childNodesObj[childNodeId] = this.body.nodes[childNodeId];\n                }\n              }\n            } else {\n              // swallow the edge if it is self-referencing.\n              childEdgesObj[edge.id] = edge;\n            }\n          }\n        }\n      }\n      var childNodeIDs = _mapInstanceProperty(_context = _Object$keys(childNodesObj)).call(_context, function (childNode) {\n        return childNodesObj[childNode].id;\n      });\n      for (var childNodeKey in childNodesObj) {\n        if (!Object.prototype.hasOwnProperty.call(childNodesObj, childNodeKey)) continue;\n        var childNode = childNodesObj[childNodeKey];\n        for (var y = 0; y < childNode.edges.length; y++) {\n          var childEdge = childNode.edges[y];\n          if (_indexOfInstanceProperty(childNodeIDs).call(childNodeIDs, this._getConnectedId(childEdge, childNode.id)) > -1) {\n            childEdgesObj[childEdge.id] = childEdge;\n          }\n        }\n      }\n      this._cluster(childNodesObj, childEdgesObj, options, refreshData);\n    }\n\n    /**\n     * This function creates the edges that will be attached to the cluster\n     * It looks for edges that are connected to the nodes from the \"outside' of the cluster.\n     *\n     * @param {{Node.id: vis.Node}} childNodesObj\n     * @param {{vis.Edge.id: vis.Edge}} childEdgesObj\n     * @param {object} clusterNodeProperties\n     * @param {object} clusterEdgeProperties\n     * @private\n     */\n  }, {\n    key: \"_createClusterEdges\",\n    value: function _createClusterEdges(childNodesObj, childEdgesObj, clusterNodeProperties, clusterEdgeProperties) {\n      var edge, childNodeId, childNode, toId, fromId, otherNodeId;\n\n      // loop over all child nodes and their edges to find edges going out of the cluster\n      // these edges will be replaced by clusterEdges.\n      var childKeys = _Object$keys(childNodesObj);\n      var createEdges = [];\n      for (var i = 0; i < childKeys.length; i++) {\n        childNodeId = childKeys[i];\n        childNode = childNodesObj[childNodeId];\n\n        // construct new edges from the cluster to others\n        for (var j = 0; j < childNode.edges.length; j++) {\n          edge = childNode.edges[j];\n          // we only handle edges that are visible to the system, not the disabled ones from the clustering process.\n          if (this.clusteredEdges[edge.id] === undefined) {\n            // self-referencing edges will be added to the \"hidden\" list\n            if (edge.toId == edge.fromId) {\n              childEdgesObj[edge.id] = edge;\n            } else {\n              // set up the from and to.\n              if (edge.toId == childNodeId) {\n                // this is a double equals because ints and strings can be interchanged here.\n                toId = clusterNodeProperties.id;\n                fromId = edge.fromId;\n                otherNodeId = fromId;\n              } else {\n                toId = edge.toId;\n                fromId = clusterNodeProperties.id;\n                otherNodeId = toId;\n              }\n            }\n\n            // Only edges from the cluster outwards are being replaced.\n            if (childNodesObj[otherNodeId] === undefined) {\n              createEdges.push({\n                edge: edge,\n                fromId: fromId,\n                toId: toId\n              });\n            }\n          }\n        }\n      }\n\n      //\n      // Here we actually create the replacement edges.\n      //\n      // We could not do this in the loop above as the creation process\n      // would add an edge to the edges array we are iterating over.\n      //\n      // NOTE: a clustered edge can have multiple base edges!\n      //\n      var newEdges = [];\n\n      /**\n       * Find a cluster edge which matches the given created edge.\n       *\n       * @param {vis.Edge} createdEdge\n       * @returns {vis.Edge}\n       */\n      var getNewEdge = function getNewEdge(createdEdge) {\n        for (var _j2 = 0; _j2 < newEdges.length; _j2++) {\n          var newEdge = newEdges[_j2];\n\n          // We replace both to and from edges with a single cluster edge\n          var matchToDirection = createdEdge.fromId === newEdge.fromId && createdEdge.toId === newEdge.toId;\n          var matchFromDirection = createdEdge.fromId === newEdge.toId && createdEdge.toId === newEdge.fromId;\n          if (matchToDirection || matchFromDirection) {\n            return newEdge;\n          }\n        }\n        return null;\n      };\n      for (var _j3 = 0; _j3 < createEdges.length; _j3++) {\n        var createdEdge = createEdges[_j3];\n        var _edge = createdEdge.edge;\n        var newEdge = getNewEdge(createdEdge);\n        if (newEdge === null) {\n          // Create a clustered edge for this connection\n          newEdge = this._createClusteredEdge(createdEdge.fromId, createdEdge.toId, _edge, clusterEdgeProperties);\n          newEdges.push(newEdge);\n        } else {\n          newEdge.clusteringEdgeReplacingIds.push(_edge.id);\n        }\n\n        // also reference the new edge in the old edge\n        this.body.edges[_edge.id].edgeReplacedById = newEdge.id;\n\n        // hide the replaced edge\n        this._backupEdgeOptions(_edge);\n        _edge.setOptions({\n          physics: false\n        });\n      }\n    }\n\n    /**\n     * This function checks the options that can be supplied to the different cluster functions\n     * for certain fields and inserts defaults if needed\n     *\n     * @param {object} options\n     * @returns {*}\n     * @private\n     */\n  }, {\n    key: \"_checkOptions\",\n    value: function _checkOptions() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (options.clusterEdgeProperties === undefined) {\n        options.clusterEdgeProperties = {};\n      }\n      if (options.clusterNodeProperties === undefined) {\n        options.clusterNodeProperties = {};\n      }\n      return options;\n    }\n\n    /**\n     *\n     * @param {object}    childNodesObj         | object with node objects, id as keys, same as childNodes except it also contains a source node\n     * @param {object}    childEdgesObj         | object with edge objects, id as keys\n     * @param {Array}     options               | object with {clusterNodeProperties, clusterEdgeProperties, processProperties}\n     * @param {boolean}   refreshData | when true, do not wrap up\n     * @private\n     */\n  }, {\n    key: \"_cluster\",\n    value: function _cluster(childNodesObj, childEdgesObj, options) {\n      var refreshData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      // Remove nodes which are already clustered\n      var tmpNodesToRemove = [];\n      for (var nodeId in childNodesObj) {\n        if (Object.prototype.hasOwnProperty.call(childNodesObj, nodeId)) {\n          if (this.clusteredNodes[nodeId] !== undefined) {\n            tmpNodesToRemove.push(nodeId);\n          }\n        }\n      }\n      for (var n = 0; n < tmpNodesToRemove.length; ++n) {\n        delete childNodesObj[tmpNodesToRemove[n]];\n      }\n\n      // kill condition: no nodes don't bother\n      if (_Object$keys(childNodesObj).length == 0) {\n        return;\n      }\n\n      // allow clusters of 1 if options allow\n      if (_Object$keys(childNodesObj).length == 1 && options.clusterNodeProperties.allowSingleNodeCluster != true) {\n        return;\n      }\n      var clusterNodeProperties = deepExtend({}, options.clusterNodeProperties);\n\n      // construct the clusterNodeProperties\n      if (options.processProperties !== undefined) {\n        // get the childNode options\n        var childNodesOptions = [];\n        for (var _nodeId in childNodesObj) {\n          if (Object.prototype.hasOwnProperty.call(childNodesObj, _nodeId)) {\n            var clonedOptions = NetworkUtil.cloneOptions(childNodesObj[_nodeId]);\n            childNodesOptions.push(clonedOptions);\n          }\n        }\n\n        // get cluster properties based on childNodes\n        var childEdgesOptions = [];\n        for (var edgeId in childEdgesObj) {\n          if (Object.prototype.hasOwnProperty.call(childEdgesObj, edgeId)) {\n            // these cluster edges will be removed on creation of the cluster.\n            if (edgeId.substr(0, 12) !== \"clusterEdge:\") {\n              var _clonedOptions = NetworkUtil.cloneOptions(childEdgesObj[edgeId], \"edge\");\n              childEdgesOptions.push(_clonedOptions);\n            }\n          }\n        }\n        clusterNodeProperties = options.processProperties(clusterNodeProperties, childNodesOptions, childEdgesOptions);\n        if (!clusterNodeProperties) {\n          throw new Error(\"The processProperties function does not return properties!\");\n        }\n      }\n\n      // check if we have an unique id;\n      if (clusterNodeProperties.id === undefined) {\n        clusterNodeProperties.id = \"cluster:\" + v4();\n      }\n      var clusterId = clusterNodeProperties.id;\n      if (clusterNodeProperties.label === undefined) {\n        clusterNodeProperties.label = \"cluster\";\n      }\n\n      // give the clusterNode a position if it does not have one.\n      var pos = undefined;\n      if (clusterNodeProperties.x === undefined) {\n        pos = this._getClusterPosition(childNodesObj);\n        clusterNodeProperties.x = pos.x;\n      }\n      if (clusterNodeProperties.y === undefined) {\n        if (pos === undefined) {\n          pos = this._getClusterPosition(childNodesObj);\n        }\n        clusterNodeProperties.y = pos.y;\n      }\n\n      // force the ID to remain the same\n      clusterNodeProperties.id = clusterId;\n\n      // create the cluster Node\n      // Note that allowSingleNodeCluster, if present, is stored in the options as well\n      var clusterNode = this.body.functions.createNode(clusterNodeProperties, Cluster);\n      clusterNode.containedNodes = childNodesObj;\n      clusterNode.containedEdges = childEdgesObj;\n      // cache a copy from the cluster edge properties if we have to reconnect others later on\n      clusterNode.clusterEdgeProperties = options.clusterEdgeProperties;\n\n      // finally put the cluster node into global\n      this.body.nodes[clusterNodeProperties.id] = clusterNode;\n      this._clusterEdges(childNodesObj, childEdgesObj, clusterNodeProperties, options.clusterEdgeProperties);\n\n      // set ID to undefined so no duplicates arise\n      clusterNodeProperties.id = undefined;\n\n      // wrap up\n      if (refreshData === true) {\n        this.body.emitter.emit(\"_dataChanged\");\n      }\n    }\n\n    /**\n     *\n     * @param {Edge} edge\n     * @private\n     */\n  }, {\n    key: \"_backupEdgeOptions\",\n    value: function _backupEdgeOptions(edge) {\n      if (this.clusteredEdges[edge.id] === undefined) {\n        this.clusteredEdges[edge.id] = {\n          physics: edge.options.physics\n        };\n      }\n    }\n\n    /**\n     *\n     * @param {Edge} edge\n     * @private\n     */\n  }, {\n    key: \"_restoreEdge\",\n    value: function _restoreEdge(edge) {\n      var originalOptions = this.clusteredEdges[edge.id];\n      if (originalOptions !== undefined) {\n        edge.setOptions({\n          physics: originalOptions.physics\n        });\n        delete this.clusteredEdges[edge.id];\n      }\n    }\n\n    /**\n     * Check if a node is a cluster.\n     *\n     * @param {Node.id} nodeId\n     * @returns {*}\n     */\n  }, {\n    key: \"isCluster\",\n    value: function isCluster(nodeId) {\n      if (this.body.nodes[nodeId] !== undefined) {\n        return this.body.nodes[nodeId].isCluster === true;\n      } else {\n        console.error(\"Node does not exist.\");\n        return false;\n      }\n    }\n\n    /**\n     * get the position of the cluster node based on what's inside\n     *\n     * @param {object} childNodesObj    | object with node objects, id as keys\n     * @returns {{x: number, y: number}}\n     * @private\n     */\n  }, {\n    key: \"_getClusterPosition\",\n    value: function _getClusterPosition(childNodesObj) {\n      var childKeys = _Object$keys(childNodesObj);\n      var minX = childNodesObj[childKeys[0]].x;\n      var maxX = childNodesObj[childKeys[0]].x;\n      var minY = childNodesObj[childKeys[0]].y;\n      var maxY = childNodesObj[childKeys[0]].y;\n      var node;\n      for (var i = 1; i < childKeys.length; i++) {\n        node = childNodesObj[childKeys[i]];\n        minX = node.x < minX ? node.x : minX;\n        maxX = node.x > maxX ? node.x : maxX;\n        minY = node.y < minY ? node.y : minY;\n        maxY = node.y > maxY ? node.y : maxY;\n      }\n      return {\n        x: 0.5 * (minX + maxX),\n        y: 0.5 * (minY + maxY)\n      };\n    }\n\n    /**\n     * Open a cluster by calling this function.\n     *\n     * @param {vis.Edge.id}  clusterNodeId | the ID of the cluster node\n     * @param {object} options\n     * @param {boolean} refreshData | wrap up afterwards if not true\n     */\n  }, {\n    key: \"openCluster\",\n    value: function openCluster(clusterNodeId, options) {\n      var refreshData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      // kill conditions\n      if (clusterNodeId === undefined) {\n        throw new Error(\"No clusterNodeId supplied to openCluster.\");\n      }\n      var clusterNode = this.body.nodes[clusterNodeId];\n      if (clusterNode === undefined) {\n        throw new Error(\"The clusterNodeId supplied to openCluster does not exist.\");\n      }\n      if (clusterNode.isCluster !== true || clusterNode.containedNodes === undefined || clusterNode.containedEdges === undefined) {\n        throw new Error(\"The node:\" + clusterNodeId + \" is not a valid cluster.\");\n      }\n\n      // Check if current cluster is clustered itself\n      var stack = this.findNode(clusterNodeId);\n      var parentIndex = _indexOfInstanceProperty(stack).call(stack, clusterNodeId) - 1;\n      if (parentIndex >= 0) {\n        // Current cluster is clustered; transfer contained nodes and edges to parent\n        var parentClusterNodeId = stack[parentIndex];\n        var parentClusterNode = this.body.nodes[parentClusterNodeId];\n\n        // clustering.clusteredNodes and clustering.clusteredEdges remain unchanged\n        parentClusterNode._openChildCluster(clusterNodeId);\n\n        // All components of child cluster node have been transferred. It can die now.\n        delete this.body.nodes[clusterNodeId];\n        if (refreshData === true) {\n          this.body.emitter.emit(\"_dataChanged\");\n        }\n        return;\n      }\n\n      // main body\n      var containedNodes = clusterNode.containedNodes;\n      var containedEdges = clusterNode.containedEdges;\n\n      // allow the user to position the nodes after release.\n      if (options !== undefined && options.releaseFunction !== undefined && typeof options.releaseFunction === \"function\") {\n        var positions = {};\n        var clusterPosition = {\n          x: clusterNode.x,\n          y: clusterNode.y\n        };\n        for (var nodeId in containedNodes) {\n          if (Object.prototype.hasOwnProperty.call(containedNodes, nodeId)) {\n            var containedNode = this.body.nodes[nodeId];\n            positions[nodeId] = {\n              x: containedNode.x,\n              y: containedNode.y\n            };\n          }\n        }\n        var newPositions = options.releaseFunction(clusterPosition, positions);\n        for (var _nodeId2 in containedNodes) {\n          if (Object.prototype.hasOwnProperty.call(containedNodes, _nodeId2)) {\n            var _containedNode = this.body.nodes[_nodeId2];\n            if (newPositions[_nodeId2] !== undefined) {\n              _containedNode.x = newPositions[_nodeId2].x === undefined ? clusterNode.x : newPositions[_nodeId2].x;\n              _containedNode.y = newPositions[_nodeId2].y === undefined ? clusterNode.y : newPositions[_nodeId2].y;\n            }\n          }\n        }\n      } else {\n        // copy the position from the cluster\n        forEach$1(containedNodes, function (containedNode) {\n          // inherit position\n          if (containedNode.options.fixed.x === false) {\n            containedNode.x = clusterNode.x;\n          }\n          if (containedNode.options.fixed.y === false) {\n            containedNode.y = clusterNode.y;\n          }\n        });\n      }\n\n      // release nodes\n      for (var _nodeId3 in containedNodes) {\n        if (Object.prototype.hasOwnProperty.call(containedNodes, _nodeId3)) {\n          var _containedNode2 = this.body.nodes[_nodeId3];\n\n          // inherit speed\n          _containedNode2.vx = clusterNode.vx;\n          _containedNode2.vy = clusterNode.vy;\n          _containedNode2.setOptions({\n            physics: true\n          });\n          delete this.clusteredNodes[_nodeId3];\n        }\n      }\n\n      // copy the clusterNode edges because we cannot iterate over an object that we add or remove from.\n      var edgesToBeDeleted = [];\n      for (var i = 0; i < clusterNode.edges.length; i++) {\n        edgesToBeDeleted.push(clusterNode.edges[i]);\n      }\n\n      // actually handling the deleting.\n      for (var _i3 = 0; _i3 < edgesToBeDeleted.length; _i3++) {\n        var edge = edgesToBeDeleted[_i3];\n        var otherNodeId = this._getConnectedId(edge, clusterNodeId);\n        var otherNode = this.clusteredNodes[otherNodeId];\n        for (var j = 0; j < edge.clusteringEdgeReplacingIds.length; j++) {\n          var transferId = edge.clusteringEdgeReplacingIds[j];\n          var transferEdge = this.body.edges[transferId];\n          if (transferEdge === undefined) continue;\n\n          // if the other node is in another cluster, we transfer ownership of this edge to the other cluster\n          if (otherNode !== undefined) {\n            // transfer ownership:\n            var otherCluster = this.body.nodes[otherNode.clusterId];\n            otherCluster.containedEdges[transferEdge.id] = transferEdge;\n\n            // delete local reference\n            delete containedEdges[transferEdge.id];\n\n            // get to and from\n            var fromId = transferEdge.fromId;\n            var toId = transferEdge.toId;\n            if (transferEdge.toId == otherNodeId) {\n              toId = otherNode.clusterId;\n            } else {\n              fromId = otherNode.clusterId;\n            }\n\n            // create new cluster edge from the otherCluster\n            this._createClusteredEdge(fromId, toId, transferEdge, otherCluster.clusterEdgeProperties, {\n              hidden: false,\n              physics: true\n            });\n          } else {\n            this._restoreEdge(transferEdge);\n          }\n        }\n        edge.remove();\n      }\n\n      // handle the releasing of the edges\n      for (var edgeId in containedEdges) {\n        if (Object.prototype.hasOwnProperty.call(containedEdges, edgeId)) {\n          this._restoreEdge(containedEdges[edgeId]);\n        }\n      }\n\n      // remove clusterNode\n      delete this.body.nodes[clusterNodeId];\n      if (refreshData === true) {\n        this.body.emitter.emit(\"_dataChanged\");\n      }\n    }\n\n    /**\n     *\n     * @param {Cluster.id} clusterId\n     * @returns {Array.<Node.id>}\n     */\n  }, {\n    key: \"getNodesInCluster\",\n    value: function getNodesInCluster(clusterId) {\n      var nodesArray = [];\n      if (this.isCluster(clusterId) === true) {\n        var containedNodes = this.body.nodes[clusterId].containedNodes;\n        for (var nodeId in containedNodes) {\n          if (Object.prototype.hasOwnProperty.call(containedNodes, nodeId)) {\n            nodesArray.push(this.body.nodes[nodeId].id);\n          }\n        }\n      }\n      return nodesArray;\n    }\n\n    /**\n     * Get the stack clusterId's that a certain node resides in. cluster A -> cluster B -> cluster C -> node\n     *\n     * If a node can't be found in the chain, return an empty array.\n     *\n     * @param {string|number} nodeId\n     * @returns {Array}\n     */\n  }, {\n    key: \"findNode\",\n    value: function findNode(nodeId) {\n      var stack = [];\n      var max = 100;\n      var counter = 0;\n      var node;\n      while (this.clusteredNodes[nodeId] !== undefined && counter < max) {\n        node = this.body.nodes[nodeId];\n        if (node === undefined) return [];\n        stack.push(node.id);\n        nodeId = this.clusteredNodes[nodeId].clusterId;\n        counter++;\n      }\n      node = this.body.nodes[nodeId];\n      if (node === undefined) return [];\n      stack.push(node.id);\n      _reverseInstanceProperty(stack).call(stack);\n      return stack;\n    }\n\n    /**\n     * Using a clustered nodeId, update with the new options\n     *\n     * @param {Node.id} clusteredNodeId\n     * @param {object} newOptions\n     */\n  }, {\n    key: \"updateClusteredNode\",\n    value: function updateClusteredNode(clusteredNodeId, newOptions) {\n      if (clusteredNodeId === undefined) {\n        throw new Error(\"No clusteredNodeId supplied to updateClusteredNode.\");\n      }\n      if (newOptions === undefined) {\n        throw new Error(\"No newOptions supplied to updateClusteredNode.\");\n      }\n      if (this.body.nodes[clusteredNodeId] === undefined) {\n        throw new Error(\"The clusteredNodeId supplied to updateClusteredNode does not exist.\");\n      }\n      this.body.nodes[clusteredNodeId].setOptions(newOptions);\n      this.body.emitter.emit(\"_dataChanged\");\n    }\n\n    /**\n     * Using a base edgeId, update all related clustered edges with the new options\n     *\n     * @param {vis.Edge.id} startEdgeId\n     * @param {object} newOptions\n     */\n  }, {\n    key: \"updateEdge\",\n    value: function updateEdge(startEdgeId, newOptions) {\n      if (startEdgeId === undefined) {\n        throw new Error(\"No startEdgeId supplied to updateEdge.\");\n      }\n      if (newOptions === undefined) {\n        throw new Error(\"No newOptions supplied to updateEdge.\");\n      }\n      if (this.body.edges[startEdgeId] === undefined) {\n        throw new Error(\"The startEdgeId supplied to updateEdge does not exist.\");\n      }\n      var allEdgeIds = this.getClusteredEdges(startEdgeId);\n      for (var i = 0; i < allEdgeIds.length; i++) {\n        var edge = this.body.edges[allEdgeIds[i]];\n        edge.setOptions(newOptions);\n      }\n      this.body.emitter.emit(\"_dataChanged\");\n    }\n\n    /**\n     * Get a stack of clusterEdgeId's (+base edgeid) that a base edge is the same as. cluster edge C -> cluster edge B -> cluster edge A -> base edge(edgeId)\n     *\n     * @param {vis.Edge.id} edgeId\n     * @returns {Array.<vis.Edge.id>}\n     */\n  }, {\n    key: \"getClusteredEdges\",\n    value: function getClusteredEdges(edgeId) {\n      var stack = [];\n      var max = 100;\n      var counter = 0;\n      while (edgeId !== undefined && this.body.edges[edgeId] !== undefined && counter < max) {\n        stack.push(this.body.edges[edgeId].id);\n        edgeId = this.body.edges[edgeId].edgeReplacedById;\n        counter++;\n      }\n      _reverseInstanceProperty(stack).call(stack);\n      return stack;\n    }\n\n    /**\n     * Get the base edge id of clusterEdgeId. cluster edge (clusteredEdgeId) -> cluster edge B -> cluster edge C -> base edge\n     *\n     * @param {vis.Edge.id} clusteredEdgeId\n     * @returns {vis.Edge.id} baseEdgeId\n     *\n     * TODO: deprecate in 5.0.0. Method getBaseEdges() is the correct one to use.\n     */\n  }, {\n    key: \"getBaseEdge\",\n    value: function getBaseEdge(clusteredEdgeId) {\n      // Just kludge this by returning the first base edge id found\n      return this.getBaseEdges(clusteredEdgeId)[0];\n    }\n\n    /**\n     * Get all regular edges for this clustered edge id.\n     *\n     * @param {vis.Edge.id} clusteredEdgeId\n     * @returns {Array.<vis.Edge.id>} all baseEdgeId's under this clustered edge\n     */\n  }, {\n    key: \"getBaseEdges\",\n    value: function getBaseEdges(clusteredEdgeId) {\n      var IdsToHandle = [clusteredEdgeId];\n      var doneIds = [];\n      var foundIds = [];\n      var max = 100;\n      var counter = 0;\n      while (IdsToHandle.length > 0 && counter < max) {\n        var nextId = IdsToHandle.pop();\n        if (nextId === undefined) continue; // Paranoia here and onwards\n        var nextEdge = this.body.edges[nextId];\n        if (nextEdge === undefined) continue;\n        counter++;\n        var replacingIds = nextEdge.clusteringEdgeReplacingIds;\n        if (replacingIds === undefined) {\n          // nextId is a base id\n          foundIds.push(nextId);\n        } else {\n          // Another cluster edge, unravel this one as well\n          for (var i = 0; i < replacingIds.length; ++i) {\n            var replacingId = replacingIds[i];\n\n            // Don't add if already handled\n            // TODO: never triggers; find a test-case which does\n            if (_indexOfInstanceProperty(IdsToHandle).call(IdsToHandle, replacingIds) !== -1 || _indexOfInstanceProperty(doneIds).call(doneIds, replacingIds) !== -1) {\n              continue;\n            }\n            IdsToHandle.push(replacingId);\n          }\n        }\n        doneIds.push(nextId);\n      }\n      return foundIds;\n    }\n\n    /**\n     * Get the Id the node is connected to\n     *\n     * @param {vis.Edge} edge\n     * @param {Node.id} nodeId\n     * @returns {*}\n     * @private\n     */\n  }, {\n    key: \"_getConnectedId\",\n    value: function _getConnectedId(edge, nodeId) {\n      if (edge.toId != nodeId) {\n        return edge.toId;\n      } else if (edge.fromId != nodeId) {\n        return edge.fromId;\n      } else {\n        return edge.fromId;\n      }\n    }\n\n    /**\n     * We determine how many connections denote an important hub.\n     * We take the mean + 2*std as the important hub size. (Assuming a normal distribution of data, ~2.2%)\n     *\n     * @returns {number}\n     * @private\n     */\n  }, {\n    key: \"_getHubSize\",\n    value: function _getHubSize() {\n      var average = 0;\n      var averageSquared = 0;\n      var hubCounter = 0;\n      var largestHub = 0;\n      for (var i = 0; i < this.body.nodeIndices.length; i++) {\n        var node = this.body.nodes[this.body.nodeIndices[i]];\n        if (node.edges.length > largestHub) {\n          largestHub = node.edges.length;\n        }\n        average += node.edges.length;\n        averageSquared += Math.pow(node.edges.length, 2);\n        hubCounter += 1;\n      }\n      average = average / hubCounter;\n      averageSquared = averageSquared / hubCounter;\n      var variance = averageSquared - Math.pow(average, 2);\n      var standardDeviation = Math.sqrt(variance);\n      var hubThreshold = Math.floor(average + 2 * standardDeviation);\n\n      // always have at least one to cluster\n      if (hubThreshold > largestHub) {\n        hubThreshold = largestHub;\n      }\n      return hubThreshold;\n    }\n\n    /**\n     * Create an edge for the cluster representation.\n     *\n     * @param {Node.id} fromId\n     * @param {Node.id} toId\n     * @param {vis.Edge} baseEdge\n     * @param {object} clusterEdgeProperties\n     * @param {object} extraOptions\n     * @returns {Edge} newly created clustered edge\n     * @private\n     */\n  }, {\n    key: \"_createClusteredEdge\",\n    value: function _createClusteredEdge(fromId, toId, baseEdge, clusterEdgeProperties, extraOptions) {\n      // copy the options of the edge we will replace\n      var clonedOptions = NetworkUtil.cloneOptions(baseEdge, \"edge\");\n      // make sure the properties of clusterEdges are superimposed on it\n      deepExtend(clonedOptions, clusterEdgeProperties);\n\n      // set up the edge\n      clonedOptions.from = fromId;\n      clonedOptions.to = toId;\n      clonedOptions.id = \"clusterEdge:\" + v4();\n\n      // apply the edge specific options to it if specified\n      if (extraOptions !== undefined) {\n        deepExtend(clonedOptions, extraOptions);\n      }\n      var newEdge = this.body.functions.createEdge(clonedOptions);\n      newEdge.clusteringEdgeReplacingIds = [baseEdge.id];\n      newEdge.connect();\n\n      // Register the new edge\n      this.body.edges[newEdge.id] = newEdge;\n      return newEdge;\n    }\n\n    /**\n     * Add the passed child nodes and edges to the given cluster node.\n     *\n     * @param {object | Node} childNodes  hash of nodes or single node to add in cluster\n     * @param {object | Edge} childEdges  hash of edges or single edge to take into account when clustering\n     * @param {Node} clusterNode  cluster node to add nodes and edges to\n     * @param {object} [clusterEdgeProperties]\n     * @private\n     */\n  }, {\n    key: \"_clusterEdges\",\n    value: function _clusterEdges(childNodes, childEdges, clusterNode, clusterEdgeProperties) {\n      if (childEdges instanceof Edge) {\n        var edge = childEdges;\n        var obj = {};\n        obj[edge.id] = edge;\n        childEdges = obj;\n      }\n      if (childNodes instanceof Node) {\n        var node = childNodes;\n        var _obj = {};\n        _obj[node.id] = node;\n        childNodes = _obj;\n      }\n      if (clusterNode === undefined || clusterNode === null) {\n        throw new Error(\"_clusterEdges: parameter clusterNode required\");\n      }\n      if (clusterEdgeProperties === undefined) {\n        // Take the required properties from the cluster node\n        clusterEdgeProperties = clusterNode.clusterEdgeProperties;\n      }\n\n      // create the new edges that will connect to the cluster.\n      // All self-referencing edges will be added to childEdges here.\n      this._createClusterEdges(childNodes, childEdges, clusterNode, clusterEdgeProperties);\n\n      // disable the childEdges\n      for (var edgeId in childEdges) {\n        if (Object.prototype.hasOwnProperty.call(childEdges, edgeId)) {\n          if (this.body.edges[edgeId] !== undefined) {\n            var _edge2 = this.body.edges[edgeId];\n            // cache the options before changing\n            this._backupEdgeOptions(_edge2);\n            // disable physics and hide the edge\n            _edge2.setOptions({\n              physics: false\n            });\n          }\n        }\n      }\n\n      // disable the childNodes\n      for (var nodeId in childNodes) {\n        if (Object.prototype.hasOwnProperty.call(childNodes, nodeId)) {\n          this.clusteredNodes[nodeId] = {\n            clusterId: clusterNode.id,\n            node: this.body.nodes[nodeId]\n          };\n          this.body.nodes[nodeId].setOptions({\n            physics: false\n          });\n        }\n      }\n    }\n\n    /**\n     * Determine in which cluster given nodeId resides.\n     *\n     * If not in cluster, return undefined.\n     *\n     * NOTE: If you know a cleaner way to do this, please enlighten me (wimrijnders).\n     *\n     * @param {Node.id} nodeId\n     * @returns {Node|undefined} Node instance for cluster, if present\n     * @private\n     */\n  }, {\n    key: \"_getClusterNodeForNode\",\n    value: function _getClusterNodeForNode(nodeId) {\n      if (nodeId === undefined) return undefined;\n      var clusteredNode = this.clusteredNodes[nodeId];\n\n      // NOTE: If no cluster info found, it should actually be an error\n      if (clusteredNode === undefined) return undefined;\n      var clusterId = clusteredNode.clusterId;\n      if (clusterId === undefined) return undefined;\n      return this.body.nodes[clusterId];\n    }\n\n    /**\n     * Internal helper function for conditionally removing items in array\n     *\n     * Done like this because Array.filter() is not fully supported by all IE's.\n     *\n     * @param {Array} arr\n     * @param {Function} callback\n     * @returns {Array}\n     * @private\n     */\n  }, {\n    key: \"_filter\",\n    value: function _filter(arr, callback) {\n      var ret = [];\n      forEach$1(arr, function (item) {\n        if (callback(item)) {\n          ret.push(item);\n        }\n      });\n      return ret;\n    }\n\n    /**\n     * Scan all edges for changes in clustering and adjust this if necessary.\n     *\n     * Call this (internally) after there has been a change in node or edge data.\n     *\n     * Pre: States of this.body.nodes and this.body.edges consistent\n     * Pre: this.clusteredNodes and this.clusteredEdge consistent with containedNodes and containedEdges\n     *      of cluster nodes.\n     */\n  }, {\n    key: \"_updateState\",\n    value: function _updateState() {\n      var _this4 = this;\n      var nodeId;\n      var deletedNodeIds = [];\n      var deletedEdgeIds = {};\n\n      /**\n       * Utility function to iterate over clustering nodes only\n       *\n       * @param {Function} callback  function to call for each cluster node\n       */\n      var eachClusterNode = function eachClusterNode(callback) {\n        forEach$1(_this4.body.nodes, function (node) {\n          if (node.isCluster === true) {\n            callback(node);\n          }\n        });\n      };\n\n      //\n      // Remove deleted regular nodes from clustering\n      //\n\n      // Determine the deleted nodes\n      for (nodeId in this.clusteredNodes) {\n        if (!Object.prototype.hasOwnProperty.call(this.clusteredNodes, nodeId)) continue;\n        var node = this.body.nodes[nodeId];\n        if (node === undefined) {\n          deletedNodeIds.push(nodeId);\n        }\n      }\n\n      // Remove nodes from cluster nodes\n      eachClusterNode(function (clusterNode) {\n        for (var n = 0; n < deletedNodeIds.length; n++) {\n          delete clusterNode.containedNodes[deletedNodeIds[n]];\n        }\n      });\n\n      // Remove nodes from cluster list\n      for (var n = 0; n < deletedNodeIds.length; n++) {\n        delete this.clusteredNodes[deletedNodeIds[n]];\n      }\n\n      //\n      // Remove deleted edges from clustering\n      //\n\n      // Add the deleted clustered edges to the list\n      forEach$1(this.clusteredEdges, function (edgeId) {\n        var edge = _this4.body.edges[edgeId];\n        if (edge === undefined || !edge.endPointsValid()) {\n          deletedEdgeIds[edgeId] = edgeId;\n        }\n      });\n\n      // Cluster nodes can also contain edges which are not clustered,\n      // i.e. nodes 1-2 within cluster with an edge in between.\n      // So the cluster nodes also need to be scanned for invalid edges\n      eachClusterNode(function (clusterNode) {\n        forEach$1(clusterNode.containedEdges, function (edge, edgeId) {\n          if (!edge.endPointsValid() && !deletedEdgeIds[edgeId]) {\n            deletedEdgeIds[edgeId] = edgeId;\n          }\n        });\n      });\n\n      // Also scan for cluster edges which need to be removed in the active list.\n      // Regular edges have been removed beforehand, so this only picks up the cluster edges.\n      forEach$1(this.body.edges, function (edge, edgeId) {\n        // Explicitly scan the contained edges for validity\n        var isValid = true;\n        var replacedIds = edge.clusteringEdgeReplacingIds;\n        if (replacedIds !== undefined) {\n          var numValid = 0;\n          forEach$1(replacedIds, function (containedEdgeId) {\n            var containedEdge = _this4.body.edges[containedEdgeId];\n            if (containedEdge !== undefined && containedEdge.endPointsValid()) {\n              numValid += 1;\n            }\n          });\n          isValid = numValid > 0;\n        }\n        if (!edge.endPointsValid() || !isValid) {\n          deletedEdgeIds[edgeId] = edgeId;\n        }\n      });\n\n      // Remove edges from cluster nodes\n      eachClusterNode(function (clusterNode) {\n        forEach$1(deletedEdgeIds, function (deletedEdgeId) {\n          delete clusterNode.containedEdges[deletedEdgeId];\n          forEach$1(clusterNode.edges, function (edge, m) {\n            if (edge.id === deletedEdgeId) {\n              clusterNode.edges[m] = null; // Don't want to directly delete here, because in the loop\n              return;\n            }\n            edge.clusteringEdgeReplacingIds = _this4._filter(edge.clusteringEdgeReplacingIds, function (id) {\n              return !deletedEdgeIds[id];\n            });\n          });\n\n          // Clean up the nulls\n          clusterNode.edges = _this4._filter(clusterNode.edges, function (item) {\n            return item !== null;\n          });\n        });\n      });\n\n      // Remove from cluster list\n      forEach$1(deletedEdgeIds, function (edgeId) {\n        delete _this4.clusteredEdges[edgeId];\n      });\n\n      // Remove cluster edges from active list (this.body.edges).\n      // deletedEdgeIds still contains id of regular edges, but these should all\n      // be gone when you reach here.\n      forEach$1(deletedEdgeIds, function (edgeId) {\n        delete _this4.body.edges[edgeId];\n      });\n\n      //\n      // Check changed cluster state of edges\n      //\n\n      // Iterating over keys here, because edges may be removed in the loop\n      var ids = _Object$keys(this.body.edges);\n      forEach$1(ids, function (edgeId) {\n        var edge = _this4.body.edges[edgeId];\n        var shouldBeClustered = _this4._isClusteredNode(edge.fromId) || _this4._isClusteredNode(edge.toId);\n        if (shouldBeClustered === _this4._isClusteredEdge(edge.id)) {\n          return; // all is well\n        }\n\n        if (shouldBeClustered) {\n          // add edge to clustering\n          var clusterFrom = _this4._getClusterNodeForNode(edge.fromId);\n          if (clusterFrom !== undefined) {\n            _this4._clusterEdges(_this4.body.nodes[edge.fromId], edge, clusterFrom);\n          }\n          var clusterTo = _this4._getClusterNodeForNode(edge.toId);\n          if (clusterTo !== undefined) {\n            _this4._clusterEdges(_this4.body.nodes[edge.toId], edge, clusterTo);\n          }\n\n          // TODO: check that it works for both edges clustered\n          //       (This might be paranoia)\n        } else {\n          delete _this4._clusterEdges[edgeId];\n          _this4._restoreEdge(edge);\n          // This should not be happening, the state should\n          // be properly updated at this point.\n          //\n          // If it *is* reached during normal operation, then we have to implement\n          // undo clustering for this edge here.\n          // throw new Error('remove edge from clustering not implemented!')\n        }\n      });\n\n      // Clusters may be nested to any level. Keep on opening until nothing to open\n      var changed = false;\n      var continueLoop = true;\n      var _loop2 = function _loop2() {\n        var clustersToOpen = [];\n\n        // Determine the id's of clusters that need opening\n        eachClusterNode(function (clusterNode) {\n          var numNodes = _Object$keys(clusterNode.containedNodes).length;\n          var allowSingle = clusterNode.options.allowSingleNodeCluster === true;\n          if (allowSingle && numNodes < 1 || !allowSingle && numNodes < 2) {\n            clustersToOpen.push(clusterNode.id);\n          }\n        });\n\n        // Open them\n        for (var _n = 0; _n < clustersToOpen.length; ++_n) {\n          _this4.openCluster(clustersToOpen[_n], {}, false /* Don't refresh, we're in an refresh/update already */);\n        }\n\n        continueLoop = clustersToOpen.length > 0;\n        changed = changed || continueLoop;\n      };\n      while (continueLoop) {\n        _loop2();\n      }\n      if (changed) {\n        this._updateState(); // Redo this method (recursion possible! should be safe)\n      }\n    }\n\n    /**\n     * Determine if node with given id is part of a cluster.\n     *\n     * @param {Node.id} nodeId\n     * @returns {boolean} true if part of a cluster.\n     */\n  }, {\n    key: \"_isClusteredNode\",\n    value: function _isClusteredNode(nodeId) {\n      return this.clusteredNodes[nodeId] !== undefined;\n    }\n\n    /**\n     * Determine if edge with given id is not visible due to clustering.\n     *\n     * An edge is considered clustered if:\n     * - it is directly replaced by a clustering edge\n     * - any of its connecting nodes is in a cluster\n     *\n     * @param {vis.Edge.id} edgeId\n     * @returns {boolean} true if part of a cluster.\n     */\n  }, {\n    key: \"_isClusteredEdge\",\n    value: function _isClusteredEdge(edgeId) {\n      return this.clusteredEdges[edgeId] !== undefined;\n    }\n  }]);\n  return ClusterEngine;\n}();\n\n/**\n * Initializes window.requestAnimationFrame() to a usable form.\n *\n * Specifically, set up this method for the case of running on node.js with jsdom enabled.\n *\n * NOTES:\n *\n * On node.js, when calling this directly outside of this class, `window` is not defined.\n *   This happens even if jsdom is used.\n * For node.js + jsdom, `window` is available at the moment the constructor is called.\n *   For this reason, the called is placed within the constructor.\n * Even then, `window.requestAnimationFrame()` is not defined, so it still needs to be added.\n * During unit testing, it happens that the window object is reset during execution, causing\n *   a runtime error due to missing `requestAnimationFrame()`. This needs to be compensated for,\n *   see `_requestNextFrame()`.\n * Since this is a global object, it may affect other modules besides `Network`. With normal\n *   usage, this does not cause any problems. During unit testing, errors may occur. These have\n *   been compensated for, see comment block in _requestNextFrame().\n *\n * @private\n */\nfunction _initRequestAnimationFrame() {\n  var func;\n  if (window !== undefined) {\n    func = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n  }\n  if (func === undefined) {\n    // window or method not present, setting mock requestAnimationFrame\n    window.requestAnimationFrame = function (callback) {\n      //console.log(\"Called mock requestAnimationFrame\");\n      callback();\n    };\n  } else {\n    window.requestAnimationFrame = func;\n  }\n}\n\n/**\n * The canvas renderer\n */\nvar CanvasRenderer = /*#__PURE__*/function () {\n  /**\n   * @param {object} body\n   * @param {Canvas} canvas\n   */\n  function CanvasRenderer(body, canvas) {\n    _classCallCheck(this, CanvasRenderer);\n    _initRequestAnimationFrame();\n    this.body = body;\n    this.canvas = canvas;\n    this.redrawRequested = false;\n    this.renderTimer = undefined;\n    this.requiresTimeout = true;\n    this.renderingActive = false;\n    this.renderRequests = 0;\n    this.allowRedraw = true;\n    this.dragging = false;\n    this.zooming = false;\n    this.options = {};\n    this.defaultOptions = {\n      hideEdgesOnDrag: false,\n      hideEdgesOnZoom: false,\n      hideNodesOnDrag: false\n    };\n    _Object$assign(this.options, this.defaultOptions);\n    this._determineBrowserMethod();\n    this.bindEventListeners();\n  }\n\n  /**\n   * Binds event listeners\n   */\n  _createClass(CanvasRenderer, [{\n    key: \"bindEventListeners\",\n    value: function bindEventListeners() {\n      var _this = this,\n        _context2;\n      this.body.emitter.on(\"dragStart\", function () {\n        _this.dragging = true;\n      });\n      this.body.emitter.on(\"dragEnd\", function () {\n        _this.dragging = false;\n      });\n      this.body.emitter.on(\"zoom\", function () {\n        _this.zooming = true;\n        window.clearTimeout(_this.zoomTimeoutId);\n        _this.zoomTimeoutId = _setTimeout(function () {\n          var _context;\n          _this.zooming = false;\n          _bindInstanceProperty$1(_context = _this._requestRedraw).call(_context, _this)();\n        }, 250);\n      });\n      this.body.emitter.on(\"_resizeNodes\", function () {\n        _this._resizeNodes();\n      });\n      this.body.emitter.on(\"_redraw\", function () {\n        if (_this.renderingActive === false) {\n          _this._redraw();\n        }\n      });\n      this.body.emitter.on(\"_blockRedraw\", function () {\n        _this.allowRedraw = false;\n      });\n      this.body.emitter.on(\"_allowRedraw\", function () {\n        _this.allowRedraw = true;\n        _this.redrawRequested = false;\n      });\n      this.body.emitter.on(\"_requestRedraw\", _bindInstanceProperty$1(_context2 = this._requestRedraw).call(_context2, this));\n      this.body.emitter.on(\"_startRendering\", function () {\n        _this.renderRequests += 1;\n        _this.renderingActive = true;\n        _this._startRendering();\n      });\n      this.body.emitter.on(\"_stopRendering\", function () {\n        _this.renderRequests -= 1;\n        _this.renderingActive = _this.renderRequests > 0;\n        _this.renderTimer = undefined;\n      });\n      this.body.emitter.on(\"destroy\", function () {\n        _this.renderRequests = 0;\n        _this.allowRedraw = false;\n        _this.renderingActive = false;\n        if (_this.requiresTimeout === true) {\n          clearTimeout(_this.renderTimer);\n        } else {\n          window.cancelAnimationFrame(_this.renderTimer);\n        }\n        _this.body.emitter.off();\n      });\n    }\n\n    /**\n     *\n     * @param {object} options\n     */\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      if (options !== undefined) {\n        var fields = [\"hideEdgesOnDrag\", \"hideEdgesOnZoom\", \"hideNodesOnDrag\"];\n        selectiveDeepExtend(fields, this.options, options);\n      }\n    }\n\n    /**\n     * Prepare the drawing of the next frame.\n     *\n     * Calls the callback when the next frame can or will be drawn.\n     *\n     * @param {Function} callback\n     * @param {number} delay - timeout case only, wait this number of milliseconds\n     * @returns {Function | undefined}\n     * @private\n     */\n  }, {\n    key: \"_requestNextFrame\",\n    value: function _requestNextFrame(callback, delay) {\n      // During unit testing, it happens that the mock window object is reset while\n      // the next frame is still pending. Then, either 'window' is not present, or\n      // 'requestAnimationFrame()' is not present because it is not defined on the\n      // mock window object.\n      //\n      // As a consequence, unrelated unit tests may appear to fail, even if the problem\n      // described happens in the current unit test.\n      //\n      // This is not something that will happen in normal operation, but we still need\n      // to take it into account.\n      //\n      if (typeof window === \"undefined\") return; // Doing `if (window === undefined)` does not work here!\n\n      var timer;\n      var myWindow = window; // Grab a reference to reduce the possibility that 'window' is reset\n      // while running this method.\n\n      if (this.requiresTimeout === true) {\n        // wait given number of milliseconds and perform the animation step function\n        timer = _setTimeout(callback, delay);\n      } else {\n        if (myWindow.requestAnimationFrame) {\n          timer = myWindow.requestAnimationFrame(callback);\n        }\n      }\n      return timer;\n    }\n\n    /**\n     *\n     * @private\n     */\n  }, {\n    key: \"_startRendering\",\n    value: function _startRendering() {\n      if (this.renderingActive === true) {\n        if (this.renderTimer === undefined) {\n          var _context3;\n          this.renderTimer = this._requestNextFrame(_bindInstanceProperty$1(_context3 = this._renderStep).call(_context3, this), this.simulationInterval);\n        }\n      }\n    }\n\n    /**\n     *\n     * @private\n     */\n  }, {\n    key: \"_renderStep\",\n    value: function _renderStep() {\n      if (this.renderingActive === true) {\n        // reset the renderTimer so a new scheduled animation step can be set\n        this.renderTimer = undefined;\n        if (this.requiresTimeout === true) {\n          // this schedules a new simulation step\n          this._startRendering();\n        }\n        this._redraw();\n        if (this.requiresTimeout === false) {\n          // this schedules a new simulation step\n          this._startRendering();\n        }\n      }\n    }\n\n    /**\n     * Redraw the network with the current data\n     * chart will be resized too.\n     */\n  }, {\n    key: \"redraw\",\n    value: function redraw() {\n      this.body.emitter.emit(\"setSize\");\n      this._redraw();\n    }\n\n    /**\n     * Redraw the network with the current data\n     *\n     * @private\n     */\n  }, {\n    key: \"_requestRedraw\",\n    value: function _requestRedraw() {\n      var _this2 = this;\n      if (this.redrawRequested !== true && this.renderingActive === false && this.allowRedraw === true) {\n        this.redrawRequested = true;\n        this._requestNextFrame(function () {\n          _this2._redraw(false);\n        }, 0);\n      }\n    }\n\n    /**\n     * Redraw the network with the current data\n     *\n     * @param {boolean} [hidden=false] | Used to get the first estimate of the node sizes.\n     *                                   Only the nodes are drawn after which they are quickly drawn over.\n     * @private\n     */\n  }, {\n    key: \"_redraw\",\n    value: function _redraw() {\n      var hidden = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (this.allowRedraw === true) {\n        this.body.emitter.emit(\"initRedraw\");\n        this.redrawRequested = false;\n        var drawLater = {\n          drawExternalLabels: null\n        };\n\n        // when the container div was hidden, this fixes it back up!\n        if (this.canvas.frame.canvas.width === 0 || this.canvas.frame.canvas.height === 0) {\n          this.canvas.setSize();\n        }\n        this.canvas.setTransform();\n        var ctx = this.canvas.getContext();\n\n        // clear the canvas\n        var w = this.canvas.frame.canvas.clientWidth;\n        var h = this.canvas.frame.canvas.clientHeight;\n        ctx.clearRect(0, 0, w, h);\n\n        // if the div is hidden, we stop the redraw here for performance.\n        if (this.canvas.frame.clientWidth === 0) {\n          return;\n        }\n\n        // set scaling and translation\n        ctx.save();\n        ctx.translate(this.body.view.translation.x, this.body.view.translation.y);\n        ctx.scale(this.body.view.scale, this.body.view.scale);\n        ctx.beginPath();\n        this.body.emitter.emit(\"beforeDrawing\", ctx);\n        ctx.closePath();\n        if (hidden === false) {\n          if ((this.dragging === false || this.dragging === true && this.options.hideEdgesOnDrag === false) && (this.zooming === false || this.zooming === true && this.options.hideEdgesOnZoom === false)) {\n            this._drawEdges(ctx);\n          }\n        }\n        if (this.dragging === false || this.dragging === true && this.options.hideNodesOnDrag === false) {\n          var _this$_drawNodes = this._drawNodes(ctx, hidden),\n            drawExternalLabels = _this$_drawNodes.drawExternalLabels;\n          drawLater.drawExternalLabels = drawExternalLabels;\n        }\n\n        // draw the arrows last so they will be at the top\n        if (hidden === false) {\n          if ((this.dragging === false || this.dragging === true && this.options.hideEdgesOnDrag === false) && (this.zooming === false || this.zooming === true && this.options.hideEdgesOnZoom === false)) {\n            this._drawArrows(ctx);\n          }\n        }\n        if (drawLater.drawExternalLabels != null) {\n          drawLater.drawExternalLabels();\n        }\n        if (hidden === false) {\n          this._drawSelectionBox(ctx);\n        }\n        ctx.beginPath();\n        this.body.emitter.emit(\"afterDrawing\", ctx);\n        ctx.closePath();\n\n        // restore original scaling and translation\n        ctx.restore();\n        if (hidden === true) {\n          ctx.clearRect(0, 0, w, h);\n        }\n      }\n    }\n\n    /**\n     * Redraw all nodes\n     *\n     * @param {CanvasRenderingContext2D}   ctx\n     * @param {boolean} [alwaysShow]\n     * @private\n     */\n  }, {\n    key: \"_resizeNodes\",\n    value: function _resizeNodes() {\n      this.canvas.setTransform();\n      var ctx = this.canvas.getContext();\n      ctx.save();\n      ctx.translate(this.body.view.translation.x, this.body.view.translation.y);\n      ctx.scale(this.body.view.scale, this.body.view.scale);\n      var nodes = this.body.nodes;\n      var node;\n\n      // resize all nodes\n      for (var nodeId in nodes) {\n        if (Object.prototype.hasOwnProperty.call(nodes, nodeId)) {\n          node = nodes[nodeId];\n          node.resize(ctx);\n          node.updateBoundingBox(ctx, node.selected);\n        }\n      }\n\n      // restore original scaling and translation\n      ctx.restore();\n    }\n\n    /**\n     * Redraw all nodes\n     *\n     * @param {CanvasRenderingContext2D} ctx  2D context of a HTML canvas\n     * @param {boolean} [alwaysShow]\n     * @private\n     * @returns {object} Callbacks to draw later on higher layers.\n     */\n  }, {\n    key: \"_drawNodes\",\n    value: function _drawNodes(ctx) {\n      var alwaysShow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var nodes = this.body.nodes;\n      var nodeIndices = this.body.nodeIndices;\n      var node;\n      var selected = [];\n      var hovered = [];\n      var margin = 20;\n      var topLeft = this.canvas.DOMtoCanvas({\n        x: -margin,\n        y: -margin\n      });\n      var bottomRight = this.canvas.DOMtoCanvas({\n        x: this.canvas.frame.canvas.clientWidth + margin,\n        y: this.canvas.frame.canvas.clientHeight + margin\n      });\n      var viewableArea = {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x\n      };\n      var _drawExternalLabels = [];\n\n      // draw unselected nodes;\n      for (var _i = 0; _i < nodeIndices.length; _i++) {\n        node = nodes[nodeIndices[_i]];\n        // set selected and hovered nodes aside\n        if (node.hover) {\n          hovered.push(nodeIndices[_i]);\n        } else if (node.isSelected()) {\n          selected.push(nodeIndices[_i]);\n        } else {\n          if (alwaysShow === true) {\n            var drawLater = node.draw(ctx);\n            if (drawLater.drawExternalLabel != null) {\n              _drawExternalLabels.push(drawLater.drawExternalLabel);\n            }\n          } else if (node.isBoundingBoxOverlappingWith(viewableArea) === true) {\n            var _drawLater = node.draw(ctx);\n            if (_drawLater.drawExternalLabel != null) {\n              _drawExternalLabels.push(_drawLater.drawExternalLabel);\n            }\n          } else {\n            node.updateBoundingBox(ctx, node.selected);\n          }\n        }\n      }\n      var i;\n      var selectedLength = selected.length;\n      var hoveredLength = hovered.length;\n\n      // draw the selected nodes on top\n      for (i = 0; i < selectedLength; i++) {\n        node = nodes[selected[i]];\n        var _drawLater2 = node.draw(ctx);\n        if (_drawLater2.drawExternalLabel != null) {\n          _drawExternalLabels.push(_drawLater2.drawExternalLabel);\n        }\n      }\n\n      // draw hovered nodes above everything else: fixes https://github.com/visjs/vis-network/issues/226\n      for (i = 0; i < hoveredLength; i++) {\n        node = nodes[hovered[i]];\n        var _drawLater3 = node.draw(ctx);\n        if (_drawLater3.drawExternalLabel != null) {\n          _drawExternalLabels.push(_drawLater3.drawExternalLabel);\n        }\n      }\n      return {\n        drawExternalLabels: function drawExternalLabels() {\n          for (var _i2 = 0, _drawExternalLabels2 = _drawExternalLabels; _i2 < _drawExternalLabels2.length; _i2++) {\n            var draw = _drawExternalLabels2[_i2];\n            draw();\n          }\n        }\n      };\n    }\n\n    /**\n     * Redraw all edges\n     *\n     * @param {CanvasRenderingContext2D} ctx  2D context of a HTML canvas\n     * @private\n     */\n  }, {\n    key: \"_drawEdges\",\n    value: function _drawEdges(ctx) {\n      var edges = this.body.edges;\n      var edgeIndices = this.body.edgeIndices;\n      for (var i = 0; i < edgeIndices.length; i++) {\n        var edge = edges[edgeIndices[i]];\n        if (edge.connected === true) {\n          edge.draw(ctx);\n        }\n      }\n    }\n\n    /**\n     * Redraw all arrows\n     *\n     * @param {CanvasRenderingContext2D} ctx  2D context of a HTML canvas\n     * @private\n     */\n  }, {\n    key: \"_drawArrows\",\n    value: function _drawArrows(ctx) {\n      var edges = this.body.edges;\n      var edgeIndices = this.body.edgeIndices;\n      for (var i = 0; i < edgeIndices.length; i++) {\n        var edge = edges[edgeIndices[i]];\n        if (edge.connected === true) {\n          edge.drawArrows(ctx);\n        }\n      }\n    }\n\n    /**\n     * Determine if the browser requires a setTimeout or a requestAnimationFrame. This was required because\n     * some implementations (safari and IE9) did not support requestAnimationFrame\n     *\n     * @private\n     */\n  }, {\n    key: \"_determineBrowserMethod\",\n    value: function _determineBrowserMethod() {\n      if (typeof window !== \"undefined\") {\n        var browserType = navigator.userAgent.toLowerCase();\n        this.requiresTimeout = false;\n        if (_indexOfInstanceProperty(browserType).call(browserType, \"msie 9.0\") != -1) {\n          // IE 9\n          this.requiresTimeout = true;\n        } else if (_indexOfInstanceProperty(browserType).call(browserType, \"safari\") != -1) {\n          // safari\n          if (_indexOfInstanceProperty(browserType).call(browserType, \"chrome\") <= -1) {\n            this.requiresTimeout = true;\n          }\n        }\n      } else {\n        this.requiresTimeout = true;\n      }\n    }\n\n    /**\n     * Redraw selection box\n     *\n     * @param {CanvasRenderingContext2D} ctx  2D context of a HTML canvas\n     * @private\n     */\n  }, {\n    key: \"_drawSelectionBox\",\n    value: function _drawSelectionBox(ctx) {\n      if (this.body.selectionBox.show) {\n        ctx.beginPath();\n        var width = this.body.selectionBox.position.end.x - this.body.selectionBox.position.start.x;\n        var height = this.body.selectionBox.position.end.y - this.body.selectionBox.position.start.y;\n        ctx.rect(this.body.selectionBox.position.start.x, this.body.selectionBox.position.start.y, width, height);\n        ctx.fillStyle = \"rgba(151, 194, 252, 0.2)\";\n        ctx.fillRect(this.body.selectionBox.position.start.x, this.body.selectionBox.position.start.y, width, height);\n        ctx.strokeStyle = \"rgba(151, 194, 252, 1)\";\n        ctx.stroke();\n      } else {\n        ctx.closePath();\n      }\n    }\n  }]);\n  return CanvasRenderer;\n}();\n\nvar path$2 = path$w;\n\nvar setInterval$1 = path$2.setInterval;\n\nvar setInterval = setInterval$1;\n\nvar _setInterval = /*@__PURE__*/getDefaultExportFromCjs(setInterval);\n\n/**\n * Register a touch event, taking place before a gesture\n *\n * @param {Hammer} hammer       A hammer instance\n * @param {Function} callback   Callback, called as callback(event)\n */\nfunction onTouch(hammer, callback) {\n  callback.inputHandler = function (event) {\n    if (event.isFirst) {\n      callback(event);\n    }\n  };\n  hammer.on(\"hammer.input\", callback.inputHandler);\n}\n\n/**\n * Register a release event, taking place after a gesture\n *\n * @param {Hammer} hammer       A hammer instance\n * @param {Function} callback   Callback, called as callback(event)\n * @returns {*}\n */\nfunction onRelease(hammer, callback) {\n  callback.inputHandler = function (event) {\n    if (event.isFinal) {\n      callback(event);\n    }\n  };\n  return hammer.on(\"hammer.input\", callback.inputHandler);\n}\n\n/**\n * Create the main frame for the Network.\n * This function is executed once when a Network object is created. The frame\n * contains a canvas, and this canvas contains all objects like the axis and\n * nodes.\n */\nvar Canvas = /*#__PURE__*/function () {\n  /**\n   * @param {object} body\n   */\n  function Canvas(body) {\n    _classCallCheck(this, Canvas);\n    this.body = body;\n    this.pixelRatio = 1;\n    this.cameraState = {};\n    this.initialized = false;\n    this.canvasViewCenter = {};\n    this._cleanupCallbacks = [];\n    this.options = {};\n    this.defaultOptions = {\n      autoResize: true,\n      height: \"100%\",\n      width: \"100%\"\n    };\n    _Object$assign(this.options, this.defaultOptions);\n    this.bindEventListeners();\n  }\n\n  /**\n   * Binds event listeners\n   */\n  _createClass(Canvas, [{\n    key: \"bindEventListeners\",\n    value: function bindEventListeners() {\n      var _this = this,\n        _context;\n      // bind the events\n      this.body.emitter.once(\"resize\", function (obj) {\n        if (obj.width !== 0) {\n          _this.body.view.translation.x = obj.width * 0.5;\n        }\n        if (obj.height !== 0) {\n          _this.body.view.translation.y = obj.height * 0.5;\n        }\n      });\n      this.body.emitter.on(\"setSize\", _bindInstanceProperty$1(_context = this.setSize).call(_context, this));\n      this.body.emitter.on(\"destroy\", function () {\n        _this.hammerFrame.destroy();\n        _this.hammer.destroy();\n        _this._cleanUp();\n      });\n    }\n\n    /**\n     * @param {object} options\n     */\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      var _this2 = this;\n      if (options !== undefined) {\n        var fields = [\"width\", \"height\", \"autoResize\"];\n        selectiveDeepExtend(fields, this.options, options);\n      }\n\n      // Automatically adapt to changing size of the container element.\n      this._cleanUp();\n      if (this.options.autoResize === true) {\n        var _context2;\n        if (window.ResizeObserver) {\n          // decent browsers, immediate reactions\n          var observer = new ResizeObserver(function () {\n            var changed = _this2.setSize();\n            if (changed === true) {\n              _this2.body.emitter.emit(\"_requestRedraw\");\n            }\n          });\n          var frame = this.frame;\n          observer.observe(frame);\n          this._cleanupCallbacks.push(function () {\n            observer.unobserve(frame);\n          });\n        } else {\n          // IE11, continous polling\n          var resizeTimer = _setInterval(function () {\n            var changed = _this2.setSize();\n            if (changed === true) {\n              _this2.body.emitter.emit(\"_requestRedraw\");\n            }\n          }, 1000);\n          this._cleanupCallbacks.push(function () {\n            clearInterval(resizeTimer);\n          });\n        }\n\n        // Automatically adapt to changing size of the browser.\n        var resizeFunction = _bindInstanceProperty$1(_context2 = this._onResize).call(_context2, this);\n        window.addEventListener(\"resize\", resizeFunction);\n        this._cleanupCallbacks.push(function () {\n          window.removeEventListener(\"resize\", resizeFunction);\n        });\n      }\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"_cleanUp\",\n    value: function _cleanUp() {\n      var _context3, _context4, _context5;\n      _forEachInstanceProperty(_context3 = _reverseInstanceProperty(_context4 = _spliceInstanceProperty(_context5 = this._cleanupCallbacks).call(_context5, 0)).call(_context4)).call(_context3, function (callback) {\n        try {\n          callback();\n        } catch (error) {\n          console.error(error);\n        }\n      });\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"_onResize\",\n    value: function _onResize() {\n      this.setSize();\n      this.body.emitter.emit(\"_redraw\");\n    }\n\n    /**\n     * Get and store the cameraState\n     *\n     * @param {number} [pixelRatio=this.pixelRatio]\n     * @private\n     */\n  }, {\n    key: \"_getCameraState\",\n    value: function _getCameraState() {\n      var pixelRatio = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.pixelRatio;\n      if (this.initialized === true) {\n        this.cameraState.previousWidth = this.frame.canvas.width / pixelRatio;\n        this.cameraState.previousHeight = this.frame.canvas.height / pixelRatio;\n        this.cameraState.scale = this.body.view.scale;\n        this.cameraState.position = this.DOMtoCanvas({\n          x: 0.5 * this.frame.canvas.width / pixelRatio,\n          y: 0.5 * this.frame.canvas.height / pixelRatio\n        });\n      }\n    }\n\n    /**\n     * Set the cameraState\n     *\n     * @private\n     */\n  }, {\n    key: \"_setCameraState\",\n    value: function _setCameraState() {\n      if (this.cameraState.scale !== undefined && this.frame.canvas.clientWidth !== 0 && this.frame.canvas.clientHeight !== 0 && this.pixelRatio !== 0 && this.cameraState.previousWidth > 0 && this.cameraState.previousHeight > 0) {\n        var widthRatio = this.frame.canvas.width / this.pixelRatio / this.cameraState.previousWidth;\n        var heightRatio = this.frame.canvas.height / this.pixelRatio / this.cameraState.previousHeight;\n        var newScale = this.cameraState.scale;\n        if (widthRatio != 1 && heightRatio != 1) {\n          newScale = this.cameraState.scale * 0.5 * (widthRatio + heightRatio);\n        } else if (widthRatio != 1) {\n          newScale = this.cameraState.scale * widthRatio;\n        } else if (heightRatio != 1) {\n          newScale = this.cameraState.scale * heightRatio;\n        }\n        this.body.view.scale = newScale;\n        // this comes from the view module.\n        var currentViewCenter = this.DOMtoCanvas({\n          x: 0.5 * this.frame.canvas.clientWidth,\n          y: 0.5 * this.frame.canvas.clientHeight\n        });\n        var distanceFromCenter = {\n          // offset from view, distance view has to change by these x and y to center the node\n          x: currentViewCenter.x - this.cameraState.position.x,\n          y: currentViewCenter.y - this.cameraState.position.y\n        };\n        this.body.view.translation.x += distanceFromCenter.x * this.body.view.scale;\n        this.body.view.translation.y += distanceFromCenter.y * this.body.view.scale;\n      }\n    }\n\n    /**\n     *\n     * @param {number|string} value\n     * @returns {string}\n     * @private\n     */\n  }, {\n    key: \"_prepareValue\",\n    value: function _prepareValue(value) {\n      if (typeof value === \"number\") {\n        return value + \"px\";\n      } else if (typeof value === \"string\") {\n        if (_indexOfInstanceProperty(value).call(value, \"%\") !== -1 || _indexOfInstanceProperty(value).call(value, \"px\") !== -1) {\n          return value;\n        } else if (_indexOfInstanceProperty(value).call(value, \"%\") === -1) {\n          return value + \"px\";\n        }\n      }\n      throw new Error(\"Could not use the value supplied for width or height:\" + value);\n    }\n\n    /**\n     * Create the HTML\n     */\n  }, {\n    key: \"_create\",\n    value: function _create() {\n      // remove all elements from the container element.\n      while (this.body.container.hasChildNodes()) {\n        this.body.container.removeChild(this.body.container.firstChild);\n      }\n      this.frame = document.createElement(\"div\");\n      this.frame.className = \"vis-network\";\n      this.frame.style.position = \"relative\";\n      this.frame.style.overflow = \"hidden\";\n      this.frame.tabIndex = 0; // tab index is required for keycharm to bind keystrokes to the div instead of the window\n\n      //////////////////////////////////////////////////////////////////\n\n      this.frame.canvas = document.createElement(\"canvas\");\n      this.frame.canvas.style.position = \"relative\";\n      this.frame.appendChild(this.frame.canvas);\n      if (!this.frame.canvas.getContext) {\n        var noCanvas = document.createElement(\"DIV\");\n        noCanvas.style.color = \"red\";\n        noCanvas.style.fontWeight = \"bold\";\n        noCanvas.style.padding = \"10px\";\n        noCanvas.innerText = \"Error: your browser does not support HTML canvas\";\n        this.frame.canvas.appendChild(noCanvas);\n      } else {\n        this._setPixelRatio();\n        this.setTransform();\n      }\n\n      // add the frame to the container element\n      this.body.container.appendChild(this.frame);\n      this.body.view.scale = 1;\n      this.body.view.translation = {\n        x: 0.5 * this.frame.canvas.clientWidth,\n        y: 0.5 * this.frame.canvas.clientHeight\n      };\n      this._bindHammer();\n    }\n\n    /**\n     * This function binds hammer, it can be repeated over and over due to the uniqueness check.\n     *\n     * @private\n     */\n  }, {\n    key: \"_bindHammer\",\n    value: function _bindHammer() {\n      var _this3 = this;\n      if (this.hammer !== undefined) {\n        this.hammer.destroy();\n      }\n      this.drag = {};\n      this.pinch = {};\n\n      // init hammer\n      this.hammer = new Hammer(this.frame.canvas);\n      this.hammer.get(\"pinch\").set({\n        enable: true\n      });\n      // enable to get better response, todo: test on mobile.\n      this.hammer.get(\"pan\").set({\n        threshold: 5,\n        direction: Hammer.DIRECTION_ALL\n      });\n      onTouch(this.hammer, function (event) {\n        _this3.body.eventListeners.onTouch(event);\n      });\n      this.hammer.on(\"tap\", function (event) {\n        _this3.body.eventListeners.onTap(event);\n      });\n      this.hammer.on(\"doubletap\", function (event) {\n        _this3.body.eventListeners.onDoubleTap(event);\n      });\n      this.hammer.on(\"press\", function (event) {\n        _this3.body.eventListeners.onHold(event);\n      });\n      this.hammer.on(\"panstart\", function (event) {\n        _this3.body.eventListeners.onDragStart(event);\n      });\n      this.hammer.on(\"panmove\", function (event) {\n        _this3.body.eventListeners.onDrag(event);\n      });\n      this.hammer.on(\"panend\", function (event) {\n        _this3.body.eventListeners.onDragEnd(event);\n      });\n      this.hammer.on(\"pinch\", function (event) {\n        _this3.body.eventListeners.onPinch(event);\n      });\n\n      // TODO: neatly cleanup these handlers when re-creating the Canvas, IF these are done with hammer, event.stopPropagation will not work?\n      this.frame.canvas.addEventListener(\"wheel\", function (event) {\n        _this3.body.eventListeners.onMouseWheel(event);\n      });\n      this.frame.canvas.addEventListener(\"mousemove\", function (event) {\n        _this3.body.eventListeners.onMouseMove(event);\n      });\n      this.frame.canvas.addEventListener(\"contextmenu\", function (event) {\n        _this3.body.eventListeners.onContext(event);\n      });\n      this.hammerFrame = new Hammer(this.frame);\n      onRelease(this.hammerFrame, function (event) {\n        _this3.body.eventListeners.onRelease(event);\n      });\n    }\n\n    /**\n     * Set a new size for the network\n     *\n     * @param {string} width   Width in pixels or percentage (for example '800px'\n     *                         or '50%')\n     * @param {string} height  Height in pixels or percentage  (for example '400px'\n     *                         or '30%')\n     * @returns {boolean}\n     */\n  }, {\n    key: \"setSize\",\n    value: function setSize() {\n      var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.width;\n      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.options.height;\n      width = this._prepareValue(width);\n      height = this._prepareValue(height);\n      var emitEvent = false;\n      var oldWidth = this.frame.canvas.width;\n      var oldHeight = this.frame.canvas.height;\n\n      // update the pixel ratio\n      //\n      // NOTE: Comment in following is rather inconsistent; this is the ONLY place in the code\n      //       where it is assumed that the pixel ratio could change at runtime.\n      //       The only way I can think of this happening is a rotating screen or tablet; but then\n      //       there should be a mechanism for reloading the data (TODO: check if this is present).\n      //\n      //       If the assumption is true (i.e. pixel ratio can change at runtime), then *all* usage\n      //       of pixel ratio must be overhauled for this.\n      //\n      //       For the time being, I will humor the assumption here, and in the rest of the code assume it is\n      //       constant.\n      var previousRatio = this.pixelRatio; // we cache this because the camera state storage needs the old value\n      this._setPixelRatio();\n      if (width != this.options.width || height != this.options.height || this.frame.style.width != width || this.frame.style.height != height) {\n        this._getCameraState(previousRatio);\n        this.frame.style.width = width;\n        this.frame.style.height = height;\n        this.frame.canvas.style.width = \"100%\";\n        this.frame.canvas.style.height = \"100%\";\n        this.frame.canvas.width = Math.round(this.frame.canvas.clientWidth * this.pixelRatio);\n        this.frame.canvas.height = Math.round(this.frame.canvas.clientHeight * this.pixelRatio);\n        this.options.width = width;\n        this.options.height = height;\n        this.canvasViewCenter = {\n          x: 0.5 * this.frame.clientWidth,\n          y: 0.5 * this.frame.clientHeight\n        };\n        emitEvent = true;\n      } else {\n        // this would adapt the width of the canvas to the width from 100% if and only if\n        // there is a change.\n\n        var newWidth = Math.round(this.frame.canvas.clientWidth * this.pixelRatio);\n        var newHeight = Math.round(this.frame.canvas.clientHeight * this.pixelRatio);\n\n        // store the camera if there is a change in size.\n        if (this.frame.canvas.width !== newWidth || this.frame.canvas.height !== newHeight) {\n          this._getCameraState(previousRatio);\n        }\n        if (this.frame.canvas.width !== newWidth) {\n          this.frame.canvas.width = newWidth;\n          emitEvent = true;\n        }\n        if (this.frame.canvas.height !== newHeight) {\n          this.frame.canvas.height = newHeight;\n          emitEvent = true;\n        }\n      }\n      if (emitEvent === true) {\n        this.body.emitter.emit(\"resize\", {\n          width: Math.round(this.frame.canvas.width / this.pixelRatio),\n          height: Math.round(this.frame.canvas.height / this.pixelRatio),\n          oldWidth: Math.round(oldWidth / this.pixelRatio),\n          oldHeight: Math.round(oldHeight / this.pixelRatio)\n        });\n\n        // restore the camera on change.\n        this._setCameraState();\n      }\n\n      // set initialized so the get and set camera will work from now on.\n      this.initialized = true;\n      return emitEvent;\n    }\n\n    /**\n     *\n     * @returns {CanvasRenderingContext2D}\n     */\n  }, {\n    key: \"getContext\",\n    value: function getContext() {\n      return this.frame.canvas.getContext(\"2d\");\n    }\n\n    /**\n     * Determine the pixel ratio for various browsers.\n     *\n     * @returns {number}\n     * @private\n     */\n  }, {\n    key: \"_determinePixelRatio\",\n    value: function _determinePixelRatio() {\n      var ctx = this.getContext();\n      if (ctx === undefined) {\n        throw new Error(\"Could not get canvax context\");\n      }\n      var numerator = 1;\n      if (typeof window !== \"undefined\") {\n        // (window !== undefined) doesn't work here!\n        // Protection during unit tests, where 'window' can be missing\n        numerator = window.devicePixelRatio || 1;\n      }\n      var denominator = ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;\n      return numerator / denominator;\n    }\n\n    /**\n     * Lazy determination of pixel ratio.\n     *\n     * @private\n     */\n  }, {\n    key: \"_setPixelRatio\",\n    value: function _setPixelRatio() {\n      this.pixelRatio = this._determinePixelRatio();\n    }\n\n    /**\n     * Set the transform in the contained context, based on its pixelRatio\n     */\n  }, {\n    key: \"setTransform\",\n    value: function setTransform() {\n      var ctx = this.getContext();\n      if (ctx === undefined) {\n        throw new Error(\"Could not get canvax context\");\n      }\n      ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);\n    }\n\n    /**\n     * Convert the X coordinate in DOM-space (coordinate point in browser relative to the container div) to\n     * the X coordinate in canvas-space (the simulation sandbox, which the camera looks upon)\n     *\n     * @param {number} x\n     * @returns {number}\n     * @private\n     */\n  }, {\n    key: \"_XconvertDOMtoCanvas\",\n    value: function _XconvertDOMtoCanvas(x) {\n      return (x - this.body.view.translation.x) / this.body.view.scale;\n    }\n\n    /**\n     * Convert the X coordinate in canvas-space (the simulation sandbox, which the camera looks upon) to\n     * the X coordinate in DOM-space (coordinate point in browser relative to the container div)\n     *\n     * @param {number} x\n     * @returns {number}\n     * @private\n     */\n  }, {\n    key: \"_XconvertCanvasToDOM\",\n    value: function _XconvertCanvasToDOM(x) {\n      return x * this.body.view.scale + this.body.view.translation.x;\n    }\n\n    /**\n     * Convert the Y coordinate in DOM-space (coordinate point in browser relative to the container div) to\n     * the Y coordinate in canvas-space (the simulation sandbox, which the camera looks upon)\n     *\n     * @param {number} y\n     * @returns {number}\n     * @private\n     */\n  }, {\n    key: \"_YconvertDOMtoCanvas\",\n    value: function _YconvertDOMtoCanvas(y) {\n      return (y - this.body.view.translation.y) / this.body.view.scale;\n    }\n\n    /**\n     * Convert the Y coordinate in canvas-space (the simulation sandbox, which the camera looks upon) to\n     * the Y coordinate in DOM-space (coordinate point in browser relative to the container div)\n     *\n     * @param {number} y\n     * @returns {number}\n     * @private\n     */\n  }, {\n    key: \"_YconvertCanvasToDOM\",\n    value: function _YconvertCanvasToDOM(y) {\n      return y * this.body.view.scale + this.body.view.translation.y;\n    }\n\n    /**\n     * @param {point} pos\n     * @returns {point}\n     */\n  }, {\n    key: \"canvasToDOM\",\n    value: function canvasToDOM(pos) {\n      return {\n        x: this._XconvertCanvasToDOM(pos.x),\n        y: this._YconvertCanvasToDOM(pos.y)\n      };\n    }\n\n    /**\n     *\n     * @param {point} pos\n     * @returns {point}\n     */\n  }, {\n    key: \"DOMtoCanvas\",\n    value: function DOMtoCanvas(pos) {\n      return {\n        x: this._XconvertDOMtoCanvas(pos.x),\n        y: this._YconvertDOMtoCanvas(pos.y)\n      };\n    }\n  }]);\n  return Canvas;\n}();\n\n/**\r\n * Validate the fit options, replace missing optional values by defaults etc.\r\n *\r\n * @param rawOptions - The raw options.\r\n * @param allNodeIds - All node ids that will be used if nodes are omitted in\r\n * the raw options.\r\n * @returns Options with everything filled in and validated.\r\n */\nfunction normalizeFitOptions(rawOptions, allNodeIds) {\n  var options = _Object$assign({\n    nodes: allNodeIds,\n    minZoomLevel: Number.MIN_VALUE,\n    maxZoomLevel: 1\n  }, rawOptions !== null && rawOptions !== void 0 ? rawOptions : {});\n  if (!_Array$isArray(options.nodes)) {\n    throw new TypeError(\"Nodes has to be an array of ids.\");\n  }\n  if (options.nodes.length === 0) {\n    options.nodes = allNodeIds;\n  }\n  if (!(typeof options.minZoomLevel === \"number\" && options.minZoomLevel > 0)) {\n    throw new TypeError(\"Min zoom level has to be a number higher than zero.\");\n  }\n  if (!(typeof options.maxZoomLevel === \"number\" && options.minZoomLevel <= options.maxZoomLevel)) {\n    throw new TypeError(\"Max zoom level has to be a number higher than min zoom level.\");\n  }\n  return options;\n}\n\n/**\n * The view\n */\nvar View = /*#__PURE__*/function () {\n  /**\n   * @param {object} body\n   * @param {Canvas} canvas\n   */\n  function View(body, canvas) {\n    var _context,\n      _this = this,\n      _context2;\n    _classCallCheck(this, View);\n    this.body = body;\n    this.canvas = canvas;\n    this.animationSpeed = 1 / this.renderRefreshRate;\n    this.animationEasingFunction = \"easeInOutQuint\";\n    this.easingTime = 0;\n    this.sourceScale = 0;\n    this.targetScale = 0;\n    this.sourceTranslation = 0;\n    this.targetTranslation = 0;\n    this.lockedOnNodeId = undefined;\n    this.lockedOnNodeOffset = undefined;\n    this.touchTime = 0;\n    this.viewFunction = undefined;\n    this.body.emitter.on(\"fit\", _bindInstanceProperty$1(_context = this.fit).call(_context, this));\n    this.body.emitter.on(\"animationFinished\", function () {\n      _this.body.emitter.emit(\"_stopRendering\");\n    });\n    this.body.emitter.on(\"unlockNode\", _bindInstanceProperty$1(_context2 = this.releaseNode).call(_context2, this));\n  }\n\n  /**\n   *\n   * @param {object} [options={}]\n   */\n  _createClass(View, [{\n    key: \"setOptions\",\n    value: function setOptions() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.options = options;\n    }\n\n    /**\n     * This function zooms out to fit all data on screen based on amount of nodes\n     *\n     * @param {object} [options={{nodes=Array}}]\n     * @param options\n     * @param {boolean} [initialZoom=false]  | zoom based on fitted formula or range, true = fitted, default = false;\n     */\n  }, {\n    key: \"fit\",\n    value: function fit(options) {\n      var initialZoom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      options = normalizeFitOptions(options, this.body.nodeIndices);\n      var canvasWidth = this.canvas.frame.canvas.clientWidth;\n      var canvasHeight = this.canvas.frame.canvas.clientHeight;\n      var range;\n      var zoomLevel;\n      if (canvasWidth === 0 || canvasHeight === 0) {\n        // There's no point in trying to fit into zero sized canvas. This could\n        // potentially even result in invalid values being computed. For example\n        // for network without nodes and zero sized canvas the zoom level would\n        // end up being computed as 0/0 which results in NaN. In any other case\n        // this would be 0/something which is again pointless to compute.\n        zoomLevel = 1;\n        range = NetworkUtil.getRange(this.body.nodes, options.nodes);\n      } else if (initialZoom === true) {\n        // check if more than half of the nodes have a predefined position. If so, we use the range, not the approximation.\n        var positionDefined = 0;\n        for (var nodeId in this.body.nodes) {\n          if (Object.prototype.hasOwnProperty.call(this.body.nodes, nodeId)) {\n            var node = this.body.nodes[nodeId];\n            if (node.predefinedPosition === true) {\n              positionDefined += 1;\n            }\n          }\n        }\n        if (positionDefined > 0.5 * this.body.nodeIndices.length) {\n          this.fit(options, false);\n          return;\n        }\n        range = NetworkUtil.getRange(this.body.nodes, options.nodes);\n        var numberOfNodes = this.body.nodeIndices.length;\n        zoomLevel = 12.662 / (numberOfNodes + 7.4147) + 0.0964822; // this is obtained from fitting a dataset from 5 points with scale levels that looked good.\n\n        // correct for larger canvasses.\n        var factor = Math.min(canvasWidth / 600, canvasHeight / 600);\n        zoomLevel *= factor;\n      } else {\n        this.body.emitter.emit(\"_resizeNodes\");\n        range = NetworkUtil.getRange(this.body.nodes, options.nodes);\n        var xDistance = Math.abs(range.maxX - range.minX) * 1.1;\n        var yDistance = Math.abs(range.maxY - range.minY) * 1.1;\n        var xZoomLevel = canvasWidth / xDistance;\n        var yZoomLevel = canvasHeight / yDistance;\n        zoomLevel = xZoomLevel <= yZoomLevel ? xZoomLevel : yZoomLevel;\n      }\n      if (zoomLevel > options.maxZoomLevel) {\n        zoomLevel = options.maxZoomLevel;\n      } else if (zoomLevel < options.minZoomLevel) {\n        zoomLevel = options.minZoomLevel;\n      }\n      var center = NetworkUtil.findCenter(range);\n      var animationOptions = {\n        position: center,\n        scale: zoomLevel,\n        animation: options.animation\n      };\n      this.moveTo(animationOptions);\n    }\n\n    // animation\n\n    /**\n     * Center a node in view.\n     *\n     * @param {number} nodeId\n     * @param {number} [options]\n     */\n  }, {\n    key: \"focus\",\n    value: function focus(nodeId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (this.body.nodes[nodeId] !== undefined) {\n        var nodePosition = {\n          x: this.body.nodes[nodeId].x,\n          y: this.body.nodes[nodeId].y\n        };\n        options.position = nodePosition;\n        options.lockedOnNode = nodeId;\n        this.moveTo(options);\n      } else {\n        console.error(\"Node: \" + nodeId + \" cannot be found.\");\n      }\n    }\n\n    /**\n     *\n     * @param {object} options  |  options.offset   = {x:number, y:number}   // offset from the center in DOM pixels\n     *                          |  options.scale    = number                 // scale to move to\n     *                          |  options.position = {x:number, y:number}   // position to move to\n     *                          |  options.animation = {duration:number, easingFunction:String} || Boolean   // position to move to\n     */\n  }, {\n    key: \"moveTo\",\n    value: function moveTo(options) {\n      if (options === undefined) {\n        options = {};\n        return;\n      }\n      if (options.offset != null) {\n        if (options.offset.x != null) {\n          // Coerce and verify that x is valid.\n          options.offset.x = +options.offset.x;\n          if (!_Number$isFinite(options.offset.x)) {\n            throw new TypeError('The option \"offset.x\" has to be a finite number.');\n          }\n        } else {\n          options.offset.x = 0;\n        }\n        if (options.offset.y != null) {\n          // Coerce and verify that y is valid.\n          options.offset.y = +options.offset.y;\n          if (!_Number$isFinite(options.offset.y)) {\n            throw new TypeError('The option \"offset.y\" has to be a finite number.');\n          }\n        } else {\n          options.offset.x = 0;\n        }\n      } else {\n        options.offset = {\n          x: 0,\n          y: 0\n        };\n      }\n      if (options.position != null) {\n        if (options.position.x != null) {\n          // Coerce and verify that x is valid.\n          options.position.x = +options.position.x;\n          if (!_Number$isFinite(options.position.x)) {\n            throw new TypeError('The option \"position.x\" has to be a finite number.');\n          }\n        } else {\n          options.position.x = 0;\n        }\n        if (options.position.y != null) {\n          // Coerce and verify that y is valid.\n          options.position.y = +options.position.y;\n          if (!_Number$isFinite(options.position.y)) {\n            throw new TypeError('The option \"position.y\" has to be a finite number.');\n          }\n        } else {\n          options.position.x = 0;\n        }\n      } else {\n        options.position = this.getViewPosition();\n      }\n      if (options.scale != null) {\n        // Coerce and verify that the scale is valid.\n        options.scale = +options.scale;\n        if (!(options.scale > 0)) {\n          throw new TypeError('The option \"scale\" has to be a number greater than zero.');\n        }\n      } else {\n        options.scale = this.body.view.scale;\n      }\n      if (options.animation === undefined) {\n        options.animation = {\n          duration: 0\n        };\n      }\n      if (options.animation === false) {\n        options.animation = {\n          duration: 0\n        };\n      }\n      if (options.animation === true) {\n        options.animation = {};\n      }\n      if (options.animation.duration === undefined) {\n        options.animation.duration = 1000;\n      } // default duration\n      if (options.animation.easingFunction === undefined) {\n        options.animation.easingFunction = \"easeInOutQuad\";\n      } // default easing function\n\n      this.animateView(options);\n    }\n\n    /**\n     *\n     * @param {object} options  |  options.offset   = {x:number, y:number}   // offset from the center in DOM pixels\n     *                          |  options.time     = number                 // animation time in milliseconds\n     *                          |  options.scale    = number                 // scale to animate to\n     *                          |  options.position = {x:number, y:number}   // position to animate to\n     *                          |  options.easingFunction = String           // linear, easeInQuad, easeOutQuad, easeInOutQuad,\n     *                                                                       // easeInCubic, easeOutCubic, easeInOutCubic,\n     *                                                                       // easeInQuart, easeOutQuart, easeInOutQuart,\n     *                                                                       // easeInQuint, easeOutQuint, easeInOutQuint\n     */\n  }, {\n    key: \"animateView\",\n    value: function animateView(options) {\n      if (options === undefined) {\n        return;\n      }\n      this.animationEasingFunction = options.animation.easingFunction;\n      // release if something focussed on the node\n      this.releaseNode();\n      if (options.locked === true) {\n        this.lockedOnNodeId = options.lockedOnNode;\n        this.lockedOnNodeOffset = options.offset;\n      }\n\n      // forcefully complete the old animation if it was still running\n      if (this.easingTime != 0) {\n        this._transitionRedraw(true); // by setting easingtime to 1, we finish the animation.\n      }\n\n      this.sourceScale = this.body.view.scale;\n      this.sourceTranslation = this.body.view.translation;\n      this.targetScale = options.scale;\n\n      // set the scale so the viewCenter is based on the correct zoom level. This is overridden in the transitionRedraw\n      // but at least then we'll have the target transition\n      this.body.view.scale = this.targetScale;\n      var viewCenter = this.canvas.DOMtoCanvas({\n        x: 0.5 * this.canvas.frame.canvas.clientWidth,\n        y: 0.5 * this.canvas.frame.canvas.clientHeight\n      });\n      var distanceFromCenter = {\n        // offset from view, distance view has to change by these x and y to center the node\n        x: viewCenter.x - options.position.x,\n        y: viewCenter.y - options.position.y\n      };\n      this.targetTranslation = {\n        x: this.sourceTranslation.x + distanceFromCenter.x * this.targetScale + options.offset.x,\n        y: this.sourceTranslation.y + distanceFromCenter.y * this.targetScale + options.offset.y\n      };\n\n      // if the time is set to 0, don't do an animation\n      if (options.animation.duration === 0) {\n        if (this.lockedOnNodeId != undefined) {\n          var _context3;\n          this.viewFunction = _bindInstanceProperty$1(_context3 = this._lockedRedraw).call(_context3, this);\n          this.body.emitter.on(\"initRedraw\", this.viewFunction);\n        } else {\n          this.body.view.scale = this.targetScale;\n          this.body.view.translation = this.targetTranslation;\n          this.body.emitter.emit(\"_requestRedraw\");\n        }\n      } else {\n        var _context4;\n        this.animationSpeed = 1 / (60 * options.animation.duration * 0.001) || 1 / 60; // 60 for 60 seconds, 0.001 for milli's\n        this.animationEasingFunction = options.animation.easingFunction;\n        this.viewFunction = _bindInstanceProperty$1(_context4 = this._transitionRedraw).call(_context4, this);\n        this.body.emitter.on(\"initRedraw\", this.viewFunction);\n        this.body.emitter.emit(\"_startRendering\");\n      }\n    }\n\n    /**\n     * used to animate smoothly by hijacking the redraw function.\n     *\n     * @private\n     */\n  }, {\n    key: \"_lockedRedraw\",\n    value: function _lockedRedraw() {\n      var nodePosition = {\n        x: this.body.nodes[this.lockedOnNodeId].x,\n        y: this.body.nodes[this.lockedOnNodeId].y\n      };\n      var viewCenter = this.canvas.DOMtoCanvas({\n        x: 0.5 * this.canvas.frame.canvas.clientWidth,\n        y: 0.5 * this.canvas.frame.canvas.clientHeight\n      });\n      var distanceFromCenter = {\n        // offset from view, distance view has to change by these x and y to center the node\n        x: viewCenter.x - nodePosition.x,\n        y: viewCenter.y - nodePosition.y\n      };\n      var sourceTranslation = this.body.view.translation;\n      var targetTranslation = {\n        x: sourceTranslation.x + distanceFromCenter.x * this.body.view.scale + this.lockedOnNodeOffset.x,\n        y: sourceTranslation.y + distanceFromCenter.y * this.body.view.scale + this.lockedOnNodeOffset.y\n      };\n      this.body.view.translation = targetTranslation;\n    }\n\n    /**\n     * Resets state of a locked on Node\n     */\n  }, {\n    key: \"releaseNode\",\n    value: function releaseNode() {\n      if (this.lockedOnNodeId !== undefined && this.viewFunction !== undefined) {\n        this.body.emitter.off(\"initRedraw\", this.viewFunction);\n        this.lockedOnNodeId = undefined;\n        this.lockedOnNodeOffset = undefined;\n      }\n    }\n\n    /**\n     * @param {boolean} [finished=false]\n     * @private\n     */\n  }, {\n    key: \"_transitionRedraw\",\n    value: function _transitionRedraw() {\n      var finished = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.easingTime += this.animationSpeed;\n      this.easingTime = finished === true ? 1.0 : this.easingTime;\n      var progress = easingFunctions[this.animationEasingFunction](this.easingTime);\n      this.body.view.scale = this.sourceScale + (this.targetScale - this.sourceScale) * progress;\n      this.body.view.translation = {\n        x: this.sourceTranslation.x + (this.targetTranslation.x - this.sourceTranslation.x) * progress,\n        y: this.sourceTranslation.y + (this.targetTranslation.y - this.sourceTranslation.y) * progress\n      };\n\n      // cleanup\n      if (this.easingTime >= 1.0) {\n        this.body.emitter.off(\"initRedraw\", this.viewFunction);\n        this.easingTime = 0;\n        if (this.lockedOnNodeId != undefined) {\n          var _context5;\n          this.viewFunction = _bindInstanceProperty$1(_context5 = this._lockedRedraw).call(_context5, this);\n          this.body.emitter.on(\"initRedraw\", this.viewFunction);\n        }\n        this.body.emitter.emit(\"animationFinished\");\n      }\n    }\n\n    /**\n     *\n     * @returns {number}\n     */\n  }, {\n    key: \"getScale\",\n    value: function getScale() {\n      return this.body.view.scale;\n    }\n\n    /**\n     *\n     * @returns {{x: number, y: number}}\n     */\n  }, {\n    key: \"getViewPosition\",\n    value: function getViewPosition() {\n      return this.canvas.DOMtoCanvas({\n        x: 0.5 * this.canvas.frame.canvas.clientWidth,\n        y: 0.5 * this.canvas.frame.canvas.clientHeight\n      });\n    }\n  }]);\n  return View;\n}();\n\n/**\r\n * Created by Alex on 11/6/2014.\r\n */\r\nfunction keycharm(options) {\r\n  var preventDefault = options && options.preventDefault || false;\r\n\r\n  var container = options && options.container || window;\r\n\r\n  var _exportFunctions = {};\r\n  var _bound = {keydown:{}, keyup:{}};\r\n  var _keys = {};\r\n  var i;\r\n\r\n  // a - z\r\n  for (i = 97; i <= 122; i++) {_keys[String.fromCharCode(i)] = {code:65 + (i - 97), shift: false};}\r\n  // A - Z\r\n  for (i = 65; i <= 90; i++) {_keys[String.fromCharCode(i)] = {code:i, shift: true};}\r\n  // 0 - 9\r\n  for (i = 0;  i <= 9;   i++) {_keys['' + i] = {code:48 + i, shift: false};}\r\n  // F1 - F12\r\n  for (i = 1;  i <= 12;   i++) {_keys['F' + i] = {code:111 + i, shift: false};}\r\n  // num0 - num9\r\n  for (i = 0;  i <= 9;   i++) {_keys['num' + i] = {code:96 + i, shift: false};}\r\n\r\n  // numpad misc\r\n  _keys['num*'] = {code:106, shift: false};\r\n  _keys['num+'] = {code:107, shift: false};\r\n  _keys['num-'] = {code:109, shift: false};\r\n  _keys['num/'] = {code:111, shift: false};\r\n  _keys['num.'] = {code:110, shift: false};\r\n  // arrows\r\n  _keys['left']  = {code:37, shift: false};\r\n  _keys['up']    = {code:38, shift: false};\r\n  _keys['right'] = {code:39, shift: false};\r\n  _keys['down']  = {code:40, shift: false};\r\n  // extra keys\r\n  _keys['space'] = {code:32, shift: false};\r\n  _keys['enter'] = {code:13, shift: false};\r\n  _keys['shift'] = {code:16, shift: undefined};\r\n  _keys['esc']   = {code:27, shift: false};\r\n  _keys['backspace'] = {code:8, shift: false};\r\n  _keys['tab']       = {code:9, shift: false};\r\n  _keys['ctrl']      = {code:17, shift: false};\r\n  _keys['alt']       = {code:18, shift: false};\r\n  _keys['delete']    = {code:46, shift: false};\r\n  _keys['pageup']    = {code:33, shift: false};\r\n  _keys['pagedown']  = {code:34, shift: false};\r\n  // symbols\r\n  _keys['=']     = {code:187, shift: false};\r\n  _keys['-']     = {code:189, shift: false};\r\n  _keys[']']     = {code:221, shift: false};\r\n  _keys['[']     = {code:219, shift: false};\r\n\r\n\r\n\r\n  var down = function(event) {handleEvent(event,'keydown');};\r\n  var up = function(event) {handleEvent(event,'keyup');};\r\n\r\n  // handle the actualy bound key with the event\r\n  var handleEvent = function(event,type) {\r\n    if (_bound[type][event.keyCode] !== undefined) {\r\n      var bound = _bound[type][event.keyCode];\r\n      for (var i = 0; i < bound.length; i++) {\r\n        if (bound[i].shift === undefined) {\r\n          bound[i].fn(event);\r\n        }\r\n        else if (bound[i].shift == true && event.shiftKey == true) {\r\n          bound[i].fn(event);\r\n        }\r\n        else if (bound[i].shift == false && event.shiftKey == false) {\r\n          bound[i].fn(event);\r\n        }\r\n      }\r\n\r\n      if (preventDefault == true) {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n  };\r\n\r\n  // bind a key to a callback\r\n  _exportFunctions.bind = function(key, callback, type) {\r\n    if (type === undefined) {\r\n      type = 'keydown';\r\n    }\r\n    if (_keys[key] === undefined) {\r\n      throw new Error(\"unsupported key: \" + key);\r\n    }\r\n    if (_bound[type][_keys[key].code] === undefined) {\r\n      _bound[type][_keys[key].code] = [];\r\n    }\r\n    _bound[type][_keys[key].code].push({fn:callback, shift:_keys[key].shift});\r\n  };\r\n\r\n\r\n  // bind all keys to a call back (demo purposes)\r\n  _exportFunctions.bindAll = function(callback, type) {\r\n    if (type === undefined) {\r\n      type = 'keydown';\r\n    }\r\n    for (var key in _keys) {\r\n      if (_keys.hasOwnProperty(key)) {\r\n        _exportFunctions.bind(key,callback,type);\r\n      }\r\n    }\r\n  };\r\n\r\n  // get the key label from an event\r\n  _exportFunctions.getKey = function(event) {\r\n    for (var key in _keys) {\r\n      if (_keys.hasOwnProperty(key)) {\r\n        if (event.shiftKey == true && _keys[key].shift == true && event.keyCode == _keys[key].code) {\r\n          return key;\r\n        }\r\n        else if (event.shiftKey == false && _keys[key].shift == false && event.keyCode == _keys[key].code) {\r\n          return key;\r\n        }\r\n        else if (event.keyCode == _keys[key].code && key == 'shift') {\r\n          return key;\r\n        }\r\n      }\r\n    }\r\n    return \"unknown key, currently not supported\";\r\n  };\r\n\r\n  // unbind either a specific callback from a key or all of them (by leaving callback undefined)\r\n  _exportFunctions.unbind = function(key, callback, type) {\r\n    if (type === undefined) {\r\n      type = 'keydown';\r\n    }\r\n    if (_keys[key] === undefined) {\r\n      throw new Error(\"unsupported key: \" + key);\r\n    }\r\n    if (callback !== undefined) {\r\n      var newBindings = [];\r\n      var bound = _bound[type][_keys[key].code];\r\n      if (bound !== undefined) {\r\n        for (var i = 0; i < bound.length; i++) {\r\n          if (!(bound[i].fn == callback && bound[i].shift == _keys[key].shift)) {\r\n            newBindings.push(_bound[type][_keys[key].code][i]);\r\n          }\r\n        }\r\n      }\r\n      _bound[type][_keys[key].code] = newBindings;\r\n    }\r\n    else {\r\n      _bound[type][_keys[key].code] = [];\r\n    }\r\n  };\r\n\r\n  // reset all bound variables.\r\n  _exportFunctions.reset = function() {\r\n    _bound = {keydown:{}, keyup:{}};\r\n  };\r\n\r\n  // unbind all listeners and reset all variables.\r\n  _exportFunctions.destroy = function() {\r\n    _bound = {keydown:{}, keyup:{}};\r\n    container.removeEventListener('keydown', down, true);\r\n    container.removeEventListener('keyup', up, true);\r\n  };\r\n\r\n  // create listeners.\r\n  container.addEventListener('keydown',down,true);\r\n  container.addEventListener('keyup',up,true);\r\n\r\n  // return the public functions.\r\n  return _exportFunctions;\r\n}\n\n/**\n * Navigation Handler\n */\nvar NavigationHandler = /*#__PURE__*/function () {\n  /**\n   * @param {object} body\n   * @param {Canvas} canvas\n   */\n  function NavigationHandler(body, canvas) {\n    var _this = this;\n    _classCallCheck(this, NavigationHandler);\n    this.body = body;\n    this.canvas = canvas;\n    this.iconsCreated = false;\n    this.navigationHammers = [];\n    this.boundFunctions = {};\n    this.touchTime = 0;\n    this.activated = false;\n    this.body.emitter.on(\"activate\", function () {\n      _this.activated = true;\n      _this.configureKeyboardBindings();\n    });\n    this.body.emitter.on(\"deactivate\", function () {\n      _this.activated = false;\n      _this.configureKeyboardBindings();\n    });\n    this.body.emitter.on(\"destroy\", function () {\n      if (_this.keycharm !== undefined) {\n        _this.keycharm.destroy();\n      }\n    });\n    this.options = {};\n  }\n\n  /**\n   *\n   * @param {object} options\n   */\n  _createClass(NavigationHandler, [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      if (options !== undefined) {\n        this.options = options;\n        this.create();\n      }\n    }\n\n    /**\n     * Creates or refreshes navigation and sets key bindings\n     */\n  }, {\n    key: \"create\",\n    value: function create() {\n      if (this.options.navigationButtons === true) {\n        if (this.iconsCreated === false) {\n          this.loadNavigationElements();\n        }\n      } else if (this.iconsCreated === true) {\n        this.cleanNavigation();\n      }\n      this.configureKeyboardBindings();\n    }\n\n    /**\n     * Cleans up previous navigation items\n     */\n  }, {\n    key: \"cleanNavigation\",\n    value: function cleanNavigation() {\n      // clean hammer bindings\n      if (this.navigationHammers.length != 0) {\n        for (var i = 0; i < this.navigationHammers.length; i++) {\n          this.navigationHammers[i].destroy();\n        }\n        this.navigationHammers = [];\n      }\n\n      // clean up previous navigation items\n      if (this.navigationDOM && this.navigationDOM[\"wrapper\"] && this.navigationDOM[\"wrapper\"].parentNode) {\n        this.navigationDOM[\"wrapper\"].parentNode.removeChild(this.navigationDOM[\"wrapper\"]);\n      }\n      this.iconsCreated = false;\n    }\n\n    /**\n     * Creation of the navigation controls nodes. They are drawn over the rest of the nodes and are not affected by scale and translation\n     * they have a triggerFunction which is called on click. If the position of the navigation controls is dependent\n     * on this.frame.canvas.clientWidth or this.frame.canvas.clientHeight, we flag horizontalAlignLeft and verticalAlignTop false.\n     * This means that the location will be corrected by the _relocateNavigation function on a size change of the canvas.\n     *\n     * @private\n     */\n  }, {\n    key: \"loadNavigationElements\",\n    value: function loadNavigationElements() {\n      var _this2 = this;\n      this.cleanNavigation();\n      this.navigationDOM = {};\n      var navigationDivs = [\"up\", \"down\", \"left\", \"right\", \"zoomIn\", \"zoomOut\", \"zoomExtends\"];\n      var navigationDivActions = [\"_moveUp\", \"_moveDown\", \"_moveLeft\", \"_moveRight\", \"_zoomIn\", \"_zoomOut\", \"_fit\"];\n      this.navigationDOM[\"wrapper\"] = document.createElement(\"div\");\n      this.navigationDOM[\"wrapper\"].className = \"vis-navigation\";\n      this.canvas.frame.appendChild(this.navigationDOM[\"wrapper\"]);\n      for (var i = 0; i < navigationDivs.length; i++) {\n        this.navigationDOM[navigationDivs[i]] = document.createElement(\"div\");\n        this.navigationDOM[navigationDivs[i]].className = \"vis-button vis-\" + navigationDivs[i];\n        this.navigationDOM[\"wrapper\"].appendChild(this.navigationDOM[navigationDivs[i]]);\n        var hammer = new Hammer(this.navigationDOM[navigationDivs[i]]);\n        if (navigationDivActions[i] === \"_fit\") {\n          var _context;\n          onTouch(hammer, _bindInstanceProperty$1(_context = this._fit).call(_context, this));\n        } else {\n          var _context2;\n          onTouch(hammer, _bindInstanceProperty$1(_context2 = this.bindToRedraw).call(_context2, this, navigationDivActions[i]));\n        }\n        this.navigationHammers.push(hammer);\n      }\n\n      // use a hammer for the release so we do not require the one used in the rest of the network\n      // the one the rest uses can be overloaded by the manipulation system.\n      var hammerFrame = new Hammer(this.canvas.frame);\n      onRelease(hammerFrame, function () {\n        _this2._stopMovement();\n      });\n      this.navigationHammers.push(hammerFrame);\n      this.iconsCreated = true;\n    }\n\n    /**\n     *\n     * @param {string} action\n     */\n  }, {\n    key: \"bindToRedraw\",\n    value: function bindToRedraw(action) {\n      if (this.boundFunctions[action] === undefined) {\n        var _context3;\n        this.boundFunctions[action] = _bindInstanceProperty$1(_context3 = this[action]).call(_context3, this);\n        this.body.emitter.on(\"initRedraw\", this.boundFunctions[action]);\n        this.body.emitter.emit(\"_startRendering\");\n      }\n    }\n\n    /**\n     *\n     * @param {string} action\n     */\n  }, {\n    key: \"unbindFromRedraw\",\n    value: function unbindFromRedraw(action) {\n      if (this.boundFunctions[action] !== undefined) {\n        this.body.emitter.off(\"initRedraw\", this.boundFunctions[action]);\n        this.body.emitter.emit(\"_stopRendering\");\n        delete this.boundFunctions[action];\n      }\n    }\n\n    /**\n     * this stops all movement induced by the navigation buttons\n     *\n     * @private\n     */\n  }, {\n    key: \"_fit\",\n    value: function _fit() {\n      if (new Date().valueOf() - this.touchTime > 700) {\n        // TODO: fix ugly hack to avoid hammer's double fireing of event (because we use release?)\n        this.body.emitter.emit(\"fit\", {\n          duration: 700\n        });\n        this.touchTime = new Date().valueOf();\n      }\n    }\n\n    /**\n     * this stops all movement induced by the navigation buttons\n     *\n     * @private\n     */\n  }, {\n    key: \"_stopMovement\",\n    value: function _stopMovement() {\n      for (var boundAction in this.boundFunctions) {\n        if (Object.prototype.hasOwnProperty.call(this.boundFunctions, boundAction)) {\n          this.body.emitter.off(\"initRedraw\", this.boundFunctions[boundAction]);\n          this.body.emitter.emit(\"_stopRendering\");\n        }\n      }\n      this.boundFunctions = {};\n    }\n    /**\n     *\n     * @private\n     */\n  }, {\n    key: \"_moveUp\",\n    value: function _moveUp() {\n      this.body.view.translation.y += this.options.keyboard.speed.y;\n    }\n    /**\n     *\n     * @private\n     */\n  }, {\n    key: \"_moveDown\",\n    value: function _moveDown() {\n      this.body.view.translation.y -= this.options.keyboard.speed.y;\n    }\n    /**\n     *\n     * @private\n     */\n  }, {\n    key: \"_moveLeft\",\n    value: function _moveLeft() {\n      this.body.view.translation.x += this.options.keyboard.speed.x;\n    }\n    /**\n     *\n     * @private\n     */\n  }, {\n    key: \"_moveRight\",\n    value: function _moveRight() {\n      this.body.view.translation.x -= this.options.keyboard.speed.x;\n    }\n    /**\n     *\n     * @private\n     */\n  }, {\n    key: \"_zoomIn\",\n    value: function _zoomIn() {\n      var scaleOld = this.body.view.scale;\n      var scale = this.body.view.scale * (1 + this.options.keyboard.speed.zoom);\n      var translation = this.body.view.translation;\n      var scaleFrac = scale / scaleOld;\n      var tx = (1 - scaleFrac) * this.canvas.canvasViewCenter.x + translation.x * scaleFrac;\n      var ty = (1 - scaleFrac) * this.canvas.canvasViewCenter.y + translation.y * scaleFrac;\n      this.body.view.scale = scale;\n      this.body.view.translation = {\n        x: tx,\n        y: ty\n      };\n      this.body.emitter.emit(\"zoom\", {\n        direction: \"+\",\n        scale: this.body.view.scale,\n        pointer: null\n      });\n    }\n\n    /**\n     *\n     * @private\n     */\n  }, {\n    key: \"_zoomOut\",\n    value: function _zoomOut() {\n      var scaleOld = this.body.view.scale;\n      var scale = this.body.view.scale / (1 + this.options.keyboard.speed.zoom);\n      var translation = this.body.view.translation;\n      var scaleFrac = scale / scaleOld;\n      var tx = (1 - scaleFrac) * this.canvas.canvasViewCenter.x + translation.x * scaleFrac;\n      var ty = (1 - scaleFrac) * this.canvas.canvasViewCenter.y + translation.y * scaleFrac;\n      this.body.view.scale = scale;\n      this.body.view.translation = {\n        x: tx,\n        y: ty\n      };\n      this.body.emitter.emit(\"zoom\", {\n        direction: \"-\",\n        scale: this.body.view.scale,\n        pointer: null\n      });\n    }\n\n    /**\n     * bind all keys using keycharm.\n     */\n  }, {\n    key: \"configureKeyboardBindings\",\n    value: function configureKeyboardBindings() {\n      var _this3 = this;\n      if (this.keycharm !== undefined) {\n        this.keycharm.destroy();\n      }\n      if (this.options.keyboard.enabled === true) {\n        if (this.options.keyboard.bindToWindow === true) {\n          this.keycharm = keycharm({\n            container: window,\n            preventDefault: true\n          });\n        } else {\n          this.keycharm = keycharm({\n            container: this.canvas.frame,\n            preventDefault: true\n          });\n        }\n        this.keycharm.reset();\n        if (this.activated === true) {\n          var _context4, _context5, _context6, _context7, _context8, _context9, _context10, _context11, _context12, _context13, _context14, _context15, _context16, _context17, _context18, _context19, _context20, _context21, _context22, _context23, _context24, _context25, _context26, _context27;\n          _bindInstanceProperty$1(_context4 = this.keycharm).call(_context4, \"up\", function () {\n            _this3.bindToRedraw(\"_moveUp\");\n          }, \"keydown\");\n          _bindInstanceProperty$1(_context5 = this.keycharm).call(_context5, \"down\", function () {\n            _this3.bindToRedraw(\"_moveDown\");\n          }, \"keydown\");\n          _bindInstanceProperty$1(_context6 = this.keycharm).call(_context6, \"left\", function () {\n            _this3.bindToRedraw(\"_moveLeft\");\n          }, \"keydown\");\n          _bindInstanceProperty$1(_context7 = this.keycharm).call(_context7, \"right\", function () {\n            _this3.bindToRedraw(\"_moveRight\");\n          }, \"keydown\");\n          _bindInstanceProperty$1(_context8 = this.keycharm).call(_context8, \"=\", function () {\n            _this3.bindToRedraw(\"_zoomIn\");\n          }, \"keydown\");\n          _bindInstanceProperty$1(_context9 = this.keycharm).call(_context9, \"num+\", function () {\n            _this3.bindToRedraw(\"_zoomIn\");\n          }, \"keydown\");\n          _bindInstanceProperty$1(_context10 = this.keycharm).call(_context10, \"num-\", function () {\n            _this3.bindToRedraw(\"_zoomOut\");\n          }, \"keydown\");\n          _bindInstanceProperty$1(_context11 = this.keycharm).call(_context11, \"-\", function () {\n            _this3.bindToRedraw(\"_zoomOut\");\n          }, \"keydown\");\n          _bindInstanceProperty$1(_context12 = this.keycharm).call(_context12, \"[\", function () {\n            _this3.bindToRedraw(\"_zoomOut\");\n          }, \"keydown\");\n          _bindInstanceProperty$1(_context13 = this.keycharm).call(_context13, \"]\", function () {\n            _this3.bindToRedraw(\"_zoomIn\");\n          }, \"keydown\");\n          _bindInstanceProperty$1(_context14 = this.keycharm).call(_context14, \"pageup\", function () {\n            _this3.bindToRedraw(\"_zoomIn\");\n          }, \"keydown\");\n          _bindInstanceProperty$1(_context15 = this.keycharm).call(_context15, \"pagedown\", function () {\n            _this3.bindToRedraw(\"_zoomOut\");\n          }, \"keydown\");\n          _bindInstanceProperty$1(_context16 = this.keycharm).call(_context16, \"up\", function () {\n            _this3.unbindFromRedraw(\"_moveUp\");\n          }, \"keyup\");\n          _bindInstanceProperty$1(_context17 = this.keycharm).call(_context17, \"down\", function () {\n            _this3.unbindFromRedraw(\"_moveDown\");\n          }, \"keyup\");\n          _bindInstanceProperty$1(_context18 = this.keycharm).call(_context18, \"left\", function () {\n            _this3.unbindFromRedraw(\"_moveLeft\");\n          }, \"keyup\");\n          _bindInstanceProperty$1(_context19 = this.keycharm).call(_context19, \"right\", function () {\n            _this3.unbindFromRedraw(\"_moveRight\");\n          }, \"keyup\");\n          _bindInstanceProperty$1(_context20 = this.keycharm).call(_context20, \"=\", function () {\n            _this3.unbindFromRedraw(\"_zoomIn\");\n          }, \"keyup\");\n          _bindInstanceProperty$1(_context21 = this.keycharm).call(_context21, \"num+\", function () {\n            _this3.unbindFromRedraw(\"_zoomIn\");\n          }, \"keyup\");\n          _bindInstanceProperty$1(_context22 = this.keycharm).call(_context22, \"num-\", function () {\n            _this3.unbindFromRedraw(\"_zoomOut\");\n          }, \"keyup\");\n          _bindInstanceProperty$1(_context23 = this.keycharm).call(_context23, \"-\", function () {\n            _this3.unbindFromRedraw(\"_zoomOut\");\n          }, \"keyup\");\n          _bindInstanceProperty$1(_context24 = this.keycharm).call(_context24, \"[\", function () {\n            _this3.unbindFromRedraw(\"_zoomOut\");\n          }, \"keyup\");\n          _bindInstanceProperty$1(_context25 = this.keycharm).call(_context25, \"]\", function () {\n            _this3.unbindFromRedraw(\"_zoomIn\");\n          }, \"keyup\");\n          _bindInstanceProperty$1(_context26 = this.keycharm).call(_context26, \"pageup\", function () {\n            _this3.unbindFromRedraw(\"_zoomIn\");\n          }, \"keyup\");\n          _bindInstanceProperty$1(_context27 = this.keycharm).call(_context27, \"pagedown\", function () {\n            _this3.unbindFromRedraw(\"_zoomOut\");\n          }, \"keyup\");\n        }\n      }\n    }\n  }]);\n  return NavigationHandler;\n}();\n\nfunction _createForOfIteratorHelper$4(o, allowArrayLike) { var it = typeof _Symbol !== \"undefined\" && _getIteratorMethod(o) || o[\"@@iterator\"]; if (!it) { if (_Array$isArray(o) || (it = _unsupportedIterableToArray$4(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray$4(o, minLen) { var _context15; if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray$4(o, minLen); var n = _sliceInstanceProperty(_context15 = Object.prototype.toString.call(o)).call(_context15, 8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return _Array$from$1(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$4(o, minLen); }\nfunction _arrayLikeToArray$4(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n/**\n * Handler for interactions\n */\nvar InteractionHandler = /*#__PURE__*/function () {\n  /**\n   * @param {object} body\n   * @param {Canvas} canvas\n   * @param {SelectionHandler} selectionHandler\n   */\n  function InteractionHandler(body, canvas, selectionHandler) {\n    var _context, _context2, _context3, _context4, _context5, _context6, _context7, _context8, _context9, _context10, _context11, _context12, _context13;\n    _classCallCheck(this, InteractionHandler);\n    this.body = body;\n    this.canvas = canvas;\n    this.selectionHandler = selectionHandler;\n    this.navigationHandler = new NavigationHandler(body, canvas);\n\n    // bind the events from hammer to functions in this object\n    this.body.eventListeners.onTap = _bindInstanceProperty$1(_context = this.onTap).call(_context, this);\n    this.body.eventListeners.onTouch = _bindInstanceProperty$1(_context2 = this.onTouch).call(_context2, this);\n    this.body.eventListeners.onDoubleTap = _bindInstanceProperty$1(_context3 = this.onDoubleTap).call(_context3, this);\n    this.body.eventListeners.onHold = _bindInstanceProperty$1(_context4 = this.onHold).call(_context4, this);\n    this.body.eventListeners.onDragStart = _bindInstanceProperty$1(_context5 = this.onDragStart).call(_context5, this);\n    this.body.eventListeners.onDrag = _bindInstanceProperty$1(_context6 = this.onDrag).call(_context6, this);\n    this.body.eventListeners.onDragEnd = _bindInstanceProperty$1(_context7 = this.onDragEnd).call(_context7, this);\n    this.body.eventListeners.onMouseWheel = _bindInstanceProperty$1(_context8 = this.onMouseWheel).call(_context8, this);\n    this.body.eventListeners.onPinch = _bindInstanceProperty$1(_context9 = this.onPinch).call(_context9, this);\n    this.body.eventListeners.onMouseMove = _bindInstanceProperty$1(_context10 = this.onMouseMove).call(_context10, this);\n    this.body.eventListeners.onRelease = _bindInstanceProperty$1(_context11 = this.onRelease).call(_context11, this);\n    this.body.eventListeners.onContext = _bindInstanceProperty$1(_context12 = this.onContext).call(_context12, this);\n    this.touchTime = 0;\n    this.drag = {};\n    this.pinch = {};\n    this.popup = undefined;\n    this.popupObj = undefined;\n    this.popupTimer = undefined;\n    this.body.functions.getPointer = _bindInstanceProperty$1(_context13 = this.getPointer).call(_context13, this);\n    this.options = {};\n    this.defaultOptions = {\n      dragNodes: true,\n      dragView: true,\n      hover: false,\n      keyboard: {\n        enabled: false,\n        speed: {\n          x: 10,\n          y: 10,\n          zoom: 0.02\n        },\n        bindToWindow: true,\n        autoFocus: true\n      },\n      navigationButtons: false,\n      tooltipDelay: 300,\n      zoomView: true,\n      zoomSpeed: 1\n    };\n    _Object$assign(this.options, this.defaultOptions);\n    this.bindEventListeners();\n  }\n\n  /**\n   * Binds event listeners\n   */\n  _createClass(InteractionHandler, [{\n    key: \"bindEventListeners\",\n    value: function bindEventListeners() {\n      var _this = this;\n      this.body.emitter.on(\"destroy\", function () {\n        clearTimeout(_this.popupTimer);\n        delete _this.body.functions.getPointer;\n      });\n    }\n\n    /**\n     *\n     * @param {object} options\n     */\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      if (options !== undefined) {\n        // extend all but the values in fields\n        var fields = [\"hideEdgesOnDrag\", \"hideEdgesOnZoom\", \"hideNodesOnDrag\", \"keyboard\", \"multiselect\", \"selectable\", \"selectConnectedEdges\"];\n        selectiveNotDeepExtend(fields, this.options, options);\n\n        // merge the keyboard options in.\n        mergeOptions(this.options, options, \"keyboard\");\n        if (options.tooltip) {\n          _Object$assign(this.options.tooltip, options.tooltip);\n          if (options.tooltip.color) {\n            this.options.tooltip.color = parseColor(options.tooltip.color);\n          }\n        }\n      }\n      this.navigationHandler.setOptions(this.options);\n    }\n\n    /**\n     * Get the pointer location from a touch location\n     *\n     * @param {{x: number, y: number}} touch\n     * @returns {{x: number, y: number}} pointer\n     * @private\n     */\n  }, {\n    key: \"getPointer\",\n    value: function getPointer(touch) {\n      return {\n        x: touch.x - getAbsoluteLeft(this.canvas.frame.canvas),\n        y: touch.y - getAbsoluteTop(this.canvas.frame.canvas)\n      };\n    }\n\n    /**\n     * On start of a touch gesture, store the pointer\n     *\n     * @param {Event}  event   The event\n     * @private\n     */\n  }, {\n    key: \"onTouch\",\n    value: function onTouch(event) {\n      if (new Date().valueOf() - this.touchTime > 50) {\n        this.drag.pointer = this.getPointer(event.center);\n        this.drag.pinched = false;\n        this.pinch.scale = this.body.view.scale;\n        // to avoid double fireing of this event because we have two hammer instances. (on canvas and on frame)\n        this.touchTime = new Date().valueOf();\n      }\n    }\n\n    /**\n     * handle tap/click event: select/unselect a node\n     *\n     * @param {Event} event\n     * @private\n     */\n  }, {\n    key: \"onTap\",\n    value: function onTap(event) {\n      var pointer = this.getPointer(event.center);\n      var multiselect = this.selectionHandler.options.multiselect && (event.changedPointers[0].ctrlKey || event.changedPointers[0].metaKey);\n      this.checkSelectionChanges(pointer, multiselect);\n      this.selectionHandler.commitAndEmit(pointer, event);\n      this.selectionHandler.generateClickEvent(\"click\", event, pointer);\n    }\n\n    /**\n     * handle doubletap event\n     *\n     * @param {Event} event\n     * @private\n     */\n  }, {\n    key: \"onDoubleTap\",\n    value: function onDoubleTap(event) {\n      var pointer = this.getPointer(event.center);\n      this.selectionHandler.generateClickEvent(\"doubleClick\", event, pointer);\n    }\n\n    /**\n     * handle long tap event: multi select nodes\n     *\n     * @param {Event} event\n     * @private\n     */\n  }, {\n    key: \"onHold\",\n    value: function onHold(event) {\n      var pointer = this.getPointer(event.center);\n      var multiselect = this.selectionHandler.options.multiselect;\n      this.checkSelectionChanges(pointer, multiselect);\n      this.selectionHandler.commitAndEmit(pointer, event);\n      this.selectionHandler.generateClickEvent(\"click\", event, pointer);\n      this.selectionHandler.generateClickEvent(\"hold\", event, pointer);\n    }\n\n    /**\n     * handle the release of the screen\n     *\n     * @param {Event} event\n     * @private\n     */\n  }, {\n    key: \"onRelease\",\n    value: function onRelease(event) {\n      if (new Date().valueOf() - this.touchTime > 10) {\n        var pointer = this.getPointer(event.center);\n        this.selectionHandler.generateClickEvent(\"release\", event, pointer);\n        // to avoid double fireing of this event because we have two hammer instances. (on canvas and on frame)\n        this.touchTime = new Date().valueOf();\n      }\n    }\n\n    /**\n     *\n     * @param {Event} event\n     */\n  }, {\n    key: \"onContext\",\n    value: function onContext(event) {\n      var pointer = this.getPointer({\n        x: event.clientX,\n        y: event.clientY\n      });\n      this.selectionHandler.generateClickEvent(\"oncontext\", event, pointer);\n    }\n\n    /**\n     * Select and deselect nodes depending current selection change.\n     *\n     * @param {{x: number, y: number}} pointer\n     * @param {boolean} [add=false]\n     */\n  }, {\n    key: \"checkSelectionChanges\",\n    value: function checkSelectionChanges(pointer) {\n      var add = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (add === true) {\n        this.selectionHandler.selectAdditionalOnPoint(pointer);\n      } else {\n        this.selectionHandler.selectOnPoint(pointer);\n      }\n    }\n\n    /**\n     * Remove all node and edge id's from the first set that are present in the second one.\n     *\n     * @param {{nodes: Array.<Node>, edges: Array.<vis.Edge>}} firstSet\n     * @param {{nodes: Array.<Node>, edges: Array.<vis.Edge>}} secondSet\n     * @returns {{nodes: Array.<Node>, edges: Array.<vis.Edge>}}\n     * @private\n     */\n  }, {\n    key: \"_determineDifference\",\n    value: function _determineDifference(firstSet, secondSet) {\n      var arrayDiff = function arrayDiff(firstArr, secondArr) {\n        var result = [];\n        for (var i = 0; i < firstArr.length; i++) {\n          var value = firstArr[i];\n          if (_indexOfInstanceProperty(secondArr).call(secondArr, value) === -1) {\n            result.push(value);\n          }\n        }\n        return result;\n      };\n      return {\n        nodes: arrayDiff(firstSet.nodes, secondSet.nodes),\n        edges: arrayDiff(firstSet.edges, secondSet.edges)\n      };\n    }\n\n    /**\n     * This function is called by onDragStart.\n     * It is separated out because we can then overload it for the datamanipulation system.\n     *\n     * @param {Event} event\n     * @private\n     */\n  }, {\n    key: \"onDragStart\",\n    value: function onDragStart(event) {\n      // if already dragging, do not start\n      // this can happen on touch screens with multiple fingers\n      if (this.drag.dragging) {\n        return;\n      }\n\n      //in case the touch event was triggered on an external div, do the initial touch now.\n      if (this.drag.pointer === undefined) {\n        this.onTouch(event);\n      }\n\n      // note: drag.pointer is set in onTouch to get the initial touch location\n      var node = this.selectionHandler.getNodeAt(this.drag.pointer);\n      this.drag.dragging = true;\n      this.drag.selection = [];\n      this.drag.translation = _Object$assign({}, this.body.view.translation); // copy the object\n      this.drag.nodeId = undefined;\n      if (event.srcEvent.shiftKey) {\n        this.body.selectionBox.show = true;\n        var pointer = this.getPointer(event.center);\n        this.body.selectionBox.position.start = {\n          x: this.canvas._XconvertDOMtoCanvas(pointer.x),\n          y: this.canvas._YconvertDOMtoCanvas(pointer.y)\n        };\n        this.body.selectionBox.position.end = {\n          x: this.canvas._XconvertDOMtoCanvas(pointer.x),\n          y: this.canvas._YconvertDOMtoCanvas(pointer.y)\n        };\n      } else if (node !== undefined && this.options.dragNodes === true) {\n        this.drag.nodeId = node.id;\n        // select the clicked node if not yet selected\n        if (node.isSelected() === false) {\n          this.selectionHandler.setSelection({\n            nodes: [node.id]\n          });\n        }\n\n        // after select to contain the node\n        this.selectionHandler.generateClickEvent(\"dragStart\", event, this.drag.pointer);\n\n        // create an array with the selected nodes and their original location and status\n        var _iterator = _createForOfIteratorHelper$4(this.selectionHandler.getSelectedNodes()),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _node = _step.value;\n            var s = {\n              id: _node.id,\n              node: _node,\n              // store original x, y, xFixed and yFixed, make the node temporarily Fixed\n              x: _node.x,\n              y: _node.y,\n              xFixed: _node.options.fixed.x,\n              yFixed: _node.options.fixed.y\n            };\n            _node.options.fixed.x = true;\n            _node.options.fixed.y = true;\n            this.drag.selection.push(s);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } else {\n        // fallback if no node is selected and thus the view is dragged.\n        this.selectionHandler.generateClickEvent(\"dragStart\", event, this.drag.pointer, undefined, true);\n      }\n    }\n\n    /**\n     * handle drag event\n     *\n     * @param {Event} event\n     * @private\n     */\n  }, {\n    key: \"onDrag\",\n    value: function onDrag(event) {\n      var _this2 = this;\n      if (this.drag.pinched === true) {\n        return;\n      }\n\n      // remove the focus on node if it is focussed on by the focusOnNode\n      this.body.emitter.emit(\"unlockNode\");\n      var pointer = this.getPointer(event.center);\n      var selection = this.drag.selection;\n      if (selection && selection.length && this.options.dragNodes === true) {\n        this.selectionHandler.generateClickEvent(\"dragging\", event, pointer);\n\n        // calculate delta's and new location\n        var deltaX = pointer.x - this.drag.pointer.x;\n        var deltaY = pointer.y - this.drag.pointer.y;\n\n        // update position of all selected nodes\n        _forEachInstanceProperty(selection).call(selection, function (selection) {\n          var node = selection.node;\n          // only move the node if it was not fixed initially\n          if (selection.xFixed === false) {\n            node.x = _this2.canvas._XconvertDOMtoCanvas(_this2.canvas._XconvertCanvasToDOM(selection.x) + deltaX);\n          }\n          // only move the node if it was not fixed initially\n          if (selection.yFixed === false) {\n            node.y = _this2.canvas._YconvertDOMtoCanvas(_this2.canvas._YconvertCanvasToDOM(selection.y) + deltaY);\n          }\n        });\n\n        // start the simulation of the physics\n        this.body.emitter.emit(\"startSimulation\");\n      } else {\n        // create selection box\n        if (event.srcEvent.shiftKey) {\n          this.selectionHandler.generateClickEvent(\"dragging\", event, pointer, undefined, true);\n\n          // if the drag was not started properly because the click started outside the network div, start it now.\n          if (this.drag.pointer === undefined) {\n            this.onDragStart(event);\n            return;\n          }\n          this.body.selectionBox.position.end = {\n            x: this.canvas._XconvertDOMtoCanvas(pointer.x),\n            y: this.canvas._YconvertDOMtoCanvas(pointer.y)\n          };\n          this.body.emitter.emit(\"_requestRedraw\");\n        }\n\n        // move the network\n        if (this.options.dragView === true && !event.srcEvent.shiftKey) {\n          this.selectionHandler.generateClickEvent(\"dragging\", event, pointer, undefined, true);\n\n          // if the drag was not started properly because the click started outside the network div, start it now.\n          if (this.drag.pointer === undefined) {\n            this.onDragStart(event);\n            return;\n          }\n          var diffX = pointer.x - this.drag.pointer.x;\n          var diffY = pointer.y - this.drag.pointer.y;\n          this.body.view.translation = {\n            x: this.drag.translation.x + diffX,\n            y: this.drag.translation.y + diffY\n          };\n          this.body.emitter.emit(\"_requestRedraw\");\n        }\n      }\n    }\n\n    /**\n     * handle drag start event\n     *\n     * @param {Event} event\n     * @private\n     */\n  }, {\n    key: \"onDragEnd\",\n    value: function onDragEnd(event) {\n      var _this3 = this;\n      this.drag.dragging = false;\n      if (this.body.selectionBox.show) {\n        var _context14;\n        this.body.selectionBox.show = false;\n        var selectionBoxPosition = this.body.selectionBox.position;\n        var selectionBoxPositionMinMax = {\n          minX: Math.min(selectionBoxPosition.start.x, selectionBoxPosition.end.x),\n          minY: Math.min(selectionBoxPosition.start.y, selectionBoxPosition.end.y),\n          maxX: Math.max(selectionBoxPosition.start.x, selectionBoxPosition.end.x),\n          maxY: Math.max(selectionBoxPosition.start.y, selectionBoxPosition.end.y)\n        };\n        var toBeSelectedNodes = _filterInstanceProperty(_context14 = this.body.nodeIndices).call(_context14, function (nodeId) {\n          var node = _this3.body.nodes[nodeId];\n          return node.x >= selectionBoxPositionMinMax.minX && node.x <= selectionBoxPositionMinMax.maxX && node.y >= selectionBoxPositionMinMax.minY && node.y <= selectionBoxPositionMinMax.maxY;\n        });\n        _forEachInstanceProperty(toBeSelectedNodes).call(toBeSelectedNodes, function (nodeId) {\n          return _this3.selectionHandler.selectObject(_this3.body.nodes[nodeId]);\n        });\n        var pointer = this.getPointer(event.center);\n        this.selectionHandler.commitAndEmit(pointer, event);\n        this.selectionHandler.generateClickEvent(\"dragEnd\", event, this.getPointer(event.center), undefined, true);\n        this.body.emitter.emit(\"_requestRedraw\");\n      } else {\n        var selection = this.drag.selection;\n        if (selection && selection.length) {\n          _forEachInstanceProperty(selection).call(selection, function (s) {\n            // restore original xFixed and yFixed\n            s.node.options.fixed.x = s.xFixed;\n            s.node.options.fixed.y = s.yFixed;\n          });\n          this.selectionHandler.generateClickEvent(\"dragEnd\", event, this.getPointer(event.center));\n          this.body.emitter.emit(\"startSimulation\");\n        } else {\n          this.selectionHandler.generateClickEvent(\"dragEnd\", event, this.getPointer(event.center), undefined, true);\n          this.body.emitter.emit(\"_requestRedraw\");\n        }\n      }\n    }\n\n    /**\n     * Handle pinch event\n     *\n     * @param {Event}  event   The event\n     * @private\n     */\n  }, {\n    key: \"onPinch\",\n    value: function onPinch(event) {\n      var pointer = this.getPointer(event.center);\n      this.drag.pinched = true;\n      if (this.pinch[\"scale\"] === undefined) {\n        this.pinch.scale = 1;\n      }\n\n      // TODO: enabled moving while pinching?\n      var scale = this.pinch.scale * event.scale;\n      this.zoom(scale, pointer);\n    }\n\n    /**\n     * Zoom the network in or out\n     *\n     * @param {number} scale a number around 1, and between 0.01 and 10\n     * @param {{x: number, y: number}} pointer    Position on screen\n     * @private\n     */\n  }, {\n    key: \"zoom\",\n    value: function zoom(scale, pointer) {\n      if (this.options.zoomView === true) {\n        var scaleOld = this.body.view.scale;\n        if (scale < 0.00001) {\n          scale = 0.00001;\n        }\n        if (scale > 10) {\n          scale = 10;\n        }\n        var preScaleDragPointer = undefined;\n        if (this.drag !== undefined) {\n          if (this.drag.dragging === true) {\n            preScaleDragPointer = this.canvas.DOMtoCanvas(this.drag.pointer);\n          }\n        }\n        // + this.canvas.frame.canvas.clientHeight / 2\n        var translation = this.body.view.translation;\n        var scaleFrac = scale / scaleOld;\n        var tx = (1 - scaleFrac) * pointer.x + translation.x * scaleFrac;\n        var ty = (1 - scaleFrac) * pointer.y + translation.y * scaleFrac;\n        this.body.view.scale = scale;\n        this.body.view.translation = {\n          x: tx,\n          y: ty\n        };\n        if (preScaleDragPointer != undefined) {\n          var postScaleDragPointer = this.canvas.canvasToDOM(preScaleDragPointer);\n          this.drag.pointer.x = postScaleDragPointer.x;\n          this.drag.pointer.y = postScaleDragPointer.y;\n        }\n        this.body.emitter.emit(\"_requestRedraw\");\n        if (scaleOld < scale) {\n          this.body.emitter.emit(\"zoom\", {\n            direction: \"+\",\n            scale: this.body.view.scale,\n            pointer: pointer\n          });\n        } else {\n          this.body.emitter.emit(\"zoom\", {\n            direction: \"-\",\n            scale: this.body.view.scale,\n            pointer: pointer\n          });\n        }\n      }\n    }\n\n    /**\n     * Event handler for mouse wheel event, used to zoom the timeline\n     * See http://adomas.org/javascript-mouse-wheel/\n     *     https://github.com/EightMedia/hammer.js/issues/256\n     *\n     * @param {MouseEvent}  event\n     * @private\n     */\n  }, {\n    key: \"onMouseWheel\",\n    value: function onMouseWheel(event) {\n      if (this.options.zoomView === true) {\n        // If delta is nonzero, handle it.\n        // Basically, delta is now positive if wheel was scrolled up,\n        // and negative, if wheel was scrolled down.\n        if (event.deltaY !== 0) {\n          // calculate the new scale\n          var scale = this.body.view.scale;\n          scale *= 1 + (event.deltaY < 0 ? 1 : -1) * (this.options.zoomSpeed * 0.1);\n\n          // calculate the pointer location\n          var pointer = this.getPointer({\n            x: event.clientX,\n            y: event.clientY\n          });\n\n          // apply the new scale\n          this.zoom(scale, pointer);\n        }\n\n        // Prevent default actions caused by mouse wheel.\n        event.preventDefault();\n      }\n    }\n\n    /**\n     * Mouse move handler for checking whether the title moves over a node with a title.\n     *\n     * @param  {Event} event\n     * @private\n     */\n  }, {\n    key: \"onMouseMove\",\n    value: function onMouseMove(event) {\n      var _this4 = this;\n      var pointer = this.getPointer({\n        x: event.clientX,\n        y: event.clientY\n      });\n      var popupVisible = false;\n\n      // check if the previously selected node is still selected\n      if (this.popup !== undefined) {\n        if (this.popup.hidden === false) {\n          this._checkHidePopup(pointer);\n        }\n\n        // if the popup was not hidden above\n        if (this.popup.hidden === false) {\n          popupVisible = true;\n          this.popup.setPosition(pointer.x + 3, pointer.y - 5);\n          this.popup.show();\n        }\n      }\n\n      // if we bind the keyboard to the div, we have to highlight it to use it. This highlights it on mouse over.\n      if (this.options.keyboard.autoFocus && this.options.keyboard.bindToWindow === false && this.options.keyboard.enabled === true) {\n        this.canvas.frame.focus();\n      }\n\n      // start a timeout that will check if the mouse is positioned above an element\n      if (popupVisible === false) {\n        if (this.popupTimer !== undefined) {\n          clearInterval(this.popupTimer); // stop any running calculationTimer\n          this.popupTimer = undefined;\n        }\n        if (!this.drag.dragging) {\n          this.popupTimer = _setTimeout(function () {\n            return _this4._checkShowPopup(pointer);\n          }, this.options.tooltipDelay);\n        }\n      }\n\n      // adding hover highlights\n      if (this.options.hover === true) {\n        this.selectionHandler.hoverObject(event, pointer);\n      }\n    }\n\n    /**\n     * Check if there is an element on the given position in the network\n     * (a node or edge). If so, and if this element has a title,\n     * show a popup window with its title.\n     *\n     * @param {{x:number, y:number}} pointer\n     * @private\n     */\n  }, {\n    key: \"_checkShowPopup\",\n    value: function _checkShowPopup(pointer) {\n      var x = this.canvas._XconvertDOMtoCanvas(pointer.x);\n      var y = this.canvas._YconvertDOMtoCanvas(pointer.y);\n      var pointerObj = {\n        left: x,\n        top: y,\n        right: x,\n        bottom: y\n      };\n      var previousPopupObjId = this.popupObj === undefined ? undefined : this.popupObj.id;\n      var nodeUnderCursor = false;\n      var popupType = \"node\";\n\n      // check if a node is under the cursor.\n      if (this.popupObj === undefined) {\n        // search the nodes for overlap, select the top one in case of multiple nodes\n        var nodeIndices = this.body.nodeIndices;\n        var nodes = this.body.nodes;\n        var node;\n        var overlappingNodes = [];\n        for (var i = 0; i < nodeIndices.length; i++) {\n          node = nodes[nodeIndices[i]];\n          if (node.isOverlappingWith(pointerObj) === true) {\n            nodeUnderCursor = true;\n            if (node.getTitle() !== undefined) {\n              overlappingNodes.push(nodeIndices[i]);\n            }\n          }\n        }\n        if (overlappingNodes.length > 0) {\n          // if there are overlapping nodes, select the last one, this is the one which is drawn on top of the others\n          this.popupObj = nodes[overlappingNodes[overlappingNodes.length - 1]];\n          // if you hover over a node, the title of the edge is not supposed to be shown.\n          nodeUnderCursor = true;\n        }\n      }\n      if (this.popupObj === undefined && nodeUnderCursor === false) {\n        // search the edges for overlap\n        var edgeIndices = this.body.edgeIndices;\n        var edges = this.body.edges;\n        var edge;\n        var overlappingEdges = [];\n        for (var _i = 0; _i < edgeIndices.length; _i++) {\n          edge = edges[edgeIndices[_i]];\n          if (edge.isOverlappingWith(pointerObj) === true) {\n            if (edge.connected === true && edge.getTitle() !== undefined) {\n              overlappingEdges.push(edgeIndices[_i]);\n            }\n          }\n        }\n        if (overlappingEdges.length > 0) {\n          this.popupObj = edges[overlappingEdges[overlappingEdges.length - 1]];\n          popupType = \"edge\";\n        }\n      }\n      if (this.popupObj !== undefined) {\n        // show popup message window\n        if (this.popupObj.id !== previousPopupObjId) {\n          if (this.popup === undefined) {\n            this.popup = new Popup(this.canvas.frame);\n          }\n          this.popup.popupTargetType = popupType;\n          this.popup.popupTargetId = this.popupObj.id;\n\n          // adjust a small offset such that the mouse cursor is located in the\n          // bottom left location of the popup, and you can easily move over the\n          // popup area\n          this.popup.setPosition(pointer.x + 3, pointer.y - 5);\n          this.popup.setText(this.popupObj.getTitle());\n          this.popup.show();\n          this.body.emitter.emit(\"showPopup\", this.popupObj.id);\n        }\n      } else {\n        if (this.popup !== undefined) {\n          this.popup.hide();\n          this.body.emitter.emit(\"hidePopup\");\n        }\n      }\n    }\n\n    /**\n     * Check if the popup must be hidden, which is the case when the mouse is no\n     * longer hovering on the object\n     *\n     * @param {{x:number, y:number}} pointer\n     * @private\n     */\n  }, {\n    key: \"_checkHidePopup\",\n    value: function _checkHidePopup(pointer) {\n      var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);\n      var stillOnObj = false;\n      if (this.popup.popupTargetType === \"node\") {\n        if (this.body.nodes[this.popup.popupTargetId] !== undefined) {\n          stillOnObj = this.body.nodes[this.popup.popupTargetId].isOverlappingWith(pointerObj);\n\n          // if the mouse is still one the node, we have to check if it is not also on one that is drawn on top of it.\n          // we initially only check stillOnObj because this is much faster.\n          if (stillOnObj === true) {\n            var overNode = this.selectionHandler.getNodeAt(pointer);\n            stillOnObj = overNode === undefined ? false : overNode.id === this.popup.popupTargetId;\n          }\n        }\n      } else {\n        if (this.selectionHandler.getNodeAt(pointer) === undefined) {\n          if (this.body.edges[this.popup.popupTargetId] !== undefined) {\n            stillOnObj = this.body.edges[this.popup.popupTargetId].isOverlappingWith(pointerObj);\n          }\n        }\n      }\n      if (stillOnObj === false) {\n        this.popupObj = undefined;\n        this.popup.hide();\n        this.body.emitter.emit(\"hidePopup\");\n      }\n    }\n  }]);\n  return InteractionHandler;\n}();\n\nvar collection$1 = collection$3;\nvar collectionStrong = collectionStrong$2;\n\n// `Set` constructor\n// https://tc39.es/ecma262/#sec-set-objects\ncollection$1('Set', function (init) {\n  return function Set() { return init(this, arguments.length ? arguments[0] : undefined); };\n}, collectionStrong);\n\nvar path$1 = path$w;\n\nvar set$2 = path$1.Set;\n\nvar parent$4 = set$2;\n\n\nvar set$1 = parent$4;\n\nvar set = set$1;\n\nvar _Set = /*@__PURE__*/getDefaultExportFromCjs(set);\n\nvar uncurryThis$2 = functionUncurryThis;\nvar defineBuiltIns$1 = defineBuiltIns$3;\nvar getWeakData = internalMetadataExports.getWeakData;\nvar anInstance = anInstance$3;\nvar anObject = anObject$d;\nvar isNullOrUndefined = isNullOrUndefined$6;\nvar isObject$1 = isObject$j;\nvar iterate = iterate$3;\nvar ArrayIterationModule = arrayIteration;\nvar hasOwn = hasOwnProperty_1;\nvar InternalStateModule = internalState;\n\nvar setInternalState = InternalStateModule.set;\nvar internalStateGetterFor = InternalStateModule.getterFor;\nvar find = ArrayIterationModule.find;\nvar findIndex = ArrayIterationModule.findIndex;\nvar splice = uncurryThis$2([].splice);\nvar id = 0;\n\n// fallback for uncaught frozen keys\nvar uncaughtFrozenStore = function (state) {\n  return state.frozen || (state.frozen = new UncaughtFrozenStore());\n};\n\nvar UncaughtFrozenStore = function () {\n  this.entries = [];\n};\n\nvar findUncaughtFrozen = function (store, key) {\n  return find(store.entries, function (it) {\n    return it[0] === key;\n  });\n};\n\nUncaughtFrozenStore.prototype = {\n  get: function (key) {\n    var entry = findUncaughtFrozen(this, key);\n    if (entry) return entry[1];\n  },\n  has: function (key) {\n    return !!findUncaughtFrozen(this, key);\n  },\n  set: function (key, value) {\n    var entry = findUncaughtFrozen(this, key);\n    if (entry) entry[1] = value;\n    else this.entries.push([key, value]);\n  },\n  'delete': function (key) {\n    var index = findIndex(this.entries, function (it) {\n      return it[0] === key;\n    });\n    if (~index) splice(this.entries, index, 1);\n    return !!~index;\n  }\n};\n\nvar collectionWeak$1 = {\n  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {\n    var Constructor = wrapper(function (that, iterable) {\n      anInstance(that, Prototype);\n      setInternalState(that, {\n        type: CONSTRUCTOR_NAME,\n        id: id++,\n        frozen: undefined\n      });\n      if (!isNullOrUndefined(iterable)) iterate(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });\n    });\n\n    var Prototype = Constructor.prototype;\n\n    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);\n\n    var define = function (that, key, value) {\n      var state = getInternalState(that);\n      var data = getWeakData(anObject(key), true);\n      if (data === true) uncaughtFrozenStore(state).set(key, value);\n      else data[state.id] = value;\n      return that;\n    };\n\n    defineBuiltIns$1(Prototype, {\n      // `{ WeakMap, WeakSet }.prototype.delete(key)` methods\n      // https://tc39.es/ecma262/#sec-weakmap.prototype.delete\n      // https://tc39.es/ecma262/#sec-weakset.prototype.delete\n      'delete': function (key) {\n        var state = getInternalState(this);\n        if (!isObject$1(key)) return false;\n        var data = getWeakData(key);\n        if (data === true) return uncaughtFrozenStore(state)['delete'](key);\n        return data && hasOwn(data, state.id) && delete data[state.id];\n      },\n      // `{ WeakMap, WeakSet }.prototype.has(key)` methods\n      // https://tc39.es/ecma262/#sec-weakmap.prototype.has\n      // https://tc39.es/ecma262/#sec-weakset.prototype.has\n      has: function has(key) {\n        var state = getInternalState(this);\n        if (!isObject$1(key)) return false;\n        var data = getWeakData(key);\n        if (data === true) return uncaughtFrozenStore(state).has(key);\n        return data && hasOwn(data, state.id);\n      }\n    });\n\n    defineBuiltIns$1(Prototype, IS_MAP ? {\n      // `WeakMap.prototype.get(key)` method\n      // https://tc39.es/ecma262/#sec-weakmap.prototype.get\n      get: function get(key) {\n        var state = getInternalState(this);\n        if (isObject$1(key)) {\n          var data = getWeakData(key);\n          if (data === true) return uncaughtFrozenStore(state).get(key);\n          return data ? data[state.id] : undefined;\n        }\n      },\n      // `WeakMap.prototype.set(key, value)` method\n      // https://tc39.es/ecma262/#sec-weakmap.prototype.set\n      set: function set(key, value) {\n        return define(this, key, value);\n      }\n    } : {\n      // `WeakSet.prototype.add(value)` method\n      // https://tc39.es/ecma262/#sec-weakset.prototype.add\n      add: function add(value) {\n        return define(this, value, true);\n      }\n    });\n\n    return Constructor;\n  }\n};\n\nvar FREEZING = freezing;\nvar global$2 = global$n;\nvar uncurryThis$1 = functionUncurryThis;\nvar defineBuiltIns = defineBuiltIns$3;\nvar InternalMetadataModule = internalMetadataExports;\nvar collection = collection$3;\nvar collectionWeak = collectionWeak$1;\nvar isObject = isObject$j;\nvar enforceInternalState = internalState.enforce;\nvar fails$1 = fails$w;\nvar NATIVE_WEAK_MAP = weakMapBasicDetection;\n\nvar $Object = Object;\n// eslint-disable-next-line es/no-array-isarray -- safe\nvar isArray = Array.isArray;\n// eslint-disable-next-line es/no-object-isextensible -- safe\nvar isExtensible = $Object.isExtensible;\n// eslint-disable-next-line es/no-object-isfrozen -- safe\nvar isFrozen = $Object.isFrozen;\n// eslint-disable-next-line es/no-object-issealed -- safe\nvar isSealed = $Object.isSealed;\n// eslint-disable-next-line es/no-object-freeze -- safe\nvar freeze = $Object.freeze;\n// eslint-disable-next-line es/no-object-seal -- safe\nvar seal = $Object.seal;\n\nvar FROZEN = {};\nvar SEALED = {};\nvar IS_IE11 = !global$2.ActiveXObject && 'ActiveXObject' in global$2;\nvar InternalWeakMap;\n\nvar wrapper = function (init) {\n  return function WeakMap() {\n    return init(this, arguments.length ? arguments[0] : undefined);\n  };\n};\n\n// `WeakMap` constructor\n// https://tc39.es/ecma262/#sec-weakmap-constructor\nvar $WeakMap = collection('WeakMap', wrapper, collectionWeak);\nvar WeakMapPrototype = $WeakMap.prototype;\nvar nativeSet = uncurryThis$1(WeakMapPrototype.set);\n\n// Chakra Edge bug: adding frozen arrays to WeakMap unfreeze them\nvar hasMSEdgeFreezingBug = function () {\n  return FREEZING && fails$1(function () {\n    var frozenArray = freeze([]);\n    nativeSet(new $WeakMap(), frozenArray, 1);\n    return !isFrozen(frozenArray);\n  });\n};\n\n// IE11 WeakMap frozen keys fix\n// We can't use feature detection because it crash some old IE builds\n// https://github.com/zloirock/core-js/issues/485\nif (NATIVE_WEAK_MAP) if (IS_IE11) {\n  InternalWeakMap = collectionWeak.getConstructor(wrapper, 'WeakMap', true);\n  InternalMetadataModule.enable();\n  var nativeDelete = uncurryThis$1(WeakMapPrototype['delete']);\n  var nativeHas = uncurryThis$1(WeakMapPrototype.has);\n  var nativeGet = uncurryThis$1(WeakMapPrototype.get);\n  defineBuiltIns(WeakMapPrototype, {\n    'delete': function (key) {\n      if (isObject(key) && !isExtensible(key)) {\n        var state = enforceInternalState(this);\n        if (!state.frozen) state.frozen = new InternalWeakMap();\n        return nativeDelete(this, key) || state.frozen['delete'](key);\n      } return nativeDelete(this, key);\n    },\n    has: function has(key) {\n      if (isObject(key) && !isExtensible(key)) {\n        var state = enforceInternalState(this);\n        if (!state.frozen) state.frozen = new InternalWeakMap();\n        return nativeHas(this, key) || state.frozen.has(key);\n      } return nativeHas(this, key);\n    },\n    get: function get(key) {\n      if (isObject(key) && !isExtensible(key)) {\n        var state = enforceInternalState(this);\n        if (!state.frozen) state.frozen = new InternalWeakMap();\n        return nativeHas(this, key) ? nativeGet(this, key) : state.frozen.get(key);\n      } return nativeGet(this, key);\n    },\n    set: function set(key, value) {\n      if (isObject(key) && !isExtensible(key)) {\n        var state = enforceInternalState(this);\n        if (!state.frozen) state.frozen = new InternalWeakMap();\n        nativeHas(this, key) ? nativeSet(this, key, value) : state.frozen.set(key, value);\n      } else nativeSet(this, key, value);\n      return this;\n    }\n  });\n// Chakra Edge frozen keys fix\n} else if (hasMSEdgeFreezingBug()) {\n  defineBuiltIns(WeakMapPrototype, {\n    set: function set(key, value) {\n      var arrayIntegrityLevel;\n      if (isArray(key)) {\n        if (isFrozen(key)) arrayIntegrityLevel = FROZEN;\n        else if (isSealed(key)) arrayIntegrityLevel = SEALED;\n      }\n      nativeSet(this, key, value);\n      if (arrayIntegrityLevel === FROZEN) freeze(key);\n      if (arrayIntegrityLevel === SEALED) seal(key);\n      return this;\n    }\n  });\n}\n\nvar path = path$w;\n\nvar weakMap$2 = path.WeakMap;\n\nvar parent$3 = weakMap$2;\n\n\nvar weakMap$1 = parent$3;\n\nvar weakMap = weakMap$1;\n\nvar _WeakMap = /*@__PURE__*/getDefaultExportFromCjs(weakMap);\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nfunction _createForOfIteratorHelper$3(o, allowArrayLike) { var it = typeof _Symbol !== \"undefined\" && _getIteratorMethod(o) || o[\"@@iterator\"]; if (!it) { if (_Array$isArray(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray$3(o, minLen) { var _context2; if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray$3(o, minLen); var n = _sliceInstanceProperty(_context2 = Object.prototype.toString.call(o)).call(_context2, 8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return _Array$from$1(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen); }\nfunction _arrayLikeToArray$3(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar _SingleTypeSelectionAccumulator_previousSelection, _SingleTypeSelectionAccumulator_selection, _SelectionAccumulator_nodes, _SelectionAccumulator_edges, _SelectionAccumulator_commitHandler;\n/**\r\n * @param prev\r\n * @param next\r\n */\nfunction diffSets(prev, next) {\n  var diff = new _Set();\n  var _iterator = _createForOfIteratorHelper$3(next),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var item = _step.value;\n      if (!prev.has(item)) {\n        diff.add(item);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return diff;\n}\nvar SingleTypeSelectionAccumulator = /*#__PURE__*/function () {\n  function SingleTypeSelectionAccumulator() {\n    _classCallCheck(this, SingleTypeSelectionAccumulator);\n    _SingleTypeSelectionAccumulator_previousSelection.set(this, new _Set());\n    _SingleTypeSelectionAccumulator_selection.set(this, new _Set());\n  }\n  _createClass(SingleTypeSelectionAccumulator, [{\n    key: \"size\",\n    get: function get() {\n      return __classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, \"f\").size;\n    }\n  }, {\n    key: \"add\",\n    value: function add() {\n      for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n        items[_key] = arguments[_key];\n      }\n      for (var _i = 0, _items = items; _i < _items.length; _i++) {\n        var item = _items[_i];\n        __classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, \"f\").add(item);\n      }\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        items[_key2] = arguments[_key2];\n      }\n      for (var _i2 = 0, _items2 = items; _i2 < _items2.length; _i2++) {\n        var item = _items2[_i2];\n        __classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, \"f\").delete(item);\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      __classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, \"f\").clear();\n    }\n  }, {\n    key: \"getSelection\",\n    value: function getSelection() {\n      return _toConsumableArray(__classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, \"f\"));\n    }\n  }, {\n    key: \"getChanges\",\n    value: function getChanges() {\n      return {\n        added: _toConsumableArray(diffSets(__classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_previousSelection, \"f\"), __classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, \"f\"))),\n        deleted: _toConsumableArray(diffSets(__classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, \"f\"), __classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_previousSelection, \"f\"))),\n        previous: _toConsumableArray(new _Set(__classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_previousSelection, \"f\"))),\n        current: _toConsumableArray(new _Set(__classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, \"f\")))\n      };\n    }\n  }, {\n    key: \"commit\",\n    value: function commit() {\n      var changes = this.getChanges();\n      __classPrivateFieldSet(this, _SingleTypeSelectionAccumulator_previousSelection, __classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, \"f\"), \"f\");\n      __classPrivateFieldSet(this, _SingleTypeSelectionAccumulator_selection, new _Set(__classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_previousSelection, \"f\")), \"f\");\n      var _iterator2 = _createForOfIteratorHelper$3(changes.added),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n          item.select();\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      var _iterator3 = _createForOfIteratorHelper$3(changes.deleted),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _item = _step3.value;\n          _item.unselect();\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return changes;\n    }\n  }]);\n  return SingleTypeSelectionAccumulator;\n}();\n_SingleTypeSelectionAccumulator_previousSelection = new _WeakMap(), _SingleTypeSelectionAccumulator_selection = new _WeakMap();\nvar SelectionAccumulator = /*#__PURE__*/function () {\n  function SelectionAccumulator() {\n    var commitHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};\n    _classCallCheck(this, SelectionAccumulator);\n    _SelectionAccumulator_nodes.set(this, new SingleTypeSelectionAccumulator());\n    _SelectionAccumulator_edges.set(this, new SingleTypeSelectionAccumulator());\n    _SelectionAccumulator_commitHandler.set(this, void 0);\n    __classPrivateFieldSet(this, _SelectionAccumulator_commitHandler, commitHandler, \"f\");\n  }\n  _createClass(SelectionAccumulator, [{\n    key: \"sizeNodes\",\n    get: function get() {\n      return __classPrivateFieldGet(this, _SelectionAccumulator_nodes, \"f\").size;\n    }\n  }, {\n    key: \"sizeEdges\",\n    get: function get() {\n      return __classPrivateFieldGet(this, _SelectionAccumulator_edges, \"f\").size;\n    }\n  }, {\n    key: \"getNodes\",\n    value: function getNodes() {\n      return __classPrivateFieldGet(this, _SelectionAccumulator_nodes, \"f\").getSelection();\n    }\n  }, {\n    key: \"getEdges\",\n    value: function getEdges() {\n      return __classPrivateFieldGet(this, _SelectionAccumulator_edges, \"f\").getSelection();\n    }\n  }, {\n    key: \"addNodes\",\n    value: function addNodes() {\n      var _classPrivateFieldGe;\n      (_classPrivateFieldGe = __classPrivateFieldGet(this, _SelectionAccumulator_nodes, \"f\")).add.apply(_classPrivateFieldGe, arguments);\n    }\n  }, {\n    key: \"addEdges\",\n    value: function addEdges() {\n      var _classPrivateFieldGe2;\n      (_classPrivateFieldGe2 = __classPrivateFieldGet(this, _SelectionAccumulator_edges, \"f\")).add.apply(_classPrivateFieldGe2, arguments);\n    }\n  }, {\n    key: \"deleteNodes\",\n    value: function deleteNodes(node) {\n      __classPrivateFieldGet(this, _SelectionAccumulator_nodes, \"f\").delete(node);\n    }\n  }, {\n    key: \"deleteEdges\",\n    value: function deleteEdges(edge) {\n      __classPrivateFieldGet(this, _SelectionAccumulator_edges, \"f\").delete(edge);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      __classPrivateFieldGet(this, _SelectionAccumulator_nodes, \"f\").clear();\n      __classPrivateFieldGet(this, _SelectionAccumulator_edges, \"f\").clear();\n    }\n  }, {\n    key: \"commit\",\n    value: function commit() {\n      var _classPrivateFieldGe3, _context;\n      var summary = {\n        nodes: __classPrivateFieldGet(this, _SelectionAccumulator_nodes, \"f\").commit(),\n        edges: __classPrivateFieldGet(this, _SelectionAccumulator_edges, \"f\").commit()\n      };\n      for (var _len3 = arguments.length, rest = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        rest[_key3] = arguments[_key3];\n      }\n      (_classPrivateFieldGe3 = __classPrivateFieldGet(this, _SelectionAccumulator_commitHandler, \"f\")).call.apply(_classPrivateFieldGe3, _concatInstanceProperty(_context = [this, summary]).call(_context, rest));\n      return summary;\n    }\n  }]);\n  return SelectionAccumulator;\n}();\n_SelectionAccumulator_nodes = new _WeakMap(), _SelectionAccumulator_edges = new _WeakMap(), _SelectionAccumulator_commitHandler = new _WeakMap();\n\nfunction _createForOfIteratorHelper$2(o, allowArrayLike) { var it = typeof _Symbol !== \"undefined\" && _getIteratorMethod(o) || o[\"@@iterator\"]; if (!it) { if (_Array$isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray$2(o, minLen) { var _context3; if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray$2(o, minLen); var n = _sliceInstanceProperty(_context3 = Object.prototype.toString.call(o)).call(_context3, 8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return _Array$from$1(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen); }\nfunction _arrayLikeToArray$2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n/**\n * The handler for selections\n */\nvar SelectionHandler = /*#__PURE__*/function () {\n  /**\n   * @param {object} body\n   * @param {Canvas} canvas\n   */\n  function SelectionHandler(body, canvas) {\n    var _this = this;\n    _classCallCheck(this, SelectionHandler);\n    this.body = body;\n    this.canvas = canvas;\n    // TODO: Consider firing an event on any change to the selection, not\n    // only those caused by clicks and taps. It would be easy to implement\n    // now and (at least to me) it seems like something that could be\n    // quite useful.\n    this._selectionAccumulator = new SelectionAccumulator();\n    this.hoverObj = {\n      nodes: {},\n      edges: {}\n    };\n    this.options = {};\n    this.defaultOptions = {\n      multiselect: false,\n      selectable: true,\n      selectConnectedEdges: true,\n      hoverConnectedEdges: true\n    };\n    _Object$assign(this.options, this.defaultOptions);\n    this.body.emitter.on(\"_dataChanged\", function () {\n      _this.updateSelection();\n    });\n  }\n\n  /**\n   *\n   * @param {object} [options]\n   */\n  _createClass(SelectionHandler, [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      if (options !== undefined) {\n        var fields = [\"multiselect\", \"hoverConnectedEdges\", \"selectable\", \"selectConnectedEdges\"];\n        selectiveDeepExtend(fields, this.options, options);\n      }\n    }\n\n    /**\n     * handles the selection part of the tap;\n     *\n     * @param {{x: number, y: number}} pointer\n     * @returns {boolean}\n     */\n  }, {\n    key: \"selectOnPoint\",\n    value: function selectOnPoint(pointer) {\n      var selected = false;\n      if (this.options.selectable === true) {\n        var obj = this.getNodeAt(pointer) || this.getEdgeAt(pointer);\n\n        // unselect after getting the objects in order to restore width and height.\n        this.unselectAll();\n        if (obj !== undefined) {\n          selected = this.selectObject(obj);\n        }\n        this.body.emitter.emit(\"_requestRedraw\");\n      }\n      return selected;\n    }\n\n    /**\n     *\n     * @param {{x: number, y: number}} pointer\n     * @returns {boolean}\n     */\n  }, {\n    key: \"selectAdditionalOnPoint\",\n    value: function selectAdditionalOnPoint(pointer) {\n      var selectionChanged = false;\n      if (this.options.selectable === true) {\n        var obj = this.getNodeAt(pointer) || this.getEdgeAt(pointer);\n        if (obj !== undefined) {\n          selectionChanged = true;\n          if (obj.isSelected() === true) {\n            this.deselectObject(obj);\n          } else {\n            this.selectObject(obj);\n          }\n          this.body.emitter.emit(\"_requestRedraw\");\n        }\n      }\n      return selectionChanged;\n    }\n\n    /**\n     * Create an object containing the standard fields for an event.\n     *\n     * @param {Event} event\n     * @param {{x: number, y: number}} pointer Object with the x and y screen coordinates of the mouse\n     * @returns {{}}\n     * @private\n     */\n  }, {\n    key: \"_initBaseEvent\",\n    value: function _initBaseEvent(event, pointer) {\n      var properties = {};\n      properties[\"pointer\"] = {\n        DOM: {\n          x: pointer.x,\n          y: pointer.y\n        },\n        canvas: this.canvas.DOMtoCanvas(pointer)\n      };\n      properties[\"event\"] = event;\n      return properties;\n    }\n\n    /**\n     * Generate an event which the user can catch.\n     *\n     * This adds some extra data to the event with respect to cursor position and\n     * selected nodes and edges.\n     *\n     * @param {string} eventType                          Name of event to send\n     * @param {Event}  event\n     * @param {{x: number, y: number}} pointer            Object with the x and y screen coordinates of the mouse\n     * @param {object | undefined} oldSelection             If present, selection state before event occured\n     * @param {boolean|undefined} [emptySelection=false]  Indicate if selection data should be passed\n     */\n  }, {\n    key: \"generateClickEvent\",\n    value: function generateClickEvent(eventType, event, pointer, oldSelection) {\n      var emptySelection = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var properties = this._initBaseEvent(event, pointer);\n      if (emptySelection === true) {\n        properties.nodes = [];\n        properties.edges = [];\n      } else {\n        var tmp = this.getSelection();\n        properties.nodes = tmp.nodes;\n        properties.edges = tmp.edges;\n      }\n      if (oldSelection !== undefined) {\n        properties[\"previousSelection\"] = oldSelection;\n      }\n      if (eventType == \"click\") {\n        // For the time being, restrict this functionality to\n        // just the click event.\n        properties.items = this.getClickedItems(pointer);\n      }\n      if (event.controlEdge !== undefined) {\n        properties.controlEdge = event.controlEdge;\n      }\n      this.body.emitter.emit(eventType, properties);\n    }\n\n    /**\n     *\n     * @param {object} obj\n     * @param {boolean} [highlightEdges=this.options.selectConnectedEdges]\n     * @returns {boolean}\n     */\n  }, {\n    key: \"selectObject\",\n    value: function selectObject(obj) {\n      var highlightEdges = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.options.selectConnectedEdges;\n      if (obj !== undefined) {\n        if (obj instanceof Node) {\n          if (highlightEdges === true) {\n            var _this$_selectionAccum;\n            (_this$_selectionAccum = this._selectionAccumulator).addEdges.apply(_this$_selectionAccum, _toConsumableArray(obj.edges));\n          }\n          this._selectionAccumulator.addNodes(obj);\n        } else {\n          this._selectionAccumulator.addEdges(obj);\n        }\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     *\n     * @param {object} obj\n     */\n  }, {\n    key: \"deselectObject\",\n    value: function deselectObject(obj) {\n      if (obj.isSelected() === true) {\n        obj.selected = false;\n        this._removeFromSelection(obj);\n      }\n    }\n\n    /**\n     * retrieve all nodes overlapping with given object\n     *\n     * @param {object} object  An object with parameters left, top, right, bottom\n     * @returns {number[]}   An array with id's of the overlapping nodes\n     * @private\n     */\n  }, {\n    key: \"_getAllNodesOverlappingWith\",\n    value: function _getAllNodesOverlappingWith(object) {\n      var overlappingNodes = [];\n      var nodes = this.body.nodes;\n      for (var i = 0; i < this.body.nodeIndices.length; i++) {\n        var nodeId = this.body.nodeIndices[i];\n        if (nodes[nodeId].isOverlappingWith(object)) {\n          overlappingNodes.push(nodeId);\n        }\n      }\n      return overlappingNodes;\n    }\n\n    /**\n     * Return a position object in canvasspace from a single point in screenspace\n     *\n     * @param {{x: number, y: number}} pointer\n     * @returns {{left: number, top: number, right: number, bottom: number}}\n     * @private\n     */\n  }, {\n    key: \"_pointerToPositionObject\",\n    value: function _pointerToPositionObject(pointer) {\n      var canvasPos = this.canvas.DOMtoCanvas(pointer);\n      return {\n        left: canvasPos.x - 1,\n        top: canvasPos.y + 1,\n        right: canvasPos.x + 1,\n        bottom: canvasPos.y - 1\n      };\n    }\n\n    /**\n     * Get the top node at the passed point (like a click)\n     *\n     * @param {{x: number, y: number}} pointer\n     * @param {boolean} [returnNode=true]\n     * @returns {Node | undefined} node\n     */\n  }, {\n    key: \"getNodeAt\",\n    value: function getNodeAt(pointer) {\n      var returnNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      // we first check if this is an navigation controls element\n      var positionObject = this._pointerToPositionObject(pointer);\n      var overlappingNodes = this._getAllNodesOverlappingWith(positionObject);\n      // if there are overlapping nodes, select the last one, this is the\n      // one which is drawn on top of the others\n      if (overlappingNodes.length > 0) {\n        if (returnNode === true) {\n          return this.body.nodes[overlappingNodes[overlappingNodes.length - 1]];\n        } else {\n          return overlappingNodes[overlappingNodes.length - 1];\n        }\n      } else {\n        return undefined;\n      }\n    }\n\n    /**\n     * retrieve all edges overlapping with given object, selector is around center\n     *\n     * @param {object} object  An object with parameters left, top, right, bottom\n     * @param {number[]} overlappingEdges An array with id's of the overlapping nodes\n     * @private\n     */\n  }, {\n    key: \"_getEdgesOverlappingWith\",\n    value: function _getEdgesOverlappingWith(object, overlappingEdges) {\n      var edges = this.body.edges;\n      for (var i = 0; i < this.body.edgeIndices.length; i++) {\n        var edgeId = this.body.edgeIndices[i];\n        if (edges[edgeId].isOverlappingWith(object)) {\n          overlappingEdges.push(edgeId);\n        }\n      }\n    }\n\n    /**\n     * retrieve all nodes overlapping with given object\n     *\n     * @param {object} object  An object with parameters left, top, right, bottom\n     * @returns {number[]}   An array with id's of the overlapping nodes\n     * @private\n     */\n  }, {\n    key: \"_getAllEdgesOverlappingWith\",\n    value: function _getAllEdgesOverlappingWith(object) {\n      var overlappingEdges = [];\n      this._getEdgesOverlappingWith(object, overlappingEdges);\n      return overlappingEdges;\n    }\n\n    /**\n     * Get the edges nearest to the passed point (like a click)\n     *\n     * @param {{x: number, y: number}} pointer\n     * @param {boolean} [returnEdge=true]\n     * @returns {Edge | undefined} node\n     */\n  }, {\n    key: \"getEdgeAt\",\n    value: function getEdgeAt(pointer) {\n      var returnEdge = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      // Iterate over edges, pick closest within 10\n      var canvasPos = this.canvas.DOMtoCanvas(pointer);\n      var mindist = 10;\n      var overlappingEdge = null;\n      var edges = this.body.edges;\n      for (var i = 0; i < this.body.edgeIndices.length; i++) {\n        var edgeId = this.body.edgeIndices[i];\n        var edge = edges[edgeId];\n        if (edge.connected) {\n          var xFrom = edge.from.x;\n          var yFrom = edge.from.y;\n          var xTo = edge.to.x;\n          var yTo = edge.to.y;\n          var dist = edge.edgeType.getDistanceToEdge(xFrom, yFrom, xTo, yTo, canvasPos.x, canvasPos.y);\n          if (dist < mindist) {\n            overlappingEdge = edgeId;\n            mindist = dist;\n          }\n        }\n      }\n      if (overlappingEdge !== null) {\n        if (returnEdge === true) {\n          return this.body.edges[overlappingEdge];\n        } else {\n          return overlappingEdge;\n        }\n      } else {\n        return undefined;\n      }\n    }\n\n    /**\n     * Add object to the selection array.\n     *\n     * @param {object} obj\n     * @private\n     */\n  }, {\n    key: \"_addToHover\",\n    value: function _addToHover(obj) {\n      if (obj instanceof Node) {\n        this.hoverObj.nodes[obj.id] = obj;\n      } else {\n        this.hoverObj.edges[obj.id] = obj;\n      }\n    }\n\n    /**\n     * Remove a single option from selection.\n     *\n     * @param {object} obj\n     * @private\n     */\n  }, {\n    key: \"_removeFromSelection\",\n    value: function _removeFromSelection(obj) {\n      if (obj instanceof Node) {\n        var _this$_selectionAccum2;\n        this._selectionAccumulator.deleteNodes(obj);\n        (_this$_selectionAccum2 = this._selectionAccumulator).deleteEdges.apply(_this$_selectionAccum2, _toConsumableArray(obj.edges));\n      } else {\n        this._selectionAccumulator.deleteEdges(obj);\n      }\n    }\n\n    /**\n     * Unselect all nodes and edges.\n     */\n  }, {\n    key: \"unselectAll\",\n    value: function unselectAll() {\n      this._selectionAccumulator.clear();\n    }\n\n    /**\n     * return the number of selected nodes\n     *\n     * @returns {number}\n     */\n  }, {\n    key: \"getSelectedNodeCount\",\n    value: function getSelectedNodeCount() {\n      return this._selectionAccumulator.sizeNodes;\n    }\n\n    /**\n     * return the number of selected edges\n     *\n     * @returns {number}\n     */\n  }, {\n    key: \"getSelectedEdgeCount\",\n    value: function getSelectedEdgeCount() {\n      return this._selectionAccumulator.sizeEdges;\n    }\n\n    /**\n     * select the edges connected to the node that is being selected\n     *\n     * @param {Node} node\n     * @private\n     */\n  }, {\n    key: \"_hoverConnectedEdges\",\n    value: function _hoverConnectedEdges(node) {\n      for (var i = 0; i < node.edges.length; i++) {\n        var edge = node.edges[i];\n        edge.hover = true;\n        this._addToHover(edge);\n      }\n    }\n\n    /**\n     * Remove the highlight from a node or edge, in response to mouse movement\n     *\n     * @param {Event}  event\n     * @param {{x: number, y: number}} pointer object with the x and y screen coordinates of the mouse\n     * @param {Node|vis.Edge} object\n     * @private\n     */\n  }, {\n    key: \"emitBlurEvent\",\n    value: function emitBlurEvent(event, pointer, object) {\n      var properties = this._initBaseEvent(event, pointer);\n      if (object.hover === true) {\n        object.hover = false;\n        if (object instanceof Node) {\n          properties.node = object.id;\n          this.body.emitter.emit(\"blurNode\", properties);\n        } else {\n          properties.edge = object.id;\n          this.body.emitter.emit(\"blurEdge\", properties);\n        }\n      }\n    }\n\n    /**\n     * Create the highlight for a node or edge, in response to mouse movement\n     *\n     * @param {Event}  event\n     * @param {{x: number, y: number}} pointer object with the x and y screen coordinates of the mouse\n     * @param {Node|vis.Edge} object\n     * @returns {boolean} hoverChanged\n     * @private\n     */\n  }, {\n    key: \"emitHoverEvent\",\n    value: function emitHoverEvent(event, pointer, object) {\n      var properties = this._initBaseEvent(event, pointer);\n      var hoverChanged = false;\n      if (object.hover === false) {\n        object.hover = true;\n        this._addToHover(object);\n        hoverChanged = true;\n        if (object instanceof Node) {\n          properties.node = object.id;\n          this.body.emitter.emit(\"hoverNode\", properties);\n        } else {\n          properties.edge = object.id;\n          this.body.emitter.emit(\"hoverEdge\", properties);\n        }\n      }\n      return hoverChanged;\n    }\n\n    /**\n     * Perform actions in response to a mouse movement.\n     *\n     * @param {Event}  event\n     * @param {{x: number, y: number}} pointer | object with the x and y screen coordinates of the mouse\n     */\n  }, {\n    key: \"hoverObject\",\n    value: function hoverObject(event, pointer) {\n      var object = this.getNodeAt(pointer);\n      if (object === undefined) {\n        object = this.getEdgeAt(pointer);\n      }\n      var hoverChanged = false;\n      // remove all node hover highlights\n      for (var nodeId in this.hoverObj.nodes) {\n        if (Object.prototype.hasOwnProperty.call(this.hoverObj.nodes, nodeId)) {\n          if (object === undefined || object instanceof Node && object.id != nodeId || object instanceof Edge) {\n            this.emitBlurEvent(event, pointer, this.hoverObj.nodes[nodeId]);\n            delete this.hoverObj.nodes[nodeId];\n            hoverChanged = true;\n          }\n        }\n      }\n\n      // removing all edge hover highlights\n      for (var edgeId in this.hoverObj.edges) {\n        if (Object.prototype.hasOwnProperty.call(this.hoverObj.edges, edgeId)) {\n          // if the hover has been changed here it means that the node has been hovered over or off\n          // we then do not use the emitBlurEvent method here.\n          if (hoverChanged === true) {\n            this.hoverObj.edges[edgeId].hover = false;\n            delete this.hoverObj.edges[edgeId];\n          }\n          // if the blur remains the same and the object is undefined (mouse off) or another\n          // edge has been hovered, or another node has been hovered we blur the edge.\n          else if (object === undefined || object instanceof Edge && object.id != edgeId || object instanceof Node && !object.hover) {\n            this.emitBlurEvent(event, pointer, this.hoverObj.edges[edgeId]);\n            delete this.hoverObj.edges[edgeId];\n            hoverChanged = true;\n          }\n        }\n      }\n      if (object !== undefined) {\n        var hoveredEdgesCount = _Object$keys(this.hoverObj.edges).length;\n        var hoveredNodesCount = _Object$keys(this.hoverObj.nodes).length;\n        var newOnlyHoveredEdge = object instanceof Edge && hoveredEdgesCount === 0 && hoveredNodesCount === 0;\n        var newOnlyHoveredNode = object instanceof Node && hoveredEdgesCount === 0 && hoveredNodesCount === 0;\n        if (hoverChanged || newOnlyHoveredEdge || newOnlyHoveredNode) {\n          hoverChanged = this.emitHoverEvent(event, pointer, object);\n        }\n        if (object instanceof Node && this.options.hoverConnectedEdges === true) {\n          this._hoverConnectedEdges(object);\n        }\n      }\n      if (hoverChanged === true) {\n        this.body.emitter.emit(\"_requestRedraw\");\n      }\n    }\n\n    /**\n     * Commit the selection changes but don't emit any events.\n     */\n  }, {\n    key: \"commitWithoutEmitting\",\n    value: function commitWithoutEmitting() {\n      this._selectionAccumulator.commit();\n    }\n\n    /**\n     * Select and deselect nodes depending current selection change.\n     *\n     * For changing nodes, select/deselect events are fired.\n     *\n     * NOTE: For a given edge, if one connecting node is deselected and with the\n     * same click the other node is selected, no events for the edge will fire. It\n     * was selected and it will remain selected.\n     *\n     * @param {{x: number, y: number}} pointer - The x and y coordinates of the\n     * click, tap, dragend… that triggered this.\n     * @param {UIEvent} event - The event that triggered this.\n     */\n  }, {\n    key: \"commitAndEmit\",\n    value: function commitAndEmit(pointer, event) {\n      var selected = false;\n      var selectionChanges = this._selectionAccumulator.commit();\n      var previousSelection = {\n        nodes: selectionChanges.nodes.previous,\n        edges: selectionChanges.edges.previous\n      };\n      if (selectionChanges.edges.deleted.length > 0) {\n        this.generateClickEvent(\"deselectEdge\", event, pointer, previousSelection);\n        selected = true;\n      }\n      if (selectionChanges.nodes.deleted.length > 0) {\n        this.generateClickEvent(\"deselectNode\", event, pointer, previousSelection);\n        selected = true;\n      }\n      if (selectionChanges.nodes.added.length > 0) {\n        this.generateClickEvent(\"selectNode\", event, pointer);\n        selected = true;\n      }\n      if (selectionChanges.edges.added.length > 0) {\n        this.generateClickEvent(\"selectEdge\", event, pointer);\n        selected = true;\n      }\n\n      // fire the select event if anything has been selected or deselected\n      if (selected === true) {\n        // select or unselect\n        this.generateClickEvent(\"select\", event, pointer);\n      }\n    }\n\n    /**\n     * Retrieve the currently selected node and edge ids.\n     *\n     * @returns {{nodes: Array.<string>, edges: Array.<string>}} Arrays with the\n     * ids of the selected nodes and edges.\n     */\n  }, {\n    key: \"getSelection\",\n    value: function getSelection() {\n      return {\n        nodes: this.getSelectedNodeIds(),\n        edges: this.getSelectedEdgeIds()\n      };\n    }\n\n    /**\n     * Retrieve the currently selected nodes.\n     *\n     * @returns {Array} An array with selected nodes.\n     */\n  }, {\n    key: \"getSelectedNodes\",\n    value: function getSelectedNodes() {\n      return this._selectionAccumulator.getNodes();\n    }\n\n    /**\n     * Retrieve the currently selected edges.\n     *\n     * @returns {Array} An array with selected edges.\n     */\n  }, {\n    key: \"getSelectedEdges\",\n    value: function getSelectedEdges() {\n      return this._selectionAccumulator.getEdges();\n    }\n\n    /**\n     * Retrieve the currently selected node ids.\n     *\n     * @returns {Array} An array with the ids of the selected nodes.\n     */\n  }, {\n    key: \"getSelectedNodeIds\",\n    value: function getSelectedNodeIds() {\n      var _context;\n      return _mapInstanceProperty(_context = this._selectionAccumulator.getNodes()).call(_context, function (node) {\n        return node.id;\n      });\n    }\n\n    /**\n     * Retrieve the currently selected edge ids.\n     *\n     * @returns {Array} An array with the ids of the selected edges.\n     */\n  }, {\n    key: \"getSelectedEdgeIds\",\n    value: function getSelectedEdgeIds() {\n      var _context2;\n      return _mapInstanceProperty(_context2 = this._selectionAccumulator.getEdges()).call(_context2, function (edge) {\n        return edge.id;\n      });\n    }\n\n    /**\n     * Updates the current selection\n     *\n     * @param {{nodes: Array.<string>, edges: Array.<string>}} selection\n     * @param {object} options                                 Options\n     */\n  }, {\n    key: \"setSelection\",\n    value: function setSelection(selection) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!selection || !selection.nodes && !selection.edges) {\n        throw new TypeError(\"Selection must be an object with nodes and/or edges properties\");\n      }\n\n      // first unselect any selected node, if option is true or undefined\n      if (options.unselectAll || options.unselectAll === undefined) {\n        this.unselectAll();\n      }\n      if (selection.nodes) {\n        var _iterator = _createForOfIteratorHelper$2(selection.nodes),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var id = _step.value;\n            var node = this.body.nodes[id];\n            if (!node) {\n              throw new RangeError('Node with id \"' + id + '\" not found');\n            }\n            // don't select edges with it\n            this.selectObject(node, options.highlightEdges);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      if (selection.edges) {\n        var _iterator2 = _createForOfIteratorHelper$2(selection.edges),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _id = _step2.value;\n            var edge = this.body.edges[_id];\n            if (!edge) {\n              throw new RangeError('Edge with id \"' + _id + '\" not found');\n            }\n            this.selectObject(edge);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n      this.body.emitter.emit(\"_requestRedraw\");\n      this._selectionAccumulator.commit();\n    }\n\n    /**\n     * select zero or more nodes with the option to highlight edges\n     *\n     * @param {number[] | string[]} selection     An array with the ids of the\n     *                                            selected nodes.\n     * @param {boolean} [highlightEdges]\n     */\n  }, {\n    key: \"selectNodes\",\n    value: function selectNodes(selection) {\n      var highlightEdges = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (!selection || selection.length === undefined) throw \"Selection must be an array with ids\";\n      this.setSelection({\n        nodes: selection\n      }, {\n        highlightEdges: highlightEdges\n      });\n    }\n\n    /**\n     * select zero or more edges\n     *\n     * @param {number[] | string[]} selection     An array with the ids of the\n     *                                            selected nodes.\n     */\n  }, {\n    key: \"selectEdges\",\n    value: function selectEdges(selection) {\n      if (!selection || selection.length === undefined) throw \"Selection must be an array with ids\";\n      this.setSelection({\n        edges: selection\n      });\n    }\n\n    /**\n     * Validate the selection: remove ids of nodes which no longer exist\n     *\n     * @private\n     */\n  }, {\n    key: \"updateSelection\",\n    value: function updateSelection() {\n      for (var node in this._selectionAccumulator.getNodes()) {\n        if (!Object.prototype.hasOwnProperty.call(this.body.nodes, node.id)) {\n          this._selectionAccumulator.deleteNodes(node);\n        }\n      }\n      for (var edge in this._selectionAccumulator.getEdges()) {\n        if (!Object.prototype.hasOwnProperty.call(this.body.edges, edge.id)) {\n          this._selectionAccumulator.deleteEdges(edge);\n        }\n      }\n    }\n\n    /**\n     * Determine all the visual elements clicked which are on the given point.\n     *\n     * All elements are returned; this includes nodes, edges and their labels.\n     * The order returned is from highest to lowest, i.e. element 0 of the return\n     * value is the topmost item clicked on.\n     *\n     * The return value consists of an array of the following possible elements:\n     *\n     * - `{nodeId:number}`             - node with given id clicked on\n     * - `{nodeId:number, labelId:0}`  - label of node with given id clicked on\n     * - `{edgeId:number}`             - edge with given id clicked on\n     * - `{edge:number, labelId:0}`    - label of edge with given id clicked on\n     *\n     * ## NOTES\n     *\n     * - Currently, there is only one label associated with a node or an edge,\n     *   but this is expected to change somewhere in the future.\n     * - Since there is no z-indexing yet, it is not really possible to set the nodes and\n     *   edges in the correct order. For the time being, nodes come first.\n     *\n     * @param {point} pointer  mouse position in screen coordinates\n     * @returns {Array.<nodeClickItem|nodeLabelClickItem|edgeClickItem|edgeLabelClickItem>}\n     * @private\n     */\n  }, {\n    key: \"getClickedItems\",\n    value: function getClickedItems(pointer) {\n      var point = this.canvas.DOMtoCanvas(pointer);\n      var items = [];\n\n      // Note reverse order; we want the topmost clicked items to be first in the array\n      // Also note that selected nodes are disregarded here; these normally display on top\n      var nodeIndices = this.body.nodeIndices;\n      var nodes = this.body.nodes;\n      for (var i = nodeIndices.length - 1; i >= 0; i--) {\n        var node = nodes[nodeIndices[i]];\n        var ret = node.getItemsOnPoint(point);\n        items.push.apply(items, ret); // Append the return value to the running list.\n      }\n\n      var edgeIndices = this.body.edgeIndices;\n      var edges = this.body.edges;\n      for (var _i = edgeIndices.length - 1; _i >= 0; _i--) {\n        var edge = edges[edgeIndices[_i]];\n        var _ret = edge.getItemsOnPoint(point);\n        items.push.apply(items, _ret); // Append the return value to the running list.\n      }\n\n      return items;\n    }\n  }]);\n  return SelectionHandler;\n}();\n\nvar arraySlice = arraySliceSimple;\n\nvar floor = Math.floor;\n\nvar mergeSort = function (array, comparefn) {\n  var length = array.length;\n  var middle = floor(length / 2);\n  return length < 8 ? insertionSort(array, comparefn) : merge(\n    array,\n    mergeSort(arraySlice(array, 0, middle), comparefn),\n    mergeSort(arraySlice(array, middle), comparefn),\n    comparefn\n  );\n};\n\nvar insertionSort = function (array, comparefn) {\n  var length = array.length;\n  var i = 1;\n  var element, j;\n\n  while (i < length) {\n    j = i;\n    element = array[i];\n    while (j && comparefn(array[j - 1], element) > 0) {\n      array[j] = array[--j];\n    }\n    if (j !== i++) array[j] = element;\n  } return array;\n};\n\nvar merge = function (array, left, right, comparefn) {\n  var llength = left.length;\n  var rlength = right.length;\n  var lindex = 0;\n  var rindex = 0;\n\n  while (lindex < llength || rindex < rlength) {\n    array[lindex + rindex] = (lindex < llength && rindex < rlength)\n      ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++]\n      : lindex < llength ? left[lindex++] : right[rindex++];\n  } return array;\n};\n\nvar arraySort = mergeSort;\n\nvar userAgent$1 = engineUserAgent;\n\nvar firefox = userAgent$1.match(/firefox\\/(\\d+)/i);\n\nvar engineFfVersion = !!firefox && +firefox[1];\n\nvar UA = engineUserAgent;\n\nvar engineIsIeOrEdge = /MSIE|Trident/.test(UA);\n\nvar userAgent = engineUserAgent;\n\nvar webkit = userAgent.match(/AppleWebKit\\/(\\d+)\\./);\n\nvar engineWebkitVersion = !!webkit && +webkit[1];\n\nvar $$2 = _export;\nvar uncurryThis = functionUncurryThis;\nvar aCallable$1 = aCallable$7;\nvar toObject$1 = toObject$e;\nvar lengthOfArrayLike$1 = lengthOfArrayLike$c;\nvar deletePropertyOrThrow = deletePropertyOrThrow$2;\nvar toString = toString$a;\nvar fails = fails$w;\nvar internalSort = arraySort;\nvar arrayMethodIsStrict$2 = arrayMethodIsStrict$6;\nvar FF = engineFfVersion;\nvar IE_OR_EDGE = engineIsIeOrEdge;\nvar V8 = engineV8Version;\nvar WEBKIT = engineWebkitVersion;\n\nvar test = [];\nvar nativeSort = uncurryThis(test.sort);\nvar push = uncurryThis(test.push);\n\n// IE8-\nvar FAILS_ON_UNDEFINED = fails(function () {\n  test.sort(undefined);\n});\n// V8 bug\nvar FAILS_ON_NULL = fails(function () {\n  test.sort(null);\n});\n// Old WebKit\nvar STRICT_METHOD$1 = arrayMethodIsStrict$2('sort');\n\nvar STABLE_SORT = !fails(function () {\n  // feature detection can be too slow, so check engines versions\n  if (V8) return V8 < 70;\n  if (FF && FF > 3) return;\n  if (IE_OR_EDGE) return true;\n  if (WEBKIT) return WEBKIT < 603;\n\n  var result = '';\n  var code, chr, value, index;\n\n  // generate an array with more 512 elements (Chakra and old V8 fails only in this case)\n  for (code = 65; code < 76; code++) {\n    chr = String.fromCharCode(code);\n\n    switch (code) {\n      case 66: case 69: case 70: case 72: value = 3; break;\n      case 68: case 71: value = 4; break;\n      default: value = 2;\n    }\n\n    for (index = 0; index < 47; index++) {\n      test.push({ k: chr + index, v: value });\n    }\n  }\n\n  test.sort(function (a, b) { return b.v - a.v; });\n\n  for (index = 0; index < test.length; index++) {\n    chr = test[index].k.charAt(0);\n    if (result.charAt(result.length - 1) !== chr) result += chr;\n  }\n\n  return result !== 'DGBEFHACIJK';\n});\n\nvar FORCED$1 = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD$1 || !STABLE_SORT;\n\nvar getSortCompare = function (comparefn) {\n  return function (x, y) {\n    if (y === undefined) return -1;\n    if (x === undefined) return 1;\n    if (comparefn !== undefined) return +comparefn(x, y) || 0;\n    return toString(x) > toString(y) ? 1 : -1;\n  };\n};\n\n// `Array.prototype.sort` method\n// https://tc39.es/ecma262/#sec-array.prototype.sort\n$$2({ target: 'Array', proto: true, forced: FORCED$1 }, {\n  sort: function sort(comparefn) {\n    if (comparefn !== undefined) aCallable$1(comparefn);\n\n    var array = toObject$1(this);\n\n    if (STABLE_SORT) return comparefn === undefined ? nativeSort(array) : nativeSort(array, comparefn);\n\n    var items = [];\n    var arrayLength = lengthOfArrayLike$1(array);\n    var itemsLength, index;\n\n    for (index = 0; index < arrayLength; index++) {\n      if (index in array) push(items, array[index]);\n    }\n\n    internalSort(items, getSortCompare(comparefn));\n\n    itemsLength = lengthOfArrayLike$1(items);\n    index = 0;\n\n    while (index < itemsLength) array[index] = items[index++];\n    while (index < arrayLength) deletePropertyOrThrow(array, index++);\n\n    return array;\n  }\n});\n\nvar entryVirtual$2 = entryVirtual$i;\n\nvar sort$3 = entryVirtual$2('Array').sort;\n\nvar isPrototypeOf$2 = objectIsPrototypeOf;\nvar method$2 = sort$3;\n\nvar ArrayPrototype$2 = Array.prototype;\n\nvar sort$2 = function (it) {\n  var own = it.sort;\n  return it === ArrayPrototype$2 || (isPrototypeOf$2(ArrayPrototype$2, it) && own === ArrayPrototype$2.sort) ? method$2 : own;\n};\n\nvar parent$2 = sort$2;\n\nvar sort$1 = parent$2;\n\nvar sort = sort$1;\n\nvar _sortInstanceProperty = /*@__PURE__*/getDefaultExportFromCjs(sort);\n\nvar aCallable = aCallable$7;\nvar toObject = toObject$e;\nvar IndexedObject = indexedObject;\nvar lengthOfArrayLike = lengthOfArrayLike$c;\n\nvar $TypeError = TypeError;\n\n// `Array.prototype.{ reduce, reduceRight }` methods implementation\nvar createMethod = function (IS_RIGHT) {\n  return function (that, callbackfn, argumentsLength, memo) {\n    aCallable(callbackfn);\n    var O = toObject(that);\n    var self = IndexedObject(O);\n    var length = lengthOfArrayLike(O);\n    var index = IS_RIGHT ? length - 1 : 0;\n    var i = IS_RIGHT ? -1 : 1;\n    if (argumentsLength < 2) while (true) {\n      if (index in self) {\n        memo = self[index];\n        index += i;\n        break;\n      }\n      index += i;\n      if (IS_RIGHT ? index < 0 : length <= index) {\n        throw new $TypeError('Reduce of empty array with no initial value');\n      }\n    }\n    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {\n      memo = callbackfn(memo, self[index], index, O);\n    }\n    return memo;\n  };\n};\n\nvar arrayReduce = {\n  // `Array.prototype.reduce` method\n  // https://tc39.es/ecma262/#sec-array.prototype.reduce\n  left: createMethod(false),\n  // `Array.prototype.reduceRight` method\n  // https://tc39.es/ecma262/#sec-array.prototype.reduceright\n  right: createMethod(true)\n};\n\nvar global$1 = global$n;\nvar classof = classofRaw$2;\n\nvar engineIsNode = classof(global$1.process) === 'process';\n\nvar $$1 = _export;\nvar $reduce = arrayReduce.left;\nvar arrayMethodIsStrict$1 = arrayMethodIsStrict$6;\nvar CHROME_VERSION = engineV8Version;\nvar IS_NODE = engineIsNode;\n\n// Chrome 80-82 has a critical bug\n// https://bugs.chromium.org/p/chromium/issues/detail?id=1049982\nvar CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;\nvar FORCED = CHROME_BUG || !arrayMethodIsStrict$1('reduce');\n\n// `Array.prototype.reduce` method\n// https://tc39.es/ecma262/#sec-array.prototype.reduce\n$$1({ target: 'Array', proto: true, forced: FORCED }, {\n  reduce: function reduce(callbackfn /* , initialValue */) {\n    var length = arguments.length;\n    return $reduce(this, callbackfn, length, length > 1 ? arguments[1] : undefined);\n  }\n});\n\nvar entryVirtual$1 = entryVirtual$i;\n\nvar reduce$3 = entryVirtual$1('Array').reduce;\n\nvar isPrototypeOf$1 = objectIsPrototypeOf;\nvar method$1 = reduce$3;\n\nvar ArrayPrototype$1 = Array.prototype;\n\nvar reduce$2 = function (it) {\n  var own = it.reduce;\n  return it === ArrayPrototype$1 || (isPrototypeOf$1(ArrayPrototype$1, it) && own === ArrayPrototype$1.reduce) ? method$1 : own;\n};\n\nvar parent$1 = reduce$2;\n\nvar reduce$1 = parent$1;\n\nvar reduce = reduce$1;\n\nvar _reduceInstanceProperty = /*@__PURE__*/getDefaultExportFromCjs(reduce);\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n/**\n * Helper classes for LayoutEngine.\n *\n * Strategy pattern for usage of direction methods for hierarchical layouts.\n */\n/**\n * Interface definition for direction strategy classes.\n *\n * This class describes the interface for the Strategy\n * pattern classes used to differentiate horizontal and vertical\n * direction of hierarchical results.\n *\n * For a given direction, one coordinate will be 'fixed', meaning that it is\n * determined by level.\n * The other coordinate is 'unfixed', meaning that the nodes on a given level\n * can still move along that coordinate. So:\n *\n * - `vertical` layout: `x` unfixed, `y` fixed per level\n * - `horizontal` layout: `x` fixed per level, `y` unfixed\n *\n * The local methods are stubs and should be regarded as abstract.\n * Derived classes **must** implement all the methods themselves.\n *\n * @private\n */\nvar DirectionInterface = /*#__PURE__*/function () {\n  function DirectionInterface() {\n    _classCallCheck(this, DirectionInterface);\n  }\n  _createClass(DirectionInterface, [{\n    key: \"abstract\",\n    value:\n    /**\n     * @ignore\n     */\n    function abstract() {\n      throw new Error(\"Can't instantiate abstract class!\");\n    }\n\n    /**\n     * This is a dummy call which is used to suppress the jsdoc errors of type:\n     *\n     *   \"'param' is assigned a value but never used\"\n     *\n     * @ignore\n     */\n  }, {\n    key: \"fake_use\",\n    value: function fake_use() {\n      // Do nothing special\n    }\n\n    /**\n     * Type to use to translate dynamic curves to, in the case of hierarchical layout.\n     * Dynamic curves do not work for these.\n     *\n     * The value should be perpendicular to the actual direction of the layout.\n     *\n     * @returns {string} Direction, either 'vertical' or 'horizontal'\n     */\n  }, {\n    key: \"curveType\",\n    value: function curveType() {\n      return this.abstract();\n    }\n\n    /**\n     * Return the value of the coordinate that is not fixed for this direction.\n     *\n     * @param {Node} node The node to read\n     * @returns {number} Value of the unfixed coordinate\n     */\n  }, {\n    key: \"getPosition\",\n    value: function getPosition(node) {\n      this.fake_use(node);\n      return this.abstract();\n    }\n\n    /**\n     * Set the value of the coordinate that is not fixed for this direction.\n     *\n     * @param {Node} node The node to adjust\n     * @param {number} position\n     * @param {number} [level] if specified, the hierarchy level that this node should be fixed to\n     */\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(node, position) {\n      var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n      this.fake_use(node, position, level);\n      this.abstract();\n    }\n\n    /**\n     * Get the width of a tree.\n     *\n     * A `tree` here is a subset of nodes within the network which are not connected to other nodes,\n     * only among themselves. In essence, it is a sub-network.\n     *\n     * @param {number} index The index number of a tree\n     * @returns {number} the width of a tree in the view coordinates\n     */\n  }, {\n    key: \"getTreeSize\",\n    value: function getTreeSize(index) {\n      this.fake_use(index);\n      return this.abstract();\n    }\n\n    /**\n     * Sort array of nodes on the unfixed coordinates.\n     *\n     * Note:** chrome has non-stable sorting implementation, which\n     * has a tendency to change the order of the array items,\n     * even if the custom sort function returns 0.\n     *\n     * For this reason, an external sort implementation is used,\n     * which has the added benefit of being faster than the standard\n     * platforms implementation. This has been verified on `node.js`,\n     * `firefox` and `chrome` (all linux).\n     *\n     * @param {Array.<Node>} nodeArray array of nodes to sort\n     */\n  }, {\n    key: \"sort\",\n    value: function sort(nodeArray) {\n      this.fake_use(nodeArray);\n      this.abstract();\n    }\n\n    /**\n     * Assign the fixed coordinate of the node to the given level\n     *\n     * @param {Node} node The node to adjust\n     * @param {number} level The level to fix to\n     */\n  }, {\n    key: \"fix\",\n    value: function fix(node, level) {\n      this.fake_use(node, level);\n      this.abstract();\n    }\n\n    /**\n     * Add an offset to the unfixed coordinate of the given node.\n     *\n     * @param {NodeId} nodeId Id of the node to adjust\n     * @param {number} diff Offset to add to the unfixed coordinate\n     */\n  }, {\n    key: \"shift\",\n    value: function shift(nodeId, diff) {\n      this.fake_use(nodeId, diff);\n      this.abstract();\n    }\n  }]);\n  return DirectionInterface;\n}();\n/**\n * Vertical Strategy\n *\n * Coordinate `y` is fixed on levels, coordinate `x` is unfixed.\n *\n * @augments DirectionInterface\n * @private\n */\nvar VerticalStrategy = /*#__PURE__*/function (_DirectionInterface) {\n  _inherits(VerticalStrategy, _DirectionInterface);\n  var _super = _createSuper(VerticalStrategy);\n  /**\n   * Constructor\n   *\n   * @param {object} layout reference to the parent LayoutEngine instance.\n   */\n  function VerticalStrategy(layout) {\n    var _this;\n    _classCallCheck(this, VerticalStrategy);\n    _this = _super.call(this);\n    _this.layout = layout;\n    return _this;\n  }\n\n  /** @inheritDoc */\n  _createClass(VerticalStrategy, [{\n    key: \"curveType\",\n    value: function curveType() {\n      return \"horizontal\";\n    }\n\n    /** @inheritDoc */\n  }, {\n    key: \"getPosition\",\n    value: function getPosition(node) {\n      return node.x;\n    }\n\n    /** @inheritDoc */\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(node, position) {\n      var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n      if (level !== undefined) {\n        this.layout.hierarchical.addToOrdering(node, level);\n      }\n      node.x = position;\n    }\n\n    /** @inheritDoc */\n  }, {\n    key: \"getTreeSize\",\n    value: function getTreeSize(index) {\n      var res = this.layout.hierarchical.getTreeSize(this.layout.body.nodes, index);\n      return {\n        min: res.min_x,\n        max: res.max_x\n      };\n    }\n\n    /** @inheritDoc */\n  }, {\n    key: \"sort\",\n    value: function sort(nodeArray) {\n      _sortInstanceProperty(nodeArray).call(nodeArray, function (a, b) {\n        return a.x - b.x;\n      });\n    }\n\n    /** @inheritDoc */\n  }, {\n    key: \"fix\",\n    value: function fix(node, level) {\n      node.y = this.layout.options.hierarchical.levelSeparation * level;\n      node.options.fixed.y = true;\n    }\n\n    /** @inheritDoc */\n  }, {\n    key: \"shift\",\n    value: function shift(nodeId, diff) {\n      this.layout.body.nodes[nodeId].x += diff;\n    }\n  }]);\n  return VerticalStrategy;\n}(DirectionInterface);\n/**\n * Horizontal Strategy\n *\n * Coordinate `x` is fixed on levels, coordinate `y` is unfixed.\n *\n * @augments DirectionInterface\n * @private\n */\nvar HorizontalStrategy = /*#__PURE__*/function (_DirectionInterface2) {\n  _inherits(HorizontalStrategy, _DirectionInterface2);\n  var _super2 = _createSuper(HorizontalStrategy);\n  /**\n   * Constructor\n   *\n   * @param {object} layout reference to the parent LayoutEngine instance.\n   */\n  function HorizontalStrategy(layout) {\n    var _this2;\n    _classCallCheck(this, HorizontalStrategy);\n    _this2 = _super2.call(this);\n    _this2.layout = layout;\n    return _this2;\n  }\n\n  /** @inheritDoc */\n  _createClass(HorizontalStrategy, [{\n    key: \"curveType\",\n    value: function curveType() {\n      return \"vertical\";\n    }\n\n    /** @inheritDoc */\n  }, {\n    key: \"getPosition\",\n    value: function getPosition(node) {\n      return node.y;\n    }\n\n    /** @inheritDoc */\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(node, position) {\n      var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n      if (level !== undefined) {\n        this.layout.hierarchical.addToOrdering(node, level);\n      }\n      node.y = position;\n    }\n\n    /** @inheritDoc */\n  }, {\n    key: \"getTreeSize\",\n    value: function getTreeSize(index) {\n      var res = this.layout.hierarchical.getTreeSize(this.layout.body.nodes, index);\n      return {\n        min: res.min_y,\n        max: res.max_y\n      };\n    }\n\n    /** @inheritDoc */\n  }, {\n    key: \"sort\",\n    value: function sort(nodeArray) {\n      _sortInstanceProperty(nodeArray).call(nodeArray, function (a, b) {\n        return a.y - b.y;\n      });\n    }\n\n    /** @inheritDoc */\n  }, {\n    key: \"fix\",\n    value: function fix(node, level) {\n      node.x = this.layout.options.hierarchical.levelSeparation * level;\n      node.options.fixed.x = true;\n    }\n\n    /** @inheritDoc */\n  }, {\n    key: \"shift\",\n    value: function shift(nodeId, diff) {\n      this.layout.body.nodes[nodeId].y += diff;\n    }\n  }]);\n  return HorizontalStrategy;\n}(DirectionInterface);\n\nvar $ = _export;\nvar $every = arrayIteration.every;\nvar arrayMethodIsStrict = arrayMethodIsStrict$6;\n\nvar STRICT_METHOD = arrayMethodIsStrict('every');\n\n// `Array.prototype.every` method\n// https://tc39.es/ecma262/#sec-array.prototype.every\n$({ target: 'Array', proto: true, forced: !STRICT_METHOD }, {\n  every: function every(callbackfn /* , thisArg */) {\n    return $every(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\nvar entryVirtual = entryVirtual$i;\n\nvar every$3 = entryVirtual('Array').every;\n\nvar isPrototypeOf = objectIsPrototypeOf;\nvar method = every$3;\n\nvar ArrayPrototype = Array.prototype;\n\nvar every$2 = function (it) {\n  var own = it.every;\n  return it === ArrayPrototype || (isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.every) ? method : own;\n};\n\nvar parent = every$2;\n\nvar every$1 = parent;\n\nvar every = every$1;\n\nvar _everyInstanceProperty = /*@__PURE__*/getDefaultExportFromCjs(every);\n\nfunction _createForOfIteratorHelper$1(o, allowArrayLike) { var it = typeof _Symbol !== \"undefined\" && _getIteratorMethod(o) || o[\"@@iterator\"]; if (!it) { if (_Array$isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray$1(o, minLen) { var _context9; if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray$1(o, minLen); var n = _sliceInstanceProperty(_context9 = Object.prototype.toString.call(o)).call(_context9, 8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return _Array$from$1(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }\nfunction _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n/**\r\n * Try to assign levels to nodes according to their positions in the cyclic “hierarchy”.\r\n *\r\n * @param nodes - Visible nodes of the graph.\r\n * @param levels - If present levels will be added to it, if not a new object will be created.\r\n * @returns Populated node levels.\r\n */\nfunction fillLevelsByDirectionCyclic(nodes, levels) {\n  var edges = new _Set();\n  _forEachInstanceProperty(nodes).call(nodes, function (node) {\n    var _context;\n    _forEachInstanceProperty(_context = node.edges).call(_context, function (edge) {\n      if (edge.connected) {\n        edges.add(edge);\n      }\n    });\n  });\n  _forEachInstanceProperty(edges).call(edges, function (edge) {\n    var fromId = edge.from.id;\n    var toId = edge.to.id;\n    if (levels[fromId] == null) {\n      levels[fromId] = 0;\n    }\n    if (levels[toId] == null || levels[fromId] >= levels[toId]) {\n      levels[toId] = levels[fromId] + 1;\n    }\n  });\n  return levels;\n}\n/**\r\n * Assign levels to nodes according to their positions in the hierarchy. Leaves will be lined up at the bottom and all other nodes as close to their children as possible.\r\n *\r\n * @param nodes - Visible nodes of the graph.\r\n * @returns Populated node levels.\r\n */\nfunction fillLevelsByDirectionLeaves(nodes) {\n  return fillLevelsByDirection(\n  // Pick only leaves (nodes without children).\n  function (node) {\n    var _context2, _context3;\n    return _everyInstanceProperty(_context2 = _filterInstanceProperty(_context3 = node.edges\n    // Take only visible nodes into account.\n    ).call(_context3, function (edge) {\n      return nodes.has(edge.toId);\n    })\n    // Check that all edges lead to this node (leaf).\n    ).call(_context2, function (edge) {\n      return edge.to === node;\n    });\n  },\n  // Use the lowest level.\n  function (newLevel, oldLevel) {\n    return oldLevel > newLevel;\n  },\n  // Go against the direction of the edges.\n  \"from\", nodes);\n}\n/**\r\n * Assign levels to nodes according to their positions in the hierarchy. Roots will be lined up at the top and all nodes as close to their parents as possible.\r\n *\r\n * @param nodes - Visible nodes of the graph.\r\n * @returns Populated node levels.\r\n */\nfunction fillLevelsByDirectionRoots(nodes) {\n  return fillLevelsByDirection(\n  // Pick only roots (nodes without parents).\n  function (node) {\n    var _context4, _context5;\n    return _everyInstanceProperty(_context4 = _filterInstanceProperty(_context5 = node.edges\n    // Take only visible nodes into account.\n    ).call(_context5, function (edge) {\n      return nodes.has(edge.toId);\n    })\n    // Check that all edges lead from this node (root).\n    ).call(_context4, function (edge) {\n      return edge.from === node;\n    });\n  },\n  // Use the highest level.\n  function (newLevel, oldLevel) {\n    return oldLevel < newLevel;\n  },\n  // Go in the direction of the edges.\n  \"to\", nodes);\n}\n/**\r\n * Assign levels to nodes according to their positions in the hierarchy.\r\n *\r\n * @param isEntryNode - Checks and return true if the graph should be traversed from this node.\r\n * @param shouldLevelBeReplaced - Checks and returns true if the level of given node should be updated to the new value.\r\n * @param direction - Wheter the graph should be traversed in the direction of the edges `\"to\"` or in the other way `\"from\"`.\r\n * @param nodes - Visible nodes of the graph.\r\n * @returns Populated node levels.\r\n */\nfunction fillLevelsByDirection(isEntryNode, shouldLevelBeReplaced, direction, nodes) {\n  var _context6;\n  var levels = _Object$create$1(null);\n  // If acyclic, the graph can be walked through with (most likely way) fewer\n  // steps than the number bellow. The exact value isn't too important as long\n  // as it's quick to compute (doesn't impact acyclic graphs too much), is\n  // higher than the number of steps actually needed (doesn't cut off before\n  // acyclic graph is walked through) and prevents infinite loops (cuts off for\n  // cyclic graphs).\n  var limit = _reduceInstanceProperty(_context6 = _toConsumableArray(_valuesInstanceProperty(nodes).call(nodes))).call(_context6, function (acc, node) {\n    return acc + 1 + node.edges.length;\n  }, 0);\n  var edgeIdProp = direction + \"Id\";\n  var newLevelDiff = direction === \"to\" ? 1 : -1;\n  var _iterator = _createForOfIteratorHelper$1(nodes),\n    _step;\n  try {\n    var _loop = function _loop() {\n        var _step$value = _slicedToArray(_step.value, 2),\n          entryNodeId = _step$value[0],\n          entryNode = _step$value[1];\n        if (\n        // Skip if the node is not visible.\n        !nodes.has(entryNodeId) ||\n        // Skip if the node is not an entry node.\n        !isEntryNode(entryNode)) {\n          return 0; // continue\n        }\n        // Line up all the entry nodes on level 0.\n        levels[entryNodeId] = 0;\n        var stack = [entryNode];\n        var done = 0;\n        var node;\n        var _loop2 = function _loop2() {\n            var _context7, _context8;\n            if (!nodes.has(entryNodeId)) {\n              // Skip if the node is not visible.\n              return 0; // continue\n            }\n            var newLevel = levels[node.id] + newLevelDiff;\n            _forEachInstanceProperty(_context7 = _filterInstanceProperty(_context8 = node.edges).call(_context8, function (edge) {\n              return (\n                // Ignore disconnected edges.\n                edge.connected &&\n                // Ignore circular edges.\n                edge.to !== edge.from &&\n                // Ignore edges leading to the node that's currently being processed.\n                edge[direction] !== node &&\n                // Ignore edges connecting to an invisible node.\n                nodes.has(edge.toId) &&\n                // Ignore edges connecting from an invisible node.\n                nodes.has(edge.fromId)\n              );\n            })).call(_context7, function (edge) {\n              var targetNodeId = edge[edgeIdProp];\n              var oldLevel = levels[targetNodeId];\n              if (oldLevel == null || shouldLevelBeReplaced(newLevel, oldLevel)) {\n                levels[targetNodeId] = newLevel;\n                stack.push(edge[direction]);\n              }\n            });\n            if (done > limit) {\n              // This would run forever on a cyclic graph.\n              return {\n                v: {\n                  v: fillLevelsByDirectionCyclic(nodes, levels)\n                }\n              };\n            } else {\n              ++done;\n            }\n          },\n          _ret2;\n        while (node = stack.pop()) {\n          _ret2 = _loop2();\n          if (_ret2 === 0) continue;\n          if (_ret2) return _ret2.v;\n        }\n      },\n      _ret;\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      _ret = _loop();\n      if (_ret === 0) continue;\n      if (_ret) return _ret.v;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return levels;\n}\n\n/**\n * There's a mix-up with terms in the code. Following are the formal definitions:\n *\n *   tree   - a strict hierarchical network, i.e. every node has at most one parent\n *   forest - a collection of trees. These distinct trees are thus not connected.\n *\n * So:\n * - in a network that is not a tree, there exist nodes with multiple parents.\n * - a network consisting of unconnected sub-networks, of which at least one\n *   is not a tree, is not a forest.\n *\n * In the code, the definitions are:\n *\n *   tree   - any disconnected sub-network, strict hierarchical or not.\n *   forest - a bunch of these sub-networks\n *\n * The difference between tree and not-tree is important in the code, notably within\n * to the block-shifting algorithm. The algorithm assumes formal trees and fails\n * for not-trees, often in a spectacular manner (search for 'exploding network' in the issues).\n *\n * In order to distinguish the definitions in the following code, the adjective 'formal' is\n * used. If 'formal' is absent, you must assume the non-formal definition.\n *\n * ----------------------------------------------------------------------------------\n * NOTES\n * =====\n *\n * A hierarchical layout is a different thing from a hierarchical network.\n * The layout is a way to arrange the nodes in the view; this can be done\n * on non-hierarchical networks as well. The converse is also possible.\n */\n\n/**\n * Container for derived data on current network, relating to hierarchy.\n *\n * @private\n */\nvar HierarchicalStatus = /*#__PURE__*/function () {\n  /**\n   * @ignore\n   */\n  function HierarchicalStatus() {\n    _classCallCheck(this, HierarchicalStatus);\n    this.childrenReference = {}; // child id's per node id\n    this.parentReference = {}; // parent id's per node id\n    this.trees = {}; // tree id per node id; i.e. to which tree does given node id belong\n\n    this.distributionOrdering = {}; // The nodes per level, in the display order\n    this.levels = {}; // hierarchy level per node id\n    this.distributionIndex = {}; // The position of the node in the level sorting order, per node id.\n\n    this.isTree = false; // True if current network is a formal tree\n    this.treeIndex = -1; // Highest tree id in current network.\n  }\n\n  /**\n   * Add the relation between given nodes to the current state.\n   *\n   * @param {Node.id} parentNodeId\n   * @param {Node.id} childNodeId\n   */\n  _createClass(HierarchicalStatus, [{\n    key: \"addRelation\",\n    value: function addRelation(parentNodeId, childNodeId) {\n      if (this.childrenReference[parentNodeId] === undefined) {\n        this.childrenReference[parentNodeId] = [];\n      }\n      this.childrenReference[parentNodeId].push(childNodeId);\n      if (this.parentReference[childNodeId] === undefined) {\n        this.parentReference[childNodeId] = [];\n      }\n      this.parentReference[childNodeId].push(parentNodeId);\n    }\n\n    /**\n     * Check if the current state is for a formal tree or formal forest.\n     *\n     * This is the case if every node has at most one parent.\n     *\n     * Pre: parentReference init'ed properly for current network\n     */\n  }, {\n    key: \"checkIfTree\",\n    value: function checkIfTree() {\n      for (var i in this.parentReference) {\n        if (this.parentReference[i].length > 1) {\n          this.isTree = false;\n          return;\n        }\n      }\n      this.isTree = true;\n    }\n\n    /**\n     * Return the number of separate trees in the current network.\n     *\n     * @returns {number}\n     */\n  }, {\n    key: \"numTrees\",\n    value: function numTrees() {\n      return this.treeIndex + 1; // This assumes the indexes are assigned consecitively\n    }\n\n    /**\n     * Assign a tree id to a node\n     *\n     * @param {Node} node\n     * @param {string|number} treeId\n     */\n  }, {\n    key: \"setTreeIndex\",\n    value: function setTreeIndex(node, treeId) {\n      if (treeId === undefined) return; // Don't bother\n\n      if (this.trees[node.id] === undefined) {\n        this.trees[node.id] = treeId;\n        this.treeIndex = Math.max(treeId, this.treeIndex);\n      }\n    }\n\n    /**\n     * Ensure level for given id is defined.\n     *\n     * Sets level to zero for given node id if not already present\n     *\n     * @param {Node.id} nodeId\n     */\n  }, {\n    key: \"ensureLevel\",\n    value: function ensureLevel(nodeId) {\n      if (this.levels[nodeId] === undefined) {\n        this.levels[nodeId] = 0;\n      }\n    }\n\n    /**\n     * get the maximum level of a branch.\n     *\n     * TODO: Never entered; find a test case to test this!\n     *\n     * @param {Node.id} nodeId\n     * @returns {number}\n     */\n  }, {\n    key: \"getMaxLevel\",\n    value: function getMaxLevel(nodeId) {\n      var _this = this;\n      var accumulator = {};\n      var _getMaxLevel = function _getMaxLevel(nodeId) {\n        if (accumulator[nodeId] !== undefined) {\n          return accumulator[nodeId];\n        }\n        var level = _this.levels[nodeId];\n        if (_this.childrenReference[nodeId]) {\n          var children = _this.childrenReference[nodeId];\n          if (children.length > 0) {\n            for (var i = 0; i < children.length; i++) {\n              level = Math.max(level, _getMaxLevel(children[i]));\n            }\n          }\n        }\n        accumulator[nodeId] = level;\n        return level;\n      };\n      return _getMaxLevel(nodeId);\n    }\n\n    /**\n     *\n     * @param {Node} nodeA\n     * @param {Node} nodeB\n     */\n  }, {\n    key: \"levelDownstream\",\n    value: function levelDownstream(nodeA, nodeB) {\n      if (this.levels[nodeB.id] === undefined) {\n        // set initial level\n        if (this.levels[nodeA.id] === undefined) {\n          this.levels[nodeA.id] = 0;\n        }\n        // set level\n        this.levels[nodeB.id] = this.levels[nodeA.id] + 1;\n      }\n    }\n\n    /**\n     * Small util method to set the minimum levels of the nodes to zero.\n     *\n     * @param {Array.<Node>} nodes\n     */\n  }, {\n    key: \"setMinLevelToZero\",\n    value: function setMinLevelToZero(nodes) {\n      var minLevel = 1e9;\n      // get the minimum level\n      for (var nodeId in nodes) {\n        if (Object.prototype.hasOwnProperty.call(nodes, nodeId)) {\n          if (this.levels[nodeId] !== undefined) {\n            minLevel = Math.min(this.levels[nodeId], minLevel);\n          }\n        }\n      }\n\n      // subtract the minimum from the set so we have a range starting from 0\n      for (var _nodeId in nodes) {\n        if (Object.prototype.hasOwnProperty.call(nodes, _nodeId)) {\n          if (this.levels[_nodeId] !== undefined) {\n            this.levels[_nodeId] -= minLevel;\n          }\n        }\n      }\n    }\n\n    /**\n     * Get the min and max xy-coordinates of a given tree\n     *\n     * @param {Array.<Node>} nodes\n     * @param {number} index\n     * @returns {{min_x: number, max_x: number, min_y: number, max_y: number}}\n     */\n  }, {\n    key: \"getTreeSize\",\n    value: function getTreeSize(nodes, index) {\n      var min_x = 1e9;\n      var max_x = -1e9;\n      var min_y = 1e9;\n      var max_y = -1e9;\n      for (var nodeId in this.trees) {\n        if (Object.prototype.hasOwnProperty.call(this.trees, nodeId)) {\n          if (this.trees[nodeId] === index) {\n            var node = nodes[nodeId];\n            min_x = Math.min(node.x, min_x);\n            max_x = Math.max(node.x, max_x);\n            min_y = Math.min(node.y, min_y);\n            max_y = Math.max(node.y, max_y);\n          }\n        }\n      }\n      return {\n        min_x: min_x,\n        max_x: max_x,\n        min_y: min_y,\n        max_y: max_y\n      };\n    }\n\n    /**\n     * Check if two nodes have the same parent(s)\n     *\n     * @param {Node} node1\n     * @param {Node} node2\n     * @returns {boolean} true if the two nodes have a same ancestor node, false otherwise\n     */\n  }, {\n    key: \"hasSameParent\",\n    value: function hasSameParent(node1, node2) {\n      var parents1 = this.parentReference[node1.id];\n      var parents2 = this.parentReference[node2.id];\n      if (parents1 === undefined || parents2 === undefined) {\n        return false;\n      }\n      for (var i = 0; i < parents1.length; i++) {\n        for (var j = 0; j < parents2.length; j++) {\n          if (parents1[i] == parents2[j]) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Check if two nodes are in the same tree.\n     *\n     * @param {Node} node1\n     * @param {Node} node2\n     * @returns {boolean} true if this is so, false otherwise\n     */\n  }, {\n    key: \"inSameSubNetwork\",\n    value: function inSameSubNetwork(node1, node2) {\n      return this.trees[node1.id] === this.trees[node2.id];\n    }\n\n    /**\n     * Get a list of the distinct levels in the current network\n     *\n     * @returns {Array}\n     */\n  }, {\n    key: \"getLevels\",\n    value: function getLevels() {\n      return _Object$keys(this.distributionOrdering);\n    }\n\n    /**\n     * Add a node to the ordering per level\n     *\n     * @param {Node} node\n     * @param {number} level\n     */\n  }, {\n    key: \"addToOrdering\",\n    value: function addToOrdering(node, level) {\n      if (this.distributionOrdering[level] === undefined) {\n        this.distributionOrdering[level] = [];\n      }\n      var isPresent = false;\n      var curLevel = this.distributionOrdering[level];\n      for (var n in curLevel) {\n        //if (curLevel[n].id === node.id) {\n        if (curLevel[n] === node) {\n          isPresent = true;\n          break;\n        }\n      }\n      if (!isPresent) {\n        this.distributionOrdering[level].push(node);\n        this.distributionIndex[node.id] = this.distributionOrdering[level].length - 1;\n      }\n    }\n  }]);\n  return HierarchicalStatus;\n}();\n/**\n * The Layout Engine\n */\nvar LayoutEngine = /*#__PURE__*/function () {\n  /**\n   * @param {object} body\n   */\n  function LayoutEngine(body) {\n    _classCallCheck(this, LayoutEngine);\n    this.body = body;\n\n    // Make sure there always is some RNG because the setOptions method won't\n    // set it unless there's a seed for it.\n    this._resetRNG(Math.random() + \":\" + _Date$now());\n    this.setPhysics = false;\n    this.options = {};\n    this.optionsBackup = {\n      physics: {}\n    };\n    this.defaultOptions = {\n      randomSeed: undefined,\n      improvedLayout: true,\n      clusterThreshold: 150,\n      hierarchical: {\n        enabled: false,\n        levelSeparation: 150,\n        nodeSpacing: 100,\n        treeSpacing: 200,\n        blockShifting: true,\n        edgeMinimization: true,\n        parentCentralization: true,\n        direction: \"UD\",\n        // UD, DU, LR, RL\n        sortMethod: \"hubsize\" // hubsize, directed\n      }\n    };\n\n    _Object$assign(this.options, this.defaultOptions);\n    this.bindEventListeners();\n  }\n\n  /**\n   * Binds event listeners\n   */\n  _createClass(LayoutEngine, [{\n    key: \"bindEventListeners\",\n    value: function bindEventListeners() {\n      var _this2 = this;\n      this.body.emitter.on(\"_dataChanged\", function () {\n        _this2.setupHierarchicalLayout();\n      });\n      this.body.emitter.on(\"_dataLoaded\", function () {\n        _this2.layoutNetwork();\n      });\n      this.body.emitter.on(\"_resetHierarchicalLayout\", function () {\n        _this2.setupHierarchicalLayout();\n      });\n      this.body.emitter.on(\"_adjustEdgesForHierarchicalLayout\", function () {\n        if (_this2.options.hierarchical.enabled !== true) {\n          return;\n        }\n        // get the type of static smooth curve in case it is required\n        var type = _this2.direction.curveType();\n\n        // force all edges into static smooth curves.\n        _this2.body.emitter.emit(\"_forceDisableDynamicCurves\", type, false);\n      });\n    }\n\n    /**\n     *\n     * @param {object} options\n     * @param {object} allOptions\n     * @returns {object}\n     */\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options, allOptions) {\n      if (options !== undefined) {\n        var hierarchical = this.options.hierarchical;\n        var prevHierarchicalState = hierarchical.enabled;\n        selectiveDeepExtend([\"randomSeed\", \"improvedLayout\", \"clusterThreshold\"], this.options, options);\n        mergeOptions(this.options, options, \"hierarchical\");\n        if (options.randomSeed !== undefined) {\n          this._resetRNG(options.randomSeed);\n        }\n        if (hierarchical.enabled === true) {\n          if (prevHierarchicalState === true) {\n            // refresh the overridden options for nodes and edges.\n            this.body.emitter.emit(\"refresh\", true);\n          }\n\n          // make sure the level separation is the right way up\n          if (hierarchical.direction === \"RL\" || hierarchical.direction === \"DU\") {\n            if (hierarchical.levelSeparation > 0) {\n              hierarchical.levelSeparation *= -1;\n            }\n          } else {\n            if (hierarchical.levelSeparation < 0) {\n              hierarchical.levelSeparation *= -1;\n            }\n          }\n          this.setDirectionStrategy();\n          this.body.emitter.emit(\"_resetHierarchicalLayout\");\n          // because the hierarchical system needs it's own physics and smooth curve settings,\n          // we adapt the other options if needed.\n          return this.adaptAllOptionsForHierarchicalLayout(allOptions);\n        } else {\n          if (prevHierarchicalState === true) {\n            // refresh the overridden options for nodes and edges.\n            this.body.emitter.emit(\"refresh\");\n            return deepExtend(allOptions, this.optionsBackup);\n          }\n        }\n      }\n      return allOptions;\n    }\n\n    /**\n     * Reset the random number generator with given seed.\n     *\n     * @param {any} seed - The seed that will be forwarded the the RNG.\n     */\n  }, {\n    key: \"_resetRNG\",\n    value: function _resetRNG(seed) {\n      this.initialRandomSeed = seed;\n      this._rng = Alea(this.initialRandomSeed);\n    }\n\n    /**\n     *\n     * @param {object} allOptions\n     * @returns {object}\n     */\n  }, {\n    key: \"adaptAllOptionsForHierarchicalLayout\",\n    value: function adaptAllOptionsForHierarchicalLayout(allOptions) {\n      if (this.options.hierarchical.enabled === true) {\n        var backupPhysics = this.optionsBackup.physics;\n\n        // set the physics\n        if (allOptions.physics === undefined || allOptions.physics === true) {\n          allOptions.physics = {\n            enabled: backupPhysics.enabled === undefined ? true : backupPhysics.enabled,\n            solver: \"hierarchicalRepulsion\"\n          };\n          backupPhysics.enabled = backupPhysics.enabled === undefined ? true : backupPhysics.enabled;\n          backupPhysics.solver = backupPhysics.solver || \"barnesHut\";\n        } else if (_typeof(allOptions.physics) === \"object\") {\n          backupPhysics.enabled = allOptions.physics.enabled === undefined ? true : allOptions.physics.enabled;\n          backupPhysics.solver = allOptions.physics.solver || \"barnesHut\";\n          allOptions.physics.solver = \"hierarchicalRepulsion\";\n        } else if (allOptions.physics !== false) {\n          backupPhysics.solver = \"barnesHut\";\n          allOptions.physics = {\n            solver: \"hierarchicalRepulsion\"\n          };\n        }\n\n        // get the type of static smooth curve in case it is required\n        var type = this.direction.curveType();\n\n        // disable smooth curves if nothing is defined. If smooth curves have been turned on,\n        // turn them into static smooth curves.\n        if (allOptions.edges === undefined) {\n          this.optionsBackup.edges = {\n            smooth: {\n              enabled: true,\n              type: \"dynamic\"\n            }\n          };\n          allOptions.edges = {\n            smooth: false\n          };\n        } else if (allOptions.edges.smooth === undefined) {\n          this.optionsBackup.edges = {\n            smooth: {\n              enabled: true,\n              type: \"dynamic\"\n            }\n          };\n          allOptions.edges.smooth = false;\n        } else {\n          if (typeof allOptions.edges.smooth === \"boolean\") {\n            this.optionsBackup.edges = {\n              smooth: allOptions.edges.smooth\n            };\n            allOptions.edges.smooth = {\n              enabled: allOptions.edges.smooth,\n              type: type\n            };\n          } else {\n            var smooth = allOptions.edges.smooth;\n\n            // allow custom types except for dynamic\n            if (smooth.type !== undefined && smooth.type !== \"dynamic\") {\n              type = smooth.type;\n            }\n\n            // TODO: this is options merging; see if the standard routines can be used here.\n            this.optionsBackup.edges = {\n              smooth: {\n                enabled: smooth.enabled === undefined ? true : smooth.enabled,\n                type: smooth.type === undefined ? \"dynamic\" : smooth.type,\n                roundness: smooth.roundness === undefined ? 0.5 : smooth.roundness,\n                forceDirection: smooth.forceDirection === undefined ? false : smooth.forceDirection\n              }\n            };\n\n            // NOTE: Copying an object to self; this is basically setting defaults for undefined variables\n            allOptions.edges.smooth = {\n              enabled: smooth.enabled === undefined ? true : smooth.enabled,\n              type: type,\n              roundness: smooth.roundness === undefined ? 0.5 : smooth.roundness,\n              forceDirection: smooth.forceDirection === undefined ? false : smooth.forceDirection\n            };\n          }\n        }\n\n        // Force all edges into static smooth curves.\n        // Only applies to edges that do not use the global options for smooth.\n        this.body.emitter.emit(\"_forceDisableDynamicCurves\", type);\n      }\n      return allOptions;\n    }\n\n    /**\n     *\n     * @param {Array.<Node>} nodesArray\n     */\n  }, {\n    key: \"positionInitially\",\n    value: function positionInitially(nodesArray) {\n      if (this.options.hierarchical.enabled !== true) {\n        this._resetRNG(this.initialRandomSeed);\n        var radius = nodesArray.length + 50;\n        for (var i = 0; i < nodesArray.length; i++) {\n          var node = nodesArray[i];\n          var angle = 2 * Math.PI * this._rng();\n          if (node.x === undefined) {\n            node.x = radius * Math.cos(angle);\n          }\n          if (node.y === undefined) {\n            node.y = radius * Math.sin(angle);\n          }\n        }\n      }\n    }\n\n    /**\n     * Use Kamada Kawai to position nodes. This is quite a heavy algorithm so if there are a lot of nodes we\n     * cluster them first to reduce the amount.\n     */\n  }, {\n    key: \"layoutNetwork\",\n    value: function layoutNetwork() {\n      if (this.options.hierarchical.enabled !== true && this.options.improvedLayout === true) {\n        var indices = this.body.nodeIndices;\n\n        // first check if we should Kamada Kawai to layout. The threshold is if less than half of the visible\n        // nodes have predefined positions we use this.\n        var positionDefined = 0;\n        for (var i = 0; i < indices.length; i++) {\n          var node = this.body.nodes[indices[i]];\n          if (node.predefinedPosition === true) {\n            positionDefined += 1;\n          }\n        }\n\n        // if less than half of the nodes have a predefined position we continue\n        if (positionDefined < 0.5 * indices.length) {\n          var MAX_LEVELS = 10;\n          var level = 0;\n          var clusterThreshold = this.options.clusterThreshold;\n\n          //\n          // Define the options for the hidden cluster nodes\n          // These options don't propagate outside the clustering phase.\n          //\n          // Some options are explicitly disabled, because they may be set in group or default node options.\n          // The clusters are never displayed, so most explicit settings here serve as performance optimizations.\n          //\n          // The explicit setting of 'shape' is to avoid `shape: 'image'`; images are not passed to the hidden\n          // cluster nodes, leading to an exception on creation.\n          //\n          // All settings here are performance related, except when noted otherwise.\n          //\n          var clusterOptions = {\n            clusterNodeProperties: {\n              shape: \"ellipse\",\n              // Bugfix: avoid type 'image', no images supplied\n              label: \"\",\n              // avoid label handling\n              group: \"\",\n              // avoid group handling\n              font: {\n                multi: false\n              } // avoid font propagation\n            },\n\n            clusterEdgeProperties: {\n              label: \"\",\n              // avoid label handling\n              font: {\n                multi: false\n              },\n              // avoid font propagation\n              smooth: {\n                enabled: false // avoid drawing penalty for complex edges\n              }\n            }\n          };\n\n          // if there are a lot of nodes, we cluster before we run the algorithm.\n          // NOTE: this part fails to find clusters for large scale-free networks, which should\n          //       be easily clusterable.\n          // TODO: examine why this is so\n          if (indices.length > clusterThreshold) {\n            var startLength = indices.length;\n            while (indices.length > clusterThreshold && level <= MAX_LEVELS) {\n              //console.time(\"clustering\")\n              level += 1;\n              var before = indices.length;\n              // if there are many nodes we do a hubsize cluster\n              if (level % 3 === 0) {\n                this.body.modules.clustering.clusterBridges(clusterOptions);\n              } else {\n                this.body.modules.clustering.clusterOutliers(clusterOptions);\n              }\n              var after = indices.length;\n              if (before == after && level % 3 !== 0) {\n                this._declusterAll();\n                this.body.emitter.emit(\"_layoutFailed\");\n                console.info(\"This network could not be positioned by this version of the improved layout algorithm.\" + \" Please disable improvedLayout for better performance.\");\n                return;\n              }\n              //console.timeEnd(\"clustering\")\n              //console.log(before,level,after);\n            }\n            // increase the size of the edges\n            this.body.modules.kamadaKawai.setOptions({\n              springLength: Math.max(150, 2 * startLength)\n            });\n          }\n          if (level > MAX_LEVELS) {\n            console.info(\"The clustering didn't succeed within the amount of interations allowed,\" + \" progressing with partial result.\");\n          }\n\n          // position the system for these nodes and edges\n          this.body.modules.kamadaKawai.solve(indices, this.body.edgeIndices, true);\n\n          // shift to center point\n          this._shiftToCenter();\n\n          // perturb the nodes a little bit to force the physics to kick in\n          var offset = 70;\n          for (var _i = 0; _i < indices.length; _i++) {\n            // Only perturb the nodes that aren't fixed\n            var _node = this.body.nodes[indices[_i]];\n            if (_node.predefinedPosition === false) {\n              _node.x += (0.5 - this._rng()) * offset;\n              _node.y += (0.5 - this._rng()) * offset;\n            }\n          }\n\n          // uncluster all clusters\n          this._declusterAll();\n\n          // reposition all bezier nodes.\n          this.body.emitter.emit(\"_repositionBezierNodes\");\n        }\n      }\n    }\n\n    /**\n     * Move all the nodes towards to the center so gravitational pull wil not move the nodes away from view\n     *\n     * @private\n     */\n  }, {\n    key: \"_shiftToCenter\",\n    value: function _shiftToCenter() {\n      var range = NetworkUtil.getRangeCore(this.body.nodes, this.body.nodeIndices);\n      var center = NetworkUtil.findCenter(range);\n      for (var i = 0; i < this.body.nodeIndices.length; i++) {\n        var node = this.body.nodes[this.body.nodeIndices[i]];\n        node.x -= center.x;\n        node.y -= center.y;\n      }\n    }\n\n    /**\n     * Expands all clusters\n     *\n     * @private\n     */\n  }, {\n    key: \"_declusterAll\",\n    value: function _declusterAll() {\n      var clustersPresent = true;\n      while (clustersPresent === true) {\n        clustersPresent = false;\n        for (var i = 0; i < this.body.nodeIndices.length; i++) {\n          if (this.body.nodes[this.body.nodeIndices[i]].isCluster === true) {\n            clustersPresent = true;\n            this.body.modules.clustering.openCluster(this.body.nodeIndices[i], {}, false);\n          }\n        }\n        if (clustersPresent === true) {\n          this.body.emitter.emit(\"_dataChanged\");\n        }\n      }\n    }\n\n    /**\n     *\n     * @returns {number|*}\n     */\n  }, {\n    key: \"getSeed\",\n    value: function getSeed() {\n      return this.initialRandomSeed;\n    }\n\n    /**\n     * This is the main function to layout the nodes in a hierarchical way.\n     * It checks if the node details are supplied correctly\n     *\n     * @private\n     */\n  }, {\n    key: \"setupHierarchicalLayout\",\n    value: function setupHierarchicalLayout() {\n      if (this.options.hierarchical.enabled === true && this.body.nodeIndices.length > 0) {\n        // get the size of the largest hubs and check if the user has defined a level for a node.\n        var node, nodeId;\n        var definedLevel = false;\n        var undefinedLevel = false;\n        this.lastNodeOnLevel = {};\n        this.hierarchical = new HierarchicalStatus();\n        for (nodeId in this.body.nodes) {\n          if (Object.prototype.hasOwnProperty.call(this.body.nodes, nodeId)) {\n            node = this.body.nodes[nodeId];\n            if (node.options.level !== undefined) {\n              definedLevel = true;\n              this.hierarchical.levels[nodeId] = node.options.level;\n            } else {\n              undefinedLevel = true;\n            }\n          }\n        }\n\n        // if the user defined some levels but not all, alert and run without hierarchical layout\n        if (undefinedLevel === true && definedLevel === true) {\n          throw new Error(\"To use the hierarchical layout, nodes require either no predefined levels\" + \" or levels have to be defined for all nodes.\");\n        } else {\n          // define levels if undefined by the users. Based on hubsize.\n          if (undefinedLevel === true) {\n            var sortMethod = this.options.hierarchical.sortMethod;\n            if (sortMethod === \"hubsize\") {\n              this._determineLevelsByHubsize();\n            } else if (sortMethod === \"directed\") {\n              this._determineLevelsDirected();\n            } else if (sortMethod === \"custom\") {\n              this._determineLevelsCustomCallback();\n            }\n          }\n\n          // fallback for cases where there are nodes but no edges\n          for (var _nodeId2 in this.body.nodes) {\n            if (Object.prototype.hasOwnProperty.call(this.body.nodes, _nodeId2)) {\n              this.hierarchical.ensureLevel(_nodeId2);\n            }\n          }\n          // check the distribution of the nodes per level.\n          var distribution = this._getDistribution();\n\n          // get the parent children relations.\n          this._generateMap();\n\n          // place the nodes on the canvas.\n          this._placeNodesByHierarchy(distribution);\n\n          // condense the whitespace.\n          this._condenseHierarchy();\n\n          // shift to center so gravity does not have to do much\n          this._shiftToCenter();\n        }\n      }\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"_condenseHierarchy\",\n    value: function _condenseHierarchy() {\n      var _this3 = this;\n      // Global var in this scope to define when the movement has stopped.\n      var stillShifting = false;\n      var branches = {};\n      // first we have some methods to help shifting trees around.\n      // the main method to shift the trees\n      var shiftTrees = function shiftTrees() {\n        var treeSizes = getTreeSizes();\n        var shiftBy = 0;\n        for (var i = 0; i < treeSizes.length - 1; i++) {\n          var diff = treeSizes[i].max - treeSizes[i + 1].min;\n          shiftBy += diff + _this3.options.hierarchical.treeSpacing;\n          shiftTree(i + 1, shiftBy);\n        }\n      };\n\n      // shift a single tree by an offset\n      var shiftTree = function shiftTree(index, offset) {\n        var trees = _this3.hierarchical.trees;\n        for (var nodeId in trees) {\n          if (Object.prototype.hasOwnProperty.call(trees, nodeId)) {\n            if (trees[nodeId] === index) {\n              _this3.direction.shift(nodeId, offset);\n            }\n          }\n        }\n      };\n\n      // get the width of all trees\n      var getTreeSizes = function getTreeSizes() {\n        var treeWidths = [];\n        for (var i = 0; i < _this3.hierarchical.numTrees(); i++) {\n          treeWidths.push(_this3.direction.getTreeSize(i));\n        }\n        return treeWidths;\n      };\n\n      // get a map of all nodes in this branch\n      var getBranchNodes = function getBranchNodes(source, map) {\n        if (map[source.id]) {\n          return;\n        }\n        map[source.id] = true;\n        if (_this3.hierarchical.childrenReference[source.id]) {\n          var children = _this3.hierarchical.childrenReference[source.id];\n          if (children.length > 0) {\n            for (var i = 0; i < children.length; i++) {\n              getBranchNodes(_this3.body.nodes[children[i]], map);\n            }\n          }\n        }\n      };\n\n      // get a min max width as well as the maximum movement space it has on either sides\n      // we use min max terminology because width and height can interchange depending on the direction of the layout\n      var getBranchBoundary = function getBranchBoundary(branchMap) {\n        var maxLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1e9;\n        var minSpace = 1e9;\n        var maxSpace = 1e9;\n        var min = 1e9;\n        var max = -1e9;\n        for (var branchNode in branchMap) {\n          if (Object.prototype.hasOwnProperty.call(branchMap, branchNode)) {\n            var node = _this3.body.nodes[branchNode];\n            var level = _this3.hierarchical.levels[node.id];\n            var position = _this3.direction.getPosition(node);\n\n            // get the space around the node.\n            var _this3$_getSpaceAroun = _this3._getSpaceAroundNode(node, branchMap),\n              _this3$_getSpaceAroun2 = _slicedToArray(_this3$_getSpaceAroun, 2),\n              minSpaceNode = _this3$_getSpaceAroun2[0],\n              maxSpaceNode = _this3$_getSpaceAroun2[1];\n            minSpace = Math.min(minSpaceNode, minSpace);\n            maxSpace = Math.min(maxSpaceNode, maxSpace);\n\n            // the width is only relevant for the levels two nodes have in common. This is why we filter on this.\n            if (level <= maxLevel) {\n              min = Math.min(position, min);\n              max = Math.max(position, max);\n            }\n          }\n        }\n        return [min, max, minSpace, maxSpace];\n      };\n\n      // check what the maximum level is these nodes have in common.\n      var getCollisionLevel = function getCollisionLevel(node1, node2) {\n        var maxLevel1 = _this3.hierarchical.getMaxLevel(node1.id);\n        var maxLevel2 = _this3.hierarchical.getMaxLevel(node2.id);\n        return Math.min(maxLevel1, maxLevel2);\n      };\n\n      /**\n       * Condense elements. These can be nodes or branches depending on the callback.\n       *\n       * @param {Function} callback\n       * @param {Array.<number>} levels\n       * @param {*} centerParents\n       */\n      var shiftElementsCloser = function shiftElementsCloser(callback, levels, centerParents) {\n        var hier = _this3.hierarchical;\n        for (var i = 0; i < levels.length; i++) {\n          var level = levels[i];\n          var levelNodes = hier.distributionOrdering[level];\n          if (levelNodes.length > 1) {\n            for (var j = 0; j < levelNodes.length - 1; j++) {\n              var node1 = levelNodes[j];\n              var node2 = levelNodes[j + 1];\n\n              // NOTE: logic maintained as it was; if nodes have same ancestor,\n              //       then of course they are in the same sub-network.\n              if (hier.hasSameParent(node1, node2) && hier.inSameSubNetwork(node1, node2)) {\n                callback(node1, node2, centerParents);\n              }\n            }\n          }\n        }\n      };\n\n      // callback for shifting branches\n      var branchShiftCallback = function branchShiftCallback(node1, node2) {\n        var centerParent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        //window.CALLBACKS.push(() => {\n        var pos1 = _this3.direction.getPosition(node1);\n        var pos2 = _this3.direction.getPosition(node2);\n        var diffAbs = Math.abs(pos2 - pos1);\n        var nodeSpacing = _this3.options.hierarchical.nodeSpacing;\n        //console.log(\"NOW CHECKING:\", node1.id, node2.id, diffAbs);\n        if (diffAbs > nodeSpacing) {\n          var branchNodes1 = {};\n          var branchNodes2 = {};\n          getBranchNodes(node1, branchNodes1);\n          getBranchNodes(node2, branchNodes2);\n\n          // check the largest distance between the branches\n          var maxLevel = getCollisionLevel(node1, node2);\n          var branchNodeBoundary1 = getBranchBoundary(branchNodes1, maxLevel);\n          var branchNodeBoundary2 = getBranchBoundary(branchNodes2, maxLevel);\n          var max1 = branchNodeBoundary1[1];\n          var min2 = branchNodeBoundary2[0];\n          var minSpace2 = branchNodeBoundary2[2];\n\n          //console.log(node1.id, getBranchBoundary(branchNodes1, maxLevel), node2.id,\n          //            getBranchBoundary(branchNodes2, maxLevel), maxLevel);\n          var diffBranch = Math.abs(max1 - min2);\n          if (diffBranch > nodeSpacing) {\n            var offset = max1 - min2 + nodeSpacing;\n            if (offset < -minSpace2 + nodeSpacing) {\n              offset = -minSpace2 + nodeSpacing;\n              //console.log(\"RESETTING OFFSET\", max1 - min2 + this.options.hierarchical.nodeSpacing, -minSpace2, offset);\n            }\n\n            if (offset < 0) {\n              //console.log(\"SHIFTING\", node2.id, offset);\n              _this3._shiftBlock(node2.id, offset);\n              stillShifting = true;\n              if (centerParent === true) _this3._centerParent(node2);\n            }\n          }\n        }\n        //this.body.emitter.emit(\"_redraw\");})\n      };\n\n      var minimizeEdgeLength = function minimizeEdgeLength(iterations, node) {\n        //window.CALLBACKS.push(() => {\n        //  console.log(\"ts\",node.id);\n        var nodeId = node.id;\n        var allEdges = node.edges;\n        var nodeLevel = _this3.hierarchical.levels[node.id];\n\n        // gather constants\n        var C2 = _this3.options.hierarchical.levelSeparation * _this3.options.hierarchical.levelSeparation;\n        var referenceNodes = {};\n        var aboveEdges = [];\n        for (var i = 0; i < allEdges.length; i++) {\n          var edge = allEdges[i];\n          if (edge.toId != edge.fromId) {\n            var otherNode = edge.toId == nodeId ? edge.from : edge.to;\n            referenceNodes[allEdges[i].id] = otherNode;\n            if (_this3.hierarchical.levels[otherNode.id] < nodeLevel) {\n              aboveEdges.push(edge);\n            }\n          }\n        }\n\n        // differentiated sum of lengths based on only moving one node over one axis\n        var getFx = function getFx(point, edges) {\n          var sum = 0;\n          for (var _i2 = 0; _i2 < edges.length; _i2++) {\n            if (referenceNodes[edges[_i2].id] !== undefined) {\n              var a = _this3.direction.getPosition(referenceNodes[edges[_i2].id]) - point;\n              sum += a / Math.sqrt(a * a + C2);\n            }\n          }\n          return sum;\n        };\n\n        // doubly differentiated sum of lengths based on only moving one node over one axis\n        var getDFx = function getDFx(point, edges) {\n          var sum = 0;\n          for (var _i3 = 0; _i3 < edges.length; _i3++) {\n            if (referenceNodes[edges[_i3].id] !== undefined) {\n              var a = _this3.direction.getPosition(referenceNodes[edges[_i3].id]) - point;\n              sum -= C2 * Math.pow(a * a + C2, -1.5);\n            }\n          }\n          return sum;\n        };\n        var getGuess = function getGuess(iterations, edges) {\n          var guess = _this3.direction.getPosition(node);\n          // Newton's method for optimization\n          var guessMap = {};\n          for (var _i4 = 0; _i4 < iterations; _i4++) {\n            var fx = getFx(guess, edges);\n            var dfx = getDFx(guess, edges);\n\n            // we limit the movement to avoid instability.\n            var limit = 40;\n            var ratio = Math.max(-limit, Math.min(limit, Math.round(fx / dfx)));\n            guess = guess - ratio;\n            // reduce duplicates\n            if (guessMap[guess] !== undefined) {\n              break;\n            }\n            guessMap[guess] = _i4;\n          }\n          return guess;\n        };\n        var moveBranch = function moveBranch(guess) {\n          // position node if there is space\n          var nodePosition = _this3.direction.getPosition(node);\n\n          // check movable area of the branch\n          if (branches[node.id] === undefined) {\n            var branchNodes = {};\n            getBranchNodes(node, branchNodes);\n            branches[node.id] = branchNodes;\n          }\n          var branchBoundary = getBranchBoundary(branches[node.id]);\n          var minSpaceBranch = branchBoundary[2];\n          var maxSpaceBranch = branchBoundary[3];\n          var diff = guess - nodePosition;\n\n          // check if we are allowed to move the node:\n          var branchOffset = 0;\n          if (diff > 0) {\n            branchOffset = Math.min(diff, maxSpaceBranch - _this3.options.hierarchical.nodeSpacing);\n          } else if (diff < 0) {\n            branchOffset = -Math.min(-diff, minSpaceBranch - _this3.options.hierarchical.nodeSpacing);\n          }\n          if (branchOffset != 0) {\n            //console.log(\"moving branch:\",branchOffset, maxSpaceBranch, minSpaceBranch)\n            _this3._shiftBlock(node.id, branchOffset);\n            //this.body.emitter.emit(\"_redraw\");\n            stillShifting = true;\n          }\n        };\n        var moveNode = function moveNode(guess) {\n          var nodePosition = _this3.direction.getPosition(node);\n\n          // position node if there is space\n          var _this3$_getSpaceAroun3 = _this3._getSpaceAroundNode(node),\n            _this3$_getSpaceAroun4 = _slicedToArray(_this3$_getSpaceAroun3, 2),\n            minSpace = _this3$_getSpaceAroun4[0],\n            maxSpace = _this3$_getSpaceAroun4[1];\n          var diff = guess - nodePosition;\n          // check if we are allowed to move the node:\n          var newPosition = nodePosition;\n          if (diff > 0) {\n            newPosition = Math.min(nodePosition + (maxSpace - _this3.options.hierarchical.nodeSpacing), guess);\n          } else if (diff < 0) {\n            newPosition = Math.max(nodePosition - (minSpace - _this3.options.hierarchical.nodeSpacing), guess);\n          }\n          if (newPosition !== nodePosition) {\n            //console.log(\"moving Node:\",diff, minSpace, maxSpace);\n            _this3.direction.setPosition(node, newPosition);\n            //this.body.emitter.emit(\"_redraw\");\n            stillShifting = true;\n          }\n        };\n        var guess = getGuess(iterations, aboveEdges);\n        moveBranch(guess);\n        guess = getGuess(iterations, allEdges);\n        moveNode(guess);\n        //})\n      };\n\n      // method to remove whitespace between branches. Because we do bottom up, we can center the parents.\n      var minimizeEdgeLengthBottomUp = function minimizeEdgeLengthBottomUp(iterations) {\n        var levels = _this3.hierarchical.getLevels();\n        levels = _reverseInstanceProperty(levels).call(levels);\n        for (var i = 0; i < iterations; i++) {\n          stillShifting = false;\n          for (var j = 0; j < levels.length; j++) {\n            var level = levels[j];\n            var levelNodes = _this3.hierarchical.distributionOrdering[level];\n            for (var k = 0; k < levelNodes.length; k++) {\n              minimizeEdgeLength(1000, levelNodes[k]);\n            }\n          }\n          if (stillShifting !== true) {\n            //console.log(\"FINISHED minimizeEdgeLengthBottomUp IN \" + i);\n            break;\n          }\n        }\n      };\n\n      // method to remove whitespace between branches. Because we do bottom up, we can center the parents.\n      var shiftBranchesCloserBottomUp = function shiftBranchesCloserBottomUp(iterations) {\n        var levels = _this3.hierarchical.getLevels();\n        levels = _reverseInstanceProperty(levels).call(levels);\n        for (var i = 0; i < iterations; i++) {\n          stillShifting = false;\n          shiftElementsCloser(branchShiftCallback, levels, true);\n          if (stillShifting !== true) {\n            //console.log(\"FINISHED shiftBranchesCloserBottomUp IN \" + (i+1));\n            break;\n          }\n        }\n      };\n\n      // center all parents\n      var centerAllParents = function centerAllParents() {\n        for (var nodeId in _this3.body.nodes) {\n          if (Object.prototype.hasOwnProperty.call(_this3.body.nodes, nodeId)) _this3._centerParent(_this3.body.nodes[nodeId]);\n        }\n      };\n\n      // center all parents\n      var centerAllParentsBottomUp = function centerAllParentsBottomUp() {\n        var levels = _this3.hierarchical.getLevels();\n        levels = _reverseInstanceProperty(levels).call(levels);\n        for (var i = 0; i < levels.length; i++) {\n          var level = levels[i];\n          var levelNodes = _this3.hierarchical.distributionOrdering[level];\n          for (var j = 0; j < levelNodes.length; j++) {\n            _this3._centerParent(levelNodes[j]);\n          }\n        }\n      };\n\n      // the actual work is done here.\n      if (this.options.hierarchical.blockShifting === true) {\n        shiftBranchesCloserBottomUp(5);\n        centerAllParents();\n      }\n\n      // minimize edge length\n      if (this.options.hierarchical.edgeMinimization === true) {\n        minimizeEdgeLengthBottomUp(20);\n      }\n      if (this.options.hierarchical.parentCentralization === true) {\n        centerAllParentsBottomUp();\n      }\n      shiftTrees();\n    }\n\n    /**\n     * This gives the space around the node. IF a map is supplied, it will only check against nodes NOT in the map.\n     * This is used to only get the distances to nodes outside of a branch.\n     *\n     * @param {Node} node\n     * @param {{Node.id: vis.Node}} map\n     * @returns {number[]}\n     * @private\n     */\n  }, {\n    key: \"_getSpaceAroundNode\",\n    value: function _getSpaceAroundNode(node, map) {\n      var useMap = true;\n      if (map === undefined) {\n        useMap = false;\n      }\n      var level = this.hierarchical.levels[node.id];\n      if (level !== undefined) {\n        var index = this.hierarchical.distributionIndex[node.id];\n        var position = this.direction.getPosition(node);\n        var ordering = this.hierarchical.distributionOrdering[level];\n        var minSpace = 1e9;\n        var maxSpace = 1e9;\n        if (index !== 0) {\n          var prevNode = ordering[index - 1];\n          if (useMap === true && map[prevNode.id] === undefined || useMap === false) {\n            var prevPos = this.direction.getPosition(prevNode);\n            minSpace = position - prevPos;\n          }\n        }\n        if (index != ordering.length - 1) {\n          var nextNode = ordering[index + 1];\n          if (useMap === true && map[nextNode.id] === undefined || useMap === false) {\n            var nextPos = this.direction.getPosition(nextNode);\n            maxSpace = Math.min(maxSpace, nextPos - position);\n          }\n        }\n        return [minSpace, maxSpace];\n      } else {\n        return [0, 0];\n      }\n    }\n\n    /**\n     * We use this method to center a parent node and check if it does not cross other nodes when it does.\n     *\n     * @param {Node} node\n     * @private\n     */\n  }, {\n    key: \"_centerParent\",\n    value: function _centerParent(node) {\n      if (this.hierarchical.parentReference[node.id]) {\n        var parents = this.hierarchical.parentReference[node.id];\n        for (var i = 0; i < parents.length; i++) {\n          var parentId = parents[i];\n          var parentNode = this.body.nodes[parentId];\n          var children = this.hierarchical.childrenReference[parentId];\n          if (children !== undefined) {\n            // get the range of the children\n            var newPosition = this._getCenterPosition(children);\n            var position = this.direction.getPosition(parentNode);\n            var _this$_getSpaceAround = this._getSpaceAroundNode(parentNode),\n              _this$_getSpaceAround2 = _slicedToArray(_this$_getSpaceAround, 2),\n              minSpace = _this$_getSpaceAround2[0],\n              maxSpace = _this$_getSpaceAround2[1];\n            var diff = position - newPosition;\n            if (diff < 0 && Math.abs(diff) < maxSpace - this.options.hierarchical.nodeSpacing || diff > 0 && Math.abs(diff) < minSpace - this.options.hierarchical.nodeSpacing) {\n              this.direction.setPosition(parentNode, newPosition);\n            }\n          }\n        }\n      }\n    }\n\n    /**\n     * This function places the nodes on the canvas based on the hierarchial distribution.\n     *\n     * @param {object} distribution | obtained by the function this._getDistribution()\n     * @private\n     */\n  }, {\n    key: \"_placeNodesByHierarchy\",\n    value: function _placeNodesByHierarchy(distribution) {\n      this.positionedNodes = {};\n      // start placing all the level 0 nodes first. Then recursively position their branches.\n      for (var level in distribution) {\n        if (Object.prototype.hasOwnProperty.call(distribution, level)) {\n          var _context;\n          // sort nodes in level by position:\n          var nodeArray = _Object$keys(distribution[level]);\n          nodeArray = this._indexArrayToNodes(nodeArray);\n          _sortInstanceProperty(_context = this.direction).call(_context, nodeArray);\n          var handledNodeCount = 0;\n          for (var i = 0; i < nodeArray.length; i++) {\n            var node = nodeArray[i];\n            if (this.positionedNodes[node.id] === undefined) {\n              var spacing = this.options.hierarchical.nodeSpacing;\n              var pos = spacing * handledNodeCount;\n              // We get the X or Y values we need and store them in pos and previousPos.\n              // The get and set make sure we get X or Y\n              if (handledNodeCount > 0) {\n                pos = this.direction.getPosition(nodeArray[i - 1]) + spacing;\n              }\n              this.direction.setPosition(node, pos, level);\n              this._validatePositionAndContinue(node, level, pos);\n              handledNodeCount++;\n            }\n          }\n        }\n      }\n    }\n\n    /**\n     * This is a recursively called function to enumerate the branches from the largest hubs and place the nodes\n     * on a X position that ensures there will be no overlap.\n     *\n     * @param {Node.id} parentId\n     * @param {number} parentLevel\n     * @private\n     */\n  }, {\n    key: \"_placeBranchNodes\",\n    value: function _placeBranchNodes(parentId, parentLevel) {\n      var _context2;\n      var childRef = this.hierarchical.childrenReference[parentId];\n\n      // if this is not a parent, cancel the placing. This can happen with multiple parents to one child.\n      if (childRef === undefined) {\n        return;\n      }\n\n      // get a list of childNodes\n      var childNodes = [];\n      for (var i = 0; i < childRef.length; i++) {\n        childNodes.push(this.body.nodes[childRef[i]]);\n      }\n\n      // use the positions to order the nodes.\n      _sortInstanceProperty(_context2 = this.direction).call(_context2, childNodes);\n\n      // position the childNodes\n      for (var _i5 = 0; _i5 < childNodes.length; _i5++) {\n        var childNode = childNodes[_i5];\n        var childNodeLevel = this.hierarchical.levels[childNode.id];\n        // check if the child node is below the parent node and if it has already been positioned.\n        if (childNodeLevel > parentLevel && this.positionedNodes[childNode.id] === undefined) {\n          // get the amount of space required for this node. If parent the width is based on the amount of children.\n          var spacing = this.options.hierarchical.nodeSpacing;\n          var pos = void 0;\n\n          // we get the X or Y values we need and store them in pos and previousPos.\n          // The get and set make sure we get X or Y\n          if (_i5 === 0) {\n            pos = this.direction.getPosition(this.body.nodes[parentId]);\n          } else {\n            pos = this.direction.getPosition(childNodes[_i5 - 1]) + spacing;\n          }\n          this.direction.setPosition(childNode, pos, childNodeLevel);\n          this._validatePositionAndContinue(childNode, childNodeLevel, pos);\n        } else {\n          return;\n        }\n      }\n\n      // center the parent nodes.\n      var center = this._getCenterPosition(childNodes);\n      this.direction.setPosition(this.body.nodes[parentId], center, parentLevel);\n    }\n\n    /**\n     * This method checks for overlap and if required shifts the branch. It also keeps records of positioned nodes.\n     * Finally it will call _placeBranchNodes to place the branch nodes.\n     *\n     * @param {Node} node\n     * @param {number} level\n     * @param {number} pos\n     * @private\n     */\n  }, {\n    key: \"_validatePositionAndContinue\",\n    value: function _validatePositionAndContinue(node, level, pos) {\n      // This method only works for formal trees and formal forests\n      // Early exit if this is not the case\n      if (!this.hierarchical.isTree) return;\n\n      // if overlap has been detected, we shift the branch\n      if (this.lastNodeOnLevel[level] !== undefined) {\n        var previousPos = this.direction.getPosition(this.body.nodes[this.lastNodeOnLevel[level]]);\n        if (pos - previousPos < this.options.hierarchical.nodeSpacing) {\n          var diff = previousPos + this.options.hierarchical.nodeSpacing - pos;\n          var sharedParent = this._findCommonParent(this.lastNodeOnLevel[level], node.id);\n          this._shiftBlock(sharedParent.withChild, diff);\n        }\n      }\n      this.lastNodeOnLevel[level] = node.id; // store change in position.\n      this.positionedNodes[node.id] = true;\n      this._placeBranchNodes(node.id, level);\n    }\n\n    /**\n     * Receives an array with node indices and returns an array with the actual node references.\n     * Used for sorting based on node properties.\n     *\n     * @param {Array.<Node.id>} idArray\n     * @returns {Array.<Node>}\n     */\n  }, {\n    key: \"_indexArrayToNodes\",\n    value: function _indexArrayToNodes(idArray) {\n      var array = [];\n      for (var i = 0; i < idArray.length; i++) {\n        array.push(this.body.nodes[idArray[i]]);\n      }\n      return array;\n    }\n\n    /**\n     * This function get the distribution of levels based on hubsize\n     *\n     * @returns {object}\n     * @private\n     */\n  }, {\n    key: \"_getDistribution\",\n    value: function _getDistribution() {\n      var distribution = {};\n      var nodeId, node;\n\n      // we fix Y because the hierarchy is vertical,\n      // we fix X so we do not give a node an x position for a second time.\n      // the fix of X is removed after the x value has been set.\n      for (nodeId in this.body.nodes) {\n        if (Object.prototype.hasOwnProperty.call(this.body.nodes, nodeId)) {\n          node = this.body.nodes[nodeId];\n          var level = this.hierarchical.levels[nodeId] === undefined ? 0 : this.hierarchical.levels[nodeId];\n          this.direction.fix(node, level);\n          if (distribution[level] === undefined) {\n            distribution[level] = {};\n          }\n          distribution[level][nodeId] = node;\n        }\n      }\n      return distribution;\n    }\n\n    /**\n     * Return the active (i.e. visible) edges for this node\n     *\n     * @param {Node} node\n     * @returns {Array.<vis.Edge>} Array of edge instances\n     * @private\n     */\n  }, {\n    key: \"_getActiveEdges\",\n    value: function _getActiveEdges(node) {\n      var _this4 = this;\n      var result = [];\n      forEach$1(node.edges, function (edge) {\n        var _context3;\n        if (_indexOfInstanceProperty(_context3 = _this4.body.edgeIndices).call(_context3, edge.id) !== -1) {\n          result.push(edge);\n        }\n      });\n      return result;\n    }\n\n    /**\n     * Get the hubsizes for all active nodes.\n     *\n     * @returns {number}\n     * @private\n     */\n  }, {\n    key: \"_getHubSizes\",\n    value: function _getHubSizes() {\n      var _this5 = this;\n      var hubSizes = {};\n      var nodeIds = this.body.nodeIndices;\n      forEach$1(nodeIds, function (nodeId) {\n        var node = _this5.body.nodes[nodeId];\n        var hubSize = _this5._getActiveEdges(node).length;\n        hubSizes[hubSize] = true;\n      });\n\n      // Make an array of the size sorted descending\n      var result = [];\n      forEach$1(hubSizes, function (size) {\n        result.push(Number(size));\n      });\n      _sortInstanceProperty(result).call(result, function (a, b) {\n        return b - a;\n      });\n      return result;\n    }\n\n    /**\n     * this function allocates nodes in levels based on the recursive branching from the largest hubs.\n     *\n     * @private\n     */\n  }, {\n    key: \"_determineLevelsByHubsize\",\n    value: function _determineLevelsByHubsize() {\n      var _this6 = this;\n      var levelDownstream = function levelDownstream(nodeA, nodeB) {\n        _this6.hierarchical.levelDownstream(nodeA, nodeB);\n      };\n      var hubSizes = this._getHubSizes();\n      var _loop = function _loop() {\n        var hubSize = hubSizes[i];\n        if (hubSize === 0) return 1; // break\n        forEach$1(_this6.body.nodeIndices, function (nodeId) {\n          var node = _this6.body.nodes[nodeId];\n          if (hubSize === _this6._getActiveEdges(node).length) {\n            _this6._crawlNetwork(levelDownstream, nodeId);\n          }\n        });\n      };\n      for (var i = 0; i < hubSizes.length; ++i) {\n        if (_loop()) break;\n      }\n    }\n\n    /**\n     * TODO: release feature\n     * TODO: Determine if this feature is needed at all\n     *\n     * @private\n     */\n  }, {\n    key: \"_determineLevelsCustomCallback\",\n    value: function _determineLevelsCustomCallback() {\n      var _this7 = this;\n      var minLevel = 100000;\n\n      // TODO: this should come from options.\n      // eslint-disable-next-line no-unused-vars -- This should eventually be implemented with these parameters used.\n      var customCallback = function customCallback(nodeA, nodeB, edge) {};\n\n      // TODO: perhaps move to HierarchicalStatus.\n      //       But I currently don't see the point, this method is not used.\n      var levelByDirection = function levelByDirection(nodeA, nodeB, edge) {\n        var levelA = _this7.hierarchical.levels[nodeA.id];\n        // set initial level\n        if (levelA === undefined) {\n          levelA = _this7.hierarchical.levels[nodeA.id] = minLevel;\n        }\n        var diff = customCallback(NetworkUtil.cloneOptions(nodeA, \"node\"), NetworkUtil.cloneOptions(nodeB, \"node\"), NetworkUtil.cloneOptions(edge, \"edge\"));\n        _this7.hierarchical.levels[nodeB.id] = levelA + diff;\n      };\n      this._crawlNetwork(levelByDirection);\n      this.hierarchical.setMinLevelToZero(this.body.nodes);\n    }\n\n    /**\n     * Allocate nodes in levels based on the direction of the edges.\n     *\n     * @private\n     */\n  }, {\n    key: \"_determineLevelsDirected\",\n    value: function _determineLevelsDirected() {\n      var _context4,\n        _this8 = this;\n      var nodes = _reduceInstanceProperty(_context4 = this.body.nodeIndices).call(_context4, function (acc, id) {\n        acc.set(id, _this8.body.nodes[id]);\n        return acc;\n      }, new _Map());\n      if (this.options.hierarchical.shakeTowards === \"roots\") {\n        this.hierarchical.levels = fillLevelsByDirectionRoots(nodes);\n      } else {\n        this.hierarchical.levels = fillLevelsByDirectionLeaves(nodes);\n      }\n      this.hierarchical.setMinLevelToZero(this.body.nodes);\n    }\n\n    /**\n     * Update the bookkeeping of parent and child.\n     *\n     * @private\n     */\n  }, {\n    key: \"_generateMap\",\n    value: function _generateMap() {\n      var _this9 = this;\n      var fillInRelations = function fillInRelations(parentNode, childNode) {\n        if (_this9.hierarchical.levels[childNode.id] > _this9.hierarchical.levels[parentNode.id]) {\n          _this9.hierarchical.addRelation(parentNode.id, childNode.id);\n        }\n      };\n      this._crawlNetwork(fillInRelations);\n      this.hierarchical.checkIfTree();\n    }\n\n    /**\n     * Crawl over the entire network and use a callback on each node couple that is connected to each other.\n     *\n     * @param {Function} [callback=function(){}]          | will receive nodeA, nodeB and the connecting edge. A and B are distinct.\n     * @param {Node.id} startingNodeId\n     * @private\n     */\n  }, {\n    key: \"_crawlNetwork\",\n    value: function _crawlNetwork() {\n      var _this10 = this;\n      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};\n      var startingNodeId = arguments.length > 1 ? arguments[1] : undefined;\n      var progress = {};\n      var crawler = function crawler(node, tree) {\n        if (progress[node.id] === undefined) {\n          _this10.hierarchical.setTreeIndex(node, tree);\n          progress[node.id] = true;\n          var childNode;\n          var edges = _this10._getActiveEdges(node);\n          for (var i = 0; i < edges.length; i++) {\n            var edge = edges[i];\n            if (edge.connected === true) {\n              if (edge.toId == node.id) {\n                // Not '===' because id's can be string and numeric\n                childNode = edge.from;\n              } else {\n                childNode = edge.to;\n              }\n              if (node.id != childNode.id) {\n                // Not '!==' because id's can be string and numeric\n                callback(node, childNode, edge);\n                crawler(childNode, tree);\n              }\n            }\n          }\n        }\n      };\n      if (startingNodeId === undefined) {\n        // Crawl over all nodes\n        var treeIndex = 0; // Serves to pass a unique id for the current distinct tree\n\n        for (var i = 0; i < this.body.nodeIndices.length; i++) {\n          var nodeId = this.body.nodeIndices[i];\n          if (progress[nodeId] === undefined) {\n            var node = this.body.nodes[nodeId];\n            crawler(node, treeIndex);\n            treeIndex += 1;\n          }\n        }\n      } else {\n        // Crawl from the given starting node\n        var _node2 = this.body.nodes[startingNodeId];\n        if (_node2 === undefined) {\n          console.error(\"Node not found:\", startingNodeId);\n          return;\n        }\n        crawler(_node2);\n      }\n    }\n\n    /**\n     * Shift a branch a certain distance\n     *\n     * @param {Node.id} parentId\n     * @param {number} diff\n     * @private\n     */\n  }, {\n    key: \"_shiftBlock\",\n    value: function _shiftBlock(parentId, diff) {\n      var _this11 = this;\n      var progress = {};\n      var shifter = function shifter(parentId) {\n        if (progress[parentId]) {\n          return;\n        }\n        progress[parentId] = true;\n        _this11.direction.shift(parentId, diff);\n        var childRef = _this11.hierarchical.childrenReference[parentId];\n        if (childRef !== undefined) {\n          for (var i = 0; i < childRef.length; i++) {\n            shifter(childRef[i]);\n          }\n        }\n      };\n      shifter(parentId);\n    }\n\n    /**\n     * Find a common parent between branches.\n     *\n     * @param {Node.id} childA\n     * @param {Node.id} childB\n     * @returns {{foundParent, withChild}}\n     * @private\n     */\n  }, {\n    key: \"_findCommonParent\",\n    value: function _findCommonParent(childA, childB) {\n      var _this12 = this;\n      var parents = {};\n      var iterateParents = function iterateParents(parents, child) {\n        var parentRef = _this12.hierarchical.parentReference[child];\n        if (parentRef !== undefined) {\n          for (var i = 0; i < parentRef.length; i++) {\n            var parent = parentRef[i];\n            parents[parent] = true;\n            iterateParents(parents, parent);\n          }\n        }\n      };\n      var findParent = function findParent(parents, child) {\n        var parentRef = _this12.hierarchical.parentReference[child];\n        if (parentRef !== undefined) {\n          for (var i = 0; i < parentRef.length; i++) {\n            var parent = parentRef[i];\n            if (parents[parent] !== undefined) {\n              return {\n                foundParent: parent,\n                withChild: child\n              };\n            }\n            var branch = findParent(parents, parent);\n            if (branch.foundParent !== null) {\n              return branch;\n            }\n          }\n        }\n        return {\n          foundParent: null,\n          withChild: child\n        };\n      };\n      iterateParents(parents, childA);\n      return findParent(parents, childB);\n    }\n\n    /**\n     * Set the strategy pattern for handling the coordinates given the current direction.\n     *\n     * The individual instances contain all the operations and data specific to a layout direction.\n     *\n     * @param {Node} node\n     * @param {{x: number, y: number}} position\n     * @param {number} level\n     * @param {boolean} [doNotUpdate=false]\n     * @private\n     */\n  }, {\n    key: \"setDirectionStrategy\",\n    value: function setDirectionStrategy() {\n      var isVertical = this.options.hierarchical.direction === \"UD\" || this.options.hierarchical.direction === \"DU\";\n      if (isVertical) {\n        this.direction = new VerticalStrategy(this);\n      } else {\n        this.direction = new HorizontalStrategy(this);\n      }\n    }\n\n    /**\n     * Determine the center position of a branch from the passed list of child nodes\n     *\n     * This takes into account the positions of all the child nodes.\n     *\n     * @param {Array.<Node|vis.Node.id>} childNodes  Array of either child nodes or node id's\n     * @returns {number}\n     * @private\n     */\n  }, {\n    key: \"_getCenterPosition\",\n    value: function _getCenterPosition(childNodes) {\n      var minPos = 1e9;\n      var maxPos = -1e9;\n      for (var i = 0; i < childNodes.length; i++) {\n        var childNode = void 0;\n        if (childNodes[i].id !== undefined) {\n          childNode = childNodes[i];\n        } else {\n          var childNodeId = childNodes[i];\n          childNode = this.body.nodes[childNodeId];\n        }\n        var position = this.direction.getPosition(childNode);\n        minPos = Math.min(minPos, position);\n        maxPos = Math.max(maxPos, position);\n      }\n      return 0.5 * (minPos + maxPos);\n    }\n  }]);\n  return LayoutEngine;\n}();\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof _Symbol !== \"undefined\" && _getIteratorMethod(o) || o[\"@@iterator\"]; if (!it) { if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { var _context32; if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = _sliceInstanceProperty(_context32 = Object.prototype.toString.call(o)).call(_context32, 8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return _Array$from$1(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n/**\n * Clears the toolbar div element of children\n *\n * @private\n */\nvar ManipulationSystem = /*#__PURE__*/function () {\n  /**\n   * @param {object} body\n   * @param {Canvas} canvas\n   * @param {SelectionHandler} selectionHandler\n   * @param {InteractionHandler} interactionHandler\n   */\n  function ManipulationSystem(body, canvas, selectionHandler, interactionHandler) {\n    var _this = this,\n      _context,\n      _context2;\n    _classCallCheck(this, ManipulationSystem);\n    this.body = body;\n    this.canvas = canvas;\n    this.selectionHandler = selectionHandler;\n    this.interactionHandler = interactionHandler;\n    this.editMode = false;\n    this.manipulationDiv = undefined;\n    this.editModeDiv = undefined;\n    this.closeDiv = undefined;\n    this._domEventListenerCleanupQueue = [];\n    this.temporaryUIFunctions = {};\n    this.temporaryEventFunctions = [];\n    this.touchTime = 0;\n    this.temporaryIds = {\n      nodes: [],\n      edges: []\n    };\n    this.guiEnabled = false;\n    this.inMode = false;\n    this.selectedControlNode = undefined;\n    this.options = {};\n    this.defaultOptions = {\n      enabled: false,\n      initiallyActive: false,\n      addNode: true,\n      addEdge: true,\n      editNode: undefined,\n      editEdge: true,\n      deleteNode: true,\n      deleteEdge: true,\n      controlNodeStyle: {\n        shape: \"dot\",\n        size: 6,\n        color: {\n          background: \"#ff0000\",\n          border: \"#3c3c3c\",\n          highlight: {\n            background: \"#07f968\",\n            border: \"#3c3c3c\"\n          }\n        },\n        borderWidth: 2,\n        borderWidthSelected: 2\n      }\n    };\n    _Object$assign(this.options, this.defaultOptions);\n    this.body.emitter.on(\"destroy\", function () {\n      _this._clean();\n    });\n    this.body.emitter.on(\"_dataChanged\", _bindInstanceProperty$1(_context = this._restore).call(_context, this));\n    this.body.emitter.on(\"_resetData\", _bindInstanceProperty$1(_context2 = this._restore).call(_context2, this));\n  }\n\n  /**\n   * If something changes in the data during editing, switch back to the initial datamanipulation state and close all edit modes.\n   *\n   * @private\n   */\n  _createClass(ManipulationSystem, [{\n    key: \"_restore\",\n    value: function _restore() {\n      if (this.inMode !== false) {\n        if (this.options.initiallyActive === true) {\n          this.enableEditMode();\n        } else {\n          this.disableEditMode();\n        }\n      }\n    }\n\n    /**\n     * Set the Options\n     *\n     * @param {object} options\n     * @param {object} allOptions\n     * @param {object} globalOptions\n     */\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options, allOptions, globalOptions) {\n      if (allOptions !== undefined) {\n        if (allOptions.locale !== undefined) {\n          this.options.locale = allOptions.locale;\n        } else {\n          this.options.locale = globalOptions.locale;\n        }\n        if (allOptions.locales !== undefined) {\n          this.options.locales = allOptions.locales;\n        } else {\n          this.options.locales = globalOptions.locales;\n        }\n      }\n      if (options !== undefined) {\n        if (typeof options === \"boolean\") {\n          this.options.enabled = options;\n        } else {\n          this.options.enabled = true;\n          deepExtend(this.options, options);\n        }\n        if (this.options.initiallyActive === true) {\n          this.editMode = true;\n        }\n        this._setup();\n      }\n    }\n\n    /**\n     * Enable or disable edit-mode. Draws the DOM required and cleans up after itself.\n     *\n     * @private\n     */\n  }, {\n    key: \"toggleEditMode\",\n    value: function toggleEditMode() {\n      if (this.editMode === true) {\n        this.disableEditMode();\n      } else {\n        this.enableEditMode();\n      }\n    }\n\n    /**\n     * Enables Edit Mode\n     */\n  }, {\n    key: \"enableEditMode\",\n    value: function enableEditMode() {\n      this.editMode = true;\n      this._clean();\n      if (this.guiEnabled === true) {\n        this.manipulationDiv.style.display = \"block\";\n        this.closeDiv.style.display = \"block\";\n        this.editModeDiv.style.display = \"none\";\n        this.showManipulatorToolbar();\n      }\n    }\n\n    /**\n     * Disables Edit Mode\n     */\n  }, {\n    key: \"disableEditMode\",\n    value: function disableEditMode() {\n      this.editMode = false;\n      this._clean();\n      if (this.guiEnabled === true) {\n        this.manipulationDiv.style.display = \"none\";\n        this.closeDiv.style.display = \"none\";\n        this.editModeDiv.style.display = \"block\";\n        this._createEditButton();\n      }\n    }\n\n    /**\n     * Creates the main toolbar. Removes functions bound to the select event. Binds all the buttons of the toolbar.\n     *\n     * @private\n     */\n  }, {\n    key: \"showManipulatorToolbar\",\n    value: function showManipulatorToolbar() {\n      // restore the state of any bound functions or events, remove control nodes, restore physics\n      this._clean();\n\n      // reset global variables\n      this.manipulationDOM = {};\n\n      // if the gui is enabled, draw all elements.\n      if (this.guiEnabled === true) {\n        var _context3, _context4;\n        // a _restore will hide these menus\n        this.editMode = true;\n        this.manipulationDiv.style.display = \"block\";\n        this.closeDiv.style.display = \"block\";\n        var selectedNodeCount = this.selectionHandler.getSelectedNodeCount();\n        var selectedEdgeCount = this.selectionHandler.getSelectedEdgeCount();\n        var selectedTotalCount = selectedNodeCount + selectedEdgeCount;\n        var locale = this.options.locales[this.options.locale];\n        var needSeperator = false;\n        if (this.options.addNode !== false) {\n          this._createAddNodeButton(locale);\n          needSeperator = true;\n        }\n        if (this.options.addEdge !== false) {\n          if (needSeperator === true) {\n            this._createSeperator(1);\n          } else {\n            needSeperator = true;\n          }\n          this._createAddEdgeButton(locale);\n        }\n        if (selectedNodeCount === 1 && typeof this.options.editNode === \"function\") {\n          if (needSeperator === true) {\n            this._createSeperator(2);\n          } else {\n            needSeperator = true;\n          }\n          this._createEditNodeButton(locale);\n        } else if (selectedEdgeCount === 1 && selectedNodeCount === 0 && this.options.editEdge !== false) {\n          if (needSeperator === true) {\n            this._createSeperator(3);\n          } else {\n            needSeperator = true;\n          }\n          this._createEditEdgeButton(locale);\n        }\n\n        // remove buttons\n        if (selectedTotalCount !== 0) {\n          if (selectedNodeCount > 0 && this.options.deleteNode !== false) {\n            if (needSeperator === true) {\n              this._createSeperator(4);\n            }\n            this._createDeleteButton(locale);\n          } else if (selectedNodeCount === 0 && this.options.deleteEdge !== false) {\n            if (needSeperator === true) {\n              this._createSeperator(4);\n            }\n            this._createDeleteButton(locale);\n          }\n        }\n\n        // bind the close button\n        this._bindElementEvents(this.closeDiv, _bindInstanceProperty$1(_context3 = this.toggleEditMode).call(_context3, this));\n\n        // refresh this bar based on what has been selected\n        this._temporaryBindEvent(\"select\", _bindInstanceProperty$1(_context4 = this.showManipulatorToolbar).call(_context4, this));\n      }\n\n      // redraw to show any possible changes\n      this.body.emitter.emit(\"_redraw\");\n    }\n\n    /**\n     * Create the toolbar for adding Nodes\n     */\n  }, {\n    key: \"addNodeMode\",\n    value: function addNodeMode() {\n      var _context6;\n      // when using the gui, enable edit mode if it wasnt already.\n      if (this.editMode !== true) {\n        this.enableEditMode();\n      }\n\n      // restore the state of any bound functions or events, remove control nodes, restore physics\n      this._clean();\n      this.inMode = \"addNode\";\n      if (this.guiEnabled === true) {\n        var _context5;\n        var locale = this.options.locales[this.options.locale];\n        this.manipulationDOM = {};\n        this._createBackButton(locale);\n        this._createSeperator();\n        this._createDescription(locale[\"addDescription\"] || this.options.locales[\"en\"][\"addDescription\"]);\n\n        // bind the close button\n        this._bindElementEvents(this.closeDiv, _bindInstanceProperty$1(_context5 = this.toggleEditMode).call(_context5, this));\n      }\n      this._temporaryBindEvent(\"click\", _bindInstanceProperty$1(_context6 = this._performAddNode).call(_context6, this));\n    }\n\n    /**\n     * call the bound function to handle the editing of the node. The node has to be selected.\n     */\n  }, {\n    key: \"editNode\",\n    value: function editNode() {\n      var _this2 = this;\n      // when using the gui, enable edit mode if it wasnt already.\n      if (this.editMode !== true) {\n        this.enableEditMode();\n      }\n\n      // restore the state of any bound functions or events, remove control nodes, restore physics\n      this._clean();\n      var node = this.selectionHandler.getSelectedNodes()[0];\n      if (node !== undefined) {\n        this.inMode = \"editNode\";\n        if (typeof this.options.editNode === \"function\") {\n          if (node.isCluster !== true) {\n            var data = deepExtend({}, node.options, false);\n            data.x = node.x;\n            data.y = node.y;\n            if (this.options.editNode.length === 2) {\n              this.options.editNode(data, function (finalizedData) {\n                if (finalizedData !== null && finalizedData !== undefined && _this2.inMode === \"editNode\") {\n                  // if for whatever reason the mode has changes (due to dataset change) disregard the callback) {\n                  _this2.body.data.nodes.getDataSet().update(finalizedData);\n                }\n                _this2.showManipulatorToolbar();\n              });\n            } else {\n              throw new Error(\"The function for edit does not support two arguments (data, callback)\");\n            }\n          } else {\n            alert(this.options.locales[this.options.locale][\"editClusterError\"] || this.options.locales[\"en\"][\"editClusterError\"]);\n          }\n        } else {\n          throw new Error(\"No function has been configured to handle the editing of nodes.\");\n        }\n      } else {\n        this.showManipulatorToolbar();\n      }\n    }\n\n    /**\n     * create the toolbar to connect nodes\n     */\n  }, {\n    key: \"addEdgeMode\",\n    value: function addEdgeMode() {\n      var _context8, _context9, _context10, _context11, _context12;\n      // when using the gui, enable edit mode if it wasnt already.\n      if (this.editMode !== true) {\n        this.enableEditMode();\n      }\n\n      // restore the state of any bound functions or events, remove control nodes, restore physics\n      this._clean();\n      this.inMode = \"addEdge\";\n      if (this.guiEnabled === true) {\n        var _context7;\n        var locale = this.options.locales[this.options.locale];\n        this.manipulationDOM = {};\n        this._createBackButton(locale);\n        this._createSeperator();\n        this._createDescription(locale[\"edgeDescription\"] || this.options.locales[\"en\"][\"edgeDescription\"]);\n\n        // bind the close button\n        this._bindElementEvents(this.closeDiv, _bindInstanceProperty$1(_context7 = this.toggleEditMode).call(_context7, this));\n      }\n\n      // temporarily overload functions\n      this._temporaryBindUI(\"onTouch\", _bindInstanceProperty$1(_context8 = this._handleConnect).call(_context8, this));\n      this._temporaryBindUI(\"onDragEnd\", _bindInstanceProperty$1(_context9 = this._finishConnect).call(_context9, this));\n      this._temporaryBindUI(\"onDrag\", _bindInstanceProperty$1(_context10 = this._dragControlNode).call(_context10, this));\n      this._temporaryBindUI(\"onRelease\", _bindInstanceProperty$1(_context11 = this._finishConnect).call(_context11, this));\n      this._temporaryBindUI(\"onDragStart\", _bindInstanceProperty$1(_context12 = this._dragStartEdge).call(_context12, this));\n      this._temporaryBindUI(\"onHold\", function () {});\n    }\n\n    /**\n     * create the toolbar to edit edges\n     */\n  }, {\n    key: \"editEdgeMode\",\n    value: function editEdgeMode() {\n      // when using the gui, enable edit mode if it wasn't already.\n      if (this.editMode !== true) {\n        this.enableEditMode();\n      }\n\n      // restore the state of any bound functions or events, remove control nodes, restore physics\n      this._clean();\n      this.inMode = \"editEdge\";\n      if (_typeof(this.options.editEdge) === \"object\" && typeof this.options.editEdge.editWithoutDrag === \"function\") {\n        this.edgeBeingEditedId = this.selectionHandler.getSelectedEdgeIds()[0];\n        if (this.edgeBeingEditedId !== undefined) {\n          var edge = this.body.edges[this.edgeBeingEditedId];\n          this._performEditEdge(edge.from.id, edge.to.id);\n          return;\n        }\n      }\n      if (this.guiEnabled === true) {\n        var _context13;\n        var locale = this.options.locales[this.options.locale];\n        this.manipulationDOM = {};\n        this._createBackButton(locale);\n        this._createSeperator();\n        this._createDescription(locale[\"editEdgeDescription\"] || this.options.locales[\"en\"][\"editEdgeDescription\"]);\n\n        // bind the close button\n        this._bindElementEvents(this.closeDiv, _bindInstanceProperty$1(_context13 = this.toggleEditMode).call(_context13, this));\n      }\n      this.edgeBeingEditedId = this.selectionHandler.getSelectedEdgeIds()[0];\n      if (this.edgeBeingEditedId !== undefined) {\n        var _context14, _context15, _context16, _context17;\n        var _edge = this.body.edges[this.edgeBeingEditedId];\n\n        // create control nodes\n        var controlNodeFrom = this._getNewTargetNode(_edge.from.x, _edge.from.y);\n        var controlNodeTo = this._getNewTargetNode(_edge.to.x, _edge.to.y);\n        this.temporaryIds.nodes.push(controlNodeFrom.id);\n        this.temporaryIds.nodes.push(controlNodeTo.id);\n        this.body.nodes[controlNodeFrom.id] = controlNodeFrom;\n        this.body.nodeIndices.push(controlNodeFrom.id);\n        this.body.nodes[controlNodeTo.id] = controlNodeTo;\n        this.body.nodeIndices.push(controlNodeTo.id);\n\n        // temporarily overload UI functions, cleaned up automatically because of _temporaryBindUI\n        this._temporaryBindUI(\"onTouch\", _bindInstanceProperty$1(_context14 = this._controlNodeTouch).call(_context14, this)); // used to get the position\n        this._temporaryBindUI(\"onTap\", function () {}); // disabled\n        this._temporaryBindUI(\"onHold\", function () {}); // disabled\n        this._temporaryBindUI(\"onDragStart\", _bindInstanceProperty$1(_context15 = this._controlNodeDragStart).call(_context15, this)); // used to select control node\n        this._temporaryBindUI(\"onDrag\", _bindInstanceProperty$1(_context16 = this._controlNodeDrag).call(_context16, this)); // used to drag control node\n        this._temporaryBindUI(\"onDragEnd\", _bindInstanceProperty$1(_context17 = this._controlNodeDragEnd).call(_context17, this)); // used to connect or revert control nodes\n        this._temporaryBindUI(\"onMouseMove\", function () {}); // disabled\n\n        // create function to position control nodes correctly on movement\n        // automatically cleaned up because we use the temporary bind\n        this._temporaryBindEvent(\"beforeDrawing\", function (ctx) {\n          var positions = _edge.edgeType.findBorderPositions(ctx);\n          if (controlNodeFrom.selected === false) {\n            controlNodeFrom.x = positions.from.x;\n            controlNodeFrom.y = positions.from.y;\n          }\n          if (controlNodeTo.selected === false) {\n            controlNodeTo.x = positions.to.x;\n            controlNodeTo.y = positions.to.y;\n          }\n        });\n        this.body.emitter.emit(\"_redraw\");\n      } else {\n        this.showManipulatorToolbar();\n      }\n    }\n\n    /**\n     * delete everything in the selection\n     */\n  }, {\n    key: \"deleteSelected\",\n    value: function deleteSelected() {\n      var _this3 = this;\n      // when using the gui, enable edit mode if it wasnt already.\n      if (this.editMode !== true) {\n        this.enableEditMode();\n      }\n\n      // restore the state of any bound functions or events, remove control nodes, restore physics\n      this._clean();\n      this.inMode = \"delete\";\n      var selectedNodes = this.selectionHandler.getSelectedNodeIds();\n      var selectedEdges = this.selectionHandler.getSelectedEdgeIds();\n      var deleteFunction = undefined;\n      if (selectedNodes.length > 0) {\n        for (var i = 0; i < selectedNodes.length; i++) {\n          if (this.body.nodes[selectedNodes[i]].isCluster === true) {\n            alert(this.options.locales[this.options.locale][\"deleteClusterError\"] || this.options.locales[\"en\"][\"deleteClusterError\"]);\n            return;\n          }\n        }\n        if (typeof this.options.deleteNode === \"function\") {\n          deleteFunction = this.options.deleteNode;\n        }\n      } else if (selectedEdges.length > 0) {\n        if (typeof this.options.deleteEdge === \"function\") {\n          deleteFunction = this.options.deleteEdge;\n        }\n      }\n      if (typeof deleteFunction === \"function\") {\n        var data = {\n          nodes: selectedNodes,\n          edges: selectedEdges\n        };\n        if (deleteFunction.length === 2) {\n          deleteFunction(data, function (finalizedData) {\n            if (finalizedData !== null && finalizedData !== undefined && _this3.inMode === \"delete\") {\n              // if for whatever reason the mode has changes (due to dataset change) disregard the callback) {\n              _this3.body.data.edges.getDataSet().remove(finalizedData.edges);\n              _this3.body.data.nodes.getDataSet().remove(finalizedData.nodes);\n              _this3.body.emitter.emit(\"startSimulation\");\n              _this3.showManipulatorToolbar();\n            } else {\n              _this3.body.emitter.emit(\"startSimulation\");\n              _this3.showManipulatorToolbar();\n            }\n          });\n        } else {\n          throw new Error(\"The function for delete does not support two arguments (data, callback)\");\n        }\n      } else {\n        this.body.data.edges.getDataSet().remove(selectedEdges);\n        this.body.data.nodes.getDataSet().remove(selectedNodes);\n        this.body.emitter.emit(\"startSimulation\");\n        this.showManipulatorToolbar();\n      }\n    }\n\n    //********************************************** PRIVATE ***************************************//\n\n    /**\n     * draw or remove the DOM\n     *\n     * @private\n     */\n  }, {\n    key: \"_setup\",\n    value: function _setup() {\n      if (this.options.enabled === true) {\n        // Enable the GUI\n        this.guiEnabled = true;\n        this._createWrappers();\n        if (this.editMode === false) {\n          this._createEditButton();\n        } else {\n          this.showManipulatorToolbar();\n        }\n      } else {\n        this._removeManipulationDOM();\n\n        // disable the gui\n        this.guiEnabled = false;\n      }\n    }\n\n    /**\n     * create the div overlays that contain the DOM\n     *\n     * @private\n     */\n  }, {\n    key: \"_createWrappers\",\n    value: function _createWrappers() {\n      // load the manipulator HTML elements. All styling done in css.\n      if (this.manipulationDiv === undefined) {\n        this.manipulationDiv = document.createElement(\"div\");\n        this.manipulationDiv.className = \"vis-manipulation\";\n        if (this.editMode === true) {\n          this.manipulationDiv.style.display = \"block\";\n        } else {\n          this.manipulationDiv.style.display = \"none\";\n        }\n        this.canvas.frame.appendChild(this.manipulationDiv);\n      }\n\n      // container for the edit button.\n      if (this.editModeDiv === undefined) {\n        this.editModeDiv = document.createElement(\"div\");\n        this.editModeDiv.className = \"vis-edit-mode\";\n        if (this.editMode === true) {\n          this.editModeDiv.style.display = \"none\";\n        } else {\n          this.editModeDiv.style.display = \"block\";\n        }\n        this.canvas.frame.appendChild(this.editModeDiv);\n      }\n\n      // container for the close div button\n      if (this.closeDiv === undefined) {\n        var _this$options$locales, _this$options$locales2;\n        this.closeDiv = document.createElement(\"button\");\n        this.closeDiv.className = \"vis-close\";\n        this.closeDiv.setAttribute(\"aria-label\", (_this$options$locales = (_this$options$locales2 = this.options.locales[this.options.locale]) === null || _this$options$locales2 === void 0 ? void 0 : _this$options$locales2[\"close\"]) !== null && _this$options$locales !== void 0 ? _this$options$locales : this.options.locales[\"en\"][\"close\"]);\n        this.closeDiv.style.display = this.manipulationDiv.style.display;\n        this.canvas.frame.appendChild(this.closeDiv);\n      }\n    }\n\n    /**\n     * generate a new target node. Used for creating new edges and editing edges\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {Node}\n     * @private\n     */\n  }, {\n    key: \"_getNewTargetNode\",\n    value: function _getNewTargetNode(x, y) {\n      var controlNodeStyle = deepExtend({}, this.options.controlNodeStyle);\n      controlNodeStyle.id = \"targetNode\" + v4();\n      controlNodeStyle.hidden = false;\n      controlNodeStyle.physics = false;\n      controlNodeStyle.x = x;\n      controlNodeStyle.y = y;\n\n      // we have to define the bounding box in order for the nodes to be drawn immediately\n      var node = this.body.functions.createNode(controlNodeStyle);\n      node.shape.boundingBox = {\n        left: x,\n        right: x,\n        top: y,\n        bottom: y\n      };\n      return node;\n    }\n\n    /**\n     * Create the edit button\n     */\n  }, {\n    key: \"_createEditButton\",\n    value: function _createEditButton() {\n      var _context18;\n      // restore everything to it's original state (if applicable)\n      this._clean();\n\n      // reset the manipulationDOM\n      this.manipulationDOM = {};\n\n      // empty the editModeDiv\n      recursiveDOMDelete(this.editModeDiv);\n\n      // create the contents for the editMode button\n      var locale = this.options.locales[this.options.locale];\n      var button = this._createButton(\"editMode\", \"vis-edit vis-edit-mode\", locale[\"edit\"] || this.options.locales[\"en\"][\"edit\"]);\n      this.editModeDiv.appendChild(button);\n\n      // bind a hammer listener to the button, calling the function toggleEditMode.\n      this._bindElementEvents(button, _bindInstanceProperty$1(_context18 = this.toggleEditMode).call(_context18, this));\n    }\n\n    /**\n     * this function cleans up after everything this module does. Temporary elements, functions and events are removed, physics restored, hammers removed.\n     *\n     * @private\n     */\n  }, {\n    key: \"_clean\",\n    value: function _clean() {\n      // not in mode\n      this.inMode = false;\n\n      // _clean the divs\n      if (this.guiEnabled === true) {\n        recursiveDOMDelete(this.editModeDiv);\n        recursiveDOMDelete(this.manipulationDiv);\n\n        // removes all the bindings and overloads\n        this._cleanupDOMEventListeners();\n      }\n\n      // remove temporary nodes and edges\n      this._cleanupTemporaryNodesAndEdges();\n\n      // restore overloaded UI functions\n      this._unbindTemporaryUIs();\n\n      // remove the temporaryEventFunctions\n      this._unbindTemporaryEvents();\n\n      // restore the physics if required\n      this.body.emitter.emit(\"restorePhysics\");\n    }\n\n    /**\n     * Each dom element has it's own hammer. They are stored in this.manipulationHammers. This cleans them up.\n     *\n     * @private\n     */\n  }, {\n    key: \"_cleanupDOMEventListeners\",\n    value: function _cleanupDOMEventListeners() {\n      var _context19;\n      // _clean DOM event listener bindings\n      var _iterator = _createForOfIteratorHelper(_spliceInstanceProperty(_context19 = this._domEventListenerCleanupQueue).call(_context19, 0)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var callback = _step.value;\n          callback();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n\n    /**\n     * Remove all DOM elements created by this module.\n     *\n     * @private\n     */\n  }, {\n    key: \"_removeManipulationDOM\",\n    value: function _removeManipulationDOM() {\n      // removes all the bindings and overloads\n      this._clean();\n\n      // empty the manipulation divs\n      recursiveDOMDelete(this.manipulationDiv);\n      recursiveDOMDelete(this.editModeDiv);\n      recursiveDOMDelete(this.closeDiv);\n\n      // remove the manipulation divs\n      if (this.manipulationDiv) {\n        this.canvas.frame.removeChild(this.manipulationDiv);\n      }\n      if (this.editModeDiv) {\n        this.canvas.frame.removeChild(this.editModeDiv);\n      }\n      if (this.closeDiv) {\n        this.canvas.frame.removeChild(this.closeDiv);\n      }\n\n      // set the references to undefined\n      this.manipulationDiv = undefined;\n      this.editModeDiv = undefined;\n      this.closeDiv = undefined;\n    }\n\n    /**\n     * create a seperator line. the index is to differentiate in the manipulation dom\n     *\n     * @param {number} [index=1]\n     * @private\n     */\n  }, {\n    key: \"_createSeperator\",\n    value: function _createSeperator() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      this.manipulationDOM[\"seperatorLineDiv\" + index] = document.createElement(\"div\");\n      this.manipulationDOM[\"seperatorLineDiv\" + index].className = \"vis-separator-line\";\n      this.manipulationDiv.appendChild(this.manipulationDOM[\"seperatorLineDiv\" + index]);\n    }\n\n    // ----------------------    DOM functions for buttons    --------------------------//\n\n    /**\n     *\n     * @param {Locale} locale\n     * @private\n     */\n  }, {\n    key: \"_createAddNodeButton\",\n    value: function _createAddNodeButton(locale) {\n      var _context20;\n      var button = this._createButton(\"addNode\", \"vis-add\", locale[\"addNode\"] || this.options.locales[\"en\"][\"addNode\"]);\n      this.manipulationDiv.appendChild(button);\n      this._bindElementEvents(button, _bindInstanceProperty$1(_context20 = this.addNodeMode).call(_context20, this));\n    }\n\n    /**\n     *\n     * @param {Locale} locale\n     * @private\n     */\n  }, {\n    key: \"_createAddEdgeButton\",\n    value: function _createAddEdgeButton(locale) {\n      var _context21;\n      var button = this._createButton(\"addEdge\", \"vis-connect\", locale[\"addEdge\"] || this.options.locales[\"en\"][\"addEdge\"]);\n      this.manipulationDiv.appendChild(button);\n      this._bindElementEvents(button, _bindInstanceProperty$1(_context21 = this.addEdgeMode).call(_context21, this));\n    }\n\n    /**\n     *\n     * @param {Locale} locale\n     * @private\n     */\n  }, {\n    key: \"_createEditNodeButton\",\n    value: function _createEditNodeButton(locale) {\n      var _context22;\n      var button = this._createButton(\"editNode\", \"vis-edit\", locale[\"editNode\"] || this.options.locales[\"en\"][\"editNode\"]);\n      this.manipulationDiv.appendChild(button);\n      this._bindElementEvents(button, _bindInstanceProperty$1(_context22 = this.editNode).call(_context22, this));\n    }\n\n    /**\n     *\n     * @param {Locale} locale\n     * @private\n     */\n  }, {\n    key: \"_createEditEdgeButton\",\n    value: function _createEditEdgeButton(locale) {\n      var _context23;\n      var button = this._createButton(\"editEdge\", \"vis-edit\", locale[\"editEdge\"] || this.options.locales[\"en\"][\"editEdge\"]);\n      this.manipulationDiv.appendChild(button);\n      this._bindElementEvents(button, _bindInstanceProperty$1(_context23 = this.editEdgeMode).call(_context23, this));\n    }\n\n    /**\n     *\n     * @param {Locale} locale\n     * @private\n     */\n  }, {\n    key: \"_createDeleteButton\",\n    value: function _createDeleteButton(locale) {\n      var _context24;\n      var deleteBtnClass;\n      if (this.options.rtl) {\n        deleteBtnClass = \"vis-delete-rtl\";\n      } else {\n        deleteBtnClass = \"vis-delete\";\n      }\n      var button = this._createButton(\"delete\", deleteBtnClass, locale[\"del\"] || this.options.locales[\"en\"][\"del\"]);\n      this.manipulationDiv.appendChild(button);\n      this._bindElementEvents(button, _bindInstanceProperty$1(_context24 = this.deleteSelected).call(_context24, this));\n    }\n\n    /**\n     *\n     * @param {Locale} locale\n     * @private\n     */\n  }, {\n    key: \"_createBackButton\",\n    value: function _createBackButton(locale) {\n      var _context25;\n      var button = this._createButton(\"back\", \"vis-back\", locale[\"back\"] || this.options.locales[\"en\"][\"back\"]);\n      this.manipulationDiv.appendChild(button);\n      this._bindElementEvents(button, _bindInstanceProperty$1(_context25 = this.showManipulatorToolbar).call(_context25, this));\n    }\n\n    /**\n     *\n     * @param {number|string} id\n     * @param {string} className\n     * @param {label} label\n     * @param {string} labelClassName\n     * @returns {HTMLElement}\n     * @private\n     */\n  }, {\n    key: \"_createButton\",\n    value: function _createButton(id, className, label) {\n      var labelClassName = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"vis-label\";\n      this.manipulationDOM[id + \"Div\"] = document.createElement(\"button\");\n      this.manipulationDOM[id + \"Div\"].className = \"vis-button \" + className;\n      this.manipulationDOM[id + \"Label\"] = document.createElement(\"div\");\n      this.manipulationDOM[id + \"Label\"].className = labelClassName;\n      this.manipulationDOM[id + \"Label\"].innerText = label;\n      this.manipulationDOM[id + \"Div\"].appendChild(this.manipulationDOM[id + \"Label\"]);\n      return this.manipulationDOM[id + \"Div\"];\n    }\n\n    /**\n     *\n     * @param {Label} label\n     * @private\n     */\n  }, {\n    key: \"_createDescription\",\n    value: function _createDescription(label) {\n      this.manipulationDOM[\"descriptionLabel\"] = document.createElement(\"div\");\n      this.manipulationDOM[\"descriptionLabel\"].className = \"vis-none\";\n      this.manipulationDOM[\"descriptionLabel\"].innerText = label;\n      this.manipulationDiv.appendChild(this.manipulationDOM[\"descriptionLabel\"]);\n    }\n\n    // -------------------------- End of DOM functions for buttons ------------------------------//\n\n    /**\n     * this binds an event until cleanup by the clean functions.\n     *\n     * @param {Event}  event   The event\n     * @param {Function} newFunction\n     * @private\n     */\n  }, {\n    key: \"_temporaryBindEvent\",\n    value: function _temporaryBindEvent(event, newFunction) {\n      this.temporaryEventFunctions.push({\n        event: event,\n        boundFunction: newFunction\n      });\n      this.body.emitter.on(event, newFunction);\n    }\n\n    /**\n     * this overrides an UI function until cleanup by the clean function\n     *\n     * @param {string} UIfunctionName\n     * @param {Function} newFunction\n     * @private\n     */\n  }, {\n    key: \"_temporaryBindUI\",\n    value: function _temporaryBindUI(UIfunctionName, newFunction) {\n      if (this.body.eventListeners[UIfunctionName] !== undefined) {\n        this.temporaryUIFunctions[UIfunctionName] = this.body.eventListeners[UIfunctionName];\n        this.body.eventListeners[UIfunctionName] = newFunction;\n      } else {\n        throw new Error(\"This UI function does not exist. Typo? You tried: \" + UIfunctionName + \" possible are: \" + _JSON$stringify(_Object$keys(this.body.eventListeners)));\n      }\n    }\n\n    /**\n     * Restore the overridden UI functions to their original state.\n     *\n     * @private\n     */\n  }, {\n    key: \"_unbindTemporaryUIs\",\n    value: function _unbindTemporaryUIs() {\n      for (var functionName in this.temporaryUIFunctions) {\n        if (Object.prototype.hasOwnProperty.call(this.temporaryUIFunctions, functionName)) {\n          this.body.eventListeners[functionName] = this.temporaryUIFunctions[functionName];\n          delete this.temporaryUIFunctions[functionName];\n        }\n      }\n      this.temporaryUIFunctions = {};\n    }\n\n    /**\n     * Unbind the events created by _temporaryBindEvent\n     *\n     * @private\n     */\n  }, {\n    key: \"_unbindTemporaryEvents\",\n    value: function _unbindTemporaryEvents() {\n      for (var i = 0; i < this.temporaryEventFunctions.length; i++) {\n        var eventName = this.temporaryEventFunctions[i].event;\n        var boundFunction = this.temporaryEventFunctions[i].boundFunction;\n        this.body.emitter.off(eventName, boundFunction);\n      }\n      this.temporaryEventFunctions = [];\n    }\n\n    /**\n     * Bind an hammer instance to a DOM element.\n     *\n     * @param {Element} domElement\n     * @param {Function} boundFunction\n     */\n  }, {\n    key: \"_bindElementEvents\",\n    value: function _bindElementEvents(domElement, boundFunction) {\n      // Bind touch events.\n      var hammer = new Hammer(domElement, {});\n      onTouch(hammer, boundFunction);\n      this._domEventListenerCleanupQueue.push(function () {\n        hammer.destroy();\n      });\n\n      // Bind keyboard events.\n      var keyupListener = function keyupListener(_ref) {\n        var keyCode = _ref.keyCode,\n          key = _ref.key;\n        if (key === \"Enter\" || key === \" \" || keyCode === 13 || keyCode === 32) {\n          boundFunction();\n        }\n      };\n      domElement.addEventListener(\"keyup\", keyupListener, false);\n      this._domEventListenerCleanupQueue.push(function () {\n        domElement.removeEventListener(\"keyup\", keyupListener, false);\n      });\n    }\n\n    /**\n     * Neatly clean up temporary edges and nodes\n     *\n     * @private\n     */\n  }, {\n    key: \"_cleanupTemporaryNodesAndEdges\",\n    value: function _cleanupTemporaryNodesAndEdges() {\n      // _clean temporary edges\n      for (var i = 0; i < this.temporaryIds.edges.length; i++) {\n        var _context26;\n        this.body.edges[this.temporaryIds.edges[i]].disconnect();\n        delete this.body.edges[this.temporaryIds.edges[i]];\n        var indexTempEdge = _indexOfInstanceProperty(_context26 = this.body.edgeIndices).call(_context26, this.temporaryIds.edges[i]);\n        if (indexTempEdge !== -1) {\n          var _context27;\n          _spliceInstanceProperty(_context27 = this.body.edgeIndices).call(_context27, indexTempEdge, 1);\n        }\n      }\n\n      // _clean temporary nodes\n      for (var _i = 0; _i < this.temporaryIds.nodes.length; _i++) {\n        var _context28;\n        delete this.body.nodes[this.temporaryIds.nodes[_i]];\n        var indexTempNode = _indexOfInstanceProperty(_context28 = this.body.nodeIndices).call(_context28, this.temporaryIds.nodes[_i]);\n        if (indexTempNode !== -1) {\n          var _context29;\n          _spliceInstanceProperty(_context29 = this.body.nodeIndices).call(_context29, indexTempNode, 1);\n        }\n      }\n      this.temporaryIds = {\n        nodes: [],\n        edges: []\n      };\n    }\n\n    // ------------------------------------------ EDIT EDGE FUNCTIONS -----------------------------------------//\n\n    /**\n     * the touch is used to get the position of the initial click\n     *\n     * @param {Event}  event   The event\n     * @private\n     */\n  }, {\n    key: \"_controlNodeTouch\",\n    value: function _controlNodeTouch(event) {\n      this.selectionHandler.unselectAll();\n      this.lastTouch = this.body.functions.getPointer(event.center);\n      this.lastTouch.translation = _Object$assign({}, this.body.view.translation); // copy the object\n    }\n\n    /**\n     * the drag start is used to mark one of the control nodes as selected.\n     *\n     * @private\n     */\n  }, {\n    key: \"_controlNodeDragStart\",\n    value: function _controlNodeDragStart() {\n      var pointer = this.lastTouch;\n      var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);\n      var from = this.body.nodes[this.temporaryIds.nodes[0]];\n      var to = this.body.nodes[this.temporaryIds.nodes[1]];\n      var edge = this.body.edges[this.edgeBeingEditedId];\n      this.selectedControlNode = undefined;\n      var fromSelect = from.isOverlappingWith(pointerObj);\n      var toSelect = to.isOverlappingWith(pointerObj);\n      if (fromSelect === true) {\n        this.selectedControlNode = from;\n        edge.edgeType.from = from;\n      } else if (toSelect === true) {\n        this.selectedControlNode = to;\n        edge.edgeType.to = to;\n      }\n\n      // we use the selection to find the node that is being dragged. We explicitly select it here.\n      if (this.selectedControlNode !== undefined) {\n        this.selectionHandler.selectObject(this.selectedControlNode);\n      }\n      this.body.emitter.emit(\"_redraw\");\n    }\n\n    /**\n     * dragging the control nodes or the canvas\n     *\n     * @param {Event}  event   The event\n     * @private\n     */\n  }, {\n    key: \"_controlNodeDrag\",\n    value: function _controlNodeDrag(event) {\n      this.body.emitter.emit(\"disablePhysics\");\n      var pointer = this.body.functions.getPointer(event.center);\n      var pos = this.canvas.DOMtoCanvas(pointer);\n      if (this.selectedControlNode !== undefined) {\n        this.selectedControlNode.x = pos.x;\n        this.selectedControlNode.y = pos.y;\n      } else {\n        this.interactionHandler.onDrag(event);\n      }\n      this.body.emitter.emit(\"_redraw\");\n    }\n\n    /**\n     * connecting or restoring the control nodes.\n     *\n     * @param {Event}  event   The event\n     * @private\n     */\n  }, {\n    key: \"_controlNodeDragEnd\",\n    value: function _controlNodeDragEnd(event) {\n      var pointer = this.body.functions.getPointer(event.center);\n      var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);\n      var edge = this.body.edges[this.edgeBeingEditedId];\n      // if the node that was dragged is not a control node, return\n      if (this.selectedControlNode === undefined) {\n        return;\n      }\n\n      // we use the selection to find the node that is being dragged. We explicitly DEselect the control node here.\n      this.selectionHandler.unselectAll();\n      var overlappingNodeIds = this.selectionHandler._getAllNodesOverlappingWith(pointerObj);\n      var node = undefined;\n      for (var i = overlappingNodeIds.length - 1; i >= 0; i--) {\n        if (overlappingNodeIds[i] !== this.selectedControlNode.id) {\n          node = this.body.nodes[overlappingNodeIds[i]];\n          break;\n        }\n      }\n      // perform the connection\n      if (node !== undefined && this.selectedControlNode !== undefined) {\n        if (node.isCluster === true) {\n          alert(this.options.locales[this.options.locale][\"createEdgeError\"] || this.options.locales[\"en\"][\"createEdgeError\"]);\n        } else {\n          var from = this.body.nodes[this.temporaryIds.nodes[0]];\n          if (this.selectedControlNode.id === from.id) {\n            this._performEditEdge(node.id, edge.to.id);\n          } else {\n            this._performEditEdge(edge.from.id, node.id);\n          }\n        }\n      } else {\n        edge.updateEdgeType();\n        this.body.emitter.emit(\"restorePhysics\");\n      }\n      this.body.emitter.emit(\"_redraw\");\n    }\n\n    // ------------------------------------ END OF EDIT EDGE FUNCTIONS -----------------------------------------//\n\n    // ------------------------------------------- ADD EDGE FUNCTIONS -----------------------------------------//\n    /**\n     * the function bound to the selection event. It checks if you want to connect a cluster and changes the description\n     * to walk the user through the process.\n     *\n     * @param {Event} event\n     * @private\n     */\n  }, {\n    key: \"_handleConnect\",\n    value: function _handleConnect(event) {\n      // check to avoid double fireing of this function.\n      if (new Date().valueOf() - this.touchTime > 100) {\n        this.lastTouch = this.body.functions.getPointer(event.center);\n        this.lastTouch.translation = _Object$assign({}, this.body.view.translation); // copy the object\n\n        this.interactionHandler.drag.pointer = this.lastTouch; // Drag pointer is not updated when adding edges\n        this.interactionHandler.drag.translation = this.lastTouch.translation;\n        var pointer = this.lastTouch;\n        var node = this.selectionHandler.getNodeAt(pointer);\n        if (node !== undefined) {\n          if (node.isCluster === true) {\n            alert(this.options.locales[this.options.locale][\"createEdgeError\"] || this.options.locales[\"en\"][\"createEdgeError\"]);\n          } else {\n            // create a node the temporary line can look at\n            var targetNode = this._getNewTargetNode(node.x, node.y);\n            this.body.nodes[targetNode.id] = targetNode;\n            this.body.nodeIndices.push(targetNode.id);\n\n            // create a temporary edge\n            var connectionEdge = this.body.functions.createEdge({\n              id: \"connectionEdge\" + v4(),\n              from: node.id,\n              to: targetNode.id,\n              physics: false,\n              smooth: {\n                enabled: true,\n                type: \"continuous\",\n                roundness: 0.5\n              }\n            });\n            this.body.edges[connectionEdge.id] = connectionEdge;\n            this.body.edgeIndices.push(connectionEdge.id);\n            this.temporaryIds.nodes.push(targetNode.id);\n            this.temporaryIds.edges.push(connectionEdge.id);\n          }\n        }\n        this.touchTime = new Date().valueOf();\n      }\n    }\n\n    /**\n     *\n     * @param {Event} event\n     * @private\n     */\n  }, {\n    key: \"_dragControlNode\",\n    value: function _dragControlNode(event) {\n      var pointer = this.body.functions.getPointer(event.center);\n      var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);\n      // remember the edge id\n      var connectFromId = undefined;\n      if (this.temporaryIds.edges[0] !== undefined) {\n        connectFromId = this.body.edges[this.temporaryIds.edges[0]].fromId;\n      }\n\n      // get the overlapping node but NOT the temporary node;\n      var overlappingNodeIds = this.selectionHandler._getAllNodesOverlappingWith(pointerObj);\n      var node = undefined;\n      for (var i = overlappingNodeIds.length - 1; i >= 0; i--) {\n        var _context30;\n        // if the node id is NOT a temporary node, accept the node.\n        if (_indexOfInstanceProperty(_context30 = this.temporaryIds.nodes).call(_context30, overlappingNodeIds[i]) === -1) {\n          node = this.body.nodes[overlappingNodeIds[i]];\n          break;\n        }\n      }\n      event.controlEdge = {\n        from: connectFromId,\n        to: node ? node.id : undefined\n      };\n      this.selectionHandler.generateClickEvent(\"controlNodeDragging\", event, pointer);\n      if (this.temporaryIds.nodes[0] !== undefined) {\n        var targetNode = this.body.nodes[this.temporaryIds.nodes[0]]; // there is only one temp node in the add edge mode.\n        targetNode.x = this.canvas._XconvertDOMtoCanvas(pointer.x);\n        targetNode.y = this.canvas._YconvertDOMtoCanvas(pointer.y);\n        this.body.emitter.emit(\"_redraw\");\n      } else {\n        this.interactionHandler.onDrag(event);\n      }\n    }\n\n    /**\n     * Connect the new edge to the target if one exists, otherwise remove temp line\n     *\n     * @param {Event}  event   The event\n     * @private\n     */\n  }, {\n    key: \"_finishConnect\",\n    value: function _finishConnect(event) {\n      var pointer = this.body.functions.getPointer(event.center);\n      var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);\n\n      // remember the edge id\n      var connectFromId = undefined;\n      if (this.temporaryIds.edges[0] !== undefined) {\n        connectFromId = this.body.edges[this.temporaryIds.edges[0]].fromId;\n      }\n\n      // get the overlapping node but NOT the temporary node;\n      var overlappingNodeIds = this.selectionHandler._getAllNodesOverlappingWith(pointerObj);\n      var node = undefined;\n      for (var i = overlappingNodeIds.length - 1; i >= 0; i--) {\n        var _context31;\n        // if the node id is NOT a temporary node, accept the node.\n        if (_indexOfInstanceProperty(_context31 = this.temporaryIds.nodes).call(_context31, overlappingNodeIds[i]) === -1) {\n          node = this.body.nodes[overlappingNodeIds[i]];\n          break;\n        }\n      }\n\n      // clean temporary nodes and edges.\n      this._cleanupTemporaryNodesAndEdges();\n\n      // perform the connection\n      if (node !== undefined) {\n        if (node.isCluster === true) {\n          alert(this.options.locales[this.options.locale][\"createEdgeError\"] || this.options.locales[\"en\"][\"createEdgeError\"]);\n        } else {\n          if (this.body.nodes[connectFromId] !== undefined && this.body.nodes[node.id] !== undefined) {\n            this._performAddEdge(connectFromId, node.id);\n          }\n        }\n      }\n      event.controlEdge = {\n        from: connectFromId,\n        to: node ? node.id : undefined\n      };\n      this.selectionHandler.generateClickEvent(\"controlNodeDragEnd\", event, pointer);\n\n      // No need to do _generateclickevent('dragEnd') here, the regular dragEnd event fires.\n      this.body.emitter.emit(\"_redraw\");\n    }\n\n    /**\n     *\n     * @param {Event} event\n     * @private\n     */\n  }, {\n    key: \"_dragStartEdge\",\n    value: function _dragStartEdge(event) {\n      var pointer = this.lastTouch;\n      this.selectionHandler.generateClickEvent(\"dragStart\", event, pointer, undefined, true);\n    }\n\n    // --------------------------------------- END OF ADD EDGE FUNCTIONS -------------------------------------//\n\n    // ------------------------------ Performing all the actual data manipulation ------------------------//\n\n    /**\n     * Adds a node on the specified location\n     *\n     * @param {object} clickData\n     * @private\n     */\n  }, {\n    key: \"_performAddNode\",\n    value: function _performAddNode(clickData) {\n      var _this4 = this;\n      var defaultData = {\n        id: v4(),\n        x: clickData.pointer.canvas.x,\n        y: clickData.pointer.canvas.y,\n        label: \"new\"\n      };\n      if (typeof this.options.addNode === \"function\") {\n        if (this.options.addNode.length === 2) {\n          this.options.addNode(defaultData, function (finalizedData) {\n            if (finalizedData !== null && finalizedData !== undefined && _this4.inMode === \"addNode\") {\n              // if for whatever reason the mode has changes (due to dataset change) disregard the callback\n              _this4.body.data.nodes.getDataSet().add(finalizedData);\n            }\n            _this4.showManipulatorToolbar();\n          });\n        } else {\n          this.showManipulatorToolbar();\n          throw new Error(\"The function for add does not support two arguments (data,callback)\");\n        }\n      } else {\n        this.body.data.nodes.getDataSet().add(defaultData);\n        this.showManipulatorToolbar();\n      }\n    }\n\n    /**\n     * connect two nodes with a new edge.\n     *\n     * @param {Node.id} sourceNodeId\n     * @param {Node.id} targetNodeId\n     * @private\n     */\n  }, {\n    key: \"_performAddEdge\",\n    value: function _performAddEdge(sourceNodeId, targetNodeId) {\n      var _this5 = this;\n      var defaultData = {\n        from: sourceNodeId,\n        to: targetNodeId\n      };\n      if (typeof this.options.addEdge === \"function\") {\n        if (this.options.addEdge.length === 2) {\n          this.options.addEdge(defaultData, function (finalizedData) {\n            if (finalizedData !== null && finalizedData !== undefined && _this5.inMode === \"addEdge\") {\n              // if for whatever reason the mode has changes (due to dataset change) disregard the callback\n              _this5.body.data.edges.getDataSet().add(finalizedData);\n              _this5.selectionHandler.unselectAll();\n              _this5.showManipulatorToolbar();\n            }\n          });\n        } else {\n          throw new Error(\"The function for connect does not support two arguments (data,callback)\");\n        }\n      } else {\n        this.body.data.edges.getDataSet().add(defaultData);\n        this.selectionHandler.unselectAll();\n        this.showManipulatorToolbar();\n      }\n    }\n\n    /**\n     * connect two nodes with a new edge.\n     *\n     * @param {Node.id} sourceNodeId\n     * @param {Node.id} targetNodeId\n     * @private\n     */\n  }, {\n    key: \"_performEditEdge\",\n    value: function _performEditEdge(sourceNodeId, targetNodeId) {\n      var _this6 = this;\n      var defaultData = {\n        id: this.edgeBeingEditedId,\n        from: sourceNodeId,\n        to: targetNodeId,\n        label: this.body.data.edges.get(this.edgeBeingEditedId).label\n      };\n      var eeFunct = this.options.editEdge;\n      if (_typeof(eeFunct) === \"object\") {\n        eeFunct = eeFunct.editWithoutDrag;\n      }\n      if (typeof eeFunct === \"function\") {\n        if (eeFunct.length === 2) {\n          eeFunct(defaultData, function (finalizedData) {\n            if (finalizedData === null || finalizedData === undefined || _this6.inMode !== \"editEdge\") {\n              // if for whatever reason the mode has changes (due to dataset change) disregard the callback) {\n              _this6.body.edges[defaultData.id].updateEdgeType();\n              _this6.body.emitter.emit(\"_redraw\");\n              _this6.showManipulatorToolbar();\n            } else {\n              _this6.body.data.edges.getDataSet().update(finalizedData);\n              _this6.selectionHandler.unselectAll();\n              _this6.showManipulatorToolbar();\n            }\n          });\n        } else {\n          throw new Error(\"The function for edit does not support two arguments (data, callback)\");\n        }\n      } else {\n        this.body.data.edges.getDataSet().update(defaultData);\n        this.selectionHandler.unselectAll();\n        this.showManipulatorToolbar();\n      }\n    }\n  }]);\n  return ManipulationSystem;\n}();\n\n/**\r\n * This object contains all possible options. It will check if the types are correct, if required if the option is one\r\n * of the allowed values.\r\n *\r\n * __any__ means that the name of the property does not matter.\r\n * __type__ is a required field for all objects and contains the allowed types of all objects\r\n */\nvar string = \"string\";\nvar bool = \"boolean\";\nvar number = \"number\";\nvar array = \"array\";\nvar object = \"object\"; // should only be in a __type__ property\nvar dom = \"dom\";\nvar any = \"any\";\n// List of endpoints\nvar endPoints = [\"arrow\", \"bar\", \"box\", \"circle\", \"crow\", \"curve\", \"diamond\", \"image\", \"inv_curve\", \"inv_triangle\", \"triangle\", \"vee\"];\n/* eslint-disable @typescript-eslint/naming-convention -- The __*__ format is used to prevent collisions with actual option names. */\nvar nodeOptions = {\n  borderWidth: {\n    number: number\n  },\n  borderWidthSelected: {\n    number: number,\n    undefined: \"undefined\"\n  },\n  brokenImage: {\n    string: string,\n    undefined: \"undefined\"\n  },\n  chosen: {\n    label: {\n      boolean: bool,\n      function: \"function\"\n    },\n    node: {\n      boolean: bool,\n      function: \"function\"\n    },\n    __type__: {\n      object: object,\n      boolean: bool\n    }\n  },\n  color: {\n    border: {\n      string: string\n    },\n    background: {\n      string: string\n    },\n    highlight: {\n      border: {\n        string: string\n      },\n      background: {\n        string: string\n      },\n      __type__: {\n        object: object,\n        string: string\n      }\n    },\n    hover: {\n      border: {\n        string: string\n      },\n      background: {\n        string: string\n      },\n      __type__: {\n        object: object,\n        string: string\n      }\n    },\n    __type__: {\n      object: object,\n      string: string\n    }\n  },\n  opacity: {\n    number: number,\n    undefined: \"undefined\"\n  },\n  fixed: {\n    x: {\n      boolean: bool\n    },\n    y: {\n      boolean: bool\n    },\n    __type__: {\n      object: object,\n      boolean: bool\n    }\n  },\n  font: {\n    align: {\n      string: string\n    },\n    color: {\n      string: string\n    },\n    size: {\n      number: number\n    },\n    face: {\n      string: string\n    },\n    background: {\n      string: string\n    },\n    strokeWidth: {\n      number: number\n    },\n    strokeColor: {\n      string: string\n    },\n    vadjust: {\n      number: number\n    },\n    multi: {\n      boolean: bool,\n      string: string\n    },\n    bold: {\n      color: {\n        string: string\n      },\n      size: {\n        number: number\n      },\n      face: {\n        string: string\n      },\n      mod: {\n        string: string\n      },\n      vadjust: {\n        number: number\n      },\n      __type__: {\n        object: object,\n        string: string\n      }\n    },\n    boldital: {\n      color: {\n        string: string\n      },\n      size: {\n        number: number\n      },\n      face: {\n        string: string\n      },\n      mod: {\n        string: string\n      },\n      vadjust: {\n        number: number\n      },\n      __type__: {\n        object: object,\n        string: string\n      }\n    },\n    ital: {\n      color: {\n        string: string\n      },\n      size: {\n        number: number\n      },\n      face: {\n        string: string\n      },\n      mod: {\n        string: string\n      },\n      vadjust: {\n        number: number\n      },\n      __type__: {\n        object: object,\n        string: string\n      }\n    },\n    mono: {\n      color: {\n        string: string\n      },\n      size: {\n        number: number\n      },\n      face: {\n        string: string\n      },\n      mod: {\n        string: string\n      },\n      vadjust: {\n        number: number\n      },\n      __type__: {\n        object: object,\n        string: string\n      }\n    },\n    __type__: {\n      object: object,\n      string: string\n    }\n  },\n  group: {\n    string: string,\n    number: number,\n    undefined: \"undefined\"\n  },\n  heightConstraint: {\n    minimum: {\n      number: number\n    },\n    valign: {\n      string: string\n    },\n    __type__: {\n      object: object,\n      boolean: bool,\n      number: number\n    }\n  },\n  hidden: {\n    boolean: bool\n  },\n  icon: {\n    face: {\n      string: string\n    },\n    code: {\n      string: string\n    },\n    size: {\n      number: number\n    },\n    color: {\n      string: string\n    },\n    weight: {\n      string: string,\n      number: number\n    },\n    __type__: {\n      object: object\n    }\n  },\n  id: {\n    string: string,\n    number: number\n  },\n  image: {\n    selected: {\n      string: string,\n      undefined: \"undefined\"\n    },\n    unselected: {\n      string: string,\n      undefined: \"undefined\"\n    },\n    __type__: {\n      object: object,\n      string: string\n    }\n  },\n  imagePadding: {\n    top: {\n      number: number\n    },\n    right: {\n      number: number\n    },\n    bottom: {\n      number: number\n    },\n    left: {\n      number: number\n    },\n    __type__: {\n      object: object,\n      number: number\n    }\n  },\n  label: {\n    string: string,\n    undefined: \"undefined\"\n  },\n  labelHighlightBold: {\n    boolean: bool\n  },\n  level: {\n    number: number,\n    undefined: \"undefined\"\n  },\n  margin: {\n    top: {\n      number: number\n    },\n    right: {\n      number: number\n    },\n    bottom: {\n      number: number\n    },\n    left: {\n      number: number\n    },\n    __type__: {\n      object: object,\n      number: number\n    }\n  },\n  mass: {\n    number: number\n  },\n  physics: {\n    boolean: bool\n  },\n  scaling: {\n    min: {\n      number: number\n    },\n    max: {\n      number: number\n    },\n    label: {\n      enabled: {\n        boolean: bool\n      },\n      min: {\n        number: number\n      },\n      max: {\n        number: number\n      },\n      maxVisible: {\n        number: number\n      },\n      drawThreshold: {\n        number: number\n      },\n      __type__: {\n        object: object,\n        boolean: bool\n      }\n    },\n    customScalingFunction: {\n      function: \"function\"\n    },\n    __type__: {\n      object: object\n    }\n  },\n  shadow: {\n    enabled: {\n      boolean: bool\n    },\n    color: {\n      string: string\n    },\n    size: {\n      number: number\n    },\n    x: {\n      number: number\n    },\n    y: {\n      number: number\n    },\n    __type__: {\n      object: object,\n      boolean: bool\n    }\n  },\n  shape: {\n    string: [\"custom\", \"ellipse\", \"circle\", \"database\", \"box\", \"text\", \"image\", \"circularImage\", \"diamond\", \"dot\", \"star\", \"triangle\", \"triangleDown\", \"square\", \"icon\", \"hexagon\"]\n  },\n  ctxRenderer: {\n    function: \"function\"\n  },\n  shapeProperties: {\n    borderDashes: {\n      boolean: bool,\n      array: array\n    },\n    borderRadius: {\n      number: number\n    },\n    interpolation: {\n      boolean: bool\n    },\n    useImageSize: {\n      boolean: bool\n    },\n    useBorderWithImage: {\n      boolean: bool\n    },\n    coordinateOrigin: {\n      string: [\"center\", \"top-left\"]\n    },\n    __type__: {\n      object: object\n    }\n  },\n  size: {\n    number: number\n  },\n  title: {\n    string: string,\n    dom: dom,\n    undefined: \"undefined\"\n  },\n  value: {\n    number: number,\n    undefined: \"undefined\"\n  },\n  widthConstraint: {\n    minimum: {\n      number: number\n    },\n    maximum: {\n      number: number\n    },\n    __type__: {\n      object: object,\n      boolean: bool,\n      number: number\n    }\n  },\n  x: {\n    number: number\n  },\n  y: {\n    number: number\n  },\n  __type__: {\n    object: object\n  }\n};\nvar allOptions = {\n  configure: {\n    enabled: {\n      boolean: bool\n    },\n    filter: {\n      boolean: bool,\n      string: string,\n      array: array,\n      function: \"function\"\n    },\n    container: {\n      dom: dom\n    },\n    showButton: {\n      boolean: bool\n    },\n    __type__: {\n      object: object,\n      boolean: bool,\n      string: string,\n      array: array,\n      function: \"function\"\n    }\n  },\n  edges: {\n    arrows: {\n      to: {\n        enabled: {\n          boolean: bool\n        },\n        scaleFactor: {\n          number: number\n        },\n        type: {\n          string: endPoints\n        },\n        imageHeight: {\n          number: number\n        },\n        imageWidth: {\n          number: number\n        },\n        src: {\n          string: string\n        },\n        __type__: {\n          object: object,\n          boolean: bool\n        }\n      },\n      middle: {\n        enabled: {\n          boolean: bool\n        },\n        scaleFactor: {\n          number: number\n        },\n        type: {\n          string: endPoints\n        },\n        imageWidth: {\n          number: number\n        },\n        imageHeight: {\n          number: number\n        },\n        src: {\n          string: string\n        },\n        __type__: {\n          object: object,\n          boolean: bool\n        }\n      },\n      from: {\n        enabled: {\n          boolean: bool\n        },\n        scaleFactor: {\n          number: number\n        },\n        type: {\n          string: endPoints\n        },\n        imageWidth: {\n          number: number\n        },\n        imageHeight: {\n          number: number\n        },\n        src: {\n          string: string\n        },\n        __type__: {\n          object: object,\n          boolean: bool\n        }\n      },\n      __type__: {\n        string: [\"from\", \"to\", \"middle\"],\n        object: object\n      }\n    },\n    endPointOffset: {\n      from: {\n        number: number\n      },\n      to: {\n        number: number\n      },\n      __type__: {\n        object: object,\n        number: number\n      }\n    },\n    arrowStrikethrough: {\n      boolean: bool\n    },\n    background: {\n      enabled: {\n        boolean: bool\n      },\n      color: {\n        string: string\n      },\n      size: {\n        number: number\n      },\n      dashes: {\n        boolean: bool,\n        array: array\n      },\n      __type__: {\n        object: object,\n        boolean: bool\n      }\n    },\n    chosen: {\n      label: {\n        boolean: bool,\n        function: \"function\"\n      },\n      edge: {\n        boolean: bool,\n        function: \"function\"\n      },\n      __type__: {\n        object: object,\n        boolean: bool\n      }\n    },\n    color: {\n      color: {\n        string: string\n      },\n      highlight: {\n        string: string\n      },\n      hover: {\n        string: string\n      },\n      inherit: {\n        string: [\"from\", \"to\", \"both\"],\n        boolean: bool\n      },\n      opacity: {\n        number: number\n      },\n      __type__: {\n        object: object,\n        string: string\n      }\n    },\n    dashes: {\n      boolean: bool,\n      array: array\n    },\n    font: {\n      color: {\n        string: string\n      },\n      size: {\n        number: number\n      },\n      face: {\n        string: string\n      },\n      background: {\n        string: string\n      },\n      strokeWidth: {\n        number: number\n      },\n      strokeColor: {\n        string: string\n      },\n      align: {\n        string: [\"horizontal\", \"top\", \"middle\", \"bottom\"]\n      },\n      vadjust: {\n        number: number\n      },\n      multi: {\n        boolean: bool,\n        string: string\n      },\n      bold: {\n        color: {\n          string: string\n        },\n        size: {\n          number: number\n        },\n        face: {\n          string: string\n        },\n        mod: {\n          string: string\n        },\n        vadjust: {\n          number: number\n        },\n        __type__: {\n          object: object,\n          string: string\n        }\n      },\n      boldital: {\n        color: {\n          string: string\n        },\n        size: {\n          number: number\n        },\n        face: {\n          string: string\n        },\n        mod: {\n          string: string\n        },\n        vadjust: {\n          number: number\n        },\n        __type__: {\n          object: object,\n          string: string\n        }\n      },\n      ital: {\n        color: {\n          string: string\n        },\n        size: {\n          number: number\n        },\n        face: {\n          string: string\n        },\n        mod: {\n          string: string\n        },\n        vadjust: {\n          number: number\n        },\n        __type__: {\n          object: object,\n          string: string\n        }\n      },\n      mono: {\n        color: {\n          string: string\n        },\n        size: {\n          number: number\n        },\n        face: {\n          string: string\n        },\n        mod: {\n          string: string\n        },\n        vadjust: {\n          number: number\n        },\n        __type__: {\n          object: object,\n          string: string\n        }\n      },\n      __type__: {\n        object: object,\n        string: string\n      }\n    },\n    hidden: {\n      boolean: bool\n    },\n    hoverWidth: {\n      function: \"function\",\n      number: number\n    },\n    label: {\n      string: string,\n      undefined: \"undefined\"\n    },\n    labelHighlightBold: {\n      boolean: bool\n    },\n    length: {\n      number: number,\n      undefined: \"undefined\"\n    },\n    physics: {\n      boolean: bool\n    },\n    scaling: {\n      min: {\n        number: number\n      },\n      max: {\n        number: number\n      },\n      label: {\n        enabled: {\n          boolean: bool\n        },\n        min: {\n          number: number\n        },\n        max: {\n          number: number\n        },\n        maxVisible: {\n          number: number\n        },\n        drawThreshold: {\n          number: number\n        },\n        __type__: {\n          object: object,\n          boolean: bool\n        }\n      },\n      customScalingFunction: {\n        function: \"function\"\n      },\n      __type__: {\n        object: object\n      }\n    },\n    selectionWidth: {\n      function: \"function\",\n      number: number\n    },\n    selfReferenceSize: {\n      number: number\n    },\n    selfReference: {\n      size: {\n        number: number\n      },\n      angle: {\n        number: number\n      },\n      renderBehindTheNode: {\n        boolean: bool\n      },\n      __type__: {\n        object: object\n      }\n    },\n    shadow: {\n      enabled: {\n        boolean: bool\n      },\n      color: {\n        string: string\n      },\n      size: {\n        number: number\n      },\n      x: {\n        number: number\n      },\n      y: {\n        number: number\n      },\n      __type__: {\n        object: object,\n        boolean: bool\n      }\n    },\n    smooth: {\n      enabled: {\n        boolean: bool\n      },\n      type: {\n        string: [\"dynamic\", \"continuous\", \"discrete\", \"diagonalCross\", \"straightCross\", \"horizontal\", \"vertical\", \"curvedCW\", \"curvedCCW\", \"cubicBezier\"]\n      },\n      roundness: {\n        number: number\n      },\n      forceDirection: {\n        string: [\"horizontal\", \"vertical\", \"none\"],\n        boolean: bool\n      },\n      __type__: {\n        object: object,\n        boolean: bool\n      }\n    },\n    title: {\n      string: string,\n      undefined: \"undefined\"\n    },\n    width: {\n      number: number\n    },\n    widthConstraint: {\n      maximum: {\n        number: number\n      },\n      __type__: {\n        object: object,\n        boolean: bool,\n        number: number\n      }\n    },\n    value: {\n      number: number,\n      undefined: \"undefined\"\n    },\n    __type__: {\n      object: object\n    }\n  },\n  groups: {\n    useDefaultGroups: {\n      boolean: bool\n    },\n    __any__: nodeOptions,\n    __type__: {\n      object: object\n    }\n  },\n  interaction: {\n    dragNodes: {\n      boolean: bool\n    },\n    dragView: {\n      boolean: bool\n    },\n    hideEdgesOnDrag: {\n      boolean: bool\n    },\n    hideEdgesOnZoom: {\n      boolean: bool\n    },\n    hideNodesOnDrag: {\n      boolean: bool\n    },\n    hover: {\n      boolean: bool\n    },\n    keyboard: {\n      enabled: {\n        boolean: bool\n      },\n      speed: {\n        x: {\n          number: number\n        },\n        y: {\n          number: number\n        },\n        zoom: {\n          number: number\n        },\n        __type__: {\n          object: object\n        }\n      },\n      bindToWindow: {\n        boolean: bool\n      },\n      autoFocus: {\n        boolean: bool\n      },\n      __type__: {\n        object: object,\n        boolean: bool\n      }\n    },\n    multiselect: {\n      boolean: bool\n    },\n    navigationButtons: {\n      boolean: bool\n    },\n    selectable: {\n      boolean: bool\n    },\n    selectConnectedEdges: {\n      boolean: bool\n    },\n    hoverConnectedEdges: {\n      boolean: bool\n    },\n    tooltipDelay: {\n      number: number\n    },\n    zoomView: {\n      boolean: bool\n    },\n    zoomSpeed: {\n      number: number\n    },\n    __type__: {\n      object: object\n    }\n  },\n  layout: {\n    randomSeed: {\n      undefined: \"undefined\",\n      number: number,\n      string: string\n    },\n    improvedLayout: {\n      boolean: bool\n    },\n    clusterThreshold: {\n      number: number\n    },\n    hierarchical: {\n      enabled: {\n        boolean: bool\n      },\n      levelSeparation: {\n        number: number\n      },\n      nodeSpacing: {\n        number: number\n      },\n      treeSpacing: {\n        number: number\n      },\n      blockShifting: {\n        boolean: bool\n      },\n      edgeMinimization: {\n        boolean: bool\n      },\n      parentCentralization: {\n        boolean: bool\n      },\n      direction: {\n        string: [\"UD\", \"DU\", \"LR\", \"RL\"]\n      },\n      sortMethod: {\n        string: [\"hubsize\", \"directed\"]\n      },\n      shakeTowards: {\n        string: [\"leaves\", \"roots\"]\n      },\n      __type__: {\n        object: object,\n        boolean: bool\n      }\n    },\n    __type__: {\n      object: object\n    }\n  },\n  manipulation: {\n    enabled: {\n      boolean: bool\n    },\n    initiallyActive: {\n      boolean: bool\n    },\n    addNode: {\n      boolean: bool,\n      function: \"function\"\n    },\n    addEdge: {\n      boolean: bool,\n      function: \"function\"\n    },\n    editNode: {\n      function: \"function\"\n    },\n    editEdge: {\n      editWithoutDrag: {\n        function: \"function\"\n      },\n      __type__: {\n        object: object,\n        boolean: bool,\n        function: \"function\"\n      }\n    },\n    deleteNode: {\n      boolean: bool,\n      function: \"function\"\n    },\n    deleteEdge: {\n      boolean: bool,\n      function: \"function\"\n    },\n    controlNodeStyle: nodeOptions,\n    __type__: {\n      object: object,\n      boolean: bool\n    }\n  },\n  nodes: nodeOptions,\n  physics: {\n    enabled: {\n      boolean: bool\n    },\n    barnesHut: {\n      theta: {\n        number: number\n      },\n      gravitationalConstant: {\n        number: number\n      },\n      centralGravity: {\n        number: number\n      },\n      springLength: {\n        number: number\n      },\n      springConstant: {\n        number: number\n      },\n      damping: {\n        number: number\n      },\n      avoidOverlap: {\n        number: number\n      },\n      __type__: {\n        object: object\n      }\n    },\n    forceAtlas2Based: {\n      theta: {\n        number: number\n      },\n      gravitationalConstant: {\n        number: number\n      },\n      centralGravity: {\n        number: number\n      },\n      springLength: {\n        number: number\n      },\n      springConstant: {\n        number: number\n      },\n      damping: {\n        number: number\n      },\n      avoidOverlap: {\n        number: number\n      },\n      __type__: {\n        object: object\n      }\n    },\n    repulsion: {\n      centralGravity: {\n        number: number\n      },\n      springLength: {\n        number: number\n      },\n      springConstant: {\n        number: number\n      },\n      nodeDistance: {\n        number: number\n      },\n      damping: {\n        number: number\n      },\n      __type__: {\n        object: object\n      }\n    },\n    hierarchicalRepulsion: {\n      centralGravity: {\n        number: number\n      },\n      springLength: {\n        number: number\n      },\n      springConstant: {\n        number: number\n      },\n      nodeDistance: {\n        number: number\n      },\n      damping: {\n        number: number\n      },\n      avoidOverlap: {\n        number: number\n      },\n      __type__: {\n        object: object\n      }\n    },\n    maxVelocity: {\n      number: number\n    },\n    minVelocity: {\n      number: number\n    },\n    solver: {\n      string: [\"barnesHut\", \"repulsion\", \"hierarchicalRepulsion\", \"forceAtlas2Based\"]\n    },\n    stabilization: {\n      enabled: {\n        boolean: bool\n      },\n      iterations: {\n        number: number\n      },\n      updateInterval: {\n        number: number\n      },\n      onlyDynamicEdges: {\n        boolean: bool\n      },\n      fit: {\n        boolean: bool\n      },\n      __type__: {\n        object: object,\n        boolean: bool\n      }\n    },\n    timestep: {\n      number: number\n    },\n    adaptiveTimestep: {\n      boolean: bool\n    },\n    wind: {\n      x: {\n        number: number\n      },\n      y: {\n        number: number\n      },\n      __type__: {\n        object: object\n      }\n    },\n    __type__: {\n      object: object,\n      boolean: bool\n    }\n  },\n  //globals :\n  autoResize: {\n    boolean: bool\n  },\n  clickToUse: {\n    boolean: bool\n  },\n  locale: {\n    string: string\n  },\n  locales: {\n    __any__: {\n      any: any\n    },\n    __type__: {\n      object: object\n    }\n  },\n  height: {\n    string: string\n  },\n  width: {\n    string: string\n  },\n  __type__: {\n    object: object\n  }\n};\n/* eslint-enable @typescript-eslint/naming-convention */\n/**\r\n * This provides ranges, initial values, steps and dropdown menu choices for the\r\n * configuration.\r\n *\r\n * @remarks\r\n * Checkbox: `boolean`\r\n *   The value supllied will be used as the initial value.\r\n *\r\n * Text field: `string`\r\n *   The passed text will be used as the initial value. Any text will be\r\n *   accepted afterwards.\r\n *\r\n * Number range: `[number, number, number, number]`\r\n *   The meanings are `[initial value, min, max, step]`.\r\n *\r\n * Dropdown: `[Exclude<string, \"color\">, ...(string | number | boolean)[]]`\r\n *   Translations for people with poor understanding of TypeScript: the first\r\n *   value always has to be a string but never `\"color\"`, the rest can be any\r\n *   combination of strings, numbers and booleans.\r\n *\r\n * Color picker: `[\"color\", string]`\r\n *   The first value says this will be a color picker not a dropdown menu. The\r\n *   next value is the initial color.\r\n */\nvar configureOptions = {\n  nodes: {\n    borderWidth: [1, 0, 10, 1],\n    borderWidthSelected: [2, 0, 10, 1],\n    color: {\n      border: [\"color\", \"#2B7CE9\"],\n      background: [\"color\", \"#97C2FC\"],\n      highlight: {\n        border: [\"color\", \"#2B7CE9\"],\n        background: [\"color\", \"#D2E5FF\"]\n      },\n      hover: {\n        border: [\"color\", \"#2B7CE9\"],\n        background: [\"color\", \"#D2E5FF\"]\n      }\n    },\n    opacity: [0, 0, 1, 0.1],\n    fixed: {\n      x: false,\n      y: false\n    },\n    font: {\n      color: [\"color\", \"#343434\"],\n      size: [14, 0, 100, 1],\n      face: [\"arial\", \"verdana\", \"tahoma\"],\n      background: [\"color\", \"none\"],\n      strokeWidth: [0, 0, 50, 1],\n      strokeColor: [\"color\", \"#ffffff\"]\n    },\n    //group: 'string',\n    hidden: false,\n    labelHighlightBold: true,\n    //icon: {\n    //  face: 'string',  //'FontAwesome',\n    //  code: 'string',  //'\\uf007',\n    //  size: [50, 0, 200, 1],  //50,\n    //  color: ['color','#2B7CE9']   //'#aa00ff'\n    //},\n    //image: 'string', // --> URL\n    physics: true,\n    scaling: {\n      min: [10, 0, 200, 1],\n      max: [30, 0, 200, 1],\n      label: {\n        enabled: false,\n        min: [14, 0, 200, 1],\n        max: [30, 0, 200, 1],\n        maxVisible: [30, 0, 200, 1],\n        drawThreshold: [5, 0, 20, 1]\n      }\n    },\n    shadow: {\n      enabled: false,\n      color: \"rgba(0,0,0,0.5)\",\n      size: [10, 0, 20, 1],\n      x: [5, -30, 30, 1],\n      y: [5, -30, 30, 1]\n    },\n    shape: [\"ellipse\", \"box\", \"circle\", \"database\", \"diamond\", \"dot\", \"square\", \"star\", \"text\", \"triangle\", \"triangleDown\", \"hexagon\"],\n    shapeProperties: {\n      borderDashes: false,\n      borderRadius: [6, 0, 20, 1],\n      interpolation: true,\n      useImageSize: false\n    },\n    size: [25, 0, 200, 1]\n  },\n  edges: {\n    arrows: {\n      to: {\n        enabled: false,\n        scaleFactor: [1, 0, 3, 0.05],\n        type: \"arrow\"\n      },\n      middle: {\n        enabled: false,\n        scaleFactor: [1, 0, 3, 0.05],\n        type: \"arrow\"\n      },\n      from: {\n        enabled: false,\n        scaleFactor: [1, 0, 3, 0.05],\n        type: \"arrow\"\n      }\n    },\n    endPointOffset: {\n      from: [0, -10, 10, 1],\n      to: [0, -10, 10, 1]\n    },\n    arrowStrikethrough: true,\n    color: {\n      color: [\"color\", \"#848484\"],\n      highlight: [\"color\", \"#848484\"],\n      hover: [\"color\", \"#848484\"],\n      inherit: [\"from\", \"to\", \"both\", true, false],\n      opacity: [1, 0, 1, 0.05]\n    },\n    dashes: false,\n    font: {\n      color: [\"color\", \"#343434\"],\n      size: [14, 0, 100, 1],\n      face: [\"arial\", \"verdana\", \"tahoma\"],\n      background: [\"color\", \"none\"],\n      strokeWidth: [2, 0, 50, 1],\n      strokeColor: [\"color\", \"#ffffff\"],\n      align: [\"horizontal\", \"top\", \"middle\", \"bottom\"]\n    },\n    hidden: false,\n    hoverWidth: [1.5, 0, 5, 0.1],\n    labelHighlightBold: true,\n    physics: true,\n    scaling: {\n      min: [1, 0, 100, 1],\n      max: [15, 0, 100, 1],\n      label: {\n        enabled: true,\n        min: [14, 0, 200, 1],\n        max: [30, 0, 200, 1],\n        maxVisible: [30, 0, 200, 1],\n        drawThreshold: [5, 0, 20, 1]\n      }\n    },\n    selectionWidth: [1.5, 0, 5, 0.1],\n    selfReferenceSize: [20, 0, 200, 1],\n    selfReference: {\n      size: [20, 0, 200, 1],\n      angle: [Math.PI / 2, -6 * Math.PI, 6 * Math.PI, Math.PI / 8],\n      renderBehindTheNode: true\n    },\n    shadow: {\n      enabled: false,\n      color: \"rgba(0,0,0,0.5)\",\n      size: [10, 0, 20, 1],\n      x: [5, -30, 30, 1],\n      y: [5, -30, 30, 1]\n    },\n    smooth: {\n      enabled: true,\n      type: [\"dynamic\", \"continuous\", \"discrete\", \"diagonalCross\", \"straightCross\", \"horizontal\", \"vertical\", \"curvedCW\", \"curvedCCW\", \"cubicBezier\"],\n      forceDirection: [\"horizontal\", \"vertical\", \"none\"],\n      roundness: [0.5, 0, 1, 0.05]\n    },\n    width: [1, 0, 30, 1]\n  },\n  layout: {\n    //randomSeed: [0, 0, 500, 1],\n    //improvedLayout: true,\n    hierarchical: {\n      enabled: false,\n      levelSeparation: [150, 20, 500, 5],\n      nodeSpacing: [100, 20, 500, 5],\n      treeSpacing: [200, 20, 500, 5],\n      blockShifting: true,\n      edgeMinimization: true,\n      parentCentralization: true,\n      direction: [\"UD\", \"DU\", \"LR\", \"RL\"],\n      sortMethod: [\"hubsize\", \"directed\"],\n      shakeTowards: [\"leaves\", \"roots\"] // leaves, roots\n    }\n  },\n\n  interaction: {\n    dragNodes: true,\n    dragView: true,\n    hideEdgesOnDrag: false,\n    hideEdgesOnZoom: false,\n    hideNodesOnDrag: false,\n    hover: false,\n    keyboard: {\n      enabled: false,\n      speed: {\n        x: [10, 0, 40, 1],\n        y: [10, 0, 40, 1],\n        zoom: [0.02, 0, 0.1, 0.005]\n      },\n      bindToWindow: true,\n      autoFocus: true\n    },\n    multiselect: false,\n    navigationButtons: false,\n    selectable: true,\n    selectConnectedEdges: true,\n    hoverConnectedEdges: true,\n    tooltipDelay: [300, 0, 1000, 25],\n    zoomView: true,\n    zoomSpeed: [1, 0.1, 2, 0.1]\n  },\n  manipulation: {\n    enabled: false,\n    initiallyActive: false\n  },\n  physics: {\n    enabled: true,\n    barnesHut: {\n      theta: [0.5, 0.1, 1, 0.05],\n      gravitationalConstant: [-2000, -30000, 0, 50],\n      centralGravity: [0.3, 0, 10, 0.05],\n      springLength: [95, 0, 500, 5],\n      springConstant: [0.04, 0, 1.2, 0.005],\n      damping: [0.09, 0, 1, 0.01],\n      avoidOverlap: [0, 0, 1, 0.01]\n    },\n    forceAtlas2Based: {\n      theta: [0.5, 0.1, 1, 0.05],\n      gravitationalConstant: [-50, -500, 0, 1],\n      centralGravity: [0.01, 0, 1, 0.005],\n      springLength: [95, 0, 500, 5],\n      springConstant: [0.08, 0, 1.2, 0.005],\n      damping: [0.4, 0, 1, 0.01],\n      avoidOverlap: [0, 0, 1, 0.01]\n    },\n    repulsion: {\n      centralGravity: [0.2, 0, 10, 0.05],\n      springLength: [200, 0, 500, 5],\n      springConstant: [0.05, 0, 1.2, 0.005],\n      nodeDistance: [100, 0, 500, 5],\n      damping: [0.09, 0, 1, 0.01]\n    },\n    hierarchicalRepulsion: {\n      centralGravity: [0.2, 0, 10, 0.05],\n      springLength: [100, 0, 500, 5],\n      springConstant: [0.01, 0, 1.2, 0.005],\n      nodeDistance: [120, 0, 500, 5],\n      damping: [0.09, 0, 1, 0.01],\n      avoidOverlap: [0, 0, 1, 0.01]\n    },\n    maxVelocity: [50, 0, 150, 1],\n    minVelocity: [0.1, 0.01, 0.5, 0.01],\n    solver: [\"barnesHut\", \"forceAtlas2Based\", \"repulsion\", \"hierarchicalRepulsion\"],\n    timestep: [0.5, 0.01, 1, 0.01],\n    wind: {\n      x: [0, -10, 10, 0.1],\n      y: [0, -10, 10, 0.1]\n    }\n    //adaptiveTimestep: true\n  }\n};\n\nvar configuratorHideOption = function configuratorHideOption(parentPath, optionName, options) {\n  var _context;\n  if (_includesInstanceProperty(parentPath).call(parentPath, \"physics\") && _includesInstanceProperty(_context = configureOptions.physics.solver).call(_context, optionName) && options.physics.solver !== optionName && optionName !== \"wind\") {\n    return true;\n  }\n  return false;\n};\n\nvar options = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tallOptions: allOptions,\n\tconfiguratorHideOption: configuratorHideOption,\n\tconfigureOptions: configureOptions\n});\n\n/**\n *  The Floyd–Warshall algorithm is an algorithm for finding shortest paths in\n *  a weighted graph with positive or negative edge weights (but with no negative\n *  cycles). - https://en.wikipedia.org/wiki/Floyd–Warshall_algorithm\n */\nvar FloydWarshall = /*#__PURE__*/function () {\n  /**\n   * @ignore\n   */\n  function FloydWarshall() {\n    _classCallCheck(this, FloydWarshall);\n  }\n\n  /**\n   *\n   * @param {object} body\n   * @param {Array.<Node>} nodesArray\n   * @param {Array.<Edge>} edgesArray\n   * @returns {{}}\n   */\n  _createClass(FloydWarshall, [{\n    key: \"getDistances\",\n    value: function getDistances(body, nodesArray, edgesArray) {\n      var D_matrix = {};\n      var edges = body.edges;\n\n      // prepare matrix with large numbers\n      for (var i = 0; i < nodesArray.length; i++) {\n        var node = nodesArray[i];\n        var cell = {};\n        D_matrix[node] = cell;\n        for (var j = 0; j < nodesArray.length; j++) {\n          cell[nodesArray[j]] = i == j ? 0 : 1e9;\n        }\n      }\n\n      // put the weights for the edges in. This assumes unidirectionality.\n      for (var _i = 0; _i < edgesArray.length; _i++) {\n        var edge = edges[edgesArray[_i]];\n        // edge has to be connected if it counts to the distances. If it is connected to inner clusters it will crash so we also check if it is in the D_matrix\n        if (edge.connected === true && D_matrix[edge.fromId] !== undefined && D_matrix[edge.toId] !== undefined) {\n          D_matrix[edge.fromId][edge.toId] = 1;\n          D_matrix[edge.toId][edge.fromId] = 1;\n        }\n      }\n      var nodeCount = nodesArray.length;\n\n      // Adapted FloydWarshall based on unidirectionality to greatly reduce complexity.\n      for (var k = 0; k < nodeCount; k++) {\n        var knode = nodesArray[k];\n        var kcolm = D_matrix[knode];\n        for (var _i2 = 0; _i2 < nodeCount - 1; _i2++) {\n          var inode = nodesArray[_i2];\n          var icolm = D_matrix[inode];\n          for (var _j = _i2 + 1; _j < nodeCount; _j++) {\n            var jnode = nodesArray[_j];\n            var jcolm = D_matrix[jnode];\n            var val = Math.min(icolm[jnode], icolm[knode] + kcolm[jnode]);\n            icolm[jnode] = val;\n            jcolm[inode] = val;\n          }\n        }\n      }\n      return D_matrix;\n    }\n  }]);\n  return FloydWarshall;\n}();\n\n/**\n * KamadaKawai positions the nodes initially based on\n *\n * \"AN ALGORITHM FOR DRAWING GENERAL UNDIRECTED GRAPHS\"\n * -- Tomihisa KAMADA and Satoru KAWAI in 1989\n *\n * Possible optimizations in the distance calculation can be implemented.\n */\nvar KamadaKawai = /*#__PURE__*/function () {\n  /**\n   * @param {object} body\n   * @param {number} edgeLength\n   * @param {number} edgeStrength\n   */\n  function KamadaKawai(body, edgeLength, edgeStrength) {\n    _classCallCheck(this, KamadaKawai);\n    this.body = body;\n    this.springLength = edgeLength;\n    this.springConstant = edgeStrength;\n    this.distanceSolver = new FloydWarshall();\n  }\n\n  /**\n   * Not sure if needed but can be used to update the spring length and spring constant\n   *\n   * @param {object} options\n   */\n  _createClass(KamadaKawai, [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      if (options) {\n        if (options.springLength) {\n          this.springLength = options.springLength;\n        }\n        if (options.springConstant) {\n          this.springConstant = options.springConstant;\n        }\n      }\n    }\n\n    /**\n     * Position the system\n     *\n     * @param {Array.<Node>} nodesArray\n     * @param {Array.<vis.Edge>} edgesArray\n     * @param {boolean} [ignoreClusters=false]\n     */\n  }, {\n    key: \"solve\",\n    value: function solve(nodesArray, edgesArray) {\n      var ignoreClusters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      // get distance matrix\n      var D_matrix = this.distanceSolver.getDistances(this.body, nodesArray, edgesArray); // distance matrix\n\n      // get the L Matrix\n      this._createL_matrix(D_matrix);\n\n      // get the K Matrix\n      this._createK_matrix(D_matrix);\n\n      // initial E Matrix\n      this._createE_matrix();\n\n      // calculate positions\n      var threshold = 0.01;\n      var innerThreshold = 1;\n      var iterations = 0;\n      var maxIterations = Math.max(1000, Math.min(10 * this.body.nodeIndices.length, 6000));\n      var maxInnerIterations = 5;\n      var maxEnergy = 1e9;\n      var highE_nodeId = 0,\n        dE_dx = 0,\n        dE_dy = 0,\n        delta_m = 0,\n        subIterations = 0;\n      while (maxEnergy > threshold && iterations < maxIterations) {\n        iterations += 1;\n        var _this$_getHighestEner = this._getHighestEnergyNode(ignoreClusters);\n        var _this$_getHighestEner2 = _slicedToArray(_this$_getHighestEner, 4);\n        highE_nodeId = _this$_getHighestEner2[0];\n        maxEnergy = _this$_getHighestEner2[1];\n        dE_dx = _this$_getHighestEner2[2];\n        dE_dy = _this$_getHighestEner2[3];\n        delta_m = maxEnergy;\n        subIterations = 0;\n        while (delta_m > innerThreshold && subIterations < maxInnerIterations) {\n          subIterations += 1;\n          this._moveNode(highE_nodeId, dE_dx, dE_dy);\n          var _this$_getEnergy = this._getEnergy(highE_nodeId);\n          var _this$_getEnergy2 = _slicedToArray(_this$_getEnergy, 3);\n          delta_m = _this$_getEnergy2[0];\n          dE_dx = _this$_getEnergy2[1];\n          dE_dy = _this$_getEnergy2[2];\n        }\n      }\n    }\n\n    /**\n     * get the node with the highest energy\n     *\n     * @param {boolean} ignoreClusters\n     * @returns {number[]}\n     * @private\n     */\n  }, {\n    key: \"_getHighestEnergyNode\",\n    value: function _getHighestEnergyNode(ignoreClusters) {\n      var nodesArray = this.body.nodeIndices;\n      var nodes = this.body.nodes;\n      var maxEnergy = 0;\n      var maxEnergyNodeId = nodesArray[0];\n      var dE_dx_max = 0,\n        dE_dy_max = 0;\n      for (var nodeIdx = 0; nodeIdx < nodesArray.length; nodeIdx++) {\n        var m = nodesArray[nodeIdx];\n        // by not evaluating nodes with predefined positions we should only move nodes that have no positions.\n        if (nodes[m].predefinedPosition !== true || nodes[m].isCluster === true && ignoreClusters === true || nodes[m].options.fixed.x !== true || nodes[m].options.fixed.y !== true) {\n          var _this$_getEnergy3 = this._getEnergy(m),\n            _this$_getEnergy4 = _slicedToArray(_this$_getEnergy3, 3),\n            delta_m = _this$_getEnergy4[0],\n            dE_dx = _this$_getEnergy4[1],\n            dE_dy = _this$_getEnergy4[2];\n          if (maxEnergy < delta_m) {\n            maxEnergy = delta_m;\n            maxEnergyNodeId = m;\n            dE_dx_max = dE_dx;\n            dE_dy_max = dE_dy;\n          }\n        }\n      }\n      return [maxEnergyNodeId, maxEnergy, dE_dx_max, dE_dy_max];\n    }\n\n    /**\n     * calculate the energy of a single node\n     *\n     * @param {Node.id} m\n     * @returns {number[]}\n     * @private\n     */\n  }, {\n    key: \"_getEnergy\",\n    value: function _getEnergy(m) {\n      var _this$E_sums$m = _slicedToArray(this.E_sums[m], 2),\n        dE_dx = _this$E_sums$m[0],\n        dE_dy = _this$E_sums$m[1];\n      var delta_m = Math.sqrt(Math.pow(dE_dx, 2) + Math.pow(dE_dy, 2));\n      return [delta_m, dE_dx, dE_dy];\n    }\n\n    /**\n     * move the node based on it's energy\n     * the dx and dy are calculated from the linear system proposed by Kamada and Kawai\n     *\n     * @param {number} m\n     * @param {number} dE_dx\n     * @param {number} dE_dy\n     * @private\n     */\n  }, {\n    key: \"_moveNode\",\n    value: function _moveNode(m, dE_dx, dE_dy) {\n      var nodesArray = this.body.nodeIndices;\n      var nodes = this.body.nodes;\n      var d2E_dx2 = 0;\n      var d2E_dxdy = 0;\n      var d2E_dy2 = 0;\n      var x_m = nodes[m].x;\n      var y_m = nodes[m].y;\n      var km = this.K_matrix[m];\n      var lm = this.L_matrix[m];\n      for (var iIdx = 0; iIdx < nodesArray.length; iIdx++) {\n        var i = nodesArray[iIdx];\n        if (i !== m) {\n          var x_i = nodes[i].x;\n          var y_i = nodes[i].y;\n          var kmat = km[i];\n          var lmat = lm[i];\n          var denominator = 1.0 / Math.pow(Math.pow(x_m - x_i, 2) + Math.pow(y_m - y_i, 2), 1.5);\n          d2E_dx2 += kmat * (1 - lmat * Math.pow(y_m - y_i, 2) * denominator);\n          d2E_dxdy += kmat * (lmat * (x_m - x_i) * (y_m - y_i) * denominator);\n          d2E_dy2 += kmat * (1 - lmat * Math.pow(x_m - x_i, 2) * denominator);\n        }\n      }\n      // make the variable names easier to make the solving of the linear system easier to read\n      var A = d2E_dx2,\n        B = d2E_dxdy,\n        C = dE_dx,\n        D = d2E_dy2,\n        E = dE_dy;\n\n      // solve the linear system for dx and dy\n      var dy = (C / A + E / B) / (B / A - D / B);\n      var dx = -(B * dy + C) / A;\n\n      // move the node\n      nodes[m].x += dx;\n      nodes[m].y += dy;\n\n      // Recalculate E_matrix (should be incremental)\n      this._updateE_matrix(m);\n    }\n\n    /**\n     * Create the L matrix: edge length times shortest path\n     *\n     * @param {object} D_matrix\n     * @private\n     */\n  }, {\n    key: \"_createL_matrix\",\n    value: function _createL_matrix(D_matrix) {\n      var nodesArray = this.body.nodeIndices;\n      var edgeLength = this.springLength;\n      this.L_matrix = [];\n      for (var i = 0; i < nodesArray.length; i++) {\n        this.L_matrix[nodesArray[i]] = {};\n        for (var j = 0; j < nodesArray.length; j++) {\n          this.L_matrix[nodesArray[i]][nodesArray[j]] = edgeLength * D_matrix[nodesArray[i]][nodesArray[j]];\n        }\n      }\n    }\n\n    /**\n     * Create the K matrix: spring constants times shortest path\n     *\n     * @param {object} D_matrix\n     * @private\n     */\n  }, {\n    key: \"_createK_matrix\",\n    value: function _createK_matrix(D_matrix) {\n      var nodesArray = this.body.nodeIndices;\n      var edgeStrength = this.springConstant;\n      this.K_matrix = [];\n      for (var i = 0; i < nodesArray.length; i++) {\n        this.K_matrix[nodesArray[i]] = {};\n        for (var j = 0; j < nodesArray.length; j++) {\n          this.K_matrix[nodesArray[i]][nodesArray[j]] = edgeStrength * Math.pow(D_matrix[nodesArray[i]][nodesArray[j]], -2);\n        }\n      }\n    }\n\n    /**\n     *  Create matrix with all energies between nodes\n     *\n     *  @private\n     */\n  }, {\n    key: \"_createE_matrix\",\n    value: function _createE_matrix() {\n      var nodesArray = this.body.nodeIndices;\n      var nodes = this.body.nodes;\n      this.E_matrix = {};\n      this.E_sums = {};\n      for (var mIdx = 0; mIdx < nodesArray.length; mIdx++) {\n        this.E_matrix[nodesArray[mIdx]] = [];\n      }\n      for (var _mIdx = 0; _mIdx < nodesArray.length; _mIdx++) {\n        var m = nodesArray[_mIdx];\n        var x_m = nodes[m].x;\n        var y_m = nodes[m].y;\n        var dE_dx = 0;\n        var dE_dy = 0;\n        for (var iIdx = _mIdx; iIdx < nodesArray.length; iIdx++) {\n          var i = nodesArray[iIdx];\n          if (i !== m) {\n            var x_i = nodes[i].x;\n            var y_i = nodes[i].y;\n            var denominator = 1.0 / Math.sqrt(Math.pow(x_m - x_i, 2) + Math.pow(y_m - y_i, 2));\n            this.E_matrix[m][iIdx] = [this.K_matrix[m][i] * (x_m - x_i - this.L_matrix[m][i] * (x_m - x_i) * denominator), this.K_matrix[m][i] * (y_m - y_i - this.L_matrix[m][i] * (y_m - y_i) * denominator)];\n            this.E_matrix[i][_mIdx] = this.E_matrix[m][iIdx];\n            dE_dx += this.E_matrix[m][iIdx][0];\n            dE_dy += this.E_matrix[m][iIdx][1];\n          }\n        }\n        //Store sum\n        this.E_sums[m] = [dE_dx, dE_dy];\n      }\n    }\n\n    /**\n     * Update method, just doing single column (rows are auto-updated) (update all sums)\n     *\n     * @param {number} m\n     * @private\n     */\n  }, {\n    key: \"_updateE_matrix\",\n    value: function _updateE_matrix(m) {\n      var nodesArray = this.body.nodeIndices;\n      var nodes = this.body.nodes;\n      var colm = this.E_matrix[m];\n      var kcolm = this.K_matrix[m];\n      var lcolm = this.L_matrix[m];\n      var x_m = nodes[m].x;\n      var y_m = nodes[m].y;\n      var dE_dx = 0;\n      var dE_dy = 0;\n      for (var iIdx = 0; iIdx < nodesArray.length; iIdx++) {\n        var i = nodesArray[iIdx];\n        if (i !== m) {\n          //Keep old energy value for sum modification below\n          var cell = colm[iIdx];\n          var oldDx = cell[0];\n          var oldDy = cell[1];\n\n          //Calc new energy:\n          var x_i = nodes[i].x;\n          var y_i = nodes[i].y;\n          var denominator = 1.0 / Math.sqrt(Math.pow(x_m - x_i, 2) + Math.pow(y_m - y_i, 2));\n          var dx = kcolm[i] * (x_m - x_i - lcolm[i] * (x_m - x_i) * denominator);\n          var dy = kcolm[i] * (y_m - y_i - lcolm[i] * (y_m - y_i) * denominator);\n          colm[iIdx] = [dx, dy];\n          dE_dx += dx;\n          dE_dy += dy;\n\n          //add new energy to sum of each column\n          var sum = this.E_sums[i];\n          sum[0] += dx - oldDx;\n          sum[1] += dy - oldDy;\n        }\n      }\n      //Store sum at -1 index\n      this.E_sums[m] = [dE_dx, dE_dy];\n    }\n  }]);\n  return KamadaKawai;\n}();\n\n/**\n * Create a network visualization, displaying nodes and edges.\n *\n * @param {Element} container   The DOM element in which the Network will\n *                                  be created. Normally a div element.\n * @param {object} data         An object containing parameters\n *                              {Array} nodes\n *                              {Array} edges\n * @param {object} options      Options\n * @class Network\n */\nfunction Network(container, data, options) {\n  var _context,\n    _context2,\n    _context3,\n    _context4,\n    _this = this;\n  if (!(this instanceof Network)) {\n    throw new SyntaxError(\"Constructor must be called with the new operator\");\n  }\n\n  // set constant values\n  this.options = {};\n  this.defaultOptions = {\n    locale: \"en\",\n    locales: locales,\n    clickToUse: false\n  };\n  _Object$assign(this.options, this.defaultOptions);\n\n  /**\n   * Containers for nodes and edges.\n   *\n   * 'edges' and 'nodes' contain the full definitions of all the network elements.\n   * 'nodeIndices' and 'edgeIndices' contain the id's of the active elements.\n   *\n   * The distinction is important, because a defined node need not be active, i.e.\n   * visible on the canvas. This happens in particular when clusters are defined, in\n   * that case there will be nodes and edges not displayed.\n   * The bottom line is that all code with actions related to visibility, *must* use\n   * 'nodeIndices' and 'edgeIndices', not 'nodes' and 'edges' directly.\n   */\n  this.body = {\n    container: container,\n    // See comment above for following fields\n    nodes: {},\n    nodeIndices: [],\n    edges: {},\n    edgeIndices: [],\n    emitter: {\n      on: _bindInstanceProperty$1(_context = this.on).call(_context, this),\n      off: _bindInstanceProperty$1(_context2 = this.off).call(_context2, this),\n      emit: _bindInstanceProperty$1(_context3 = this.emit).call(_context3, this),\n      once: _bindInstanceProperty$1(_context4 = this.once).call(_context4, this)\n    },\n    eventListeners: {\n      onTap: function onTap() {},\n      onTouch: function onTouch() {},\n      onDoubleTap: function onDoubleTap() {},\n      onHold: function onHold() {},\n      onDragStart: function onDragStart() {},\n      onDrag: function onDrag() {},\n      onDragEnd: function onDragEnd() {},\n      onMouseWheel: function onMouseWheel() {},\n      onPinch: function onPinch() {},\n      onMouseMove: function onMouseMove() {},\n      onRelease: function onRelease() {},\n      onContext: function onContext() {}\n    },\n    data: {\n      nodes: null,\n      // A DataSet or DataView\n      edges: null // A DataSet or DataView\n    },\n\n    functions: {\n      createNode: function createNode() {},\n      createEdge: function createEdge() {},\n      getPointer: function getPointer() {}\n    },\n    modules: {},\n    view: {\n      scale: 1,\n      translation: {\n        x: 0,\n        y: 0\n      }\n    },\n    selectionBox: {\n      show: false,\n      position: {\n        start: {\n          x: 0,\n          y: 0\n        },\n        end: {\n          x: 0,\n          y: 0\n        }\n      }\n    }\n  };\n\n  // bind the event listeners\n  this.bindEventListeners();\n\n  // setting up all modules\n  this.images = new Images(function () {\n    return _this.body.emitter.emit(\"_requestRedraw\");\n  }); // object with images\n  this.groups = new Groups(); // object with groups\n  this.canvas = new Canvas(this.body); // DOM handler\n  this.selectionHandler = new SelectionHandler(this.body, this.canvas); // Selection handler\n  this.interactionHandler = new InteractionHandler(this.body, this.canvas, this.selectionHandler); // Interaction handler handles all the hammer bindings (that are bound by canvas), key\n  this.view = new View(this.body, this.canvas); // camera handler, does animations and zooms\n  this.renderer = new CanvasRenderer(this.body, this.canvas); // renderer, starts renderloop, has events that modules can hook into\n  this.physics = new PhysicsEngine(this.body); // physics engine, does all the simulations\n  this.layoutEngine = new LayoutEngine(this.body); // layout engine for inital layout and hierarchical layout\n  this.clustering = new ClusterEngine(this.body); // clustering api\n  this.manipulation = new ManipulationSystem(this.body, this.canvas, this.selectionHandler, this.interactionHandler); // data manipulation system\n\n  this.nodesHandler = new NodesHandler(this.body, this.images, this.groups, this.layoutEngine); // Handle adding, deleting and updating of nodes as well as global options\n  this.edgesHandler = new EdgesHandler(this.body, this.images, this.groups); // Handle adding, deleting and updating of edges as well as global options\n\n  this.body.modules[\"kamadaKawai\"] = new KamadaKawai(this.body, 150, 0.05); // Layouting algorithm.\n  this.body.modules[\"clustering\"] = this.clustering;\n\n  // create the DOM elements\n  this.canvas._create();\n\n  // apply options\n  this.setOptions(options);\n\n  // load data (the disable start variable will be the same as the enabled clustering)\n  this.setData(data);\n}\n\n// Extend Network with an Emitter mixin\nEmitter(Network.prototype);\n\n/**\n * Set options\n *\n * @param {object} options\n */\nNetwork.prototype.setOptions = function (options) {\n  var _this2 = this;\n  if (options === null) {\n    options = undefined; // This ensures that options handling doesn't crash in the handling\n  }\n\n  if (options !== undefined) {\n    var errorFound = Validator.validate(options, allOptions);\n    if (errorFound === true) {\n      console.error(\"%cErrors have been found in the supplied options object.\", VALIDATOR_PRINT_STYLE);\n    }\n\n    // copy the global fields over\n    var fields = [\"locale\", \"locales\", \"clickToUse\"];\n    selectiveDeepExtend(fields, this.options, options);\n\n    // normalize the locale or use English\n    if (options.locale !== undefined) {\n      options.locale = normalizeLanguageCode(options.locales || this.options.locales, options.locale);\n    }\n\n    // the hierarchical system can adapt the edges and the physics to it's own options because not all combinations work with the hierarichical system.\n    options = this.layoutEngine.setOptions(options.layout, options);\n    this.canvas.setOptions(options); // options for canvas are in globals\n\n    // pass the options to the modules\n    this.groups.setOptions(options.groups);\n    this.nodesHandler.setOptions(options.nodes);\n    this.edgesHandler.setOptions(options.edges);\n    this.physics.setOptions(options.physics);\n    this.manipulation.setOptions(options.manipulation, options, this.options); // manipulation uses the locales in the globals\n\n    this.interactionHandler.setOptions(options.interaction);\n    this.renderer.setOptions(options.interaction); // options for rendering are in interaction\n    this.selectionHandler.setOptions(options.interaction); // options for selection are in interaction\n\n    // reload the settings of the nodes to apply changes in groups that are not referenced by pointer.\n    if (options.groups !== undefined) {\n      this.body.emitter.emit(\"refreshNodes\");\n    }\n    // these two do not have options at the moment, here for completeness\n    //this.view.setOptions(options.view);\n    //this.clustering.setOptions(options.clustering);\n\n    if (\"configure\" in options) {\n      if (!this.configurator) {\n        this.configurator = new Configurator(this, this.body.container, configureOptions, this.canvas.pixelRatio, configuratorHideOption);\n      }\n      this.configurator.setOptions(options.configure);\n    }\n\n    // if the configuration system is enabled, copy all options and put them into the config system\n    if (this.configurator && this.configurator.options.enabled === true) {\n      var networkOptions = {\n        nodes: {},\n        edges: {},\n        layout: {},\n        interaction: {},\n        manipulation: {},\n        physics: {},\n        global: {}\n      };\n      deepExtend(networkOptions.nodes, this.nodesHandler.options);\n      deepExtend(networkOptions.edges, this.edgesHandler.options);\n      deepExtend(networkOptions.layout, this.layoutEngine.options);\n      // load the selectionHandler and render default options in to the interaction group\n      deepExtend(networkOptions.interaction, this.selectionHandler.options);\n      deepExtend(networkOptions.interaction, this.renderer.options);\n      deepExtend(networkOptions.interaction, this.interactionHandler.options);\n      deepExtend(networkOptions.manipulation, this.manipulation.options);\n      deepExtend(networkOptions.physics, this.physics.options);\n\n      // load globals into the global object\n      deepExtend(networkOptions.global, this.canvas.options);\n      deepExtend(networkOptions.global, this.options);\n      this.configurator.setModuleOptions(networkOptions);\n    }\n\n    // handle network global options\n    if (options.clickToUse !== undefined) {\n      if (options.clickToUse === true) {\n        if (this.activator === undefined) {\n          this.activator = new Activator(this.canvas.frame);\n          this.activator.on(\"change\", function () {\n            _this2.body.emitter.emit(\"activate\");\n          });\n        }\n      } else {\n        if (this.activator !== undefined) {\n          this.activator.destroy();\n          delete this.activator;\n        }\n        this.body.emitter.emit(\"activate\");\n      }\n    } else {\n      this.body.emitter.emit(\"activate\");\n    }\n    this.canvas.setSize();\n    // start the physics simulation. Can be safely called multiple times.\n    this.body.emitter.emit(\"startSimulation\");\n  }\n};\n\n/**\n * Update the visible nodes and edges list with the most recent node state.\n *\n * Visible nodes are stored in this.body.nodeIndices.\n * Visible edges are stored in this.body.edgeIndices.\n * A node or edges is visible if it is not hidden or clustered.\n *\n * @private\n */\nNetwork.prototype._updateVisibleIndices = function () {\n  var nodes = this.body.nodes;\n  var edges = this.body.edges;\n  this.body.nodeIndices = [];\n  this.body.edgeIndices = [];\n  for (var nodeId in nodes) {\n    if (Object.prototype.hasOwnProperty.call(nodes, nodeId)) {\n      if (!this.clustering._isClusteredNode(nodeId) && nodes[nodeId].options.hidden === false) {\n        this.body.nodeIndices.push(nodes[nodeId].id);\n      }\n    }\n  }\n  for (var edgeId in edges) {\n    if (Object.prototype.hasOwnProperty.call(edges, edgeId)) {\n      var edge = edges[edgeId];\n\n      // It can happen that this is executed *after* a node edge has been removed,\n      // but *before* the edge itself has been removed. Taking this into account.\n      var fromNode = nodes[edge.fromId];\n      var toNode = nodes[edge.toId];\n      var edgeNodesPresent = fromNode !== undefined && toNode !== undefined;\n      var isVisible = !this.clustering._isClusteredEdge(edgeId) && edge.options.hidden === false && edgeNodesPresent && fromNode.options.hidden === false &&\n      // Also hidden if any of its connecting nodes are hidden\n      toNode.options.hidden === false; // idem\n\n      if (isVisible) {\n        this.body.edgeIndices.push(edge.id);\n      }\n    }\n  }\n};\n\n/**\n * Bind all events\n */\nNetwork.prototype.bindEventListeners = function () {\n  var _this3 = this;\n  // This event will trigger a rebuilding of the cache everything.\n  // Used when nodes or edges have been added or removed.\n  this.body.emitter.on(\"_dataChanged\", function () {\n    _this3.edgesHandler._updateState();\n    _this3.body.emitter.emit(\"_dataUpdated\");\n  });\n\n  // this is called when options of EXISTING nodes or edges have changed.\n  this.body.emitter.on(\"_dataUpdated\", function () {\n    // Order important in following block\n    _this3.clustering._updateState();\n    _this3._updateVisibleIndices();\n    _this3._updateValueRange(_this3.body.nodes);\n    _this3._updateValueRange(_this3.body.edges);\n    // start simulation (can be called safely, even if already running)\n    _this3.body.emitter.emit(\"startSimulation\");\n    _this3.body.emitter.emit(\"_requestRedraw\");\n  });\n};\n\n/**\n * Set nodes and edges, and optionally options as well.\n *\n * @param {object} data              Object containing parameters:\n *                                   {Array | DataSet | DataView} [nodes] Array with nodes\n *                                   {Array | DataSet | DataView} [edges] Array with edges\n *                                   {String} [dot] String containing data in DOT format\n *                                   {String} [gephi] String containing data in gephi JSON format\n *                                   {Options} [options] Object with options\n */\nNetwork.prototype.setData = function (data) {\n  // reset the physics engine.\n  this.body.emitter.emit(\"resetPhysics\");\n  this.body.emitter.emit(\"_resetData\");\n\n  // unselect all to ensure no selections from old data are carried over.\n  this.selectionHandler.unselectAll();\n  if (data && data.dot && (data.nodes || data.edges)) {\n    throw new SyntaxError('Data must contain either parameter \"dot\" or ' + ' parameter pair \"nodes\" and \"edges\", but not both.');\n  }\n\n  // set options\n  this.setOptions(data && data.options);\n  // set all data\n  if (data && data.dot) {\n    console.warn(\"The dot property has been deprecated. Please use the static convertDot method to convert DOT into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertDot(dotString);\");\n    // parse DOT file\n    var dotData = DOTToGraph(data.dot);\n    this.setData(dotData);\n    return;\n  } else if (data && data.gephi) {\n    // parse DOT file\n    console.warn(\"The gephi property has been deprecated. Please use the static convertGephi method to convert gephi into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertGephi(gephiJson);\");\n    var gephiData = parseGephi(data.gephi);\n    this.setData(gephiData);\n    return;\n  } else {\n    this.nodesHandler.setData(data && data.nodes, true);\n    this.edgesHandler.setData(data && data.edges, true);\n  }\n\n  // emit change in data\n  this.body.emitter.emit(\"_dataChanged\");\n\n  // emit data loaded\n  this.body.emitter.emit(\"_dataLoaded\");\n\n  // find a stable position or start animating to a stable position\n  this.body.emitter.emit(\"initPhysics\");\n};\n\n/**\n * Cleans up all bindings of the network, removing it fully from the memory IF the variable is set to null after calling this function.\n * var network = new vis.Network(..);\n * network.destroy();\n * network = null;\n */\nNetwork.prototype.destroy = function () {\n  this.body.emitter.emit(\"destroy\");\n  // clear events\n  this.body.emitter.off();\n  this.off();\n\n  // delete modules\n  delete this.groups;\n  delete this.canvas;\n  delete this.selectionHandler;\n  delete this.interactionHandler;\n  delete this.view;\n  delete this.renderer;\n  delete this.physics;\n  delete this.layoutEngine;\n  delete this.clustering;\n  delete this.manipulation;\n  delete this.nodesHandler;\n  delete this.edgesHandler;\n  delete this.configurator;\n  delete this.images;\n  for (var nodeId in this.body.nodes) {\n    if (!Object.prototype.hasOwnProperty.call(this.body.nodes, nodeId)) continue;\n    delete this.body.nodes[nodeId];\n  }\n  for (var edgeId in this.body.edges) {\n    if (!Object.prototype.hasOwnProperty.call(this.body.edges, edgeId)) continue;\n    delete this.body.edges[edgeId];\n  }\n\n  // remove the container and everything inside it recursively\n  recursiveDOMDelete(this.body.container);\n};\n\n/**\n * Update the values of all object in the given array according to the current\n * value range of the objects in the array.\n *\n * @param {object} obj    An object containing a set of Edges or Nodes\n *                        The objects must have a method getValue() and\n *                        setValueRange(min, max).\n * @private\n */\nNetwork.prototype._updateValueRange = function (obj) {\n  var id;\n\n  // determine the range of the objects\n  var valueMin = undefined;\n  var valueMax = undefined;\n  var valueTotal = 0;\n  for (id in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, id)) {\n      var value = obj[id].getValue();\n      if (value !== undefined) {\n        valueMin = valueMin === undefined ? value : Math.min(value, valueMin);\n        valueMax = valueMax === undefined ? value : Math.max(value, valueMax);\n        valueTotal += value;\n      }\n    }\n  }\n\n  // adjust the range of all objects\n  if (valueMin !== undefined && valueMax !== undefined) {\n    for (id in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, id)) {\n        obj[id].setValueRange(valueMin, valueMax, valueTotal);\n      }\n    }\n  }\n};\n\n/**\n * Returns true when the Network is active.\n *\n * @returns {boolean}\n */\nNetwork.prototype.isActive = function () {\n  return !this.activator || this.activator.active;\n};\nNetwork.prototype.setSize = function () {\n  return this.canvas.setSize.apply(this.canvas, arguments);\n};\nNetwork.prototype.canvasToDOM = function () {\n  return this.canvas.canvasToDOM.apply(this.canvas, arguments);\n};\nNetwork.prototype.DOMtoCanvas = function () {\n  return this.canvas.DOMtoCanvas.apply(this.canvas, arguments);\n};\n\n/**\n * Nodes can be in clusters. Clusters can also be in clusters. This function returns and array of\n * nodeIds showing where the node is.\n *\n * If any nodeId in the chain, especially the first passed in as a parameter, is not present in\n * the current nodes list, an empty array is returned.\n *\n * Example:\n * cluster 'A' contains cluster 'B',\n * cluster 'B' contains cluster 'C',\n * cluster 'C' contains node 'fred'.\n * `jsnetwork.clustering.findNode('fred')` will return `['A','B','C','fred']`.\n *\n * @param {string|number} nodeId\n * @returns {Array}\n */\nNetwork.prototype.findNode = function () {\n  return this.clustering.findNode.apply(this.clustering, arguments);\n};\nNetwork.prototype.isCluster = function () {\n  return this.clustering.isCluster.apply(this.clustering, arguments);\n};\nNetwork.prototype.openCluster = function () {\n  return this.clustering.openCluster.apply(this.clustering, arguments);\n};\nNetwork.prototype.cluster = function () {\n  return this.clustering.cluster.apply(this.clustering, arguments);\n};\nNetwork.prototype.getNodesInCluster = function () {\n  return this.clustering.getNodesInCluster.apply(this.clustering, arguments);\n};\nNetwork.prototype.clusterByConnection = function () {\n  return this.clustering.clusterByConnection.apply(this.clustering, arguments);\n};\nNetwork.prototype.clusterByHubsize = function () {\n  return this.clustering.clusterByHubsize.apply(this.clustering, arguments);\n};\nNetwork.prototype.updateClusteredNode = function () {\n  return this.clustering.updateClusteredNode.apply(this.clustering, arguments);\n};\nNetwork.prototype.getClusteredEdges = function () {\n  return this.clustering.getClusteredEdges.apply(this.clustering, arguments);\n};\nNetwork.prototype.getBaseEdge = function () {\n  return this.clustering.getBaseEdge.apply(this.clustering, arguments);\n};\nNetwork.prototype.getBaseEdges = function () {\n  return this.clustering.getBaseEdges.apply(this.clustering, arguments);\n};\nNetwork.prototype.updateEdge = function () {\n  return this.clustering.updateEdge.apply(this.clustering, arguments);\n};\n\n/**\n * This method will cluster all nodes with 1 edge with their respective connected node.\n * The options object is explained in full <a data-scroll=\"\" data-options=\"{ &quot;easing&quot;: &quot;easeInCubic&quot; }\" href=\"#optionsObject\">below</a>.\n *\n * @param {object} [options]\n * @returns {undefined}\n */\nNetwork.prototype.clusterOutliers = function () {\n  return this.clustering.clusterOutliers.apply(this.clustering, arguments);\n};\nNetwork.prototype.getSeed = function () {\n  return this.layoutEngine.getSeed.apply(this.layoutEngine, arguments);\n};\nNetwork.prototype.enableEditMode = function () {\n  return this.manipulation.enableEditMode.apply(this.manipulation, arguments);\n};\nNetwork.prototype.disableEditMode = function () {\n  return this.manipulation.disableEditMode.apply(this.manipulation, arguments);\n};\nNetwork.prototype.addNodeMode = function () {\n  return this.manipulation.addNodeMode.apply(this.manipulation, arguments);\n};\nNetwork.prototype.editNode = function () {\n  return this.manipulation.editNode.apply(this.manipulation, arguments);\n};\nNetwork.prototype.editNodeMode = function () {\n  console.warn(\"Deprecated: Please use editNode instead of editNodeMode.\");\n  return this.manipulation.editNode.apply(this.manipulation, arguments);\n};\nNetwork.prototype.addEdgeMode = function () {\n  return this.manipulation.addEdgeMode.apply(this.manipulation, arguments);\n};\nNetwork.prototype.editEdgeMode = function () {\n  return this.manipulation.editEdgeMode.apply(this.manipulation, arguments);\n};\nNetwork.prototype.deleteSelected = function () {\n  return this.manipulation.deleteSelected.apply(this.manipulation, arguments);\n};\nNetwork.prototype.getPositions = function () {\n  return this.nodesHandler.getPositions.apply(this.nodesHandler, arguments);\n};\nNetwork.prototype.getPosition = function () {\n  return this.nodesHandler.getPosition.apply(this.nodesHandler, arguments);\n};\nNetwork.prototype.storePositions = function () {\n  return this.nodesHandler.storePositions.apply(this.nodesHandler, arguments);\n};\nNetwork.prototype.moveNode = function () {\n  return this.nodesHandler.moveNode.apply(this.nodesHandler, arguments);\n};\nNetwork.prototype.getBoundingBox = function () {\n  return this.nodesHandler.getBoundingBox.apply(this.nodesHandler, arguments);\n};\nNetwork.prototype.getConnectedNodes = function (objectId) {\n  if (this.body.nodes[objectId] !== undefined) {\n    return this.nodesHandler.getConnectedNodes.apply(this.nodesHandler, arguments);\n  } else {\n    return this.edgesHandler.getConnectedNodes.apply(this.edgesHandler, arguments);\n  }\n};\nNetwork.prototype.getConnectedEdges = function () {\n  return this.nodesHandler.getConnectedEdges.apply(this.nodesHandler, arguments);\n};\nNetwork.prototype.startSimulation = function () {\n  return this.physics.startSimulation.apply(this.physics, arguments);\n};\nNetwork.prototype.stopSimulation = function () {\n  return this.physics.stopSimulation.apply(this.physics, arguments);\n};\nNetwork.prototype.stabilize = function () {\n  return this.physics.stabilize.apply(this.physics, arguments);\n};\nNetwork.prototype.getSelection = function () {\n  return this.selectionHandler.getSelection.apply(this.selectionHandler, arguments);\n};\nNetwork.prototype.setSelection = function () {\n  return this.selectionHandler.setSelection.apply(this.selectionHandler, arguments);\n};\nNetwork.prototype.getSelectedNodes = function () {\n  return this.selectionHandler.getSelectedNodeIds.apply(this.selectionHandler, arguments);\n};\nNetwork.prototype.getSelectedEdges = function () {\n  return this.selectionHandler.getSelectedEdgeIds.apply(this.selectionHandler, arguments);\n};\nNetwork.prototype.getNodeAt = function () {\n  var node = this.selectionHandler.getNodeAt.apply(this.selectionHandler, arguments);\n  if (node !== undefined && node.id !== undefined) {\n    return node.id;\n  }\n  return node;\n};\nNetwork.prototype.getEdgeAt = function () {\n  var edge = this.selectionHandler.getEdgeAt.apply(this.selectionHandler, arguments);\n  if (edge !== undefined && edge.id !== undefined) {\n    return edge.id;\n  }\n  return edge;\n};\nNetwork.prototype.selectNodes = function () {\n  return this.selectionHandler.selectNodes.apply(this.selectionHandler, arguments);\n};\nNetwork.prototype.selectEdges = function () {\n  return this.selectionHandler.selectEdges.apply(this.selectionHandler, arguments);\n};\nNetwork.prototype.unselectAll = function () {\n  this.selectionHandler.unselectAll.apply(this.selectionHandler, arguments);\n  this.selectionHandler.commitWithoutEmitting.apply(this.selectionHandler);\n  this.redraw();\n};\nNetwork.prototype.redraw = function () {\n  return this.renderer.redraw.apply(this.renderer, arguments);\n};\nNetwork.prototype.getScale = function () {\n  return this.view.getScale.apply(this.view, arguments);\n};\nNetwork.prototype.getViewPosition = function () {\n  return this.view.getViewPosition.apply(this.view, arguments);\n};\nNetwork.prototype.fit = function () {\n  return this.view.fit.apply(this.view, arguments);\n};\nNetwork.prototype.moveTo = function () {\n  return this.view.moveTo.apply(this.view, arguments);\n};\nNetwork.prototype.focus = function () {\n  return this.view.focus.apply(this.view, arguments);\n};\nNetwork.prototype.releaseNode = function () {\n  return this.view.releaseNode.apply(this.view, arguments);\n};\nNetwork.prototype.getOptionsFromConfigurator = function () {\n  var options = {};\n  if (this.configurator) {\n    options = this.configurator.getOptions.apply(this.configurator);\n  }\n  return options;\n};\n\nvar parseDOTNetwork = DOTToGraph;\n// DataSet, utils etc. can't be reexported here because that would cause stack\n// overflow in UMD builds. They all export vis namespace therefore reexporting\n// leads to loading vis to load vis to load vis…\n\n\n//# sourceMappingURL=vis-network.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/vis-network/peer/esm/vis-network.js\n");

/***/ })

};
;